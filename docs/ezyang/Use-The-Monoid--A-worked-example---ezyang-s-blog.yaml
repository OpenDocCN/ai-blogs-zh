- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-07-01 18:18:18'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-07-01 18:18:18
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Use The Monoid: A worked example : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Monoid：一个实例：ezyang 的博客
- en: 来源：[http://blog.ezyang.com/2010/05/use-the-monoid/](http://blog.ezyang.com/2010/05/use-the-monoid/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/05/use-the-monoid/](http://blog.ezyang.com/2010/05/use-the-monoid/)
- en: '*Attention conservation notice.* Equivalent Haskell and Python programs are
    presented for retrieving values from a data structure using state. We then refactor
    the Haskell program into one that has no state, just a monoid.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意保存*。等效的 Haskell 和 Python 程序用于使用状态从数据结构中检索值。然后，我们将 Haskell 程序重构为没有状态，只有一个
    monoid 的程序。'
- en: 'A pretty frequent thing a working programmer needs to do is extract some values
    (frequently more than one) from some data structure, possibly while keeping track
    of extra metadata. I found myself writing this code the other day:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一个工作程序员经常需要做的事情是从一些数据结构中提取一些值（可能是多个），可能同时跟踪额外的元数据。有一天我发现自己写下了这段代码：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Briefly, `getPublicNames` traverses the `Module` data structure looking for
    "public names", and every time it finds a name, it inserts it records that the
    current module contained that name. This lets me efficiently ask the question,
    "How many (and which) modules use FOO name?"
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，`getPublicNames`遍历`Module`数据结构，查找“公共名称”，每次找到一个名称时，它记录当前模块包含该名称的记录。这使我能够高效地提出问题：“多少（以及哪些）模块使用
    FOO 名称？”
- en: 'A transcription in Python might look like:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中的转录可能如下所示：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'There a number of cosmetic differences between these two versions:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个版本之间有一些视觉上的差异：
- en: The Python version takes in pre-existing state optionally; otherwise it does
    the initialization and is referentially transparent. The Haskell version has no
    such notion of default state; we trust that the user can run the state monad with
    a simple `runState`.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python 版本可以选择接受预先存在的状态；否则，它将进行初始化并具有引用透明性。然而，Haskell 版本没有默认状态的概念；我们相信用户可以用简单的`runState`运行状态单子。
- en: The Python version takes advantage of duck-typing to reduce code; I've also
    played fast and loose with the hypothetical object-oriented equivalent data structure.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python 版本利用鸭子类型来减少代码；我还与假设的面向对象等价数据结构玩得很快。
- en: The Python version doesn't have it's code separated into `handleExport` and
    `handleCname`, although we certainly could have with a few more inline functions.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python 版本并没有将其代码分离成`handleExport`和`handleCname`，尽管我们确实可以通过几个更多的内联函数来实现。
- en: But other than that, they pretty much read and operate *precisely* the same
    way, by mutating state. The Python version is also pretty much the end of the
    road; besides pushing the functions into their member objects, I believe there
    is no *more* "Pythonic" way to do it. The Haskell version is making me itchy though...
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 但除此之外，它们几乎完全以*完全*相同的方式读取和操作，通过改变状态。Python 版本也几乎是尽头；除了将函数推入其成员对象之外，我相信没有更多*“Pythonic”*的方法来做到这一点。然而，Haskell
    版本让我觉得痒痒的…
- en: '*We''re never reading out state!* This is a tell-tale sign that we should be
    using a Writer monad, not a State monad. There is a slight technical difficulty,
    though: Writer requires that the value being "logged" is a Monoid, and while,
    in theory, `Map k (Set a)` certainly has a a Monoid instance that does what we
    mean, the general Monoid instance for `Map k v` doesn''t cut it. Recall that a
    monoid describes data that I can "append" together to form another version of
    that data. For a `SetMap`,'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们从来没有读出状态！* 这是我们应该使用 Writer 单子而不是 State 单子的明显迹象。然而，有一个轻微的技术困难：Writer 要求被“记录”的值是一个
    Monoid，而理论上，`Map k (Set a)` 确实有一个做我们想要的事情的 Monoid 实例，但是对于 `Map k v` 的一般 Monoid
    实例则不够。回想一下，一个 monoid 描述了可以“附加”在一起形成该数据的另一个版本的数据。对于 `SetMap`，'
- en: '*We want* a monoid instance that takes two `SetMap` structures and and unions
    the map, resolving duplicate by unioning those sets.'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*我们想要*一个 monoid 实例，它接受两个 `SetMap` 结构并将映射并集，通过并集那些集合来解决重复。'
- en: '*By default, we get* a monoid instance that takes two `Map` structures and
    unions the map, preferring the original value when a conflict occurs and discarding
    the rest.'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*默认情况下*，我们得到一个 monoid 实例，它接受两个 `Map` 结构并将映射并集，在冲突发生时更喜欢原始值并丢弃其余的值。'
- en: '*Newtype to the rescue.* A `newtype` is in order. We''ll call it `SetMap`.
    The recipe to follow for cooking up the newtype is as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*新类型来拯救*。`newtype` 来了。我们将其称为`SetMap`。用于烹饪新类型的配方如下：'
- en: 'First, you need a newtype declaration. Explicitly naming the field in record
    syntax as `unDataType` is idiomatic, and invokes "unwrapping" the newtype wrapper
    from the object:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要一个新类型声明。在记录语法中显式命名字段为`unDataType`是惯用法，并调用"解包"对象的新类型包装：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Next, you write the special type class instances you are interested in. (And
    possibly use `deriving ...` to [pull in any old, default instances](http://hackage.haskell.org/trac/haskell-prime/wiki/NewtypeDeriving)
    that are still good).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要编写你感兴趣的特殊类型类实例。（并可能使用`deriving ...`来[导入任何旧的、默认的实例](http://hackage.haskell.org/trac/haskell-prime/wiki/NewtypeDeriving)，这些实例仍然很好。）
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Perhaps some helper functions are in order:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 或许需要一些辅助函数：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: And voila!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然后就完成了！
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Wait, we made our code more specific, and somehow it got longer! Perhaps, gentle
    reader, you might be slightly reassured by the fact that the new `SetMap` support
    code, which forms the bulk of what we wrote, is highly general and reusable, and,
    excluding that code, we've slightly reduced the code from `add n = modify (Map.insertWith
    Set.union n (Set.singleton m))` to `add n = tell (setMapSingleton n m)`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 等等，我们使我们的代码更加具体，但它的长度却增加了！也许，亲爱的读者，你可能会因为新的`SetMap`支持代码的存在（它构成了我们所写内容的主要部分，并且高度通用和可重用），而稍微感到安心；不过，除了该代码，我们稍微减少了从`add
    n = modify (Map.insertWith Set.union n (Set.singleton m))`到`add n = tell (setMapSingleton
    n m)`的代码量。
- en: 'Perhaps more importantly, we''ve now indicated to an enduser a new contract
    for this function: we will only ever write values out, and not change them.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 更重要的是，我们现在向最终用户表明了这个函数的新契约：我们只会写出值，而不会改变它们。
- en: '*Why were we using the monad again?* Closer inspection further reveals that
    we''re never using bind (`>>=`). In fact, we''re not really using any of the power
    of a monad. Let''s make our code even more specific:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们为什么再次使用了monad呢？* 进一步检查显示，我们从未使用过绑定(`>>=`)。事实上，我们并没有真正使用monad的任何功能。让我们使我们的代码更加具体：'
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: There's not much of a space change, but users of this function now no longer
    need to `execWriter`; they can use the output right off the back (although they
    might need to unpack it eventually with `unSetMap`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的使用者现在不再需要`execWriter`，虽然他们可能最终需要用`unSetMap`来解包输出，但这里并没有太多的空间变化。
- en: '*Technically, we never needed the monoid.* In particular, `setMapSingleton`
    is forcing our code to cater to `SetMap`, and not Monoids in general (that wouldn''t
    really make any sense, either. Perhaps the notion of a "Pointed" Monoid would
    be useful). So we could have just written out all of our functions explicitly;
    more likely, we could have defined another set of helper functions to keep code
    size down. *But you should still use the monoid.* Monoids act certain ways (e.g.
    the monoid laws) and have a canonical set of functions that operate on them. By
    using those functions, you allow other people who have worked with monoids to
    quickly reason about your code, even if they''re not familiar with your specific
    monoid.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*技术上，我们从未需要monoid.* 特别是，`setMapSingleton`强迫我们的代码迎合`SetMap`，而不是一般的Monoids（这也不太合理）。也许"Pointed"
    Monoid的概念会有用。所以我们本可以直接写出所有函数；更有可能的是，我们可以定义另一组辅助函数以减少代码大小。*但你仍然应该使用monoid.* Monoids有一些特定的行为方式（例如，monoid法则）和一组规范的操作函数。通过使用这些函数，即使他们不熟悉你的特定monoid，其他人也可以快速推理你的代码。'
- en: '*Postscript.* I refactored real code while writing this blog post; none of
    the examples were contrived. I was originally planning on writing about "You ain''t
    gonna need it" and Haskell abstractions, but fleshing out this example ended up
    being a bit longer than I expected. Maybe next time...'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*后记.* 在写这篇博客文章时，我重构了真实的代码；所有的例子都不是虚构的。我最初计划写一些关于"You ain''t gonna need it"和Haskell抽象的内容，但是完善这个例子的过程比我预期的要长一些。也许下次吧...'
- en: '*Post-postscript.* Anders Kaseorg writes in to mention that SetMap has been
    implemented in several places (Criterion.MultiMap, Holumbus.Data.MultiMap), but
    it hasn''t been put in a particularly general library.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*后脚注.* Anders Kaseorg指出，SetMap已在几个地方（Criterion.MultiMap, Holumbus.Data.MultiMap）实现了，但尚未放入一个特别通用的库中。'
