- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-07-01 18:17:42'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-07-01 18:17:42
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Synthetic Git merges : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 合成Git合并：ezyang的博客
- en: 来源：[http://blog.ezyang.com/2011/07/synthetic-git-merges/](http://blog.ezyang.com/2011/07/synthetic-git-merges/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2011/07/synthetic-git-merges/](http://blog.ezyang.com/2011/07/synthetic-git-merges/)
- en: 'In theory, Git supports custom, low-level merge drivers with the `merge` configuration
    properties. In practice, no one actually wants to write their own merge driver
    from scratch. Well, for many cases where a custom merge driver would come in handy,
    you don’t have to write your merge driver from scratch! Consider these cases:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，Git支持使用`merge`配置属性自定义低级别合并驱动程序。实际上，没有人真的想从头开始编写自己的合并驱动程序。对于许多情况下需要自定义合并驱动程序的案例，你不必从头开始编写自己的合并驱动程序！考虑这些情况：
- en: You want to merge files which have differing newline styles,
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你想要合并具有不同换行符样式的文件，
- en: You want to merge files where one had lots of trailing whitespace removed,
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你想要合并一个删除了大量尾随空白的文件，
- en: You want to merge files one branch has replaced certain strings with custom
    strings (for example, a configuration file which instantiated `PASSWORD`, or a
    file that needs to be anonymized if there is a merge conflict),
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个分支替换了某些字符串为自定义字符串时，你想要合并文件（例如，一个配置文件实例化了`PASSWORD`，或者需要在合并冲突时匿名化文件），
- en: You want to merge a binary file that has a stable textual format, or
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你想要合并一个具有稳定文本格式的二进制文件，或
- en: You want to merge with knowledge about specific types of conflicts and how to
    resolve them (a super-smart `rerere`).
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你想要掌握关于特定类型冲突的知识以及如何解决它们（一个超智能的`rerere`）。
- en: 'For all of these cases, you can instead perform a *synthetic Git merge* by
    modifying the input files (constructing synthetic merge inputs), calling Git’s
    `git merge-file` to do the actual merge, and then possibly editing the result,
    before handing it back off to the original invoker of your merge driver. It’s
    really simple. Here’s an example driver that handles files with differing newline
    styles by canonicalizing them to UNIX:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有这些情况，你可以通过修改输入文件（构建合成合并输入），调用Git的`git merge-file`来执行实际合并，然后可能编辑结果，再将其交还给你的合并驱动程序的原始调用者。这真的很简单。这里有一个处理具有不同换行符样式文件的示例驱动程序，将它们规范化为UNIX的方式：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can then set it up by frobbing your `.git/config`:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过调整你的`.git/config`来设置它：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And your `.git/info/attributes`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以及你的`.git/info/attributes`：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In [Wizard](http://scripts.mit.edu/wizard/), we implemented (more clever) newline
    canonicalization, configuration value de-substitution (this reduces the diff between
    upstream and downstream, reducing the amount of conflicts due to proximity), and
    custom `rerere` behavior. I’ve also seen a coworker of mine use this technique
    manually to handle merge conflicts involving trailing whitespace (in Mercurial,
    no less!)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在[Wizard](http://scripts.mit.edu/wizard/)中，我们实现了更聪明的换行符规范化、配置值去替换（这减少了上游和下游之间的差异，减少了由于接近性而导致的冲突量），以及自定义的`rerere`行为。我也看到我的一位同事在处理包含尾随空白字符的合并冲突时手动使用了这种技术（在Mercurial中，更不用说了！）
- en: 'Actually, we took this concept further: rather than only create synthetic files,
    we create entirely synthetic trees, and then call `git merge` on them proper.
    This has several benefits:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们进一步发展了这个概念：不仅仅创建合成文件，我们创建了完全合成的树，然后适当地调用`git merge`。这有几个好处：
- en: We can now pick an arbitrary ancestor commit to perform the merge from (this,
    surprisingly enough, really comes in handy for our use-case),
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在我们可以选择一个任意的祖先提交来执行合并（令人惊讶的是，这对我们的用例非常有用），
- en: Git has an easier time detecting when files moved and changed newline style,
    etc, and
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git更容易检测到文件移动和更改换行符样式等，
- en: It’s a bit easier to use, since you just call a custom command rather than have
    to remember how to setup your Git config and attributes properly (and keep them
    up to date!)
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用起来更容易一些，因为你只需调用一个自定义命令，而不必记住如何正确设置你的Git配置和属性（并保持它们的最新状态！）
- en: Merges are just metadata—multiple parents commits. Git doesn’t care how you
    get the contents of your merge commit. Happy merging!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 合并只是元数据——多个父提交。Git不在乎你如何获取合并提交的内容。祝合并愉快！
