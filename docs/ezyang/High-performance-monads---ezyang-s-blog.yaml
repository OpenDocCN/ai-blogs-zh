- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-07-01 18:18:08'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-07-01 18:18:08
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'High performance monads : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高性能单子：ezyang的博客
- en: 来源：[http://blog.ezyang.com/2010/09/high-performance-monads/](http://blog.ezyang.com/2010/09/high-performance-monads/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/09/high-performance-monads/](http://blog.ezyang.com/2010/09/high-performance-monads/)
- en: 'Continuations are well known for being notoriously tricky to use: they are
    the “gotos” of the functional programming world. They can make a mess or do amazing
    things (after all, what are exceptions but a well structured nonlocal goto). This
    post is intended for readers with a passing familiarity with continuations but
    a disbelief that they could be useful for their day-to-day programming tasks:
    I’d like to show how continuations let us define high performance monads ala the
    [Logic monad](http://hackage.haskell.org/package/logict) in a fairly methodical
    way. A (possibly) related post is [The Mother of all Monads](http://blog.sigfpe.com/2008/12/mother-of-all-monads.html).'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 延续以其难以使用而闻名：它们是函数式编程世界中的“goto”。它们可以搞砸或者做出惊人的事情（毕竟，异常不过是一个结构良好的非本地goto）。本文适合那些对延续有一定了解但怀疑它们能否用于日常编程任务的读者：我想展示延续如何让我们以一种相当系统的方式定义高性能单子，如[逻辑单子](http://hackage.haskell.org/package/logict)。一个（可能）相关的帖子是[所有单子之母](http://blog.sigfpe.com/2008/12/mother-of-all-monads.html)。
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '* * *'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'We’ll start off with a warmup: the identity monad.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从一个热身开始：身份单子。
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The continuation-passing style (CPS) version of this monad is your stock `Cont`
    monad, but without `callCC` defined.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单子的延续传递风格（CPS）版本是您的标准`Cont`单子，但没有定义`callCC`。
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: While explaining CPS is out of the scope of this post, I’d like to point out
    a few idioms in this translation that we’ll be reusing for some of the more advanced
    monads.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然解释CPS不在本文的范围内，但我想指出这个翻译中的一些习语，我们将在一些更高级的单子中重复使用它们。
- en: In order to “extract” the value of `c`, we pass it a lambda `(\a -> ...)`, where
    `a` is the result of the `c` computation.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了“提取”`c`的值，我们传递了一个lambda `(\a -> ...)`，其中`a`是`c`计算的结果。
- en: 'There is only one success continuation `k :: a -> r`, which is always eventually
    used. In the case of bind, it’s passed to `runIdCPS`, in the case of return, it’s
    directly invoked. In later monads, we’ll have more continuations floating around.'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '只有一个成功的延续`k :: a -> r`，它总是最终被使用。在绑定的情况下，它被传递给`runIdCPS`，在返回的情况下，它被直接调用。在后续的单子中，我们会有更多的延续漂浮。'
- en: '* * *'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Following in step with monad tutorials, the next step is to look at the venerable
    Maybe data type, and its associated monad instance.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 顺着单子教程的步伐，下一步是看看那古老的Maybe数据类型及其相关的单子实例。
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When implementing the CPS version of this monad, we’ll need two continuations:
    a success continuation (`sk`) and a failure continuation (`fk`).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现此单子的CPS版本时，我们将需要两个延续：一个成功的延续（`sk`）和一个失败的延续（`fk`）。
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Compare this monad with `IdCPS`: you should notice that it’s quite similar.
    In fact, if we eliminated all mention of `fk` from the code, it would be identical!
    Our monad instance heartily endorses success. But if we add the following function,
    things change:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 将此单子与`IdCPS`进行比较：你会注意到它们非常相似。实际上，如果我们从代码中消除所有关于`fk`的提及，它们将是相同的！我们的单子实例大力支持成功。但是如果我们添加以下函数，情况就会改变：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This function ignores the success continuation and invokes the failure continuation:
    you should convince yourself that one it invokes the failure continuation, it
    immediately bugs out of the `MaybeCPS` computation. (Hint: look at any case we
    run a `MaybeCPS` continuation: what do we pass in for the failure continuation?
    What do we pass in for the success continuation?)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数忽略了成功的延续并调用失败的延续：你应该确信一旦调用失败的延续，它立即退出`MaybeCPS`计算。（提示：看看我们运行`MaybeCPS`延续的任何情况：我们为失败延续传递了什么？我们为成功延续传递了什么？）
- en: 'For good measure, we could also define:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地说明，我们还可以定义：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Which is actually just `return` in disguise.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 其实这只是伪装的`return`。
- en: 'You might also notice that the signature of our `MaybeCPS` newtype strongly
    resembles the signature of the `maybe` “destructor” function—thus called because
    it destroys the data structure:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还会注意到我们的`MaybeCPS`新类型的签名与`maybe`“析构”函数的签名非常相似，因此被称为它破坏了数据结构：
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '(The types have been reordered for pedagogical purposes.) I’ve deliberately
    named the “default value” `fk`: they are the same thing!'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: （为了教学目的，类型已重新排序。）我特意将“默认值”命名为`fk`：它们是同一回事！
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Both of these pieces of code have the same end result. However, `maybeTest`
    constructs a `Maybe` data structure inside the monadic portion, before tearing
    it down again. `runMaybeCPS` skips this process entirely: this is where the CPS
    transformation derives its performance benefit: there’s no building up and breaking
    down of data structures.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这两段代码的最终结果相同。然而，`maybeTest` 在单子部分内部构造了一个 `Maybe` 数据结构，然后再次拆除它。`runMaybeCPS`
    则完全跳过了这个过程：这就是 CPS 转换获得性能优势的地方：没有数据结构的构建和拆除。
- en: Now, to be fair to the original Maybe monad, in many cases GHC will do this
    transformation for you. Because algebraic data types encourage the creation of
    lots of little data structures, GHC will try its best to figure out when a data
    structure is created and then immediately destructed, and optimize out that wasteful
    behavior. Onwards!
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，公平地说原始的 Maybe 单子，在许多情况下 GHC 会为您执行此转换。因为代数数据类型鼓励创建大量小数据结构，GHC 将尽最大努力确定何时创建数据结构，然后立即拆除它，从而优化掉这种浪费的行为。前进！
- en: '* * *'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: The list monad (also known as the “stream” monad) encodes nondeterminism.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 列表单子（也称为“流”单子）编码了非确定性。
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`Nil` is essentially equivalent to `Nothing`, so our friend the failure continuation
    comes back to the fray. We have to treat our success continuation a little differently
    though: while we could just pass it the value of the first `Cons` of the list,
    this wouldn’t let us ever get past the first item of the list. So we’ll need to
    pass our success continuation a resume continuation (`rk`) in case it wants to
    continue down its path.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`Nil` 本质上等同于 `Nothing`，因此我们的失败延续再次出现。但是，我们必须稍微不同地处理我们的成功延续：虽然我们可以简单地传递列表的第一个
    `Cons` 的值给它，但这将阻止我们继续处理列表的其余部分。因此，我们需要向成功延续传递一个恢复延续 (`rk`)，以便在需要时继续其路径。'
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Remember that `return` generates singleton lists, so there’s nothing more to
    continue on to, and we give the success continuation `fk` as the resume continuation.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，`return`生成的是单元素列表，因此没有更多的内容可以继续，我们将成功的延续 `fk` 作为恢复的延续。
- en: 'The old data constructors also can be CPS transformed: `nilCPS` looks just
    like `nothingCPS`. `consCPS` invokes the success continuation, and needs to generate
    a resume continuation, which conveniently enough is given by its second argument:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 旧的数据构造函数也可以进行 CPS 变换：`nilCPS` 看起来就像 `nothingCPS`。`consCPS` 调用成功的延续，并且需要生成一个恢复的延续，这恰好可以通过它的第二个参数来方便地完成：
- en: '[PRE11]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'These types should be looking awfully familiar. Rearranging this type a little
    (and renaming b→r):'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类型看起来应该非常熟悉。稍微调整一下这种类型（并将 b 重命名为 r）：
- en: '[PRE12]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'I get:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我得到：
- en: '[PRE13]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Hey, that’s my continuation. So all we’ve done is a fold, just without actually
    constructing the list!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 嘿，这是我的延续。所以我们所做的一切就是一个折叠操作，只是没有实际构造列表！
- en: Keen readers will have also noticed that the CPS formulation of the list is
    merely the [higher-order Church encoding of lists](http://en.wikipedia.org/wiki/Church_encoding#Higher-order_function).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 敏锐的读者可能也会注意到，列表的 CPS 表达式仅仅是列表的[高阶 Church 编码](http://en.wikipedia.org/wiki/Church_encoding#Higher-order_function)。
- en: 'The CPS transformed version of the list monad wins big in several ways: we
    never need to construct and destruct the list and appending two lists takes `O(1)`
    time.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在几个方面，CPS 转换后的列表单子赢得了巨大的优势：我们从不需要构造和拆除列表，并且连接两个列表只需 `O(1)` 时间。
- en: '* * *'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'One last example: the leafy tree monad (cribbed from Edward Kmett’s finger
    tree slides):'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个例子：树叶单子（来自 Edward Kmett 的指示树幻灯片）：
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As it turns out, if we want to fold over this data type, we can reuse `LogicCPS`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，如果我们想要对这种数据类型进行折叠，我们可以重用 `LogicCPS`：
- en: '[PRE15]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To go in the other direction, if we combine all of the CPS operations on logic
    we’ve defined thus far and turn them back into a data type, we get a catenable
    list:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要反向进行操作，如果我们结合到目前为止定义的所有关于逻辑的 CPS 操作，并将它们转换回数据类型，我们将得到一个可连接的列表：
- en: '[PRE16]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '* * *'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'To wrap (fold) up, we’ve shown that when we build up a large data structure
    that is only going to be destructed when we’re done, we’re better off fusing the
    two processes together and [turn our data structure back into code](http://blog.ezyang.com/2010/09/data-is-code/).
    Similarly, if we would like to do “data structure”-like things to our data structure,
    it is probably better to actually build it up: the Church encodings for things
    like `tail` are notoriously inefficient. I’ve not said anything about monads that
    encode state of some sort: in many ways they’re a different breed of monad from
    the control flow monad (perhaps a more accurate statement is “Cont is the mother
    of all control flow monads”).'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 总结，我们已经表明，当我们构建一个大数据结构，只有在完成时才会被销毁时，我们最好将这两个过程合并，并且[将我们的数据结构重新转换回代码](http://blog.ezyang.com/2010/09/data-is-code/)。类似地，如果我们想对我们的数据结构执行“数据结构”-样的操作，实际上构建它可能更好：像`tail`这样的Church编码因其效率低下而臭名昭著。我并未讨论编码某种状态的单子：在许多方面，它们与控制流单子是不同类别的（或许更准确地说“Cont是所有控制流单子的鼻祖”）。
- en: To quote Star Wars, the next time you find yourself entangled in a mess of continuations,
    *use the data structure*!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 引用《星球大战》，下次当你发现自己陷入连续操作的混乱中时，*使用数据结构*！
- en: '*Addendum.* CPS transforming data structure traversal has nothing to do with
    monads. You can do it to anything. It just so happens that the killer feature
    of control flow monads, nondeterminism, happens to really benefit from this transformation.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*附录.* CPS（Continuation Passing Style）转换数据结构遍历与单子（monads）无关。你可以对任何东西进行这种操作。恰巧控制流单子的杀手级特性——非确定性，正好从这种转换中受益良多。'
- en: '*References.* There are loads and loads of existing treatments of this subject.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*参考.* 这个主题已经有大量现有的讨论。'
- en: I’ve probably missed a bunch of other obvious ones too.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我可能还错过了其他显而易见的一些内容。
