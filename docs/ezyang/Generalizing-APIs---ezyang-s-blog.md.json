["```\ndefaultInt :: Int\n\n```", "```\nclass Default a where\n  def :: a\n\n```", "```\ndata IntSet\ninsert :: IntSet -> Int -> IntSet\nlookup :: IntSet -> Int -> Bool\n\n```", "```\nclass Set c e where\n  insert :: c -> e -> c\n  lookup :: c -> e -> Bool\n\ninstance Set IntSet Int where ...\n\n```", "```\nempty :: IntSet\n\n```", "```\nNo instance for (Set IntMap e)\n  arising from a use of `empty'\n\n```", "```\nclass Set c e | c -> e where\n  empty :: c\n  insert :: c -> e -> c\n  lookup :: c -> e -> Bool\n\n```", "```\nclass Set c e | c -> e, e -> c where\n  empty :: c\n  null :: e\n  insert :: c -> e -> c\n  lookup :: c -> e -> Bool\n\n```", "```\ninstance Set IntSet Int where ...\ninstance Set IntSet Int32 where ...\ninstance Set BetterIntSet Int where ...\n\n```", "```\nclass Set c where\n  data Elem c :: *\n  empty :: c\n  null :: Elem c\n  insert :: c -> Elem c -> c\n  lookup :: c -> Elem c -> Bool\n\n```", "```\ninstance Set IntSet where\n  data Elem IntSet = IntContainer Int\n  empty = emptyIntSet\n  null = IntContainer 0\n\n```", "```\nclass Key e where\n  data Set e :: *\n  empty :: Set e\n  null :: e\n  insert :: Set e -> e -> Set e\n  lookup :: Set e -> e -> Bool\n\n```", "```\ninstance Set IntSet where\n  newtype Elem IntSet = IntContainer Int\n\n```", "```\nclass Set c where\n  type Elem c :: *\n\ninstance Set IntSet where\n  type Elem IntSet = Int\n\n```", "```\nx :: Int\nx = null\n\n```", "```\nCouldn't match expected type `Elem e'\n       against inferred type `[Int]'\n  NB: `Container' is a type function, and may not be injective\n\n```", "```\ninstance Set BetterIntSet where\n  type Elem BetterIntSet = Int\n\n```", "```\ninstance Set RecordMap where\n  data Elem RecordMap = Record { field1 :: Int, field2 :: Bool }\n\n```", "```\ntype Record = Elem RecordMap\n\n```", "```\ninstance Ord Int where ...\n\n```", "```\nclass Set c where\n  data Elem c :: *\n  empty :: c\n  null :: Ord (Elem c) => Elem c\n  insert :: Ord (Elem c) => c -> Elem c -> c\n  lookup :: Ord (Elem c) => c -> Elem c -> Bool\n\n```", "```\nclass Ord (Elem c) => Set c where\n  data Elem c :: *\n  empty :: c\n  null :: Elem c\n  insert :: c -> Elem c -> c\n  lookup :: c -> Elem c -> Bool\n\n```", "```\nclass ToBloomFilter a where\n  toBloomFilter :: a -> BloomFilter\n\n```", "```\nclass BloomFilter c where\n  data Elem c :: *\n\nclass BloomFilter c => ToBloomFilter c a where\n  toBloomFilter :: a -> c\n\n```", "```\ninsertFunDeps :: Set c e => c -> e -> c\ninsertTypeFamilies :: Set c => c -> Elem c -> c\n\nemptyFunDeps :: Set c e => c\nemptyTypeFamilies :: Set c => c\n\n```"]