- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-07-01 18:18:00'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-07-01 18:18:00
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'All about MVars : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于MVars的全部内容：ezyang的博客
- en: 来源：[http://blog.ezyang.com/2011/02/all-about-mvars/](http://blog.ezyang.com/2011/02/all-about-mvars/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2011/02/all-about-mvars/](http://blog.ezyang.com/2011/02/all-about-mvars/)
- en: I recently took the time out to rewrite [the MVar documentation](http://www.haskell.org/ghc/docs/latest/html/libraries/base/Control-Concurrent-MVar.html),
    which as it stands is fairly sparse (the introduction section rather tersely states
    "synchronising variables"; though to the credit of the original writers the inline
    documentation for the data type and its fundamental operations is fairly fleshed
    out.) I've reproduced my new introduction here.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我最近花了时间重新编写了[MVar文档](http://www.haskell.org/ghc/docs/latest/html/libraries/base/Control-Concurrent-MVar.html)，目前文档内容相对较少（简介部分非常简洁地说明了“同步变量”；尽管原始作者在数据类型和其基本操作的内联文档方面做得相当详尽。）我在这里复制了我的新简介。
- en: While researching this documentation, I discovered something new about how MVars
    worked, which is encapsulated in this program. What does it do?
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在研究此文档时，我发现了有关MVars如何工作的新内容，这体现在这个程序中。它做什么？
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '* * *'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'An `MVar t` is mutable location that is either empty or contains a value of
    type `t`. It has two fundamental operations: `putMVar` which fills an MVar if
    it is empty and blocks otherwise, and `takeMVar` which empties an MVar if it is
    full and blocks otherwise. They can be used in multiple different ways:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`MVar t`是一个可变位置，可以是空的，也可以包含类型为`t`的值。它有两个基本操作：`putMVar`，如果MVar为空则填充并阻塞，否则阻塞；`takeMVar`，如果MVar为满则清空并阻塞，否则阻塞。它们可以以多种不同的方式使用：'
- en: As synchronized mutable variables,
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为同步可变变量，
- en: As channels, with `takeMVar` and `putMVar` as receive and send, and
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为通道，使用`takeMVar`和`putMVar`作为接收和发送，
- en: As a binary semaphore `MVar ()`, with `takeMVar` and `putMVar` as wait and signal.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为二进制信号量`MVar ()`，使用`takeMVar`和`putMVar`作为等待和信号。
- en: They were introduced in the paper "Concurrent Haskell" by Simon Peyton Jones,
    Andrew Gordon and Sigbjorn Finne, though some details of their implementation
    have since then changed (in particular, a put on a full MVar used to error, but
    now merely blocks.)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 它们是由Simon Peyton Jones、Andrew Gordon和Sigbjorn Finne在论文“Concurrent Haskell”中引入的，尽管其实现的一些细节已经发生了变化（特别是，对满MVar的放置曾经导致错误，但现在仅仅阻塞。）
- en: Applicability
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 适用性
- en: 'MVars offer more flexibility than IORefs, but less flexibility than STM. They
    are appropriate for building synchronization primitives and performing simple
    interthread communication; however they are very simple and susceptible to race
    conditions, deadlocks or uncaught exceptions. Do not use them if you need perform
    larger atomic operations such as reading from multiple variables: use ''STM''
    instead.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: MVars比IORefs提供更多的灵活性，但比STM提供的灵活性更少。它们适用于构建同步原语和执行简单的线程间通信；然而，它们非常简单且容易受到竞争条件、死锁或未捕获的异常的影响。如果需要执行更大的原子操作（例如从多个变量读取），请使用“STM”。
- en: In particular, the "bigger" functions in this module (`readMVar`, `swapMVar`,
    `withMVar`, `modifyMVar_` and `modifyMVar`) are simply compositions a `takeMVar`
    followed by a `putMVar` with exception safety. These only have atomicity guarantees
    if all other threads perform a `takeMVar` before a `putMVar` as well; otherwise,
    they may block.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是，在本模块中的“大”函数（`readMVar`，`swapMVar`，`withMVar`，`modifyMVar_`和`modifyMVar`）只是一个`takeMVar`后跟一个带有异常安全的`putMVar`的组合。只有当所有其他线程在`putMVar`之前执行`takeMVar`时，它们才具有原子性保证；否则，它们可能会阻塞。
- en: Fairness
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 公平性
- en: The original paper specified that no thread can be blocked indefinitely on an
    MVar unless another thread holds that MVar indefinitely. This implementation upholds
    this fairness property by serving threads blocked on an MVar in a first-in-first-out
    fashion.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 原始论文规定，除非另一个线程无限期地持有该MVar，否则不能有任何线程在MVar上被阻塞。通过以先进先出的方式为阻塞在MVar上的线程提供服务，此实现维护了这一公平性质。
- en: Gotchas
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: Like many other Haskell data structures, MVars are lazy. This means that if
    you place an expensive unevaluated thunk inside an MVar, it will be evaluated
    by the thread that consumes it, not the thread that produced it. Be sure to `evaluate`
    values to be placed in an MVar to the appropriate normal form, or utilize a strict
    MVar provided by the [strict-concurrency package](http://hackage.haskell.org/package/strict-concurrency).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 与许多其他Haskell数据结构一样，MVars是惰性的。这意味着如果您将一个昂贵的未求值的thunk放入MVar中，它将由消费它的线程求值，而不是产生它的线程。确保将要放入MVar中的值评估为适当的正常形式，或者利用由[strict-concurrency包](http://hackage.haskell.org/package/strict-concurrency)提供的严格MVar。
- en: Example
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: Consider the following concurrent data structure, a skip channel. This is a
    channel for an intermittent source of high bandwidth information (for example,
    mouse movement events.) Writing to the channel never blocks, and reading from
    the channel only returns the most recent value, or blocks if there are no new
    values. Multiple readers are supported with a `dupSkipChan` operation.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下并发数据结构，跳过通道。这是用于间歇性高带宽信息源（例如，鼠标移动事件）的通道。写入通道永远不会阻塞，从通道读取仅返回最新值，或者如果没有新值则阻塞。支持多个读取器，有一个`dupSkipChan`操作。
- en: 'A skip channel is a pair of MVars: the second MVar is a semaphore for this
    particular reader: it is full if there is a value in the channel that this reader
    has not read yet, and empty otherwise.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 跳过通道是一对MVars：第二个MVar是特定读取器的信号量：如果通道中有该读取器尚未读取的值，则为满，否则为空。
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This example was adapted from the original Concurrent Haskell paper. For more
    examples of MVars being used to build higher-level synchronization primitives,
    see [Control.Concurrent.Chan](http://www.haskell.org/ghc/docs/latest/html/libraries/base/Control-Concurrent-Chan.html)
    and [Control.Concurrent.QSem](http://www.haskell.org/ghc/docs/latest/html/libraries/base/Control-Concurrent-QSem.html).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例改编自原始的Concurrent Haskell论文。有关使用MVars构建更高级同步原语的更多示例，请参见[Control.Concurrent.Chan](http://www.haskell.org/ghc/docs/latest/html/libraries/base/Control-Concurrent-Chan.html)和[Control.Concurrent.QSem](http://www.haskell.org/ghc/docs/latest/html/libraries/base/Control-Concurrent-QSem.html)。
