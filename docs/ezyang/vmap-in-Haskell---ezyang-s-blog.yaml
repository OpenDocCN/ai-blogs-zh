- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:16:52'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:16:52'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'vmap in Haskell : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'vmap in Haskell : ezyang’s blog'
- en: 来源：[http://blog.ezyang.com/2020/01/vmap-in-haskell/](http://blog.ezyang.com/2020/01/vmap-in-haskell/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2020/01/vmap-in-haskell/](http://blog.ezyang.com/2020/01/vmap-in-haskell/)
- en: '[vmap](https://github.com/google/jax#auto-vectorization-with-vmap) is an interface
    popularized by JAX which offers you a vectorizing map. Semantically, a vmap is
    exactly equivalent to a map in Haskell; the key difference is that operations
    run under a vmap are vectorized. If you map a convolution and a matrix multiply,
    you will have one big loop which repeatedly calls convolution and matrix multiply
    for each entry in your batch. If you *vmap* a convolution and matrix multiply,
    you''ll call the batched versions of convolution and matrix multiply once. Unless
    you have a fuser, on most modern deep learning frameworks, calling the batched
    implementations of these operations will be much faster.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[vmap](https://github.com/google/jax#auto-vectorization-with-vmap) 是 JAX 推广的一种接口，为您提供向量化映射。从语义上讲，vmap
    与 Haskell 中的 map 完全等效；关键区别在于，在 vmap 下运行的操作是向量化的。如果对卷积和矩阵乘法进行映射，您将得到一个大循环，它会重复调用每个批次条目的卷积和矩阵乘法。如果
    *vmap* 一个卷积和矩阵乘法，您将调用这些操作的批量实现一次。除非您有一个融合器，在大多数现代深度学习框架上，调用这些操作的批处理实现会更快。'
- en: JAX implements vmap in a somewhat complicated fashion; they have a "batched
    interpreter" which translates operations on primitives into their batched versions,
    and have to track metadata about what tensors are batched and in what way so that
    they can insert appropriate broadcasts and unsqueezes. I mentioned this to Simon
    Peyton Jones, and he immediately asked, couldn't Haskell's typechecker work this
    out automatically? The answer is, yes! All of the book-keeping JAX has to do is
    effectively doing runtime type inference; if you have a compiler that can do it
    for you at compile time, there is nearly nothing to implement.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 实现 vmap 的方式略显复杂；它们有一个“批量解释器”，将原始操作转换为它们的批量版本，并且必须跟踪有关哪些张量是批量化的以及以何种方式批量化的元数据，以便能够插入适当的广播和展开操作。我向
    Simon Peyton Jones 提到了这一点，他立即问道，Haskell 的类型检查器不能自动处理这个吗？答案是可以！JAX 需要进行的所有簿记实际上是在运行时进行类型推断；如果您有一个可以在编译时为您完成这项工作的编译器，那么几乎没有什么需要实现的了。
- en: 'To give away the punchline, we are going to implement a family of functions
    vmap that will run these two examples:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 揭示结论，我们将实现一个 vmap 函数族，用于运行以下两个示例：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When run in an interpreter, we will see:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在解释器中运行时，我们将看到：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: These results are equivalent to what you would have gotten using a plain old
    `map`; however, there will be **no** loop in the implementation of vmap. (The
    fact that we can't write a single vmap that works universally is due to a limitation
    in Haskell; we'll discuss this more later.)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这些结果与您使用普通的 `map` 得到的结果相等；然而，在 vmap 的实现中没有循环。（无法编写一个普适的 vmap 的事实是 Haskell 的一个限制；我们稍后会更详细地讨论这一点。）
- en: '* * *'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'We''re going to need a few language extensions, so let''s get this out of the
    way first:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一些语言扩展，所以让我们先把这个问题解决掉：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Our plan of attack is that we want to write the definitions of vmap so that
    we infer a type for `add` which makes the necessary broadcasting clear. A trivial
    implementation of vmap would have the signature `([a] -> [b]) -> [a] -> [b]` (aka
    the identity function), but the standard list type doesn''t let us distinguish
    between dimensions we should broadcast together, and dimensions we shouldn''t
    (this is the reason `example1` and `example2` give different results: in `example2`,
    we broadcast along each dimension separately, so that we end up with a cartesian
    product in the end; in `example1`, we broadcast the dimensions together and get
    the zippy behavior). Each distinct invocation of vmap should give us a new dimension,
    which ought not to be mixed up with other invocations of vmap. When you hear this
    in Haskell, your first instinct should be, "I know, let''s use a rank 2 type!"
    vmap moves us from the non-type-branded world of vanilla lists `[Float]` to a
    type-branded world of size-indexed vectors `Vec s Float`, where the `s` variables
    are all skolem variables bound by our rank 2 type:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的攻击计划是，我们希望编写 `vmap` 的定义，以便推断出 `add` 的类型，从而清晰地显示出必要的广播。 `vmap` 的一个微不足道的实现将具有签名
    `([a] -> [b]) -> [a] -> [b]`（也就是恒等函数），但标准列表类型并不允许我们区分应一起广播的维度和不应一起广播的维度（这就是为什么
    `example1` 和 `example2` 得到不同结果的原因：在 `example2` 中，我们沿着每个维度分别广播，因此最终得到一个笛卡尔积；在 `example1`
    中，我们将维度一起广播并获得了“zip”的行为）。每个不同的 `vmap` 调用应该给我们一个新的维度，这些维度不应与其他 `vmap` 调用混淆。当你在
    Haskell 中听到这些时，你的第一反应应该是，“我知道了，让我们使用一个二阶类型！” `vmap` 将我们从普通列表 `[Float]` 的非类型品牌世界移动到带有大小索引向量
    `Vec s Float` 的类型品牌世界，其中 `s` 变量都是由我们的二阶类型约束的 skolem 变量：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The implementation of `vmap0` doesn''t do anything: we just wrap the lists
    into their type-branded equivalent vectors. We can also provide a 2-ary version
    of vmap0, which takes two lists and assigns them the same type branding all at
    once:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`vmap0` 的实现什么也不做：我们只是将列表包装成它们的类型品牌等效向量。我们还可以提供 `vmap0` 的二元版本，它一次接受两个列表并分配它们相同的类型品牌：'
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: (In principle, some sort of applicative-y thing should make it possible to write
    just a vap (analogous to `ap`) and then get all of the n-ary versions for free,
    but in my brief investigation I didn't see a good way of doing this.)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: （原则上，一些类似 applicative 的东西应该使得我们可以仅写一个 `vap`（类似于 `ap`），然后免费获取所有 n-ary 版本，但在我简短的调查中，我没有看到一个好的方法来实现这一点。）
- en: 'When we nest vmap, it may be the case that the function doesn''t directly return
    a `Vec s b`, but a functor containing `Vec s b`. `vmap1` handles this case (we''ll
    discuss this more shortly):'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们嵌套 `vmap` 时，函数可能并不直接返回 `Vec s b`，而是包含 `Vec s b` 的函子。 `vmap1` 处理这种情况（我们稍后将更详细地讨论这一点）：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'With our implementations of vmap in hand, we can take a look at our examples
    and ask Haskell what the type of `add` ought to be, if we didn''t have an implementation
    of it:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 有了我们手头的 `vmap` 实现，我们可以查看我们的示例，并询问 Haskell 如果我们没有它的实现，`add` 的类型应该是什么：
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Gives:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 得到：
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'However:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然而：
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Gives:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 得到：
- en: '[PRE9]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Notice that the inferred types of `_add` are different in these two cases:
    in the first example, we infer that we have two tensors batched in the same way,
    and we want to "zip" them together. In the second example, we see that each tensor
    has a distinct batch dimension, and we end up with a 2-D result!'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这两种情况下 `_add` 的推断类型是不同的：在第一个示例中，我们推断出两个张量以相同方式进行批处理，并且我们想要将它们“zip”在一起。在第二个示例中，我们看到每个张量具有不同的批处理维度，最终得到一个二维结果！
- en: 'At this point, the job of vmap is done: our holes have types which we can use
    to determine what the necessary behavior is. You could use these types to select
    an appropriate kernel to perform vectorized addition. But I promised runnable
    code, so let''s implement a simple version of add using old fashioned map.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，`vmap` 的工作已经完成：我们的洞有了我们可以用来确定必要行为的类型。你可以使用这些类型来选择执行矢量化加法的适当内核。但我承诺提供可运行的代码，所以让我们使用传统的
    `map` 实现一个简单版本的 `add`。
- en: 'The good old fashioned way to do type level computation in Haskell is with
    a type class, of course! Let''s define a multi-parameter type class for the function
    `add`; unlike the definition of `(+)` in `Num`, we''ll let the inputs and output
    all have different types:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Haskell 中进行类型级计算的传统方式当然是使用类型类！让我们为函数 `add` 定义一个多参数类型类；与 `Num` 中的 `(+)` 定义不同，我们允许输入和输出都具有不同的类型：
- en: '[PRE10]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can easily implement addition on plain floating point:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以轻松地对普通浮点数进行加法实现：
- en: '[PRE11]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If I pass add two arguments whose outer-most vector agree in their type brand
    (aka, they came from the same vmap), I should zip them together, as I did in `example1`.
    I can write another instance to express this logic:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我传入两个参数，它们最外层的向量类型一致（也就是它们来自同一个vmap），我应该像我在`example1`中所做的那样将它们一起压缩。我可以编写另一个实例来表达这个逻辑：
- en: '[PRE12]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Otherwise, I should broadcast one of the dimensions and then do an addition
    on the inside. This choice can''t easily be made locally, so I have to define
    these two incoherent instances:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，我应该广播一个维度，然后在内部进行加法。这个选择不能在本地轻易完成，所以我必须定义这两个不一致的实例：
- en: '[PRE13]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: (GHC's type class resolution engine doesn't backtrack, so I'm not actually sure
    how it manages to pick the correct instance to use, but in my testing, I got the
    right instance no matter what order I specified the arguments to add.)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: （GHC的类型类解析引擎不会回溯，所以我不确定它是如何成功选择要使用的正确实例的，但在我的测试中，无论我如何指定add的参数顺序，我都得到了正确的实例。）
- en: 'That''s it! Running the two examples:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！运行这两个示例：
- en: '[PRE14]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'I get:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我得到：
- en: '[PRE15]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '* * *'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: So there you have it! vmap in less than a dozen lines of Haskell. One unsatisfactory
    thing about this implementation is the necessity to define `vmap0`, `vmap1`, etc.
    Can't we just define a generic `vmapG ::  (forall s. Vec s a -> f (Vec s b)) ->
    [a] -> f [b]` and have `f` unify with, well, the identity type lambda `/\a. a`
    when we need it to have the type of `vmap0`? Regretfully, type inference with
    type lambdas is undecidable (the so-called higher-order unification problem),
    so it seem we have to help GHC out here, even though in our particular case the
    unification we can do here is very restricted.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '所以这就是它！在不到十行的Haskell代码中使用vmap。关于这种实现令人不满意的一点是必须定义`vmap0`、`vmap1`等。我们不能只定义一个通用的`vmapG
    :: (forall s. Vec s a -> f (Vec s b)) -> [a] -> f [b]`，然后在需要时将`f`统一为恒等类型lambda
    `/\a. a`吗？遗憾的是，带类型lambda的类型推断是不可判定的（即所谓的高阶一致性问题），所以在这里似乎我们必须帮助GHC，即使在我们的特定情况下，我们可以在这里进行的统一非常受限制。'
