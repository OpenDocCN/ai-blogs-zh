- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:18:15'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:18:15'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Graphs not grids: How caches are corrupting young algorithms designers and
    how to fix it : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图形而非网格：缓存如何破坏年轻算法设计师及其修复方法：ezyang’s博客
- en: 来源：[http://blog.ezyang.com/2010/07/graphs-not-grids/](http://blog.ezyang.com/2010/07/graphs-not-grids/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/07/graphs-not-grids/](http://blog.ezyang.com/2010/07/graphs-not-grids/)
- en: 'Subtitle: Massively multithreaded processors make your undergraduate CS education
    relevant again.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 小标题：大规模多线程处理器让你的本科计算机科学教育再次变得相关。
- en: '*Quicksort. Divide and conquer. Search trees. These and other algorithms form
    the basis for a classic undergraduate algorithms class, where the big ideas of
    algorithm design are laid bare for all to see, and the performance model is one
    instruction, one time unit. “One instruction, one time unit? How quaint!” proclaim
    the cache-oblivious algorithm researchers and real world engineers. They know
    that the traditional curriculum, while not wrong, is quite misleading. It’s simply
    not enough to look at some theoretical computing machine: the next-generation
    of high performance algorithms need to be in tune with the hardware they run on.
    They couldn’t be more right.*'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*快速排序。分而治之。搜索树。这些及其他算法构成经典本科算法课程的基础，展示算法设计的重要思想，以及性能模型是一个指令，一个时间单位。“一个指令，一个时间单位？多么古雅！”高速缓存无视算法研究人员和真实世界工程师知道，传统课程虽然不错，但却颇具误导性。仅仅看一些理论计算机是不够的：高性能算法的下一代需要与其运行的硬件保持协调。他们绝对正确。*'
- en: Last Friday, Dr. John Feo gave a Galois Tech Talk entitled [Requirements and
    Performance of Data Intensive, Irregular Applications](http://www.galois.com/blog/2010/07/02/tech-talk-requirements-and-performance-of-data-intensive-irregular-applications/)
    ([slides 1](http://www.lanl.gov/orgs/hpc/salishan/salishan2010/pdfs/John%20Feo.pdf)).
    However, Feo also brought in some slides from another deck which talked more generally
    about the [Center for Adaptive Supercomputing Software](http://cass-mt.pnl.gov/)
    ([slides 2](http://supercomputing.pnl.gov/demos/CASS_Feo_SC09.pdf)). The resulting
    presentation was a blend of the principles of massively multithreaded processor
    architectures—specifically the [Cray XMT](http://www.cray.com/products/xmt/) —and
    practical engineering problems encountered when writing software for such machines.
    Since I can’t resist putting spin on a good presentation, the title of these notes
    comes from a conversation I had with Feo after the tech talk; I don’t mean to
    demean those doing research on traditional processor, just to suggest that there
    is another approach that doesn’t receive as much attention as Feo thinks it should.
    For those of you who like puzzles, there will also be a “Why does this deadlock?”
    question at the end of this post.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 上周五，John Feo 博士在 Galois Tech Talk 上发表了题为[数据密集、不规则应用的要求和性能](http://www.galois.com/blog/2010/07/02/tech-talk-requirements-and-performance-of-data-intensive-irregular-applications/)的演讲（[幻灯片
    1](http://www.lanl.gov/orgs/hpc/salishan/salishan2010/pdfs/John%20Feo.pdf)）。然而，Feo
    还带来了另一个讲述更广泛的[自适应超级计算软件中心](http://cass-mt.pnl.gov/)的幻灯片（[幻灯片 2](http://supercomputing.pnl.gov/demos/CASS_Feo_SC09.pdf)）。最终的演示是关于大规模多线程处理器架构原则——特别是[Cray
    XMT](http://www.cray.com/products/xmt/)——以及在编写此类机器软件时遇到的实际工程问题的结合。由于我无法抵挡美好演示的诱惑，这些笔记的标题来自我与Feo
    在技术讨论后的一段对话；我并不是要贬低那些在传统处理器上进行研究的人，只是建议有另一种方法，Feo 认为这种方法应该得到更多关注。对于那些喜欢解谜题的人，本文末尾还将有一个“这是为什么会死锁？”的问题。
- en: '*Graphs not grids.* John Feo started off by distinguishing between problems
    in science and problems in informatics. Scientific problems frequently take the
    form of *grids*, slowly evolving systems that exhibit the principle of locality
    and involve only nearest neighbor communication inside the grid. These types of
    problem are tackled extremely well by cluster parallelization: planar grids are
    obvious to partition, and nearest neighbor communication means that the majority
    of any computation will be local to the node containing the partition. Locality
    also means that, with a little care, these algorithms can play nicely with the
    CPU cache: for cache-oblivious algorithms, this just means partitioning the problem
    until it fits on-board.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*图表不是网格。* 约翰·费奥开始区分科学问题和信息学问题。科学问题通常采用*网格*形式，是演化缓慢的系统，展示局部性原理，并仅涉及网格内部的最近邻通信。这类问题非常适合通过集群并行化解决：平面网格易于分割，最近邻通信意味着大部分计算将局限于包含分割的节点。局部性还意味着，在稍加注意的情况下，这些算法可以很好地与CPU缓存兼容：对于无关缓存的算法，这只是将问题分割直至适合板载的过程。'
- en: 'Data informatics, however, sees quite different datasets. Consider the friends
    graph on Facebook, or the interlinking pages of the web, or the power grid of
    your country. These are not grids (not even the power grid): they are *graphs.*
    And unlike a quantum chromodynamic simulation, these graphs are dynamic, constantly
    being changed by many autonomous agents, and they can present some unique problems
    for traditional processors and parallelization.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，数据信息学涉及的数据集却大不相同。考虑一下Facebook上的朋友关系图，或者互联网页面的相互链接，或者你国家的电力网络。这些都不是网格（即使是电网也不是）：它们是*图表*。与量子色动力学模拟不同，这些图表是动态的，不断地被许多自主代理修改，这对传统处理器和并行化提出了一些独特的问题。
- en: '*Difficult graphs.* There are several types of graphs that are particularly
    hard to run algorithms on. Unfortunately, they also tend to show up frequently
    in real world datasets.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*难以处理的图表。* 有几种类型的图表特别难以运行算法。不幸的是，它们在现实世界的数据集中经常出现。'
- en: '[Low diameter (aka “small world”) graphs](http://en.wikipedia.org/wiki/Small-world_network)
    are graphs in which the degree of separation between any two nodes is very low.
    The work necessary on these graphs explodes; any algorithm that looks at the neighbors
    of a node will quickly find itself having to operate on the entire graph at once.
    Say good bye to memory locality! The tight coupling also makes the graph difficult
    to partition, which is the classic way to parallelize a computation on a graph.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[低直径（又称“小世界”）图](http://en.wikipedia.org/wiki/Small-world_network)是一种图表，其中任意两个节点之间的分离程度非常低。在这些图表上需要的工作量激增；任何查看节点邻居的算法很快就会发现自己不得不一次性操作整个图表。说再见内存局部性！紧密耦合还使得图表难以分割，而这是并行化图表计算的经典方法。'
- en: '[Scale-free graphs](http://en.wikipedia.org/wiki/Scale-free_network) are graphs
    in which a small number of nodes have an exponentially large number of neighbors,
    and a large number of nodes have a small number of neighbors. These graphs are
    also difficult to partition and result in highly asymmetric workloads: the few
    nodes with large amounts neighbors tend to attract the bulk of the work.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[无标度图](http://en.wikipedia.org/wiki/Scale-free_network)是一种图表，其中少数节点有大量的邻居，而大多数节点只有少量的邻居。这些图表也难以分割，并且导致高度不对称的工作负载：那些有大量邻居的少数节点往往会吸引大部分的工作。'
- en: There are also properties of graphs that can make computation more difficult.
    Non-planar graphs are generally harder to partition; dynamic graphs have concurrent
    actors inserting and deleting nodes and edges; weighted graphs can have pathological
    weight distributions; and finally graphs with typed edges prevent you from reducing
    a graph operation into a sparse matrix operation.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图表的某些属性可能使计算更加困难。非平面图通常更难分割；动态图有并发的参与者插入和删除节点和边；加权图可能具有病理性的权重分布；最后，具有类型边的图阻止将图操作简化为稀疏矩阵操作。
- en: This slide from Feo sums up the immediate effects of these types of graphs nicely.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这张来自Feo的幻灯片很好地总结了这些类型图表的即时效果。
- en: '*Multithreaded processors: gatling guns of the computing world.* The gatling
    gun was one of the first well-known rapid-fire guns. Other guns simply increased
    their rate of fire, but quickly found that their gun barrels overheated if they
    attempted to fire too quickly. The gatling gun used multiple barrels, each of
    which individually fired at a slower rate, but when rotated in succession allowed
    a continuous stream of bullets to be fired while allowing the barrels not in use
    to cool off.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*多线程处理器：计算世界的加特林机枪。* 加特林机枪是最早知名的快速射击枪之一。其他枪械简单增加射速，但很快发现，如果试图射击过快，枪管会过热。加特林机枪使用多管，每管独立射击速度较慢，但依次旋转时可以持续不断地发射子弹，同时允许未使用的枪管冷却。'
- en: 'The time it takes for a discharged barrel to cool off is similar to the latency
    of a memory access. Since memory accesses are expensive, traditional processors
    try to “use less bullets” and forgo memory accesses with on-processor caches.
    However, a massively multithreaded processor takes a different approach: instead
    of trying to eliminate the memory latency, it simply hides it by context switching
    away from a thread that requests memory, so that by the time it switches back,
    the access has been completed and the data available. No need to twiddle your
    thumbs while waiting for data; go do something else! On specialized hardware,
    the researches at PNNL have been able to get processor utilization upwards of
    90%; on less specialized hardware, performance targets are a bit more modest—40%
    or so.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 空闲枪管冷却的时间类似于内存访问的延迟。由于内存访问开销大，传统处理器尝试“减少子弹使用”，通过处理器缓存来避免内存访问。然而，大规模多线程处理器采取不同的方法：而不是试图消除内存延迟，它通过上下文切换远离请求内存的线程来隐藏它，这样在切换回来时，访问已经完成并且数据可用。不需要无聊地等待数据；去做其他事情吧！在专用硬件上，PNNL
    的研究人员已经能够使处理器利用率超过90%；在非专用硬件上，性能目标要逊色一些，大约为40%左右。
- en: '*Implications.* Because the massively multithreaded processor is hiding memory
    access latency, not trying to get rid of it, traditional constraints such as memory
    locality become unimportant. You don’t need data to be near your computation,
    you don’t need to balance work across processors (since it all goes into threads
    that cohabit), you don’t need to handle synchronization like a time bomb. What
    you learned in undergraduate computer science is relevant again! In Feo’s words:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*影响。* 因为大规模多线程处理器隐藏了内存访问延迟，而不是试图消除它，传统的约束条件如内存局部性变得不重要。你不需要数据靠近计算，也不需要在处理器之间平衡工作（因为它们都进入共存的线程），也不需要像定时炸弹一样处理同步。你在本科计算机科学中学到的东西再次变得相关了！用Feo的话说：'
- en: Adaptive and dynamic methods are okay,
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自适应和动态方法都可以，
- en: Graph algorithms and sparse methods are okay, and
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图算法和稀疏方法都可以，以及
- en: Recursion, dynamic programming, branch-and-bound, dataflow are okay!
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 递归，动态规划，分支和界限，数据流都可以！
- en: Your hardware, then, will be tailored for graph-like computations. This includes
    a huge global address space to shove your graph into, extremely lightweight synchronization
    in the form of full/empty bits (Haskell users might recognize them as extremely
    similar to [MVars](http://www.haskell.org/ghc/docs/6.12.2/html/libraries/base-4.2.0.1/Control-Concurrent-MVar.html);
    indeed, they come from the same lineage of dataflow languages) and hardware support
    for thread migration, to balance out workloads. It’s something of a holy hardware
    grail for functional languages!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你的硬件将被定制用于类似图的计算。这包括一个巨大的全局地址空间来存放你的图，极其轻量级的同步形式如全/空位标志（Haskell用户可能会认出它们与[MVars](http://www.haskell.org/ghc/docs/6.12.2/html/libraries/base-4.2.0.1/Control-Concurrent-MVar.html)非常相似；事实上，它们来自于数据流语言的同一血统）以及硬件支持线程迁移，以平衡工作负载。对于函数式语言来说，这是一种神圣的硬件圣杯！
- en: The Cray XMT is one particular architecture that John Feo and his fellow researchers
    have been evaluating. It easily beats traditional processors when handling algorithms
    that exhibit poor locality of reference; however, it is slower when you give the
    traditional processor and algorithm with good locality of reference.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Cray XMT是约翰·Feo及其研究伙伴一直在评估的一种特定架构。在处理具有较差引用局部性的算法时，它轻松击败传统处理器；然而，当你给传统处理器和具有良好引用局部性的算法时，它会慢一些。
- en: '*Maximum weight matching.* There are many graph problems—shortest path, betweenness
    centrality, min/max flow, spanning trees, connected components, graph isomorphism,
    coloring, partitioning and equivalence, to name a few. The one Feo picked out
    to go into more detail about was [maximum weight matching](http://en.wikipedia.org/wiki/Matching_(graph_theory)).
    A matching is a subset of edges such that no two edges are incident on the same
    vertex; so a maximum weight matching is a matching where the weights of the selected
    edges has been maximized (other cost functions can be considered, for example,
    on an unweighted graph you might want to maximize the number of edges).'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*最大权重匹配*。有许多图问题——最短路径、节点间的介数中心性、最小/最大流、生成树、连通分量、图同构、着色、划分和等价性，仅举几例。Feo选择详细介绍的是[最大权重匹配](http://en.wikipedia.org/wiki/Matching_(graph_theory))。匹配是边的一个子集，使得任意两条边不相邻于同一个顶点；因此最大权重匹配是一种使所选边的权重最大化的匹配（也可以考虑其他成本函数，例如在无权重图中可能希望最大化边的数量）。'
- en: 'While there is a [polynomial-time algorithm](http://en.wikipedia.org/wiki/Edmonds''s_matching_algorithm)
    for finding maximum weight matchings, we can get an approximate answer more quickly
    with a greedy parallel algorithm called [Hoepman’s algorithm](http://arxiv.org/abs/cs.DC/0410047).
    It is reminiscent of the [stable marriage (Gale-Shapely) algorithm](http://en.wikipedia.org/wiki/Stable_marriage_problem);
    the algorithm runs as follows: each node requests to be paired with the node across
    most expensive vertex local to it. If two nodes request each other, they are paired,
    and they reject all other pairing requests. If a node gets rejected, it tries
    the next highest vertex, and so on. Since a node will only accept one pairing
    request, edges in the pairing will never be incident on the same vertex.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然存在一种[多项式时间算法](http://en.wikipedia.org/wiki/Edmonds's_matching_algorithm)用于找到最大权重匹配，但是我们可以通过一种称为[Hoepman的算法](http://arxiv.org/abs/cs.DC/0410047)的贪婪并行算法更快地得到近似答案。它类似于[稳定婚姻（Gale-Shapely）算法](http://en.wikipedia.org/wiki/Stable_marriage_problem)；算法运行如下：每个节点请求与其最昂贵的本地顶点对配。如果两个节点相互请求，则它们被配对，并拒绝所有其他配对请求。如果一个节点被拒绝，则尝试下一个最高的顶点，依此类推。由于一个节点只会接受一个配对请求，配对中的边永远不会与同一个顶点相邻。
- en: 'Hoepman’s algorithm relies on a theoretical machine that is able to allocate
    a processor per node. This doesn’t bode well for traditional cluster machines,
    so [Halappanavar, Dobrian and Pothen](http://www.cs.odu.edu/~mhalappa/matching/index.html)
    proposed a parallel version that separates the graph into partitions which are
    given to processors, and uses queues to coordinate communicate across the partitions.
    Unfortunately, this approach performs extremely poorly in some cases. Feo has
    some visualizations of this phenomenon: the pictures below are visual depictions
    of processor cores, where green indicates the core is busy, and white lines indicate
    inter-processor communication. While the regular, planar graph of US roadways
    handles the problem nicely, both graphs generated by the [Erdős–Rényi model](http://en.wikipedia.org/wiki/Erd%C5%91s%E2%80%93R%C3%A9nyi_model)
    and scale-free free graphs (one of the “tough” graph types we mentioned earlier)
    have inter-processor communication explode in sheets of white.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Hoepman的算法依赖于一个能够为每个节点分配处理器的理论机器。这对传统的集群机器并不利，因此[Halappanavar, Dobrian和Pothen](http://www.cs.odu.edu/~mhalappa/matching/index.html)提出了一个并行版本，将图分割成分区，每个分区分配给处理器，并使用队列来协调跨分区的通信。不幸的是，这种方法在某些情况下表现极差。Feo对此现象进行了一些可视化：下面的图片展示了处理器核心的视觉图，绿色表示核心正在忙碌，白线表示处理器间的通信。尽管美国道路常规的平面图能很好地处理这个问题，但是由[Erdős–Rényi模型](http://en.wikipedia.org/wiki/Erd%C5%91s%E2%80%93R%C3%A9nyi_model)和无标度图（我们之前提到的“难以处理”的图类型之一）生成的图表现出了大量的处理器间通信爆炸。
- en: Machines like the Cray XMT, however, make it plausible to try to implement Hoepman’s
    original algorithm more closely. Give each node a thread, and implement the algorithm
    *as described.*
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，像Cray XMT这样的机器使得更接近实现Hoepman原始算法成为可能。为每个节点分配一个线程，并按*描述的方式*实现算法。
- en: 'In order to implement signaling, we can use the full/empty bit primitive. Every
    edge has two full/empty bits, each endpoint owning one each. When a node attempts
    to pair with a vertex, it fills its own bit with 1, and then tries to read the
    other bit. While the bit is empty, the node’s thread blocks. If the other bit
    reads 1, the node is paired: fill all other bits the node owns with 0 and then
    terminate. If the other bit reads 0, try your next neighbor with the highest edge.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现信号传递，我们可以使用完整/空位原语。每条边有两个完整/空位位，每个端点分别拥有其中一个。当一个节点尝试与一个顶点配对时，它将自己的位填充为 1，然后尝试读取另一个位。当该位为空时，节点的线程将阻塞。如果另一个位读取为
    1，则节点已配对：将节点拥有的所有其他位填充为 0，然后终止。如果另一个位读取为 0，则尝试与下一个具有最高边的邻居。
- en: This approach doesn’t quite work, due to real-world constraints on the Cray
    XMT. In particular, for large graphs, it’s not possible for every thread to be
    run simultaneously; only a subset of nodes can be run at a time. If it just happens
    that every node is waiting on another node which is not being currently run, all
    the nodes block, and we have deadlock. In particular, the Cray XMT will not pre-empt
    a thread that is blocked by default, because the cost of context switching is
    so high. (You could turn pre-emption on, in which case this deadlock would go
    away, but at great cost to runtime. While the Cray does thread-level context switching
    every cycle, actually evicting the thread off its processor is quite expensive.)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法并不完全奏效，因为在 Cray XMT 上存在实际约束。特别是对于大图，不可能同时运行每个线程；只有一部分节点可以同时运行。如果恰好每个节点都在等待另一个当前未运行的节点，所有节点都会阻塞，我们就会陷入死锁。特别是，Cray
    XMT 不会默认抢占一个被阻塞的线程，因为上下文切换的成本如此之高。（你可以打开抢占，这样死锁会消失，但运行时间会大大增加。虽然 Cray 每个周期进行线程级上下文切换，但实际上从处理器中驱逐线程是非常昂贵的。）
- en: 'The simple fix Feo applied was the following observation: as long as we schedule
    nodes closed to expensive edges, there will always be work to be done: in particular,
    the two nodes incident to the most expensive unpaired edge will always be able
    to pair. So sort the nodes in order of their most expensive vertex, and then run
    the algorithm. This resolved most of the deadlocks.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Feo 应用的简单修复方法是以下观察：只要我们安排在昂贵边附近的节点，总是会有工作要做：特别是，两个与最昂贵的未配对边相邻的节点总是能够配对。因此，按照它们最昂贵的顶点对节点进行排序，然后运行算法。这解决了大部分死锁问题。
- en: '*Ending notes.* While massively multithreaded architectures are promising,
    there is a lot of work that still needs to be done both on the hardware side (making
    this technology available on commodity hardware, and not just the Cray XMT) as
    well as the software ecosystem (building new programming APIs to take advantage
    of the architecture.) Even further, the problems in this domain are so diverse
    that no one machine can truly attack all of them.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*结尾注释.* 尽管高度多线程的架构很有前景，但硬件方面仍需大量工作（使这项技术在大宗硬件上可用，而不仅限于 Cray XMT），以及软件生态系统（构建新的编程
    API 以利用这种架构）。更进一步，这个领域的问题如此多样化，以至于没有一台机器能真正攻击所有问题。'
- en: 'Nevertheless, Feo remains optimistic: *if the problems are important enough,
    the machines will get built.*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，Feo 仍然持乐观态度：*如果问题足够重要，机器会被建造起来的*。
- en: '*Puzzle.* Even with the sorting modification, the implementation of maximum
    matching on the Cray XMT with preempting disabled still deadlocks on some large
    graphs. What graphs cause it to deadlock, and what is an easy way to fix the problem?
    (According to Feo, it took him three days to debug this deadlock! And no, turning
    on preemption is not the answer.) Solution will be posted on Friday.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*谜题.* 即使进行了排序修改，在禁用抢占的 Cray XMT 上实现最大匹配仍然会在一些大图上发生死锁。什么样的图会导致死锁，以及解决这个问题的简单方法是什么？（根据
    Feo 的说法，他花了三天时间调试这个死锁！而且，不，打开抢占不是答案。）解决方案将在星期五发布。'
- en: (There might be answers in the comment section, so avert your eyes if you don’t
    want to be spoiled.)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: （可能会有答案在评论部分，所以如果你不想被剧透，请避开目光。）
- en: '*Update.* I’ve removed the link to the CACM article; while I thought it was
    timely for Reddit readers, it implied that Varnish’s designer was a “young algorithms
    designer corrupted by cache locality”, which is completely false. The expression
    was meant to express Feo’s general dissatisfaction with the general preoccupation
    of the algorithms community towards the complicated cache-aware/oblivious algorithms,
    and not directed at anyone in particular.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*更新*。我已删除到CACM文章的链接；虽然我认为这对Reddit读者来说很及时，但它暗示Varnish的设计者是一个“被缓存局部性腐蚀的年轻算法设计师”，这完全是错误的。这种表达意在表达Feo对算法社区普遍对复杂的缓存感知/无感知算法的过分关注的一般不满，并非针对任何特定人物。'
- en: (THIS SPACE LEFT INTENTIONALLY BLANK)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: （此处故意留白）
