- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-07-01 18:17:04'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-07-01 18:17:04
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Seize the Means of Production (of APIs) : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 掌握生产资料（API的）：ezyang的博客
- en: 来源：[http://blog.ezyang.com/2016/09/seize-the-means-of-production-of-apis/](http://blog.ezyang.com/2016/09/seize-the-means-of-production-of-apis/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2016/09/seize-the-means-of-production-of-apis/](http://blog.ezyang.com/2016/09/seize-the-means-of-production-of-apis/)
- en: There's a shitty API and it's ruining your day. What do you do?
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个糟糕的API正在毁掉你的一天。你会怎么做？
- en: Without making a moral judgment, I want to remark that there is something very
    different about these two approaches. In Dropbox's case, Dropbox has no (direct)
    influence on what APIs Apple provides for its operating system. So it has no choice
    but to work *within the boundaries* of the existing API. (When Apple says jump,
    you say, "How high?") But in Adam's case, POSIX is implemented by an open source
    project Linux, and with some [good ideas](http://dune.scs.stanford.edu/), Adam
    could implement his new interface *on top* of Linux (avoiding the necessity of
    writing an operating system from scratch.)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在不进行道德判断的情况下，我想指出这两种方法之间确实存在很大的不同。在Dropbox的情况下，Dropbox无法（直接）影响苹果为其操作系统提供的API。因此，它别无选择，只能在现有API的*框架内*工作。（当苹果说跳时，你会问，“跳多高？”）但在亚当的情况下，POSIX由开源项目Linux实现，通过一些[好主意](http://dune.scs.stanford.edu/)，亚当可以在Linux的*顶部*实现他的新接口（避免从头开始编写操作系统的必要性）。
- en: 'APIs cross social boundaries: there is the proletariat that produces software
    using an API and the bourgeoisie that controls the API. When the Man(TM) is a
    big corporation, our only choices are to work around their shitty API or pay them
    sufficiently large amounts of money to fix their shitty APIs. But when the Man(TM)
    is an open source project, your choices change. True, you could work around their
    shitty API. Or you could **seize the means of production**, thereby enabling you
    to fix the shitty API.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: API跨越社会边界：有使用API生成软件的无产阶级，有控制API的资产阶级。当大公司成为“大人物”时，我们的选择只能是绕过他们糟糕的API或者付给他们足够多的钱来修复他们糟糕的API。但当“大人物”是一个开源项目时，你的选择就会改变。当然，你可以绕过他们糟糕的API。或者你可以**掌握生产资料**，从而使你能够修复这些糟糕的API。
- en: What do I mean by seize the means of production? Indeed, what *are* the means
    of production? An open source API does not live in a vacuum; it is made useful
    by the software that provides the API, the developers who contribute their time
    and expertise to maintain this expertise, even the publicity platform which convinces
    people to use an API. To seize the means of production is to gain control of all
    of these aspects. If you can convince the establishment that you are a core contributor
    of a piece of open source software, you in turn gain the ability to fix the shitty
    APIs. If you are unwilling or unable to do so, you might still fork, vendor or
    rewrite the project, but this is not so much seizing the means of production as
    it is recreating it from scratch. Another possibility is to build the abstraction
    you need on top of the existing APIs (as Adam did), though you are always at risk
    of the original project not being sensitive to your needs.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我所说的掌握生产资料是什么意思呢？确实，生产资料到底是什么？一个开源API并不孤立存在；它是由提供API的软件、为维护这些技术付出时间和专业知识的开发者、甚至是宣传平台共同使其有用。掌握生产资料就是要控制这些方面。如果你能说服体制认为你是开源软件的核心贡献者，那么你就能够修复这些糟糕的API。如果你不愿意或者不能这样做，你仍然可以分支、提供商或者重写项目，但这并不是掌握生产资料，而是从头开始重新创建它。另一种可能性是在现有API的基础上构建你需要的抽象（就像亚当所做的那样），尽管你始终面临原始项目不关注你需求的风险。
- en: Time and time again, I see people working with open source projects who refuse
    to seize the means of production. Instead, they are willing to write increasingly
    convoluted workarounds to solve problems, all to stay within the boundaries. You
    might say, "This is just Getting Things Done(TM)", but at some point you will
    have done more work working around the problem, than you would have spent just
    fixing the damn thing.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一次又一次地，我看到与开源项目合作的人们拒绝掌握生产资料。相反，他们愿意写越来越复杂的变通方法来解决问题，这都是为了保持在界限内。你可能会说，“这只是做事的方法(TM)”，但在某个时候，你解决问题所做的工作量可能比直接修复它还要多。
- en: So stop it. Stop putting up with shitty APIs. Stop working within the boundaries.
    Seize the means of production.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 所以停止吧。不要忍受糟糕的API。不要局限自己。掌握生产资料吧。
- en: '**Counterpoint.**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**反对意见。**'
- en: What is advocated for in this post is nothing less than infinite yak shaving;
    if you take the advice seriously you will proceed to never get anything done ever
    again.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这篇文章所倡导的绝非别的，仅仅是无休止的无意义琐事；如果您认真对待这些建议，您将永远无法完成任何事情。
- en: It may be true that in aggregate, the cost of working around a bad API exceeds
    the cost to fix it, but for any individual the cost is generally less. Thus, even
    if you could perfectly predict the cost of a workaround versus a proper fix, individual
    incentives would prevent the proper fix.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 虽然从总体上看，解决糟糕的 API 的成本可能超过了修复它的成本，但对于个体而言，成本通常较低。因此，即使您能够完美地预测解决方案与正确修复的成本，个体的激励也会阻止正确的修复。
- en: Users (including developers) don't know anything about the software they use
    and are ill-equipped to design better APIs, even if they know where it hurts.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户（包括开发人员）对他们使用的软件一无所知，并且缺乏设计更好的 API 的能力，即使他们知道痛点所在。
- en: Rarely can you unilaterally seize the means of production. In an ideal world,
    to become a core contributor, it would merely be sufficient to demonstrate sustained,
    useful contributions to a project. We all know the real world is more messy.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 很少能够单方面占领生产资料的控制权。在理想的世界中，要成为核心贡献者，仅仅展示对项目的持续、有用的贡献是足够的。我们都知道现实世界更加混乱。
