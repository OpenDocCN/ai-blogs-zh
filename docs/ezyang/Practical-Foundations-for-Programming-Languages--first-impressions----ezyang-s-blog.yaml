- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category:'
- en: 'date: 2024-07-01 18:17:29'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:29'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Practical Foundations for Programming Languages (first impressions) : ezyang’s
    blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编程语言实用基础（第一印象）：ezyang的博客
- en: 来源：[http://blog.ezyang.com/2012/08/practical-foundations-for-programming-languages/](http://blog.ezyang.com/2012/08/practical-foundations-for-programming-languages/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2012/08/practical-foundations-for-programming-languages/](http://blog.ezyang.com/2012/08/practical-foundations-for-programming-languages/)
- en: Practical Foundations for Programming Languages (first impressions)
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编程语言实用基础（第一印象）
- en: '[Robert Harper](http://www.cs.cmu.edu/~rwh/) has (somewhat) recently released
    a [pre-print of a book (PDF)](http://www.cs.cmu.edu/~rwh/plbook/book.pdf) that
    he has been working on, *Practical Foundations for Programming Languages*. I downloaded
    a copy when it initially came out, but I was guilty of putting off actually digging
    into the book’s 590-some pages. It was only until Harper successfully baited me
    with [one of his most recent blog posts](http://existentialtype.wordpress.com/2012/08/14/haskell-is-exceptionally-unsafe/)
    that I finally sat down and skimmed it a bit more thoroughly.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[罗伯特·哈珀](http://www.cs.cmu.edu/~rwh/)最近（有点）发布了一本[书的预印本（PDF）](http://www.cs.cmu.edu/~rwh/plbook/book.pdf)，他一直在努力完成，*编程语言实用基础*。我在初次发布时下载了一份副本，但一直拖延没有真正深入研究这本大约590页的书。直到哈珀最近在[他的一篇最新博文](http://existentialtype.wordpress.com/2012/08/14/haskell-is-exceptionally-unsafe/)中成功引诱我，我才最终坐下来更加仔细地浏览了一下。'
- en: The immediate temptation is to compare PFPL to Benjamin Pierce’s seminal *Types
    and Programming Languages.* At first glance, there would seem to be quite a bit
    of overlap, both in terms of content and in terms of presentation. Both books
    starting with a very simple programming language and successively add features
    to explain successively more complex topics in programming languages design. But
    PFPL consciously differs from TAPL in many aspects. For ideological reasons, Harper
    completely skips the untyped language, jumping straight to a typed language with
    variable let-bindings, in order to immediately introduce types, contexts and safety.
    This presentation is substantially more terse, and newcomers with no programming
    languages experience may perceive that PFPL feels more like a reference manual
    than a textbook—[one commenter](http://existentialtype.wordpress.com/2012/08/06/there-and-back-again/#comment-949)
    likened it to a math textbook. (Apropos of nothing, Harper’s introductory class
    [15-312 Principles of Programming Languages](http://www.cs.cmu.edu/~rwh/courses/ppl/schedule.html),
    which uses PFPL, *does* start with the untyped lambda calculus.)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 立即诱惑的是将PFPL与本杰明·皮尔斯的开创性著作*类型与编程语言*进行比较。乍一看，两者似乎在内容和展示方式上有相当多的重叠。两本书都从非常简单的编程语言开始，然后逐步添加功能，以解释编程语言设计中逐渐复杂的主题。但是PFPL在许多方面有意与TAPL不同。出于意识形态的原因，哈珀完全跳过了无类型语言，直接进入具有变量let绑定的类型语言，以立即引入类型、上下文和安全性。这种展示方式更为简洁，对于没有编程语言经验的新手来说，可能会感觉PFPL更像是一本参考手册而不是教科书—[一个评论者](http://existentialtype.wordpress.com/2012/08/06/there-and-back-again/#comment-949)将其比作数学教科书。（与此无关的是，哈珀的介绍性课程[15-312编程语言原理](http://www.cs.cmu.edu/~rwh/courses/ppl/schedule.html)，使用了PFPL，*确实*从无类型lambda演算开始。）
- en: Nevertheless, this terseness is an asset for PFPL; for one thing, it permits
    Harper to cover a lot of ground, covering topics that TAPL did not handle at all.
    Nor does the terseness mean that Harper has “left anything out”, each chapter
    is self-contained and comprehensive on the topics it chooses to cover. It also
    makes it a fun read for people like me who do have familiarity with the topics
    discussed but benefit from seeing and thinking about a different treatment.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，这种简洁性对于PFPL是一种资产；首先，它使哈珀能够涵盖大量内容，涉及TAPL根本不涉及的主题。简洁性也并不意味着哈珀“遗漏了任何内容”，每一章都是自包含的，并且在其选择涵盖的主题上全面而详尽。这也使得像我这样对讨论的主题有些熟悉但从不同视角看待和思考的人们来说，阅读起来颇具乐趣。
- en: 'Harper has been blogging about his book, and I think his blog posts are a good
    indication of what parts of the book are particularly worth looking at. Harper
    has taken the style of going “all intuition” in his blog posts, and relegating
    most of the formalism to his book. I think this is a shame, since the formalisms
    he defines are quite accessible and would make things a lot clearer for many in
    his audience (judging from the comments section, at least!) Here are some of the
    pairings:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Harper一直在博客中写他的书，我认为他的博客文章很好地指示了书中哪些部分特别值得关注。Harper在他的博客文章中采用了“全凭直觉”的风格，并将大部分形式主义留给了他的书。我认为这很遗憾，因为他定义的形式主义是相当容易理解的，会让他的许多读者（至少从评论部分来看如此！）更加清楚。以下是一些配对：
- en: '[Dynamic Languages are Static Languages](http://existentialtype.wordpress.com/2011/03/19/dynamic-languages-are-static-languages/)
    is a companion to Chapter 18, “Dynamic Typing”. There, he develops Dynamic PCF
    (essentially the core of Lisp) and shows how the usual concrete syntax masks the
    tagging that occurs, and the usual dynamics masks the wasteful and repetitive
    checks that are endemic to dynamically typed languages. There is always a temptation,
    in these holy wars, to expand the scope of the argument, but if you accept Dynamic
    PCF as a valid way of framing one aspect of the debate, it is *extremely* precise.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[动态语言是静态语言](http://existentialtype.wordpress.com/2011/03/19/dynamic-languages-are-static-languages/)
    是第18章“动态类型”的伴侣。在那里，他开发了动态PCF（本质上是Lisp的核心），并展示了通常的具体语法掩盖了发生的标记，而通常的动态掩盖了在动态类型语言中普遍存在的冗余检查。在这些圣战中，总是有一种诱惑，试图扩展论点的范围，但如果你接受动态PCF作为表述辩论一个方面的有效方式，它是*极其*精确的。'
- en: '[Referential transparency](http://existentialtype.wordpress.com/2012/02/09/referential-transparency/)
    is a companion to Chapter 32, “Symbols”. Symbols are a little weird, because most
    languages don’t even have a way of even *acknowledging* this concept exists. You
    might think of it as an identifier for a “generalized mutable cell” apart from
    how you actually access it, but really you should just read the formal treatment,
    since it is very simple.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[引用透明性](http://existentialtype.wordpress.com/2012/02/09/referential-transparency/)
    是第32章“符号”的伴侣。符号有些奇怪，因为大多数语言甚至没有一种方式来*承认*这个概念的存在。你可以将它视为一个“广义可变单元”的标识符，除非你实际访问它，但实际上你应该只读形式化处理，因为它非常简单。'
- en: '[Words matter](http://existentialtype.wordpress.com/2012/02/01/words-matter/)
    is a companion to Chapter 36, “Assignable References”. It’s a simple terminology
    split, motivated by how Harper defines the term “variable”, way in Chapter 1 of
    his book.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[词语的重要性](http://existentialtype.wordpress.com/2012/02/01/words-matter/) 是第36章“可赋值引用”的伴侣。这是一个简单的术语分割，受Harper在他的书第1章中对术语“变量”的定义所启发。'
- en: '[Haskell is Exceptionally Unsafe](http://existentialtype.wordpress.com/2012/08/14/haskell-is-exceptionally-unsafe/)
    is a companion to Chapter 34, “Dynamic Classification”. It argues that it is important
    to be able to generate exception classes at *runtime* (the term “class” here has
    a very precise meaning, namely, it is an index of a finite sum, in this case the
    exception type; this is discussed in Chapter 12). At least in the Haskell community,
    this is not a particularly common usage of the term “dynamic” (though I agree
    with Harper that it is a correct usage), and PFPL spells exactly what it means,
    no more, no less.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Haskell is Exceptionally Unsafe](http://existentialtype.wordpress.com/2012/08/14/haskell-is-exceptionally-unsafe/)
    是第34章“动态分类”的伴侣。文章认为能够在*运行时*生成异常类别非常重要（这里的“类别”具有非常精确的含义，即它是有限求和的索引，本例中为异常类型；这在第12章中有详细讨论）。至少在Haskell社区中，这并不是一个特别常见的“动态”用法（尽管我同意Harper认为这是正确的用法），而PFPL确切地解释了它的含义，没有多余也没有少数。'
- en: All-in-all, *Practical Foundations for Programming Languages* is well worth
    checking out. It is a not too widely kept secret that no one really reads textbooks
    from tip to tail, but if you found yourself reading one of Harper’s blog posts
    and being puzzled, do give the companion chapter a chance. Even with just the
    small bits of the book I have read, PFPL has taught me new things and clarified
    my thinking.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，*编程语言实用基础*非常值得一读。人们很少真正从头到尾地阅读教科书，但如果你发现自己阅读了Harper的博客文章并感到困惑，请给配套的章节一个机会。即使是我读过的书的一小部分，PFPL也教会了我新的东西，并澄清了我的思绪。
