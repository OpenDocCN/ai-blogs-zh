["```\nclass Applicative f where\n  pure :: a -> f a\n  (<*>) :: f (a -> b) -> f a -> f b\n\n```", "```\n    [identity] pure id <*> v = v\n [composition] pure (.) <*> u <*> v <*> w = u <*> (v <*> w)\n[homomorphism] pure f <*> pure x = pure (f x)\n [interchange] u <*> pure y = pure ($ y) <*> u\n\n```", "```\nclass Functor f => Monoidal f where\n  unit :: f ()\n  (**) :: f a -> f b -> f (a,b)\n\n```", "```\n    [naturality] fmap (f *** g) (u ** v) = fmap f u ** fmap g v\n [left identity] unit ** v ≅ v\n[right identity] u ** unit ≅ u\n [associativity] u ** (v ** w) ≅ (u ** v) ** w\n\n```", "```\n[commutativity] u ** v ≅ v ** u\n\n```"]