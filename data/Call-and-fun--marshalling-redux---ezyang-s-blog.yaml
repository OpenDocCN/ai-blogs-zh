- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:18:14'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:18:14'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Call and fun: marshalling redux : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Call and fun: marshalling redux : ezyang’s blog'
- en: 来源：[http://blog.ezyang.com/2010/06/call-and-fun-marshalling-redux/](http://blog.ezyang.com/2010/06/call-and-fun-marshalling-redux/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/06/call-and-fun-marshalling-redux/](http://blog.ezyang.com/2010/06/call-and-fun-marshalling-redux/)
- en: 'This part six of a [six part introduction to c2hs](http://blog.ezyang.com/2010/06/the-haskell-preprocessor-hierarchy/).
    We finally talk about what ostensibly is the point of c2hs: calling C functions
    from Haskell. c2hs, due to its knowledge of the C headers, can already do the
    work for generating FFI imports. The `call` hook simply tells c2hs to generate
    the FFI import, while the `fun` hook generates another Haskell function which
    performs marshalling.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 [c2hs 的六部分介绍之一](http://blog.ezyang.com/2010/06/the-haskell-preprocessor-hierarchy/)。最终我们谈论的是
    c2hs 的主要用途：从 Haskell 调用 C 函数。由于 c2hs 对 C 头文件有了解，因此可以自动生成 FFI 导入的工作。`call` 钩子只是告诉
    c2hs 生成 FFI 导入，而 `fun` 钩子则生成另一个执行 marshalling 的 Haskell 函数。
- en: '*Call.* The format of call is quite simple, because like `get` and `set`, it
    is meant to be interleaved with other Haskell code. If I would like to invoke
    the `readline` function from `readline/readline.h`, a `{#call readline #}` would
    suffice; c2hs will then generate the FFI import with the correct signature and
    transform the call directive into the name of the FFI import.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*Call.* 调用的格式非常简单，因为像 `get` 和 `set` 一样，它意味着可以与其他 Haskell 代码交错使用。如果我想从 `readline/readline.h`
    调用 `readline` 函数，只需 `{#call readline #}` 即可；c2hs 将会生成正确签名的 FFI 导入，并将调用指令转换为 FFI
    导入的名称。'
- en: 'Of course, `readline` doesn''t call back to Haskell, so we could add `unsafe`:
    `{#call unsafe readline #}`. And if you''re sure that the C function has no side-effects,
    you can add `pure`: `{#call pure unsafe sin #}`. If you have multiple calls to
    the same function using the same FFI declaration, their flags need to be consistent.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '当然，`readline` 不会回调到 Haskell，所以我们可以添加 `unsafe`：`{#call unsafe readline #}`。如果你确信
    C 函数没有副作用，可以添加 `pure`：`{#call pure unsafe sin #}`。如果多次调用同一个函数并使用相同的 FFI 声明，它们的标志需要保持一致。'
- en: 'By default, the `cid` will be use precisely to determine the name of the FFI
    import; if it is not a valid Haskell identifier for a function (i.e. is capitalized)
    or the C function name would conflict with another, you''ll need to specify what
    the FFI will import as. Common conventions include prefixing the function with
    `c_`, or you can use `^` for c2hs''s capitalization conversion. `{#call FooBar_Baz
    as ^ #}` will convert to `fooBarBaz` (with an appropriate FFI declaration).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '默认情况下，`cid` 将精确用于确定 FFI 导入的名称；如果它不是函数的有效 Haskell 标识符（即大写），或者 C 函数名称会与其他名称冲突，则需要指定
    FFI 将导入为什么。常见的约定包括给函数添加前缀 `c_`，或者使用 `^` 来进行 c2hs 的大写转换。`{#call FooBar_Baz as ^
    #}` 将转换为 `fooBarBaz`（并带有适当的 FFI 声明）。'
- en: '*Fun.* Because the signature of the FFI declarations will all be C types, and
    Haskell programs tend not to use those, and because it is a frequent operation
    to convert to and from the C types, there’s a little bit of automation to help
    you out with the `fun` directive. Unlike `call`, it''s intended to standalone
    as a definition, and not be embedded in code. Note that you *don’t* have to use
    `fun`; gtk2hs doesn''t use it, for example. However, many people find it useful.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*Fun.* 因为 FFI 声明的签名都是 C 类型，而 Haskell 程序往往不使用这些类型，并且因为频繁进行 C 类型的转换，有一点自动化来帮助你处理
    `fun` 指令。与 `call` 不同，它是作为一个定义独立存在的，而不是嵌入在代码中的。请注意，*不* 必须使用 `fun`；例如 gtk2hs 就没有使用它，但很多人发现它很有用。'
- en: 'A `fun` starts off much like a `call`: you first specify if it''s pure and/or
    unsafe, specify the C identifier, and the specify the Haskell name. Since the
    majority of your code will refer to the Haskell name, it''s usually best to specify
    `^` for a consistent naming convention.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`fun` 的开始与 `call` 类似：首先指定它是纯的和/或不安全的，指定 C 标识符，然后指定 Haskell 名称。由于大多数代码将引用 Haskell
    名称，通常最好指定 `^` 来保持一致的命名约定。'
- en: From here, we need to specify *what the end type of the desired Haskell function
    is*, and *how to go from those types to the C types (the marshalling functions).*
    The c2hs tutorial has a bit to say on this topic, so we'll take a more example
    oriented approach.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们需要指定 *所需 Haskell 函数的最终类型*，以及 *如何从这些类型转换为 C 类型（即 marshalling 函数）*。c2hs
    教程在这个主题上有一些内容，所以我们将采取更多的示例导向的方法。
- en: '*Primitive C types.* The integral, floating point and boolean (usually an integer
    under the hood) primitive C types are so prevalent that c2hs will automatically
    use the `cIntConv`, `cFloatConv` and `cFromBool`/`cToBool` functions to marshal
    them if none are specified. These functions work in both directions. This directive:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*基本C类型。* 整数、浮点数和布尔（通常在幕后是整数）基本的C类型非常普遍，如果没有指定，c2hs将自动使用`cIntConv`、`cFloatConv`和`cFromBool`/`cToBool`函数进行编组。这些函数可以双向工作。这个指令：'
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'generates:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 生成：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can see that a bunch of (ugly) generated code is added to run the marshalling
    function on the argument, pass it to the FFI, and then another marshalling function
    is called on the result. Idiomatic Haskell might look like:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，会添加一堆（丑陋的）生成代码以在参数上运行编组函数，将其传递给FFI，然后在结果上调用另一个编组函数。惯用的Haskell可能是这样的：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you’d like to use a different name for the marshalling function, you can
    specify it before the type of an argument (an “in” marshaller), or after the result
    (an “out” marshaller), as such:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要为编组函数使用不同的名称，可以在参数类型之前指定它（“in”编组器），或者在结果之后指定它（“out”编组器），如下所示：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: and you can just replace the relevant function calls in the generated Haskell.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 而您只需在生成的Haskell中替换相关函数调用。
- en: '*String arguments.* Strings also hold a special place in c2hs''s heart; null-terminated
    and strings needing explicit length information specified are handled with ease.
    Consider these two function prototypes:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*String参数。* 字符串也在c2hs的心中占有特殊地位；处理以null结尾的字符串和需要显式长度信息的字符串都很容易。考虑这两个函数原型：'
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can write the following c2hs directives:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以编写以下c2hs指令：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: and they will be automatically be marshalled with `withCString*` and `withCStringLen*`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 并且它们将自动使用`withCString*`和`withCStringLen*`进行编组。
- en: There are several interesting things happening here. We represent a void return
    type using `()` (the empty type in Haskell). Additionally, the String parameter
    in `print_explicit_str` has an ampersand affixed to it; this means that the marshaller
    should produce a tuple of arguments which will be passed to the function as two
    separate arguments. Sure enough, `withCStringLen` results in a `(Ptr CChar, Int)`,
    and c2hs use a slight variant `withCStringLenIntConv` which converts the `Int`
    into a `CInt`. (Note that if you need more complicated multi-argument ordering,
    `fun` is not for you.)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生了几件有趣的事情。我们使用`()`（Haskell中的空类型）来表示空返回类型。此外，`print_explicit_str`中的String参数有一个附加的和号；这意味着编组器应该产生一个参数元组，这些参数将作为两个单独的参数传递给函数。确实，`withCStringLen`的结果是`(Ptr
    CChar, Int)`，而c2hs使用略有不同的变体`withCStringLenIntConv`，它将`Int`转换为`CInt`。（请注意，如果您需要更复杂的多参数排序，`fun`并不适合您。）
- en: 'But perhaps the most interesting thing is the `*` affixed to the input marshaller,
    which has two effects. The first is to indicate that the input marshalling function
    is the IO monad, for example, the type of `withCString` is `String  -> (CString 
    -> IO  a) -> IO  a`. But furthermore, it indicates a function that follows the
    bracketed resource pattern “with”. We did not use``String -> CString``, since
    this could result in a memory leak if we don''t free the `CString` later! The
    code generated is then:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 但也许最有趣的是附加到输入编组器上的`*`，它有两个效果。首先，它表明输入编组函数是IO单子，例如，`withCString`的类型是`String ->
    (CString -> IO a) -> IO a`。但更重要的是，它指示了一个遵循括号资源模式“with”的函数。我们没有使用`String -> CString`，因为如果我们不稍后释放`CString`，这可能导致内存泄漏！然后生成的代码是：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: which makes use of hanging lambdas to keep the layout consistent.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用悬挂lambda保持布局一致。
- en: '*Marshalling struct arguments.* While the c2hs documentation claims that there
    is a default marshaller if you have the following situation in C:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*编组结构参数。* 尽管c2hs文档声称如果您在C中有以下情况，那么会有一个默认的编组器：'
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'and in Haskell:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 并在Haskell中：
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'So you should be able to write:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您应该能够写出：
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Where, the input marshaller is `with*`. Unfortunately, I could never get that
    to work; furthermore, c2hs thinks that `with` is a reserved word, so you'll need
    to rename it in order to use it.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，输入编组器是`with*`。不幸的是，我从未能让它起作用；此外，c2hs认为`with`是一个保留字，所以您需要重命名它才能使用它。
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*Opaque pointer arguments.* When you don''t want to perform any tomfoolery
    on a pointer when in Haskell, you can simply specify that the pointer is the argument
    and use `id` as the marshaller. In the previous example, `copy_struct` could have
    alternately been defined as:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*不透明指针参数。* 当您不想在Haskell中对指针执行任何花哨的操作时，可以简单地指定指针是参数并使用`id`作为编组器。在前面的例子中，`copy_struct`也可以另外定义为：'
- en: '[PRE11]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: A convention is to omit `Ptr` from the name of the pointer type if you are only
    dealing with opaque pointers.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一个约定是，如果只处理不透明指针，可以省略指针类型的名称中的 `Ptr`。
- en: '*Out marshalling input arguments.* A frequent pattern in C code is using pointer
    arguments to permit a function to return multiple results. For example, `strtol`
    has the following signature:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*输出编组器的输入参数。* C 代码中的一个常见模式是使用指针参数允许函数返回多个结果。例如，`strtol` 的签名如下：'
- en: '[PRE12]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`endptr` points to a pointer which will get set to the pointer at the end of
    the portion of the string in `nptr` we parsed. If we don''t care about it, we
    can set `endptr = NULL`.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`endptr` 指向一个指针，该指针将设置为我们解析的 `nptr` 字符串部分的结尾处的指针。如果我们不关心它，可以将 `endptr = NULL`
    设置为 `NULL`。'
- en: Obviously, we don't want our Haskell function to do this, and we have much easier
    ways of returning multiple results with tuples, so c2hs has a notion of an outmarshaller
    for an input argument. It also has the notion of a “fake” input argument which
    the user doesn't have to pass, in case our function is completely responsible
    for allocating the memory the pointer we pass to the function points to.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们不希望我们的 Haskell 函数这样做，并且我们有更简单的方法使用元组返回多个结果，所以 c2hs 有一个关于输入参数的输出编组器的概念。它还有一个“虚假”输入参数的概念，用户不必传递，以防我们的函数完全负责分配指向函数的指针的内存。
- en: 'Here''s a first attempt at writing a `fun` hook for `strtol`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是编写 `strtol` 的 `fun` 钩子的第一个尝试：
- en: '[PRE13]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We've eschewed the default string marshalling because otherwise `endptr` won't
    give us very interesting information. This version is a carbon copy of the original.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们避开了默认的字符串编组，因为否则 `endptr` 不会给我们非常有趣的信息。这个版本是原始内容的简单复制。
- en: 'To improve this, we consider `Ptr (Ptr CChar)` to be a way of returning `Ptr
    CChar`. So, after the function is run, we should `peek` (dereference the pointer)
    and return the result:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了改进这一点，我们认为 `Ptr (Ptr CChar)` 是返回 `Ptr CChar` 的一种方式。因此，在函数运行后，我们应该 `peek`（解引用指针）并返回结果：
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`peek` is in IO, so it needs the asterisk, but for out marshallers it doesn''t
    result in any fancy bracketing usage. Now, the Haskell return type of this function
    is not `Int`; it''s `(Int, Ptr CChar)`.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`peek` 在 IO 中，所以它需要星号，但对于我们的编组器来说，它并不会导致任何复杂的括号使用。现在，这个函数的 Haskell 返回类型不是 `Int`；它是
    `(Int, Ptr CChar)`。'
- en: '[PRE15]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Since we''re overwriting the original contents of the pointer, it doesn''t
    make much since to force the user of our function to pass it to us. We can suffix
    our input marshaller with `-` to indicate that it''s not a real Haskell argument,
    and use `alloca` instead:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们要覆盖指针的原始内容，强制用户向我们传递它并没有多大意义。我们可以在我们的输入编组器后缀上加`-`，以表明它不是真正的 Haskell 参数，并改用`alloca`代替：
- en: '[PRE16]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Notice that we got rid of the `*`; it''s one or the other. Now we have a usable
    function:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们去掉了 `*`；这是一种或另一种方式。现在我们有一个可用的函数：
- en: '[PRE17]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'or, in idiomatic Haskell:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，在习惯用法的 Haskell 中：
- en: '[PRE18]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '*Error handling.* There is one last piece of functionality that we haven''t
    discussed, which is the `-` flag on an out marshaller, which causes Haskell to
    ignore the result. By itself it''s not ordinarily useful, but when combined with
    `*` (which indicates the action is in IO), it can be used to attach functions
    that check for error conditions and throw an exception if that is the case. Recall
    that the default output marshaller for `()` is `void-`, ignoring the output result
    of a function.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*错误处理。* 还有一个功能片段我们尚未讨论，即一个输出编组器上的 `-` 标志，导致 Haskell 忽略结果。单独使用时通常没有用，但与 `*`（表示操作在
    IO 中）结合使用时，可用于附加检查错误条件并在情况成立时抛出异常的函数。请记住，`()` 的默认输出编组器是 `void-`，忽略函数的输出结果。'
