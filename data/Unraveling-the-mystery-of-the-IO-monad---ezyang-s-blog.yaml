- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:52'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:52'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Unraveling the mystery of the IO monad : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 揭示 IO 单子的奥秘：ezyang 的博客
- en: 来源：[http://blog.ezyang.com/2011/05/unraveling-the-mystery-of-the-io-monad/](http://blog.ezyang.com/2011/05/unraveling-the-mystery-of-the-io-monad/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2011/05/unraveling-the-mystery-of-the-io-monad/](http://blog.ezyang.com/2011/05/unraveling-the-mystery-of-the-io-monad/)
- en: 'When we teach beginners about Haskell, one of the things we handwave away is
    how the IO monad works. Yes, it’s a monad, and yes, it does IO, but it’s not something
    you can implement in Haskell itself, giving it a somewhat magical quality. In
    today’s post, I’d like to unravel the mystery of the IO monad by describing how
    GHC implements the IO monad internally in terms of primitive operations and the
    real world token. After reading this post, you should be able to understand the
    [resolution of this ticket](http://hackage.haskell.org/trac/ghc/ticket/5129) as
    well as the Core output of this Hello World! program:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们向初学者教授 Haskell 时，我们需要讨论的一件事是 IO 单子的工作原理。是的，它是一个单子，是的，它执行 IO 操作，但它不是你可以在 Haskell
    中实现的东西，这使得它具有某种神奇的品质。在今天的帖子中，我想通过描述 GHC 如何在基本操作和真实世界令牌的术语中实现 IO 单子来揭示 IO 单子的奥秘。阅读完本文后，你应该能够理解这个票据的解决方案以及这个
    Hello World! 程序的 Core 输出：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Nota bene: **This is not a monad tutorial**. This post assumes the reader knows
    what monads are! However, the first section reviews a critical concept of strictness
    as applied to monads, because it is critical to the correct functioning of the
    IO monad.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 'Nota bene: **这不是单子教程**。本文假设读者知道单子是什么！然而，第一部分回顾了严格性作为单子应用的一个关键概念，因为它对 IO 单子的正确功能至关重要。'
- en: The lazy and strict State monad
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 惰性和严格的 State 单子
- en: 'As a prelude to the IO monad, we will briefly review the State monad, which
    forms the operational basis for the IO monad (the IO monad is implemented as if
    it were a strict State monad with a *special* form of state, though there are
    some important differences—that’s the magic of it.) If you feel comfortable with
    the difference between the lazy and strict state monad, you can skip this section.
    Otherwise, read on. The data type constructor of the State monad is as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 IO 单子的序曲，我们将简要回顾 State 单子，它构成了 IO 单子的操作基础（IO 单子被实现为一个带有特殊状态的严格 State 单子，尽管有一些重要的区别——这就是其魔力所在）。如果你对惰性和严格状态单子之间的区别感到舒适，可以跳过本节。否则，请继续阅读。State
    单子的数据类型构造器如下：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'A running a computation in the state monad involves giving it some incoming
    state, and retrieving from it the resulting state and the actual value of the
    computation. The monadic structure involves *threading* the state through the
    various computations. For example, this snippet of code in the state monad:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在状态单子中运行计算涉及给它一些输入状态，并从中检索出结果状态和计算的实际值。单子结构涉及通过各种计算来*穿越*状态。例如，状态单子中的这段代码片段：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'could be rewritten (with the newtype constructor removed) as:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 可以重写（去掉 newtype 构造器后）如下：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, a rather interesting experiment I would like to pose for the reader is
    this: suppose that `doSomething` and `doSomethingElse` were traced: that is, when
    evaluated, they outputted a trace message. That is:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我想向读者提出一个相当有趣的实验：假设 `doSomething` 和 `doSomethingElse` 被跟踪：即，在评估时，它们输出一个跟踪消息。也就是说：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Is there ever a situation in which the trace for `doSomethingElse` would fire
    before `doSomething`, in the case that we forced the result of the elements of
    this do block? In a strict language, the answer would obviously be no; you have
    to do each step of the stateful computation in order. But Haskell is lazy, and
    in another situation it’s conceivable that the result of `doSomethingElse` might
    be requested before `doSomething` is. Indeed, here is such an example of some
    code:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `doSomething` 的结果被强制执行之后，`doSomethingElse` 的跟踪是否会在其之前触发？在严格语言中，答案显然是否定的；你必须按顺序执行每个状态计算步骤。但
    Haskell 是惰性的，在另一种情况下，`doSomethingElse` 的结果可能在 `doSomething` 之前被请求。确实，这里有一个这样的代码示例：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: What has happened is that we are lazy in the state value, so when we demanded
    the value of `s''`, we forced `doSomethingElse` and were presented with an indirection
    to `s'`, which then caused us to force `doSomething`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 发生的情况是，我们对状态值是惰性的，因此当我们要求 `s''` 的值时，我们强制执行了 `doSomethingElse` 并得到了一个指向 `s'`
    的间接引用，然后导致我们强制执行了 `doSomething`。
- en: 'Suppose we actually did want `doSomething` to always execute before `doSomethingElse`.
    In this case, we can fix things up by making our state strict:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们确实希望 `doSomething` 总是在 `doSomethingElse` 之前执行。在这种情况下，我们可以通过使我们的状态严格化来解决问题：
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This subtle transformation from let (which is lazy) to case (which is strict)
    lets us now preserve ordering. In fact, it will turn out, we won’t be given a
    choice in the matter: due to how primitives work out we have to do things this
    way. Keep your eye on the case: it will show up again when we start looking at
    Core.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这种从惰性 `let` 到严格 `case` 的微妙转换让我们现在可以保持顺序。事实上，事情会变得明朗：由于原语的工作方式，我们必须按照这种方式来做事情。留意
    `case`：当我们开始查看 Core 时，它会再次出现。
- en: '*Bonus.* Interestingly enough, if you use irrefutable patterns, the case-code
    is equivalent to the original let-code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*额外内容*。有趣的是，如果你使用不可否认的模式，`case` 代码等同于原始的 `let` 代码：'
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Primitives
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 原语
- en: 'The next part of our story are the primitive types and functions provided by
    GHC. These are the mechanism by which GHC exports types and functionality that
    would not be normally implementable in Haskell: for example, unboxed types, adding
    together two 32-bit integers, or doing an IO action (mostly, writing bits to memory
    locations). They’re very GHC specific, and normal Haskell users never see them.
    In fact, they’re so special you need to enable a language extension to use them
    (the `MagicHash`)! The IO type is constructed with these primitives in `GHC.Types`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们故事的下一部分是 GHC 提供的原始类型和函数。这些机制是 GHC 导出类型和功能的方式，这些功能通常在 Haskell 中是无法实现的：例如，非装箱类型、两个
    32 位整数相加，或执行 IO 操作（主要是将位写入内存位置）。它们非常特定于 GHC，普通的 Haskell 用户从不见它们。事实上，它们如此特殊，你需要启用一个语言扩展来使用它们（`MagicHash`）！IO
    类型是用 `GHC.Types` 中的这些原语构建的：
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In order to understand the `IO` type, we will need to learn about a few of these
    primitives. But it should be very clear that this looks a lot like the state monad...
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解 `IO` 类型，我们将需要了解这些原语中的一些。但很明显，这看起来非常像状态单子...
- en: 'The first primitive is the *unboxed tuple*, seen in code as `(# x, y #)`. Unboxed
    tuples are syntax for a “multiple return” calling convention; they’re not actually
    real tuples and can’t be put in variables as such. We’re going to use unboxed
    tuples in place of the tuples we saw in `runState`, because it would be pretty
    terrible if we had to do heap allocation every time we performed an IO action.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '第一个原语是 *非装箱元组*，在代码中看到的形式为 `(# x, y #)`。非装箱元组是一种“多返回”调用约定的语法；它们实际上并不是真正的元组，不能像普通元组那样放在变量中。我们将使用非装箱元组来代替我们在
    `runState` 中看到的元组，因为如果每次执行 IO 操作都要进行堆分配，那将是非常糟糕的。'
- en: 'The next primitive is `State# RealWorld`, which will correspond to the `s`
    parameter of our state monad. Actually, it’s two primitives, the type constructor
    `State#`, and the magic type `RealWorld` (which doesn’t have a `#` suffix, fascinatingly
    enough.) The reason why this is divided into a type constructor and a type parameter
    is because the `ST` monad also reuses this framework—but that’s a matter for another
    blog post. You can treat `State# RealWorld` as a type that represents a very magical
    value: the value of the entire real world. When you ran a state monad, you could
    initialize the state with any value you cooked up, but only the `main` function
    receives a real world, and it then gets threaded along any IO code you may end
    up having executing.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个原语是 `State# RealWorld`，它将对应于我们状态单子的 `s` 参数。实际上，这是两个原语，类型构造子 `State#` 和魔术类型
    `RealWorld`（有趣的是，它没有 `#` 后缀）。之所以将其分为类型构造子和类型参数，是因为 `ST` 单子也重用了这个框架，但这是另一篇博文的事情。你可以将
    `State# RealWorld` 视为表示非常神奇值的类型：整个真实世界的值。当你运行一个状态单子时，你可以用任何你准备好的值初始化状态，但只有 `main`
    函数接收到真实世界，并且它随后会在你可能要执行的任何 IO 代码中进行线程处理。
- en: 'One question you may ask is, “What about `unsafePerformIO`?” In particular,
    since it may show up in any pure computation, where the real world may not necessarily
    available, how can we fake up a copy of the real world to do the equivalent of
    a nested `runState`? In these cases, we have one final primitive, `realWorld#
    :: State# RealWorld`, which allows you to grab a reference to the real world wherever
    you may be. But since this is not hooked up to `main`, you get absolutely *no*
    ordering guarantees.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '你可能会问一个问题：“`unsafePerformIO` 怎么办？”特别是，由于它可能出现在任何纯计算中，而真实世界可能不一定可用，我们如何虚拟出真实世界的副本来执行等同于嵌套
    `runState` 的操作？在这些情况下，我们有一个最终的原语，`realWorld# :: State# RealWorld`，它允许您在任何地方获取对真实世界的引用。但由于这不是与
    `main` 钩连的，你绝对不会得到任何顺序保证。'
- en: Hello World
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你好，世界
- en: 'Let’s return to the Hello World program that I promised to explain:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到我答应要解释的Hello World程序：
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When we compile this, we get some core that looks like this (certain bits,
    most notably the casts (which, while a fascinating demonstration of how newtypes
    work, have no runtime effect), pruned for your viewing pleasure):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们编译这个程序时，我们会得到一些核心代码，看起来像这样（某些部分，尤其是强制转换（虽然这是展示新类型如何工作的迷人演示，但在运行时没有影响），已经为了您的观看愉快修剪）：
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The important bit is `Main.main1`. Reformatted and renamed, it looks just like
    our desugared state monad:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的部分是`Main.main1`。重新格式化并重命名后，它看起来就像我们的去糖化状态单子：
- en: '[PRE11]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The monads are all gone, and `hPutStr1 stdout main3 s`, while ostensibly always
    returning a value of type `(# State# RealWorld, () #)`, has side-effects. The
    repeated case-expressions, however, ensure our optimizer doesn’t reorder the IO
    instructions (since that would have a very observable effect!)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '单子都消失了，而`hPutStr1 stdout main3 s`，虽然表面上总是返回类型为`(# State# RealWorld, () #)`的值，但却具有副作用。然而，重复的case表达式确保我们的优化器不会重新排列IO指令（因为那会有非常明显的效果！）'
- en: 'For the curious, here are some other notable bits about the core output:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些好奇的人，这里有一些关于核心输出的其他显著部分：
- en: 'Our `:main` function (with a colon in front) doesn’t actually go straight to
    our code: it invokes a wrapper function `GHC.TopHandler.runMainIO` which does
    some initialization work like installing the top-level interrupt handler.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的`:main`函数（前面带有冒号）实际上并没有直接进入我们的代码：它调用了一个包装函数`GHC.TopHandler.runMainIO`，该函数做一些初始化工作，比如安装顶级中断处理程序。
- en: '`unpackCString#` has the type `Addr# -> [Char]`, so what it does it transforms
    a null-terminated C string into a traditional Haskell string. This is because
    we store strings as null-terminated C strings whenever possible. If a null byte
    or other nasty binary is embedded, we would use `unpackCStringUtf8#` instead.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unpackCString#`的类型是`Addr# -> [Char]`，它的作用是将以空字符结尾的C字符串转换为传统的Haskell字符串。这是因为我们尽可能地将字符串存储为以空字符结尾的C字符串。如果嵌入了空字节或其他恶意的二进制数据，则会使用`unpackCStringUtf8#`。'
- en: '`putStr` and `putStrLn` are nowhere in sight. This is because I compiled with
    `-O`, so these function calls got inlined.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`putStr`和`putStrLn`不见了。这是因为我使用了`-O`进行了编译，所以这些函数调用被内联了。'
- en: The importance of being ordered
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 有序的重要性
- en: 'To emphasize how important ordering is, consider what happens when you mix
    up `seq`, which is traditionally used with pure code and doesn’t give any order
    constraints, and IO, for which ordering is very important. That is, consider [Bug
    5129](http://hackage.haskell.org/trac/ghc/ticket/5129). Simon Peyton Jones gives
    a great explanation, so I’m just going to highlight how seductive (and wrong)
    code that isn’t ordered properly is. The code in question is ``x `seq` return
    ()``. What does this compile to? The following core:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了强调顺序的重要性，请考虑当你混淆`seq`（传统上用于纯代码，不提供任何顺序约束）和对于IO非常重要的IO时会发生什么。也就是说，请考虑[Bug 5129](http://hackage.haskell.org/trac/ghc/ticket/5129)。Simon
    Peyton Jones给出了一个很好的解释，所以我只想强调那些没有正确排序的代码是多么诱人（以及错误）。有问题的代码是``x `seq` return ()``。这会编译成以下核心代码：
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Notice that the `seq` compiles into a `case` statement (since case statements
    in Core are strict), and also notice that there is no involvement with the `s`
    parameter in this statement. Thus, if this snippet is included in a larger fragment,
    these statements may get optimized around. And in fact, this is exactly what happens
    in some cases, as Simon describes. Moral of the story? Don’t write ``x `seq` return
    ()`` (indeed, I think there are some instances of this idiom in some of the base
    libraries that need to get fixed.) The new world order is a new primop:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`seq`编译成一个`case`语句（因为Core中的case语句是严格的），并且还请注意，此语句中的`s`参数没有涉及。因此，如果此片段包含在较大的片段中，则这些语句可能会被优化。实际上，在某些情况下确实会发生这种情况，正如Simon所描述的那样。故事的寓意？不要写``x
    `seq` return ()``（确实，我认为某些基础库中有这种习惯用法的实例需要修复）。新世界秩序是一个新的primop：
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Much better!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 更好！
- en: This also demonstrates why `seq x y` gives absolutely no guarantees about whether
    or not `x` or `y` will be evaluated first. The optimizer may notice that `y` always
    gives an exception, and since imprecise exceptions don’t care which exception
    is thrown, it may just throw out any reference to `x`. Egads!
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这也说明了为什么`seq x y`绝对不保证`x`或`y`哪个先评估。优化器可能注意到`y`总是引发异常，而由于不精确的异常不关心抛出哪个异常，它可能会丢弃对`x`的任何引用。天哪！
- en: Further reading
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: Most of the code that defines IO lives in the `GHC` supermodule in `base`, though
    the actual IO type is in `ghc-prim`. `GHC.Base` and `GHC.IO` make for particularly
    good reading.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大部分定义 IO 的代码位于 `base` 中的 `GHC` 超模块中，虽然实际的 IO 类型在 `ghc-prim` 中。`GHC.Base` 和 `GHC.IO`
    特别适合阅读。
- en: Primops are described on the [GHC Trac](http://hackage.haskell.org/trac/ghc/wiki/Commentary/PrimOps).
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Primops 的描述在 [GHC Trac](http://hackage.haskell.org/trac/ghc/wiki/Commentary/PrimOps)
    上详细说明。
- en: 'The ST monad is also implemented in essentially the exact same way: the unsafe
    coercion functions just do some type shuffling, and don’t actually change anything.
    You can read more about it in `GHC.ST`.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ST 单子的实现方式基本上也完全相同：不安全的强制转换函数只是进行一些类型重排，实际上并未改变任何内容。你可以在 `GHC.ST` 中进一步阅读。
