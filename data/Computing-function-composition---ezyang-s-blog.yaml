- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:47'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:47'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Computing function composition : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算函数组合：ezyang 的博客
- en: 来源：[http://blog.ezyang.com/2011/05/computing-function-composition/](http://blog.ezyang.com/2011/05/computing-function-composition/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2011/05/computing-function-composition/](http://blog.ezyang.com/2011/05/computing-function-composition/)
- en: 'This is an addendum to my second example in [Anatomy of a thunk leak](http://blog.ezyang.com/2011/05/anatomy-of-a-thunk-leak/),
    in which I’d like to propose another solution to the space leak, involving computing
    the composition of all of these thunks. This solution is particularly notable
    because it preserves the denotation of the original function, that is, that `f
    l (undefined, undefined) = (undefined, undefined)`. This should be surprising,
    because I claimed that it would be impossible for GHC to optimize a function with
    that had this denotation into one without the space leak by more eagerly evaluating
    some thunks. There is no contradiction: the optimization we would like to apply
    here is one of partial evaluation. Didn’t understand that? Don’t worry, a concrete
    example is coming soon.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我在[Thunk 泄漏解剖](http://blog.ezyang.com/2011/05/anatomy-of-a-thunk-leak/)中的第二个例子的附录，其中我想提出另一个解决空间泄漏的方案，涉及计算所有这些
    thunk 的组合。这个解决方案特别显著，因为它保留了原始函数的指示，即 `f l (undefined, undefined) = (undefined,
    undefined)`。这应该是令人惊讶的，因为我声称 GHC 不可能通过更急切地评估某些 thunk 来优化具有这种指示的函数以消除空间泄漏。这并不矛盾：我们想在这里应用的优化是部分评估的一种。不理解？别担心，一个具体的例子即将来临。
- en: 'As Heinrich Apfelmus points out, the space leak can be visualized as a large
    graph of expressions which has not been collapsed into a single value: `1 + (1
    + (1 + (1 + (1 + (1 + ...)))))`. We can visualize this graph being built up in
    successive iterations of the function:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 正如 Heinrich Apfelmus 指出的那样，空间泄漏可以被视为一个大的表达式图，尚未折叠为单个值：`1 + (1 + (1 + (1 + (1
    + (1 + ...)))))`。我们可以将这个图像化为函数连续迭代构建的过程：
- en: The point of introducing strictness (and thus changing the denotation of the
    function) is that we keep collapsing (evaluating) the tree.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 引入严格性（而改变函数的指示）的要点在于我们持续地（评估）树的折叠。
- en: 'But notice the value highlighted in red: we must know what this value is before
    we can do any computation. But if this value is unknown (or, in our case, if we
    don’t want to evaluate it while we are forming this graph), our strategy doesn’t
    really work. We can’t collapse the entire tree. However, (and this is the key),
    because addition is associative, we can rotate the tree, and then evaluate the
    (now left) subtree.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 但请注意红色高亮显示的值：在进行任何计算之前，我们必须知道这个值是什么。但是如果这个值是未知的（或者在我们的情况下，如果我们在形成这个图时不想评估它），我们的策略实际上不起作用。我们无法折叠整个树。然而，（这是关键），因为加法是结合的，我们可以旋转树，然后评估（现在是左侧的）子树。
- en: 'In effect, all of the thunks have been merged together: instead of `1 + 1 +
    1 + X`. we now have `3 + X`. Simple! Here is the implementation:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，所有的 thunk 都已经合并在一起：而不是 `1 + 1 + 1 + X`，现在我们有了 `3 + X`。简单！这里是实现：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`go` is essentially the strict version of `f`, but at the end of the iteration
    it returns a pair with two thunks: `c0 + x0` and `c1 + x1`, were both `c0` and
    `c1` have been fully evaluated.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`go` 本质上是 `f` 的严格版本，但在迭代结束时返回一个带有两个 thunk 的对：`c0 + x0` 和 `c1 + x1`，其中 `c0`
    和 `c1` 都已完全评估。'
- en: 'Here’s another way of thinking of how we’re doing things:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们正在做事情的另一种思考方式：
- en: It would be pretty cool if this could be done automatically, and it would pretty
    applicable in other domains too. Combining functions that are associative are
    [a precious commodity when it comes to parallelization](http://blog.ezyang.com/2010/04/creative-catamorphisms/).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果能够自动完成这个过程将会很酷，并且在其他领域也非常适用。结合结合性函数在[并行化时是一种宝贵的资源](http://blog.ezyang.com/2010/04/creative-catamorphisms/)。
