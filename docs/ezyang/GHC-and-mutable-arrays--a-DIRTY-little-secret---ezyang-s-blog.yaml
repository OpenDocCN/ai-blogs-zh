- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:14'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:14'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'GHC and mutable arrays: a DIRTY little secret : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GHC 和可变数组：一个**脏**小秘密：ezyang 的博客
- en: 来源：[http://blog.ezyang.com/2014/05/ghc-and-mutable-arrays-a-dirty-little-secret/](http://blog.ezyang.com/2014/05/ghc-and-mutable-arrays-a-dirty-little-secret/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2014/05/ghc-and-mutable-arrays-a-dirty-little-secret/](http://blog.ezyang.com/2014/05/ghc-and-mutable-arrays-a-dirty-little-secret/)
- en: 'GHC and mutable arrays: a DIRTY little secret'
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GHC 和可变数组：一个**脏**小秘密
- en: 'Brandon Simmon recently [made a post](http://www.haskell.org/pipermail/glasgow-haskell-users/2014-May/024976.html)
    to the glasgow-haskell-users mailing list asking the following question:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Brandon Simmon 最近在 glasgow-haskell-users 邮件列表上发布了一个帖子，问了以下问题：
- en: I've been looking into [an issue](http://stackoverflow.com/questions/23462004/code-becomes-slower-as-more-boxed-arrays-are-allocated/23557704#23557704)
    in a library in which as more mutable arrays are allocated, GC dominates (I think
    I verified this?) and all code gets slower in proportion to the number of mutable
    arrays that are hanging around.
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我一直在研究 [一个问题](http://stackoverflow.com/questions/23462004/code-becomes-slower-as-more-boxed-arrays-are-allocated/23557704#23557704)，在这个库中，随着分配更多可变数组，GC
    占主导地位（我想我验证了这个？），所有代码的速度与挂起的可变数组数量成正比地变慢。
- en: '...to which I replied:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '...对此，我回复道:'
- en: In the current GC design, mutable arrays of pointers are always placed on the
    mutable list. The mutable list of generations which are not being collected are
    always traversed; thus, the number of pointer arrays corresponds to a linear overhead
    for minor GCs.
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在当前的 GC 设计中，指针数组的可变数组总是放置在可变列表上。未收集的代的可变代的列表总是被遍历；因此，指针数组的数量对于小 GC 产生了线性的开销。
- en: 'If you’re coming from a traditional, imperative language, you might find this
    very surprising: if you paid linear overhead per GC in Java for all the mutable
    arrays in your system... well, you probably wouldn''t use Java ever, for anything.
    But most Haskell users seem to get by fine; mostly because Haskell encourages
    immutability, making it rare for one to need lots of mutable pointer arrays.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从传统的命令式语言转过来，你可能会发现这非常令人惊讶：如果你为系统中所有可变数组支付了 Java 中每个 GC 的线性开销... 嗯，你可能永远都不会使用
    Java。但大多数 Haskell 用户似乎过得很好；主要因为 Haskell 鼓励不可变性，使得大多数情况下不需要大量的可变指针数组。
- en: Of course, when you do need it, it can be a bit painful. We have a [GHC bug](https://ghc.haskell.org/trac/ghc/ticket/7662)
    tracking the issue, and there is some low hanging fruit (a variant of mutable
    pointer arrays which has more expensive write operation, but which only gets put
    on the mutable list when you write to it) as well as some promising directions
    for how to implement card-marking for the heap, which is the strategy that GCs
    like the JVM's use.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，当你确实需要时，这可能有点痛苦。我们有一个 [GHC bug](https://ghc.haskell.org/trac/ghc/ticket/7662)
    跟踪这个问题，还有一些低 hanging fruit（一种变体的可变指针数组，写操作更昂贵，但只有在写入时才放入可变列表中），以及一些有前途的实现卡标记堆的方向，这是像
    JVM 这样的 GC 策略所使用的策略。
- en: On a more meta-level, implementing a perfomant generational garbage collector
    for an immutable language is far, far easier than implementing one for a mutable
    language. This is my personal hypothesis why Go doesn’t have a generational collector
    yet, and why GHC has such terrible behavior on certain classes of mutation.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 更加元层次上，为不可变语言实现一个性能良好的分代垃圾收集器要比为可变语言实现一个更容易得多。这是我个人的假设，解释了为什么 Go 仍然没有一个分代收集器，以及为什么
    GHC 在某些突变类别上表现如此糟糕。
- en: '*Postscript.* The title is a pun on the fact that “DIRTY” is used to describe
    mutable objects which have been written to since the last GC. These objects are
    part of the remembered set and must be traversed during garbage collection even
    if they are in an older generation.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*后记。* 标题是一个双关语，因为“DIRTY”用于描述自上次 GC 以来已写入的可变对象。这些对象是记忆集的一部分，必须在垃圾收集期间遍历，即使它们位于旧代中也是如此。'
