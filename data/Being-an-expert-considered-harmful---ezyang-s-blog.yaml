- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-07-01 18:18:25'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-07-01 18:18:25
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Being an expert considered harmful : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 成为专家被认为是有害的：ezyang 的博客
- en: 来源：[http://blog.ezyang.com/2010/03/expert-considered-harmful/](http://blog.ezyang.com/2010/03/expert-considered-harmful/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/03/expert-considered-harmful/](http://blog.ezyang.com/2010/03/expert-considered-harmful/)
- en: '*It''s a sunny day in your advanced symbolic programming class. Your teacher
    has just started going over monads—in Scheme, though—and you sit in the back of
    the classroom snarking about little tidbits of knowledge you know from Haskell.
    Suddenly, the teacher says (quite earnestly too), "Edward here seems to know a
    lot about monads. Why don''t we have him come up and teach them to the class?"
    Suddenly, you''re up expounding types to people who have never used Haskell before
    and failing utterly to explain to people how the continuation monad works. Only
    after several iterations do you manage to partially rewrite the presentation in
    a form that doesn''t assume fluency in Haskell. You''ve fallen into the expert
    trap.*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*在你的高级符号编程课上是一个晴朗的一天。你的老师刚开始讲授单子——虽然是在Scheme语言中——而你坐在教室后排，嘲笑你从Haskell语言知道的一些小知识片段。突然间，老师很认真地说，“爱德华似乎对单子知识很多。为什么不让他上来教给大家呢？”突然间，你站起来向从未使用过Haskell语言的人们解释类型，却完全无法向他们解释延续单子的工作原理。经过数次尝试之后，你终于部分重写了演示文稿，不再假设人们已经精通Haskell语言。你已经陷入了专家陷阱。*'
- en: You're an expert. You are in possession of in-depth knowledge, have accumulated
    wisdom and intuition, and all-in-all can work much more effectively than others
    within your domain. You might have an ego; you might get into hot arguments with
    other experts. Or you might be very unassuming and thoughtful; your expertise
    has little to do with your ego.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你是一个专家。你拥有深入的知识，积累了智慧和直觉，在你的领域内比其他人能更有效地工作。你可能有点自负；你可能会和其他专家激烈辩论。或者你可能非常谦逊和深思熟虑；你的专业知识与你的自我无关。
- en: But unless you've been paying attention to the pre-requisite knowledge you assume,
    you will be terrible at teaching your area of expertise. Your expertise is getting
    in the way of teaching effectively, for *the expert assumes too much prerequisite
    knowledge.*
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，除非你注意到你假设的先决知识，否则你在教授你的专业领域时会表现糟糕。你的专业知识阻碍了有效教学，因为*专家假设了太多的先决知识*。
- en: 'What do I mean when I speak of prerequisite knowledge? I don''t mean prerequisite
    "facts"—what is an iterative algorithm to solve linear equations, how does one
    reverse a list using a fold, how do X in my favorite framework. I do mean foundational
    knowledge: abstractions and higher-order primitives to think with—linear algebra,
    reducing higher-order operators and the architecture of said framework. One answers
    "how." Another answers "Why."'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当我谈到先修知识时，我并不是指先决的“事实”——例如迭代算法解决线性方程，使用折叠函数反转列表，或者在我最喜欢的框架中如何操作X。我指的是基础知识：抽象和高阶原语用于思考——比如线性代数，减少高阶运算符和框架的架构。一个回答“如何”，另一个回答“为什么”。
- en: All of engineering and mathematics is perpetually in search of the right abstraction
    to tackle a problem. Perhaps the most striking change that occurs when you've
    put the problem in the right representation is that it becomes substantially shorter
    and easier to manipulate at a higher level. It's no surprise that Newton needed
    to [invent Calculus](http://en.wikipedia.org/wiki/Philosophi%C3%A6_Naturalis_Principia_Mathematica)
    in order to develop his ideas about physics. The high-level programming languages
    and systems we build today would have been inconceivable in [pure assembly language
    or silicon](http://6004.csail.mit.edu/).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的工程和数学都在不断寻找正确的抽象来解决问题。当你将问题放在正确的表现形式中时，最显著的变化也许就是它变得更简洁、更易于在更高层次上操作。不足为奇，牛顿需要[发明微积分](http://en.wikipedia.org/wiki/Philosophi%C3%A6_Naturalis_Principia_Mathematica)来发展他的物理思想。今天我们构建的高级编程语言和系统，在[纯汇编语言或硅](http://6004.csail.mit.edu/)中是无法想象的。
- en: 'Finding and understanding the right abstraction is *enlightenment*: it makes
    hard things easy and impossible things possible. Calculations that used to take
    a page now are succinctly described in a sentence. The structure of the verbose
    system is encoded into the abstraction, leaving behind the salient pieces of the
    problem. Much of the same could be said for programs: before the advent of high
    level languages, assembly programs could fit on a few pages and be understood
    by a single programmer. They *had to be.* Modern software has gone far beyond.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 找到并理解正确的抽象概念就是*启蒙*：它使得困难变得简单，不可能的事情变得可能。曾经需要一页才能计算的内容现在可以简洁地用一句话描述。冗长系统的结构被编码成抽象，留下问题的关键部分。对程序也可以说类似的事情：在高级语言出现之前，汇编程序可以放在几页纸上，并且可以被单个程序员理解。*必须如此。*
    现代软件发展已经远远超出这个阶段。
- en: In both cases, an expert will look at this new formulation, and immediately
    understand. The beginner, perhaps familiar with but not proficient in this encoding,
    has to now work out the underlying foundation again (or risk stumbling around
    with a simpler but faulty set of premises).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，专家会看到这种新的表述，并立即理解。初学者，也许对这种编码有所了解但不熟练，现在必须重新探索基础（或者冒着使用简单但错误的前提的风险四处碰壁）。
- en: You might say, "Well, that's not the problem of the expert; they just don't
    have the prerequisites! I will teach them this topic once they learn that foundation."
    *This is not acceptable.* It is true that formal education can grant them a familiarity
    with the basic primitives and relations of the abstraction; it is especially effective
    at weeding out false conceptions. But the facility that an expert has for an abstraction
    only comes when you spend some time "in the trenches", using and applying the
    abstraction to bigger problems.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会说，“嗯，这不是专家的问题；他们只是没有先修条件！一旦他们掌握了基础，我将教他们这个主题。” *这是不能接受的。* 确实，正规教育可以使他们熟悉抽象的基本原语和关系；它尤其有效地清除了错误的概念。但是，专家对于抽象的熟悉程度只有在你花时间“在战壕中”，使用和应用抽象到更大的问题时才会出现。
- en: You might say, "I am not that uncharitable; I'll teach the prerequisites too."
    You might even expect to be able to impart knowledge upon the listener! Undelude
    yourself. In all but the simple topics (the ones where the simple statement of
    the solution is enough to illuminate), they won't understand if you simply lecture
    to them. The teaching is just a roadmap for doing, the only way to truly get a
    visceral feel for any hard problem.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会说，“我并不那么刻薄；我也会教授先修课程。” 你甚至可能期望能够向听众传授知识！不要自欺欺人。除了简单的主题（简单的解决方案已足以阐明的主题），如果你仅仅向他们讲授，他们不会理解。教学只是做事的路线图，是真正理解任何难题的唯一途径。
- en: 'What you should say is, "I am just one lantern in the novice''s arsenal of
    understanding. I seek to illuminate precisely what the novice doesn''t think to
    look at." In fact, there is an easy way to fulfill this purpose: force the novice
    to teach! They will start off with a very limited and ill-defined mental model
    of the concept: of the many roads to understanding, there is only *one* that they
    know. They will explain it in brutal detail of all their missteps and your implicit
    knowledge. They will be asked questions, and those questions will force them to
    clarify their understanding of this path. Eventually they will feel confident
    in their knowledge of the path, and if they continue learning, that path will
    expand to encompass many paths, different routes to understanding. The novice
    has become an expert. But, as the Buddha might say, *they* are the ones who must
    discover enlightenment. The teacher merely shows them the path.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该说的是，“我只是初学者理解的工具之一。我寻求精确地照亮初学者没有想到的地方。” 实际上，有一个实现这一目标的简单方法：强迫初学者去教！他们将从一个非常有限和不清晰的概念模型开始：在理解的许多道路中，只有*一条*是他们知道的。他们将详细解释所有错误的细节以及你的隐含知识。他们会被问到问题，这些问题将迫使他们澄清对这条路的理解。最终，他们将对这条路的知识感到自信，如果他们继续学习，这条路将扩展到包括许多道路，不同的理解路径。初学者已经成为专家。但是，正如佛陀可能会说的那样，*他们*必须发现启蒙。老师只是向他们展示路径。
