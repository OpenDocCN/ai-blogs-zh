["```\n        IntMap       Java HAMT (32K-512K)  Java HAMT (512K-32K)\n 32K     .035s       .100s                  .042s\n 64K     .085s       .077s                  .088s\n128K     .190s       .173s                  .166s\n256K     .439s       .376s                  .483s\n512K    1.047s      1.107s                 1.113s\n\n```", "```\npublic static PersistentHashMap create(List init){\n  ITransientMap ret = EMPTY.asTransient();\n  for(Iterator i = init.iterator(); i.hasNext();)\n  {\n    Object key = i.next();\n    if(!i.hasNext())\n      throw new IllegalArgumentException(String.format(\"No value supplied for key: %s\", key));\n      Object val = i.next();\n      ret = ret.assoc(key, val);\n    }\n    return (PersistentHashMap) ret.persistent();\n  }\n}\n\n```", "```\n        Haskell     Clojure\n128K    0.56s       0.33s\n256K    1.20s       0.84s\n512K    2.62s       2.80s\n\n```", "```\n(ns maptest (:gen-class))\n\n(defn mk-random-stream []\n  (let [r (new ec.util.MersenneTwisterFast)]\n    (repeatedly (fn [] (. r (nextInt))))))\n\n(defn main [i]\n  (let [vals (vec (take (* i 2) (mk-random-stream)))\n        dvals (take (* i 2) (doall (interleave vals vals)))]\n    (dotimes [_ 10]\n      (time\n       (let [m (apply hash-map dvals)]\n         (reduce (fn [s k] (+ s (m k 0)))\n           0\n           (take i (drop (/ i 2) vals))))))))\n\n(doseq [n (range 5 10)]\n  (let [i (* 1000 (int (Math/pow 2 n)))]\n    (println \" I = \" i)\n    (main i)))\n\n```", "```\n(defn main [i]\n  (let [vals (vec (take (* i 2) (mk-random-stream)))]\n    (dotimes [_ 10]\n      (time\n       (let [m (reduce (fn [m x] (assoc m x x)) (hash-map) vals)]\n         (reduce (fn [s k] (+ s (m k 0)))\n           0\n           (take i (drop (/ i 2) vals))))))))\n\n```"]