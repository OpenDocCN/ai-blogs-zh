- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-07-01 18:17:42'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-07-01 18:17:42
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Variant types and GADTs : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变体类型和GADTs：ezyang的博客
- en: 来源：[http://blog.ezyang.com/2011/07/variant-types-and-gadts/](http://blog.ezyang.com/2011/07/variant-types-and-gadts/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2011/07/variant-types-and-gadts/](http://blog.ezyang.com/2011/07/variant-types-and-gadts/)
- en: OCaml supports anonymous variant types, of the form ``type a = [`Foo of int
    | `Bar of bool]``, with the appropriate subtyping relations. Subtyping is, in
    general, kind of tricky, so I have been using these variant types fairly conservatively.
    (Even if a feature gives you too much rope, it can be manageable and useful if
    you use discipline.) Indeed, they are remarkably handy for one particular use-case
    for which I would have normally deployed GADTs. This is the “Combining multiple
    sum types into a single sum type” use-case.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: OCaml支持匿名变体类型，形式为``type a = [`Foo of int | `Bar of bool]``，具有适当的子类型关系。子类型在一般情况下比较棘手，因此我一直比较保守地使用这些变体类型。（即使一个特性给了你太多的灵活性，如果你有纪律地使用它，它也是可控的和有用的。）事实上，它们对于我通常会使用GADTs的一个特定用例非常方便。这就是“将多个和类型合并为单个和类型”的用例。
- en: 'Consider the following program in Haskell:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下在Haskell中的程序：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If one would like to define the moral equivalent of A plus B, the most naive
    way to do this is:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想定义A加B的道德等价物，最简单的方法是：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'But this kind of sucks: I would have preferred some kind of flat namespace
    by which I could refer to `A` and `B` (also, this encoding is not equivalent to
    `data AorB = Foo Int | Bar Bool | Baz Char | Qux` in the presence of laziness.)
    If you use normal sum types in OCaml, you’re similarly out of luck. However, you
    can handily manage this if you use variant types:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 但这种方法有点糟糕：我更喜欢一种平坦的命名空间，可以引用`A`和`B`（此编码在惰性存在时不等同于`data AorB = Foo Int | Bar
    Bool | Baz Char | Qux`）。如果在OCaml中使用普通的和类型，你也会遇到类似的问题。但是，如果使用变体类型，你可以轻松管理这些情况：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Sweet! Note that we’re not using the full generality of variant types: I will
    only ever refer to these variant constructors in the context of `a`, `b` or `a_or_b`:
    anonymous variant types are right out. This prevents coercion messes.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 很好！请注意，我们并未使用变体类型的完整通用性：我只会在`a`、`b`或`a_or_b`的上下文中引用这些变体构造函数。这可以避免强制转换的混乱。
- en: 'I can actually pull this off in Haskell with GADTs, although it’s certainly
    not obvious for a beginning programmer:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我实际上可以在Haskell中使用GADTs完成这个，尽管对于初学者来说显然不明显：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: To pattern match against all constructors, I specify the type `AorB t`; to only
    do `A` I use `AorB A`, and to only do `B` I use `AorB B`. Don’t ask me how to
    specify arbitrary subsets of more than two combined sum types. (Solutions in the
    comment section welcome, though they will be graded on clarity.)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要匹配所有构造函数，我指定类型`AorB t`；要仅匹配`A`，我使用`AorB A`；要仅匹配`B`，我使用`AorB B`。别问我如何指定超过两个组合和类型的任意子集。（评论区中的解决方案欢迎，但它们的清晰度将会评分。）
- en: The Haskell approach does have one advantage, which is that the sum type is
    still closed. Since OCaml can make no such guarantee, things like `bin-prot` need
    to use up a full honking four-bytes to specify what variant it is (they hash the
    name and use that as a unique identifier) rather than the two bits (but more likely,
    one byte) needed here. This also means for more efficient generated code.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Haskell的方法确实有一个优势，即和类型仍然是封闭的。由于OCaml不能做出这样的保证，像`bin-prot`这样的东西需要使用完整的四字节来指定变体类型（它们对名称进行哈希并将其用作唯一标识符），而不是这里所需的两位（但更可能是一个字节）。这也意味着更有效的生成代码。
