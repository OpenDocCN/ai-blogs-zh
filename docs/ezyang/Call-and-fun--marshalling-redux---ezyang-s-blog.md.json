["```\n{#fun pure sinf as ^\n  { `Float' } -> `Float' #}\n\n```", "```\nsinf :: Float -> Float\nsinf a1 =\n  let {a1' = cFloatConv a1} in\n  let {res = sinf'_ a1'} in\n  let {res' = cFloatConv res} in\n  (res')\n\n```", "```\nsinf = cFloatConv . sinf'_ . cFloatConv\n\n```", "```\n{#fun pure sinf as ^\n  { myFloatConv `Float` } -> `Float` myFloatConv\n\n```", "```\nvoid print_null_str(char *str);\nvoid print_explicit_str(char *str, int length);\n\n```", "```\n{#fun print_null_str as ^ { `String' } -> `()' }\n{#fun print_explicit_str as ^ { `String'& } -> `()' }\n\n```", "```\nprintNullStr :: String -> IO ()\nprintNullStr a1 =\n  withCString a1 $ \\a1' ->\n  printNullStr'_ a1' >>= \\res ->\n  return ()\n\nprintExplicitStr :: String -> IO ()\nprintExplicitStr a1 =\n  withCStringLenIntConv a1 $ \\(a1'1, a1'2) ->\n  printExplicitStr'_ a1'1  a1'2 >>= \\res ->\n  return ()\n\n```", "```\nstruct my_struct { int b; int c; };\nvoid frob_struct(struct my_struct *);\n\n```", "```\ndata MyStruct = MyStruct Int Int\ninstance Storable MyStruct where ...\n{#pointer *my_struct as MyStructPtr -> MyStruct #}\n\n```", "```\n{#fun frob_struct as ^ { `MyStruct' } -> `()' #}\n\n```", "```\nwithT = with\n{#fun copy_struct as ^ { withT* `MyStruct' } -> `()' #}\n\n```", "```\n{#fun copy_struct as ^ { id `MyStructPtr' } -> `()' #}\n\n```", "```\nlong int strtol(const char *nptr, char **endptr, int base);\n\n```", "```\n{#fun strtol as ^ {id `Ptr CChar', id `Ptr (Ptr CChar)', `Int'} -> `Int` #}\n\n```", "```\n{#fun strtol as ^ {id `Ptr CChar', withT* `Ptr CChar' peek*, `Int'} -> `Int' #}\n\n```", "```\nstrtol :: Ptr CChar -> Ptr CChar -> Int -> IO (Int, Ptr CChar)\nstrtol a1 a2 a3 =\n  let {a1' = id a1} in\n  withT a2 $ \\a2' ->\n  let {a3' = cIntConv a3} in\n  strtol'_ a1' a2' a3' >>= \\res ->\n  peek a2'>>= \\a2'' ->\n  let {res' = cIntConv res} in\n  return (res', a2'')\n\n```", "```\n{#fun strtol as ^ {id `Ptr CChar', alloca- `Ptr CChar' peek*, `Int'} -> `Int' #}\n\n```", "```\nstrtol :: Ptr CChar -> Int -> IO (Int, Ptr CChar)\nstrtol a1 a3 =\n  let {a1' = id a1} in\n  alloca $ \\a2' ->\n  let {a3' = cIntConv a3} in\n  strtol'_ a1' a2' a3' >>= \\res ->\n  peek a2'>>= \\a2'' ->\n  let {res' = cIntConv res} in\n  return (res', a2'')\n\n```", "```\nstrtol nptr base = alloca $ \\endptr -> do\n  result <- strtol'_ nptr endptr (cIntconv base)\n  end <- peek endptr\n  return (result, end)\n\n```"]