- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:59'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:59'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'OCaml gotchas : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OCaml 的陷阱：ezyang 的博客
- en: 来源：[http://blog.ezyang.com/2011/02/ocaml-gotchas/](http://blog.ezyang.com/2011/02/ocaml-gotchas/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2011/02/ocaml-gotchas/](http://blog.ezyang.com/2011/02/ocaml-gotchas/)
- en: OCaml gotchas
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OCaml 的陷阱
- en: I spent some time fleshing out my [count min sketch](https://github.com/ezyang/ocaml-cminsketch)
    implementation for OCaml (to be the subject of another blog post), and along the
    way, I noticed a few more quirks about the OCaml language (from a Haskell viewpoint).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我花了一些时间完善了我的 [count min sketch](https://github.com/ezyang/ocaml-cminsketch)
    在 OCaml 中的实现（将成为另一篇博客文章的主题），在此过程中，我注意到了 OCaml 语言的一些怪异之处（从 Haskell 的视角来看）。
- en: Unlike Haskell’s `Int`, which is 32-bit/64-bit, the built-in OCaml `int` type
    is only 31-bit/63-bit. Bit twiddlers beware! (There is a `nativeint` type which
    gives full machine precision, but it less efficient than the `int` type).
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不像 Haskell 的 `Int`，它可以是 32 位或 64 位，内置的 OCaml `int` 类型只能是 31 位或 63 位。位操作者要小心！（有一个
    `nativeint` 类型可以提供完整的机器精度，但效率比 `int` 类型低。）
- en: 'Semicolons have quite different precedence from the “programmable semicolon”
    of a Haskell do-block. In particular:'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分号与 Haskell do 块的“可编程分号”有很大不同的优先级。特别是：
- en: '[PRE0]'
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: doesn't do what you'd expect similarly phrased Haskell. (I hear I'm supposed
    to use `begin` and `end`.)
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不像 Haskell 中类似表达的预期，OCaml 并不会做出相同的事情。（听说我应该使用 `begin` 和 `end`。）
- en: You can only get 30-bits of randomness from the Random module (an positive integer
    using Random.bits), even when you're on a 64-bit platform, so you have to manually
    stitch multiple invocations to the generator together.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 甚至在 64 位平台上，从 Random 模块获取的随机数只能获得 30 位（使用 Random.bits 获得正整数），因此您必须手动将多次调用生成器拼接在一起。
- en: I don't like a marching staircase of indentation, so I hang my “in”s after their
    statements—however, when they’re placed there, they’re easy to forget (since a
    `let` in a do-block does not require an `in` in Haskell).
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我不喜欢缩进的“军队阶梯”，所以我把我的“in”放在它们的语句之后 —— 但是，当它们放在那里时，它们很容易被忘记（因为在 Haskell 中，do 块中的
    let 语句不需要 in）。
- en: Keyword arguments are quite useful, but they gunk up the type system a little
    and make it a little more difficult to interop keyword functions and non-keyword
    functions in a higher-order context. (This is especially evident when you're using
    keyword arguments for documentation purposes, not because your function takes
    two ints and you really do need to disambiguate them.)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键字参数非常有用，但它们会使类型系统有些混乱，并且在高阶上下文中使关键字函数和非关键字函数的互操作变得更加困难。 （特别是当您仅出于文档目的使用关键字参数时，而不是因为函数接受两个整数并且您确实需要消除歧义。）
- en: 'One observation about purity and randomness: I think one of the things people
    frequently find annoying in Haskell is the fact that randomness involves mutation
    of state, and thus be wrapped in a monad. This makes building probabilistic data
    structures a little clunkier, since you can no longer expose pure interfaces.
    OCaml is not pure, and as such you can query the random number generator whenever
    you want.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 关于纯度和随机性的一个观察：我认为在 Haskell 中经常让人感到烦恼的一件事是，随机性涉及状态的变化，因此必须包装在单子中。这使得构建概率数据结构有些笨拙，因为您不能再公开纯接口。OCaml
    不是纯的，因此您可以随时查询随机数生成器。
- en: However, I think Haskell may get the last laugh in certain circumstances. In
    particular, if you are using a random number generator in order to generate random
    test cases for your code, you need to be able to reproduce a particular set of
    random tests. Usually, this is done by providing a seed which you can then feed
    back to the testing script, for deterministic behavior. But because OCaml's random
    number generator manipulates global state, it's very easy to accidentally break
    determinism by asking for a random number for something unrelated. You can work
    around it by manually bracketing the global state, but explicitly handling the
    randomness state means providing determinism is much more natural.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，在某些情况下，我认为 Haskell 可能会在最后一笑。特别是，如果您使用随机数生成器为代码生成随机测试案例，您需要能够再现特定的随机测试集。通常，通过提供一个种子来完成此操作，然后将其提供给测试脚本，以实现确定性行为。但是因为
    OCaml 的随机数生成器操作全局状态，很容易在请求与其他不相关的内容的随机数时意外地破坏确定性。您可以通过手动括起全局状态来解决此问题，但显式处理随机状态意味着提供确定性更加自然。
