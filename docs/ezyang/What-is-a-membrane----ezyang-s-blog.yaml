- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:23'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-07-01 18:17:23
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'What is a membrane? : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是膜？：ezyang’s博客
- en: 来源：[http://blog.ezyang.com/2013/03/what-is-a-membran/](http://blog.ezyang.com/2013/03/what-is-a-membran/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2013/03/what-is-a-membran/](http://blog.ezyang.com/2013/03/what-is-a-membran/)
- en: If you hang out long enough with a certain crowd (in my case, it was the [ECMAScript
    TC39 committee](http://wiki.ecmascript.org/doku.php)), you will probably hear
    the term **membrane** tossed around. And eventually, you will start to wonder,
    “Well, what *is* a membrane, anyway?”
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你和某个特定群体一起呆得足够长（在我的情况下，是[ECMAScript TC39委员会](http://wiki.ecmascript.org/doku.php)），你可能会听到“膜”这个术语被提起。最终，你会开始想知道，“嗯，膜到底是什么？”
- en: As is the case with many clever but simple ideas, membranes were first introduced
    as a footnote [1] in [a PhD thesis.](http://www.erights.org/talks/thesis/) Suppose
    that you are building distributed system, in which you pass references to objects
    between two separate nodes. If I want to pass a reference to `foo` in process
    `A` to process `B`, I can hardly just hand over an address—the memory spaces are
    not the same! So instead, I need to create a wrapper object `wrappedFoo` representing
    `foo` in `B`, which knows how to access the original object in `A`. So far so
    good.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 就像许多聪明但简单的想法一样，膜最初作为[博士论文的脚注 [1]](http://www.erights.org/talks/thesis/)被引入。假设您正在构建分布式系统，在其中在两个独立节点之间传递对象的引用。如果我想将进程
    `A` 中的 `foo` 的引用传递给进程 `B`，我几乎不能仅仅交出一个地址 - 内存空间不同！因此，我需要创建一个代表 `B` 中 `foo` 的包装对象
    `wrappedFoo`，它知道如何访问 `A` 中的原始对象。到目前为止一切顺利。
- en: 'Now here’s the catch: what if I pass a reference to `wrappedFoo` back to process
    `A`? If I were not very clever, I’d do the same thing as I did originally: create
    a new wrapper object `wrappedWrappedFoo` in `A` which knows how to access `wrappedFoo`
    in `B`. But this is silly; really, when I cross back over to `A`, I want to get
    back the original `foo` object.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在问题来了：如果我将对 `wrappedFoo` 的引用传回到进程 `A` 中怎么办？如果我不够聪明，我可能会像最初那样做：在 `A` 中创建一个新的包装对象
    `wrappedWrappedFoo`，它知道如何访问 `B` 中的 `wrappedFoo`。但这很愚蠢；实际上，当我再次返回到 `A` 时，我想要得到原始的
    `foo` 对象。
- en: This wrap-unwrap behavior is *precisely* what a membrane is. We consider the
    original object `foo` to be “inside” the membrane (a so-called wet object), and
    as it exits the membrane, it is wrapped with its own little membrane. However,
    when the object returns to its original membrane, the wrapper goes away. Just
    like in biology!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这种包装和解包行为 *正是* 膜的本质。我们认为原始对象 `foo` 位于膜的“内部”（一个所谓的湿对象），当它离开膜时，它会被其自己的小膜包裹。然而，当对象返回到其原始膜时，包装会消失。就像生物学中一样！
- en: 'There is one last operation, called a “gate”: this occurs when you invoke a
    method on a wrapped object. Since the wrapper cannot actually perform the method,
    it has to forward the request to the original object. However, the *arguments*
    of the method need to get wrapped (or unwrapped) as they get forwarded; as you
    might expect.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 还有最后一个操作，称为“门”：这发生在您在包装对象上调用方法时。由于包装对象实际上无法执行方法，它必须将请求转发给原始对象。然而，方法的 *参数* 在转发时需要被包装（或解包），正如您可能期望的那样。
- en: 'While I used an RPC-like system to demonstrate the basic principle of membranes,
    a more conventional use is to enforce access control. Membranes are quite important;
    [Mozilla](https://developer.mozilla.org/en-US/docs/XPConnect_security_membranes)
    relies on them extensively in order to enforce access restriction between objects
    from different websites which may interact with each other, but need security
    checks. (Actually, did you know that Mozilla is using a capability-based system
    for their security? Kind of neat!) It’s important to notice that when we unwrap,
    we are skipping security checks—the only reason this is acceptable is because
    the only objects that will be able to access the unwrapped object are precisely
    those objects in the same domain. For a more modern treatment of the subject,
    check out a more recent paper, [Trustworthy Proxies: Virtualizing Objects with
    Invariants](http://research.google.com/pubs/pub40736.html), which includes a lucid
    explanation of membranes.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '在展示膜的基本原理时，我使用了类似RPC的系统，而更常见的用途是强制访问控制。膜非常重要；[Mozilla](https://developer.mozilla.org/en-US/docs/XPConnect_security_membranes)
    在强制执行来自不同网站的对象之间访问限制时大量使用它们，但需要进行安全检查。（事实上，你知道Mozilla在他们的安全系统中使用基于能力的系统吗？挺有意思的！）需要注意的是，当我们解开膜时，我们跳过了安全检查——唯一可以接触未封装对象的对象是同一域中的对象。要获取更现代化的主题处理，请查看最近的一篇文章，[Trustworthy
    Proxies: Virtualizing Objects with Invariants](http://research.google.com/pubs/pub40736.html)，其中包含对膜的清晰解释。'
- en: '[1] Well, actually it was a figure; figure 9.3 on page 71, to be precise!'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] 嗯，实际上它是一个图；确切地说是第71页的图9.3！'
