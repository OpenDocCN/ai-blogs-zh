- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-07-01 18:18:15'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:18:15'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'MVC and Purity : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MVC 和纯度：ezyang’s 博客
- en: 来源：[http://blog.ezyang.com/2010/07/mvc-and-purity/](http://blog.ezyang.com/2010/07/mvc-and-purity/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/07/mvc-and-purity/](http://blog.ezyang.com/2010/07/mvc-and-purity/)
- en: '*Attention conservation notice.* Purely functional programming demonstrates
    the same practices recommended by object-oriented MVC practice.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意保护注意.* 纯函数式编程展示了面向对象 MVC 实践推荐的相同实践。'
- en: '[Model-View-Controller](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller)
    is a widely used object-oriented design pattern for organizing functionality in
    an application with a user interface. I first ran across it in my early days programming
    web applications. The Model/View separation made deep intuitive sense to me as
    a PHP programmer: without it, you’d end up with spaghetti templates with HTML
    print statements interleaved with MySQL queries. But Controller [was always a
    little wishy-washy](http://www.c2.com/cgi/wiki?WhatsaControllerAnyway). What exactly
    did it do? It was some sort of “glue” code, the kind of stuff that bound together
    the Model and View and gave them orders. But this was always a sort of half-hearted
    answer for me ([where should input validation go?](http://discuss.joelonsoftware.com/default.asp?design.4.354410.6)),
    and soon I left the world of web applications, my questions unanswered.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[模型-视图-控制器](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller)
    是一种广泛使用的面向对象设计模式，用于组织带有用户界面的应用程序功能。我在早期编写 Web 应用程序时首次接触到它。模型/视图分离对我作为 PHP 程序员来说有深刻的直觉意义：如果没有它，你将得到一堆将
    HTML 打印语句与 MySQL 查询混合在一起的意大利面模板。但是控制器总是有些模糊不清（[控制器到底是什么？](http://www.c2.com/cgi/wiki?WhatsaControllerAnyway)）。它究竟是做什么的？它是一种“粘合”代码，将模型和视图绑在一起并给它们命令的代码。但对我来说，这总是一个不太满意的答案（[输入验证应该放在哪里？](http://discuss.joelonsoftware.com/default.asp?design.4.354410.6)），不久之后我离开了
    Web 应用程序的世界，我的问题没有答案。'
- en: Having been exposed to purely functional programming, I now believe that the
    controller and model/view separation is precisely the separation between side-effectful
    code (IO) and pure code.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 通过接触纯函数式编程，我现在相信控制器和模型/视图分离确实是副作用代码（IO）和纯代码之间的分离。
- en: '*The controller depends on the model and the view, but the model and view should
    not (directly) depend on the controller.* Pure code and impure code don''t mix
    freely. In particular, you''re not allowed to reference impure code from pure
    code (unless you use `unsafePerformIO`). However, impure code can call pure code
    (although there may be some [technical details](http://www.haskell.org/ghc/docs/6.12.2/html/libraries/base-4.2.0.1/Control-Monad.html)
    involved), and the resulting code is impure. So, if the Controller is impure code
    and the Model/View is pure code, separating the two is simply making sure that
    if we have any code that is impure, we''ve extracted as much of the pure computation
    out of it as possible. Stated differently, if I have a function that reads and
    writes data, and there are lines in it that don''t have anything to do with IO,
    I should move them into their own function. Maybe those lines are the templating
    system, in which case it’s View; maybe those lines are running some complicated
    equation, in which case it’s Model. Pure/impure doesn''t capture the model/view
    distinction.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*控制器依赖于模型和视图，但模型和视图不应（直接）依赖于控制器。* 纯代码和不纯代码不能自由混合。特别是，你不能从纯代码引用不纯代码（除非使用 `unsafePerformIO`）。但是，不纯代码可以调用纯代码（尽管可能涉及一些[技术细节](http://www.haskell.org/ghc/docs/6.12.2/html/libraries/base-4.2.0.1/Control-Monad.html)），而生成的代码是不纯的。因此，如果控制器是不纯的代码，而模型/视图是纯代码，分离两者只是确保如果我们有任何不纯的代码，我们已尽可能多地将纯计算提取出来。换句话说，如果我有一个读取和写入数据的函数，并且其中有些行与
    IO 无关，我应该将它们移动到它们自己的函数中。也许这些行是模板系统，这时它是视图；也许这些行在运行一些复杂的方程式，这时它是模型。纯/不纯并不能捕捉到模型/视图的区别。'
- en: '*The controller receives input and initiates a response.* So, the controller
    is input-output, i.e. IO.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*控制器接收输入并启动响应.* 因此，控制器是输入输出，即 IO。'
- en: '*The controller handles events that affect the model or the view.* Pure code
    sort of lives in a vacuum: it can do computation, but it can''t do anything useful,
    since it can’t have any side effects and thus has no way for us to tell it what
    to compute, or to view the result of the computation. Impure code is the way we
    get anything done by handing off this information to our pure code.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器处理影响模型或视图的事件。纯代码有点像活在真空中：它可以进行计算，但它不能做任何有用的事情，因为它不能有任何副作用，因此我们无法告诉它该计算什么，或者查看计算结果。不纯代码是我们通过将这些信息传递给我们的纯代码来完成任何实际工作的方式。
- en: 'There are several possible objections to this division. Here are a few of them:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对这种区分存在几种可能的反对意见。以下是其中一些：
- en: '*Most object-oriented models are stateful, and state is not pure!* There is
    a common misconception that state isn''t pure, possibly arising from the fact
    that both IO and State are monads. However, I can turn a state monad into a single,
    pure value by simply running the state machine: code that is stateful is monadic,
    but it is also pure, since it doesn''t have any external side effects. Shared
    state is a bit trickier, and usually not pure.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数面向对象模型都是有状态的，而状态并不是纯粹的！这种误解可能源于IO和State都是单子的事实。然而，通过简单运行状态机，我可以将状态单子转换为单一的纯值：具有状态的代码是单子的，但也是纯粹的，因为它没有任何外部副作用。共享状态则稍微棘手，通常不是纯粹的。
- en: '*Controller code doesn’t have to be impure and here’s an example.* Here I’ll
    indulge in a bit of prescriptivism: I bet you have a model, but one that is only
    tangentially related to your core business logic. If you have code that parses
    binary strings into message objects (but doesn’t actually handle transmitting
    or receiving those binary strings on the network), you have a mini-model of network
    messages. You should probably keep it separate from your real model, but for testability
    you should also keep it separate from your network code. Separation of concerns
    may be malleable, but the little IO in your type signature is always honest.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器代码不一定非要是不纯的，这里举一个例子。在这里我会有点先入为主：我打赌你有一个模型，但这个模型只是与你的核心业务逻辑有关的某个边缘联系。如果你有代码将二进制字符串解析为消息对象（但实际上并不处理在网络上传输或接收这些二进制字符串），你就有了一个网络消息的迷你模型。你应该将其与真实的模型分开，但为了可测试性，你还应该将其与网络代码分开。关注点分离可能是可以改变的，但你类型签名中的少量IO始终是诚实的。
- en: 'Some parting words about the purity hair-shirt: it is fairly widely acknowledged
    that busting out the MVC pattern makes your application more complex initially,
    and in a purely functional language, you’re forced to respect the distinction
    from the very beginning. Thus, writing small programs can be frustrating in a
    purely functional language because you don’t want to use the bulky but scalable
    engineering practice yet, and the language is making you do so from the very beginning.
    Haskell gives you a lot of rope to make it pleasant again, but it takes a while
    to get used to. On the plus side, when your program grows, this separation will
    continue to be enforced, and a messy refactoring may be averted.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 关于纯度“苦衣”还有一些告别话语：相当广泛地认为，采用MVC模式会使你的应用程序在初始阶段变得更加复杂，在纯函数语言中，你被迫从一开始就尊重这种区分。因此，在纯函数语言中编写小程序可能会令人沮丧，因为你不想从一开始就使用笨重但可扩展的工程实践，而语言却要求你这样做。Haskell为你提供了许多方式来让编程变得愉快，但需要一段时间来适应。好处是，当你的程序增长时，这种分离将继续得到强制执行，可能会避免混乱的重构。
