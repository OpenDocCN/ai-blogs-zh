- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:14'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:14'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Type classes: confluence, coherence and global uniqueness : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型类：收敛性、一致性和全局唯一性：ezyang's博客
- en: 来源：[http://blog.ezyang.com/2014/07/type-classes-confluence-coherence-global-uniqueness/](http://blog.ezyang.com/2014/07/type-classes-confluence-coherence-global-uniqueness/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2014/07/type-classes-confluence-coherence-global-uniqueness/](http://blog.ezyang.com/2014/07/type-classes-confluence-coherence-global-uniqueness/)
- en: Today, I'd like to talk about some of the core design principles behind type
    classes, a wildly successful feature in Haskell. The discussion here is closely
    motivated by the work we are doing at MSRC to support type classes in Backpack.
    While I was doing background reading, I was flummoxed to discover widespread misuse
    of the terms "confluence" and "coherence" with respect to type classes. So in
    this blog post, I want to settle the distinction, and propose a new term, "global
    uniqueness of instances" for the property which people have been colloquially
    referred to as confluence and coherence.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，我想讨论类型类背后的一些核心设计原则，这是Haskell中一个非常成功的特性。这里的讨论受到我们在MSRC支持背包中使用类型类的工作的密切影响。在我进行背景阅读时，我惊讶地发现人们在谈论类型类时普遍误用了“收敛性”和“一致性”这两个术语。因此，在这篇博文中，我想澄清这一区别，并提出一个新术语，“全局唯一性实例”，用于描述人们口头上所说的收敛性和一致性的属性。
- en: '* * *'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Let''s start with the definitions of the two terms. Confluence is a property
    that comes from term-rewriting: a set of instances is **confluent** if, no matter
    what order constraint solving is performed, GHC will terminate with a canonical
    set of constraints that must be satisfied for any given use of a type class. In
    other words, confluence says that we won''t conclude that a program doesn''t type
    check just because we swapped in a different constraint solving algorithm.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从这两个术语的定义开始。收敛性是来自术语重写的一种属性：如果一组实例是**收敛**的，那么无论进行约束求解的顺序如何，GHC都将以一组规范的约束终止，这些约束必须满足任何给定类型类的使用。换句话说，收敛性表明，我们不会因为使用了不同的约束求解算法而得出程序不通过类型检查的结论。
- en: 'Confluence''s closely related twin is **coherence** (defined in the paper "Type
    classes: exploring the design space"). This property states that every different
    valid typing derivation of a program leads to a resulting program that has the
    same dynamic semantics. Why could differing typing derivations result in different
    dynamic semantics? The answer is that context reduction, which picks out type
    class instances, elaborates into concrete choices of dictionaries in the generated
    code. Confluence is a prerequisite for coherence, since one can hardly talk about
    the dynamic semantics of a program that doesn''t type check.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**一致性**的密切相关者是**收敛性**（在论文“类型类：探索设计空间”中定义）。该性质表明，程序的每个不同有效的类型推导都会导致具有相同动态语义的生成程序。为什么不同的类型推导会导致不同的动态语义呢？答案是上下文缩减，它选择类型类实例，并将其详细解释为生成代码中的具体字典选择。收敛性是一致性的先决条件，因为对于不能通过类型检查的程序，我们几乎不能谈论其动态语义。'
- en: 'So, what is it that people often refer to when they compare Scala type classes
    to Haskell type classes? I am going to refer to this as **global uniqueness of
    instances**, defining to say: in a fully compiled program, for any type, there
    is at most one instance resolution for a given type class. Languages with local
    type class instances such as Scala generally do not have this property, but in
    Haskell, we find this property is a very convenient one when building abstractions
    like sets.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，当人们将Scala类型类与Haskell类型类进行比较时，他们通常指的是**全局唯一性实例**，定义如下：在完全编译的程序中，对于任何类型，给定类型类的实例解析最多只有一个。像Scala这样具有局部类型类实例的语言通常不具备此属性，但在Haskell中，我们发现这一属性在构建诸如集合等抽象时非常方便。
- en: '* * *'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: So, what properties does GHC enforce, in practice? In the absence of any type
    system extensions, GHC's employs a set of rules to ensure that type class resolution
    is confluent and coherent. Intuitively, it achieves this by having a very simple
    constraint solving algorithm (generate wanted constraints and solve wanted constraints)
    and then requiring the set of instances to be *nonoverlapping*, ensuring there
    is only ever one way to solve a wanted constraint. Overlap is a more stringent
    restriction than either confluence or coherence, and via the `OverlappingInstances`
    and `IncoherentInstances`, GHC allows a user to relax this restriction "if they
    know what they're doing."
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，实际上 GHC 强制执行哪些属性？在没有任何类型系统扩展的情况下，GHC 使用一组规则来确保类型类解析是一致的和完整的。直观地说，它通过具有非重叠*的实例集*来实现这一点，确保只有一种方法来解决想要的约束。重叠是比一致性或完整性更严格的限制，通过
    `OverlappingInstances` 和 `IncoherentInstances`，GHC 允许用户放宽这一限制，“如果他们知道自己在做什么的话。”
- en: 'Surprisingly, however, GHC does *not* enforce global uniqueness of instances.
    Imported instances are not checked for overlap until we attempt to use them for
    instance resolution. Consider the following program:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，令人惊讶的是，GHC *并不* 强制全局唯一性的实例。导入的实例在尝试用于实例解析之前不会被检查是否重叠。考虑以下程序：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When compiled with one-shot compilation, `C` will not report overlapping instances
    unless we actually attempt to use the `Eq` instance in C. This is [by design](https://ghc.haskell.org/trac/ghc/ticket/2356):
    ensuring that there are no overlapping instances eagerly requires eagerly reading
    all the interface files a module may depend on.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用一次性编译时，只有在实际尝试使用 `C` 中的 `Eq` 实例时，`C` 才会报告实例重叠。这是 [有意设计](https://ghc.haskell.org/trac/ghc/ticket/2356)：确保没有重叠实例需要及时读取模块可能依赖的所有接口文件。
- en: '* * *'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'We might summarize these three properties in the following manner. Culturally,
    the Haskell community expects *global uniqueness of instances* to hold: the implicit
    global database of instances should be confluent and coherent. GHC, however, does
    not enforce uniqueness of instances: instead, it merely guarantees that the *subset*
    of the instance database it uses when it compiles any given module is confluent
    and coherent. GHC does do some tests when an instance is declared to see if it
    would result in overlap with visible instances, but the check is [by no means
    perfect](https://ghc.haskell.org/trac/ghc/ticket/9288); truly, *type-class constraint
    resolution* has the final word. One mitigating factor is that in the absence of
    *orphan instances*, GHC is guaranteed to eagerly notice when the instance database
    has overlap (assuming that the instance declaration checks actually worked...)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以总结这三个属性如下。在文化上，Haskell 社区期望*实例的全局唯一性*能够保持：实例的隐式全局数据库应该是一致的和完整的。然而，GHC 并不强制实例的唯一性：相反，它仅保证在编译任何给定模块时使用的实例数据库的*子集*是一致的和完整的。当一个实例声明时，GHC
    确实会进行一些测试，看看它是否会与可见实例重叠，但检查 [绝不完美](https://ghc.haskell.org/trac/ghc/ticket/9288)；真正的*类型类约束解析*有最终决定权。一个缓解因素是在没有*孤儿实例*的情况下，GHC
    保证会及时注意到实例数据库是否有重叠（假设实例声明检查确实有效……）
- en: 'Clearly, the fact that GHC''s lazy behavior is surprising to most Haskellers
    means that the lazy check is mostly good enough: a user is likely to discover
    overlapping instances one way or another. However, it is relatively simple to
    construct example programs which violate global uniqueness of instances in an
    observable way:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，GHC 的惰性行为对大多数 Haskeller 来说是令人惊讶的，这意味着懒惰检查通常是足够好的：用户很可能会以某种方式发现重叠的实例。然而，相对简单地构造违反实例的全局唯一性的示例程序是可能的：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Locally, all type class resolution was coherent: in the subset of instances
    each module had visible, type class resolution could be done unambiguously. Furthermore,
    the types of `ins` and `ins''` discharge type class resolution, so that in `D`
    when the database is now overlapping, no resolution occurs, so the error is never
    found.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地，所有类型类解析都是一致的：在每个模块可见的实例子集中，类型类解析可以无歧义地完成。此外，`ins` 和 `ins'` 的类型解决了类型类解析，因此在
    `D` 中，当数据库现在重叠时，不会发生解析，因此错误永远不会被发现。
- en: 'It is easy to dismiss this example as an implementation wart in GHC, and continue
    pretending that global uniqueness of instances holds. However, the problem with
    global uniqueness of instances is that they are inherently nonmodular: you might
    find yourself unable to compose two components because they accidentally defined
    the same type class instance, even though these instances are plumbed deep in
    the implementation details of the components. This is a big problem for Backpack,
    or really any module system, whose mantra of separate modular development seeks
    to guarantee that linking will succeed if the library writer and the application
    writer develop to a common signature.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子很容易被看作是 GHC 中的一个实现上的瑕疵，继续假装类型类实例的全局唯一性是成立的。然而，类型类实例全局唯一性的问题在于它们本质上是非模块化的：你可能会发现自己无法组合两个组件，因为它们意外地定义了相同的类型类实例，尽管这些实例深深地嵌入在组件的实现细节中。对于
    Backpack 或者任何模块系统来说，这是一个很大的问题，它们的分离模块化开发宗旨旨在保证，如果库的编写者和应用的编写者按照共同的签名进行开发，链接将会成功。
