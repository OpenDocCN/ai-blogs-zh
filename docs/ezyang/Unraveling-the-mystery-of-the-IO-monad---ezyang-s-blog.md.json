["```\nmain = do\n    putStr \"Hello \"\n    putStrLn \"world!\"\n\n```", "```\nnewtype State s a = State { runState :: s -> (a, s) }\n\n```", "```\ndo x <- doSomething\n   y <- doSomethingElse\n   return (x + y)\n\n```", "```\n\\s ->\nlet (x, s')  = doSomething s\n    (y, s'') = doSomethingElse s' in\n(x + y, s'')\n\n```", "```\ndoSomething s = trace \"doSomething\" $ ...\ndoSomethingElse s = trace \"doSomethingElse\" $ ...\n\n```", "```\nimport Debug.Trace\n\nf = \\s ->\n        let (x, s')  = doSomething s\n            (y, s'') = doSomethingElse s'\n        in (3, s'')\n\ndoSomething s = trace \"doSomething\" $ (0, s)\ndoSomethingElse s = trace \"doSomethingElse\" $ (3, s)\n\nmain = print (f 2)\n\n```", "```\nf = \\s ->\n        case doSomething s of\n            (x, s') -> case doSomethingElse s' of\n                          (y, s'') -> (3, s'')\n\n```", "```\nf = \\s ->\n        case doSomething s of\n            ~(x, s') -> case doSomethingElse s' of\n                          ~(y, s'') -> (3, s'')\n\n```", "```\nnewtype IO a = IO (State# RealWorld -> (# State# RealWorld, a #))\n\n```", "```\nmain = do\n    putStr \"Hello \"\n    putStrLn \"world!\"\n\n```", "```\nMain.main2 :: [GHC.Types.Char]\nMain.main2 = GHC.Base.unpackCString# \"world!\"\n\nMain.main3 :: [GHC.Types.Char]\nMain.main3 = GHC.Base.unpackCString# \"Hello \"\n\nMain.main1 :: GHC.Prim.State# GHC.Prim.RealWorld\n              -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)\nMain.main1 =\n  \\ (eta_ag6 :: GHC.Prim.State# GHC.Prim.RealWorld) ->\n    case GHC.IO.Handle.Text.hPutStr1\n           GHC.IO.Handle.FD.stdout Main.main3 eta_ag6\n    of _ { (# new_s_alV, _ #) ->\n    case GHC.IO.Handle.Text.hPutStr1\n           GHC.IO.Handle.FD.stdout Main.main2 new_s_alV\n    of _ { (# new_s1_alJ, _ #) ->\n    GHC.IO.Handle.Text.hPutChar1\n      GHC.IO.Handle.FD.stdout System.IO.hPrint2 new_s1_alJ\n    }\n    }\n\nMain.main4 :: GHC.Prim.State# GHC.Prim.RealWorld\n              -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)\nMain.main4 =\n  GHC.TopHandler.runMainIO1 @ () Main.main1\n\n:Main.main :: GHC.Types.IO ()\n:Main.main =\n  Main.main4\n\n```", "```\nMain.main1 =\n  \\ (s :: State# RealWorld) ->\n    case hPutStr1 stdout main3 s  of _ { (# s', _ #) ->\n    case hPutStr1 stdout main2 s' of _ { (# s'', _ #) ->\n    hPutChar1 stdout hPrint2 s''\n    }}\n\n```", "```\ncase x of _ {\n  __DEFAULT -> \\s :: State# RealWorld -> (# s, () #)\n}\n\n```", "```\ncase seqS# x s of _ {\n  s' -> (# s', () #)\n}\n\n```"]