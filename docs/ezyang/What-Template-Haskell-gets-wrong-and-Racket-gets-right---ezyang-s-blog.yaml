- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:05'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:05'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'What Template Haskell gets wrong and Racket gets right : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[What Template Haskell gets wrong and Racket gets right : ezyang’s blog](http://blog.ezyang.com/2016/07/what-template-haskell-gets-wrong-and-racket-gets-right/)'
- en: 来源：[http://blog.ezyang.com/2016/07/what-template-haskell-gets-wrong-and-racket-gets-right/](http://blog.ezyang.com/2016/07/what-template-haskell-gets-wrong-and-racket-gets-right/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2016/07/what-template-haskell-gets-wrong-and-racket-gets-right/](http://blog.ezyang.com/2016/07/what-template-haskell-gets-wrong-and-racket-gets-right/)
- en: 'Why are [macros in Haskell](https://stackoverflow.com/questions/10857030/whats-so-bad-about-template-haskell)
    terrible, but macros in Racket great? There are certainly many small problems
    with GHC''s Template Haskell support, but I would say that there is one fundamental
    design point which Racket got right and Haskell got wrong: Template Haskell does
    not sufficiently distinguish between *compile-time* and *run-time* phases. Confusion
    between these two phases leads to strange claims like “Template Haskell doesn’t
    work for cross-compilation” and stranger features like `-fexternal-interpreter`
    (whereby the cross-compilation problem is “solved” by shipping the macro code
    to the target platform to be executed).'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么 [Haskell 中的宏](https://stackoverflow.com/questions/10857030/whats-so-bad-about-template-haskell)
    糟糕，而 Racket 中的宏很棒？ GHC 的 Template Haskell 支持确实存在许多小问题，但我认为有一个基本设计点 Racket 做对了而
    Haskell 做错了：Template Haskell 没有充分区分 *编译时* 和 *运行时* 阶段。混淆这两个阶段会导致诸如“Template Haskell
    不适用于交叉编译”的奇怪说法，以及 `-fexternal-interpreter` 这样更奇怪的特性（通过将宏代码发送到目标平台执行来“解决”交叉编译问题）。
- en: The difference in design can be seen simply by comparing the macro systems of
    Haskell and Racket. This post assumes knowledge of either Template Haskell, or
    Racket, but not necessarily both.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 只需比较 Haskell 和 Racket 的宏系统设计差异即可见端倪。本文假设您了解 Template Haskell 或 Racket 的知识，但不一定两者皆通。
- en: '**Basic macros**. To establish a basis of comparison, let’s compare how macros
    work in Template Haskell as opposed to Racket. In Template Haskell, the primitive
    mechanism for invoking a macro is a *splice*:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**基本宏**。为了建立比较基础，让我们比较一下 Template Haskell 和 Racket 中宏的工作方式。在 Template Haskell
    中，调用宏的基本机制是 *splice*：'
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, `$( ... )` indicates the splice, which runs `...` to compute an AST which
    is then spliced into the program being compiled. The syntax tree is constructed
    using library functions `litE` (literal expression) and `intPrimL` (integer primitive
    literal).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`$( ... )` 表示插入，它运行 `...` 来计算一个 AST，然后将其插入正在编译的程序中。语法树是使用库函数 `litE`（字面表达式）和
    `intPrimL`（整数原始字面量）构造的。
- en: 'In Racket, the macros are introduced using [transformer bindings](https://docs.racket-lang.org/reference/syntax-model.html#%28part._transformer-model%29),
    and invoked when the expander encounters a use of this binding:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Racket 中，宏是通过 [transformer bindings](https://docs.racket-lang.org/reference/syntax-model.html#%28part._transformer-model%29)
    引入，并在扩展器遇到此绑定的使用时调用：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, `define-syntax` defines a macro named `macro`, which takes in the syntax
    `stx` of its usage, and unconditionally returns a [syntax object](https://docs.racket-lang.org/guide/stx-obj.html)
    representing the literal two (constructed using `datum->syntax`, which converts
    Scheme data into ASTs which construct them).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`define-syntax` 定义了一个名为 `macro` 的宏，它接受其用法的语法 `stx`，并无条件地返回代表文字二的 [语法对象](https://docs.racket-lang.org/guide/stx-obj.html)（使用
    `datum->syntax` 将 Scheme 数据转换为构造它们的 AST）。
- en: 'Template Haskell macros are obviously less expressive than Racket''s (an identifier
    cannot directly invoke a macro: splices are always syntactically obvious); conversely,
    it is easy to introduce a splice special form to Racket (hat tip to Sam Tobin-Hochstadt
    for this code—if you are not a Racketeer don’t worry too much about the specifics):'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Template Haskell 宏显然不如 Racket 的表达力强（标识符不能直接调用宏：插入总是在语法上显而易见）；相反，向 Racket 引入插入特殊形式很容易（对于此代码，特别感谢
    Sam Tobin-Hochstadt — 如果你不是 Racketeer，不必过于担心具体细节）：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: I will reuse `splice` in some further examples; it will be copy-pasted to keep
    the code self-contained but not necessary to reread.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在一些进一步的示例中重用 `splice`；它将被复制粘贴以保持代码自包含性，但不需要重新阅读。
- en: '**Phases of macro helper functions.** When writing large macros, it''s frequently
    desirable to factor out some of the code in the macro to a helper function. We
    will now refactor our example to use an external function to compute the number
    two.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**宏帮助函数的阶段**。在编写大型宏时，经常希望将一些代码因子化到一个帮助函数中。现在我们将重构我们的示例，使用外部函数来计算数字二。'
- en: 'In Template Haskell, you are not allowed to define a function in a module and
    then immediately use it in a splice:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在模板哈斯克尔中，您不允许在一个模块中定义一个函数，然后立即在一个片段中使用它：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'However, if we place the definition of `f` in a module (say `B`), we can import
    and then use it in a splice:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们将 `f` 的定义放在一个模块中（比如 `B`），我们可以导入然后在一个片段中使用它：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In Racket, it is possible to define a function in the same file you are going
    to use it in a macro. However, you must use the special-form `define-for-syntax`
    which puts the function into the correct *phase* for a macro to use it:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Racket 中，可以在同一个文件中定义一个函数，并在宏中使用它。但是，您必须使用特殊形式 `define-for-syntax` 将函数放入适合宏使用的正确*阶段*中：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If we attempt to simply `(define (f x) (+ x 1))`, we get an error “f: unbound
    identifier in module”. The reason for this is Racket’s phase distinction. If we
    `(define f ...)`, `f` is a *run-time* expression, and run-time expressions cannot
    be used at *compile-time*, which is when the macro executes. By using `define-for-syntax`,
    we place the expression at compile-time, so it can be used. (But similarly, `f`
    can now no longer be used at run-time. The only communication from compile-time
    to run-time is via the expansion of a macro into a syntax object.)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '如果我们尝试简单地 `(define (f x) (+ x 1))`，我们会得到一个错误 “f: unbound identifier in module”。原因是
    Racket 的阶段区分。如果我们 `(define f ...)`，`f` 是一个*运行时*表达式，而运行时表达式不能在*编译时*使用，这是宏执行时的情况。通过使用
    `define-for-syntax`，我们将表达式放置在编译时，以便可以使用它。（但同样地，`f` 现在不能再在运行时使用。从编译时到运行时的唯一通信是通过宏的扩展为语法对象。）'
- en: 'If we place `f` in an external module, we can also load it. However, we must
    once again indicate that we want to bring `f` into scope as a *compile-time* object:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将 `f` 放在一个外部模块中，我们也可以加载它。但是，我们必须再次指示我们希望将 `f` 作为*编译时*对象引入作用域：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As opposed to the usual `(require f-module)`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 与通常的 `(require f-module)` 相反。
- en: '**Reify and struct type transform bindings.** In Template Haskell, the `reify`
    function gives Template Haskell code access to information about defined data
    types:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**反映和结构类型变换绑定。** 在模板哈斯克尔中，`reify` 函数使模板哈斯克尔代码可以访问有关定义的数据类型的信息：'
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This example code prints out information about `Single` at compile time. Compiling
    this module gives us the following information about `List`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例代码在编译时打印有关 `Single` 的信息。编译此模块会给我们关于 `List` 的以下信息：
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`reify` is implemented by interleaving splices and typechecking: all top-level
    declarations prior to a top-level splice are fully typechecked prior to running
    the top-level splice.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`reify` 函数通过交错插入片段和类型检查实现：在顶层片段之前的所有顶层声明在运行顶层片段之前都已完全类型检查。'
- en: 'In Racket, information about structures defined using the `struct` form can
    be passed to compile-time via a [structure type transformer binding](https://docs.racket-lang.org/reference/structinfo.html):'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Racket 中，使用 `struct` 形式定义的结构的信息可以通过 [结构类型转换器绑定](https://docs.racket-lang.org/reference/structinfo.html)
    传递到编译时：
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Which outputs:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE10]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The code is a bit of a mouthful, but what is happening is that the `struct`
    macro defines `single` as a *syntax transformer*. A syntax transformer is always
    associated with a *compile-time* lambda, which `extract-struct-info` can interrogate
    to get information about the `struct` (although we have to faff about with `syntax-local-value`
    to get our hands on this lambda—`single` is unbound at compile-time!)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 代码有点冗长，但发生的事情是 `struct` 宏将 `single` 定义为*语法转换器*。语法转换器始终与*编译时* lambda 关联，`extract-struct-info`
    可以查询以获取有关 `struct` 的信息（尽管我们必须使用 `syntax-local-value` 来获取这个 lambda——在编译时 `single`
    是未绑定的！）
- en: '**Discussion.** Racket’s compile-time and run-time phases are an extremely
    important idea. They have a number of consequences:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论。** Racket 的编译时和运行时阶段是一个非常重要的概念。它们有许多后果：'
- en: You don’t need to run your run-time code at compile-time, nor vice versa. Thus,
    cross-compilation is supported trivially because only your run-time code is ever
    cross-compiled.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您不需要在编译时运行您的运行时代码，反之亦然。因此，跨编译被支持得非常简单，因为只有您的运行时代码被跨编译。
- en: Your module imports are separated into run-time and compile-time imports. This
    means your compiler only needs to load the compile-time imports into memory to
    run them; as opposed to Template Haskell which loads *all* imports, run-time and
    compile-time, into GHC's address space in case they are invoked inside a splice.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模块导入分为运行时和编译时导入。这意味着您的编译器只需加载编译时导入到内存中即可运行它们；与模板哈斯克尔不同，后者会将*所有*导入（包括运行时和编译时）加载到
    GHC 的地址空间中，以防它们在片段内部被调用。
- en: 'Information cannot flow from run-time to compile-time: thus any compile-time
    declarations (`define-for-syntax`) can easily be compiled prior to performing
    expanding simply by ignoring everything else in a file.'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 信息不能从运行时流向编译时：因此任何编译时声明（`define-for-syntax`）都可以简单地在执行扩展之前编译，只需忽略文件中的其他所有内容。
- en: Racket was right, Haskell was wrong. Let’s stop blurring the distinction between
    compile-time and run-time, and get a macro system that works.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Racket是正确的，Haskell是错误的。让我们停止模糊编译时和运行时之间的界限，并且设计一个可行的宏系统。
- en: '*Postscript.* Thanks to a tweet from [Mike Sperber](https://twitter.com/sperbsen/status/740411982726234112)
    which got me thinking about the problem, and a fascinating breakfast discussion
    with Sam Tobin-Hochstadt. Also thanks to Alexis King for helping me debug my `extract-struct-info`
    code.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*附言.* 感谢来自[Mike Sperber](https://twitter.com/sperbsen/status/740411982726234112)的一条推文，它让我思考了这个问题，还有与Sam
    Tobin-Hochstadt有趣的早餐讨论。同时也感谢Alexis King帮助我调试`extract-struct-info`代码。'
- en: '*Further reading.* To learn more about Racket''s macro phases, one can consult
    the documentation [Compile and Run-Time Phases](https://docs.racket-lang.org/guide/stx-phases.html)
    and [General Phase Levels](https://docs.racket-lang.org/guide/phases.html). The
    phase system is also described in the paper [Composable and Compileable Macros](https://www.cs.utah.edu/plt/publications/macromod.pdf).'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*进一步阅读.* 想要了解更多关于Racket的宏阶段，可以查阅文档[编译和运行时阶段](https://docs.racket-lang.org/guide/stx-phases.html)和[通用阶段级别](https://docs.racket-lang.org/guide/phases.html)。此阶段系统也在论文[可组合和可编译的宏](https://www.cs.utah.edu/plt/publications/macromod.pdf)中有所描述。'
