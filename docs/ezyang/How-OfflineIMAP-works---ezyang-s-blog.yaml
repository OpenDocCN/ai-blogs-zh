- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:27'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:27'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'How OfflineIMAP works : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OfflineIMAP 工作原理：ezyang 的博客
- en: 来源：[http://blog.ezyang.com/2012/08/how-offlineimap-works/](http://blog.ezyang.com/2012/08/how-offlineimap-works/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2012/08/how-offlineimap-works/](http://blog.ezyang.com/2012/08/how-offlineimap-works/)
- en: 'As software engineers, we are trained to be a little distrustful of marketing
    copy like this:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 作为软件工程师，我们对这样的营销文案总是有些怀疑：
- en: OfflineIMAP is SAFE; it uses an algorithm designed to prevent mail loss at all
    costs. Because of the design of this algorithm, even programming errors should
    not result in loss of mail. I am so confident in the algorithm that I use my own
    personal and work accounts for testing of OfflineIMAP pre-release, development,
    and beta releases.
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: OfflineIMAP 是安全的；它使用一种设计来防止任何情况下的邮件丢失。由于该算法的设计，即使是编程错误也不会导致邮件丢失。我对这个算法如此自信，以至于我用自己的个人和工作账户来测试
    OfflineIMAP 的预发布、开发和测试版发布。
- en: 'What is this algorithm? Why does it work? Where is the correctness proof? Unfortunately,
    no where in OfflineIMAP’s end user documentation is the algorithm described in
    any detail that would permit a software engineer to convince himself of OfflineIMAP’s
    correctness. Fortunately for us, OfflineIMAP is open source, so we can find out
    what this mysterious algorithm is. In fact, OfflineIMAP''s synchronization algorithm
    is very simple and elegant. (Nota bene: for simplicity’s sake, we don’t consider
    message flag synchronization.)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这个算法是什么？它为什么有效？它的正确性证明在哪里？不幸的是，OfflineIMAP 的最终用户文档中没有详细描述这个算法的内容，以便软件工程师能够确信
    OfflineIMAP 的正确性。幸运的是，OfflineIMAP 是开源的，因此我们可以找出这个神秘算法的内容。实际上，OfflineIMAP 的同步算法非常简单和优雅。（Nota
    bene：为简单起见，我们不考虑消息标志的同步。）
- en: Preliminaries
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备工作
- en: Define our local and remote repositories (Maildir and IMAP, respectively) to
    consist of sets over messages L and R. In a no-delete synchronization scheme,
    we would like to perform some set of operations such that end states of the repositories
    L' and R' are L ∪ R.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 定义我们的本地和远程仓库（分别为 Maildir 和 IMAP）为消息集合 L 和 R。在不删除同步方案中，我们希望执行一些操作集，以使仓库 L' 和
    R' 的最终状态为 L ∪ R。
- en: 'However, no-delete synchronization schemes work poorly for email, where we
    would like the ability to delete messages and have those changes be propagated
    too. To this end, OfflineIMAP defines a third repository called the status repository,
    also a set over messages, which says whether or not a message has been synchronized
    in the past without an intervening synchronized delete. There are now seven possible
    states for a message to have, based on which repositories it is a member:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于邮件而言，不删除的同步方案效果不佳，我们希望能够删除消息并使这些更改传播。为此，OfflineIMAP 定义了第三个称为状态库的仓库，也是一组消息的集合，用于指示消息是否过去曾同步过而没有中间同步删除。现在消息有七种可能的状态，基于它们属于哪些仓库：
- en: 'Considering all possible combinations:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑所有可能的组合：
- en: '**Synchronized** (L,R,S): The message is fully synchronized and needs no further
    processing.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**已同步** (L,R,S)：消息已完全同步，无需进一步处理。'
- en: '**New Local** (L): The message was newly added to the local repository and
    needs to be uploaded.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地新增** (L)：消息是新添加到本地仓库中，需要上传。'
- en: '**New Remote** (R): The message was newly added to the remote repository and
    needs to be downloaded.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**远程新增** (R)：消息是新添加到远程仓库中，需要下载。'
- en: '**Status Missing** (L,R): The message is synchronized but our status is out-of-date.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态丢失** (L,R)：消息已同步，但我们的状态已过时。'
- en: '**Remote Removed** (L,S): The message was synchronized, but since then was
    removed from the remote; it should now be removed from local.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**远程删除** (L,S)：消息已同步，但之后从远程删除；现在应该从本地删除。'
- en: '**Local Removed** (R,S): The message was synchronized, but since then was removed
    from the local; it should now be removed from remote.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地删除** (R,S)：消息已同步，但之后从本地删除；现在应该从远程删除。'
- en: '**Missing** (S): The message has been deleted everywhere and our status has
    a stale entry for it.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**丢失** (S)：消息已在所有地方删除，而我们的状态中有一个过时的条目。'
- en: The green-shaded region of the Venn diagram is what we would like L, R and S
    to cover at the end of synchronization.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Venn 图表的绿色阴影区域是我们希望在同步结束时 L、R 和 S 覆盖的部分。
- en: Algorithm
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 算法
- en: 'Define a synchronization operation on a source, destination and status repository
    `syncto(src, dst, status)` to be these two steps:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 定义同步操作源、目的地和状态库 `syncto(src, dst, status)` 为以下两个步骤：
- en: Calculate the set difference `src - status`, and copy these messages to `dst`
    and `status`.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算集合差异 `src - status`，并将这些消息复制到 `dst` 和 `status`。
- en: Calculate the set difference `status - src`, and delete these messages from
    `dst` and `status`.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算集合差异 `status - src`，并从 `dst` 和 `status` 中删除这些消息。
- en: 'The full synchronization algorithm is then:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然后完整的同步算法是：
- en: '`syncto(R, L, S)` (download changes)'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`syncto(R, L, S)`（下载变更）'
- en: '`syncto(L, R, S)` (upload changes)'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`syncto(L, R, S)`（上传变更）'
- en: How it works
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何运作
- en: In the absence of crashes, the correctness proof only involves verifying that
    the status repository invariant (that messages in status have been synchronized
    in the past without an intervening synchronized delete) is preserved over all
    four operations, and that the set differences are, in fact, precisely the sets
    of messages we want to copy and delete. However, we can also try and look at how
    the local, remote and status repositories change as the algorithm progresses.
    In particular, the contents of the status repository in the first `syncto` is
    slightly surprising as it evolves differently from `local`, despite having the
    same operations applied to it (it then evolves in lockstep with `remote`).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有崩溃的情况下，正确性证明仅涉及验证状态仓库不变式（过去已同步消息且没有中间同步删除的消息），这一不变式在所有四个操作中都得到保持，并且确实是我们希望复制和删除的消息集的精确集合差异。然而，我们也可以尝试查看随着算法的进行，本地、远程和状态仓库的变化。特别是，在第一个
    `syncto` 中，状态仓库的内容演变方式略有惊讶，尽管对它应用了相同的操作（然后它与 `remote` 一起同步进展）。
- en: Another important correctness claim is that OfflineIMAP never “loses mail”.
    Under what conditions is mail deleted? When it is present in status repository,
    but not in the local or remote repository. So it is easy to see that when the
    status repository is “lost” (either corrupted, or deleted as the instructions
    tell you to if you delete the contents of your local folders), OfflineIMAP will
    conservatively perform a full, no-delete synchronization between the two sources.
    So long as the status repository never contains data for more messages than it
    ought to, OfflineIMAP will not delete your mail.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的正确性声明是，OfflineIMAP 永远不会“丢失邮件”。在什么情况下会删除邮件？当它存在于状态仓库中，但不在本地或远程仓库中时。因此，很容易看出，当状态仓库“丢失”（无论是损坏还是按照指示删除本地文件夹内容时），OfflineIMAP
    将在两个源之间进行全面的、不删除的同步。只要状态仓库不包含比应该有的更多消息的数据，OfflineIMAP 就不会删除您的邮件。
- en: Variations
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 变体
- en: Suppose that I have more disk space available on local disk for Maildir than
    my remote IMAP server. Eventually, you will end up in the awkward position of
    wanting to delete messages from your remote IMAP server without correspondingly
    nuking them from your local mail store. OfflineIMAP provides the `maxage` option
    (in which OfflineIMAP refuses to acknowledge the existence of messages older than
    some sliding window), but what if we *really* wanted to be sure that OfflineIMAP
    would never ever delete messages from my local repository?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我在本地磁盘上为 Maildir 提供的磁盘空间比远程 IMAP 服务器多。最终，你将会处于这样的尴尬境地：希望从远程 IMAP 服务器删除消息，而不会从本地邮件存储中彻底删除它们。OfflineIMAP
    提供了 `maxage` 选项（其中 OfflineIMAP 拒绝承认比某个滑动窗口更老的消息的存在），但如果我们*真的*希望确保 OfflineIMAP
    永远不会从我的本地仓库中删除消息，会怎样呢？
- en: 'Simple: Skip step 1-2.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 简单：跳过步骤 1-2。
- en: Conclusion
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论
- en: By utilizing a third repository, for which data loss results in a *conservative*
    action on the part of the program, OfflineIMAP achieves its claims of *an algorithm
    designed to prevent mail loss at all costs*. It is also a simple algorithm, and
    I hope that any computer scientist or software engineer using this software will
    take the time to convince themselves of its correctness, rather than relying on
    the hearsay of some marketing material.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用第三个仓库，对程序的部分数据丢失导致*保守*的操作，OfflineIMAP 实现了其*不惜一切代价防止邮件丢失的算法*声明。这也是一个简单的算法，我希望任何使用这个软件的计算机科学家或软件工程师都能花时间确保其正确性，而不是依赖于某些市场材料的传闻。
