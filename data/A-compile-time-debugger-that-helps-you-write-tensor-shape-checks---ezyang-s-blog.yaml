- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:16:57'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:16:57'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'A compile-time debugger that helps you write tensor shape checks : ezyang’s
    blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个帮助您编写张量形状检查的编译时调试器：ezyang's blog
- en: 来源：[http://blog.ezyang.com/2018/04/a-compile-time-debugger-that-helps-you-write-tensor-shape-checks/](http://blog.ezyang.com/2018/04/a-compile-time-debugger-that-helps-you-write-tensor-shape-checks/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2018/04/a-compile-time-debugger-that-helps-you-write-tensor-shape-checks/](http://blog.ezyang.com/2018/04/a-compile-time-debugger-that-helps-you-write-tensor-shape-checks/)
- en: A run-time debugger allows you to see concrete values in a program, make changes
    to them, and continue running your program. A **compile-time debugger** allows
    you to see symbolic values in a program, reason about them, and write the rest
    of your program, e.g. filling in missing tensor size checks, for example.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时调试器允许您查看程序中的具体值，对其进行更改，并继续运行程序。一个**编译时调试器**允许您查看程序中的符号值，对其进行推理，并编写程序的其余部分，例如填写缺失的张量大小检查。
- en: Here's an example of a compiler-time debugger in action.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这是编译时调试器实际操作的一个例子。
- en: 'Let''s suppose you are writing a simple program to read a pair of tensors from
    two files and do a matrix multiply on them. "Easy," you think, while writing the
    following program:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您正在编写一个简单的程序，从两个文件中读取一对张量并对它们进行矩阵乘法。“简单”，您想，然后编写以下程序：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'However, there is a twist: this matrix multiply is an *unchecked* matrix multiply.
    If you pass it tensors which cannot be validly multiplied together, this is undefined
    behavior. Your compiler has cottoned up to this fact and is refusing to compile
    your program. You fire up your compile-time debugger, and it drops you to the
    point of your program right before the error:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有一个曲折：这个矩阵乘法是一个*未经检查*的矩阵乘法。如果传递的张量无法有效地相乘，这是未定义的行为。您的编译器已经意识到了这一点，并拒绝编译您的程序。您启动编译时调试器，它将您放到程序中出现错误的地方：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s take a careful look at the variables in scope. Our compile-time debugger
    tells us the type of a variable x by writing `x : t`, meaning that x has type
    t. We have all sorts of ordinary types like natural numbers (Nat) and lists of
    natural numbers (List(Nat)). More interestingly, a *tensor* is parametrized by
    a list of natural numbers, which specify their sizes at each dimension. (For simplicity,
    the underlying field of the tensor is assumed to be fixed.)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们仔细看一下作用域中的变量。我们的编译时调试器通过写`x : t`来告诉我们变量x的类型。我们有各种普通类型，如自然数（Nat）和自然数列表（List(Nat)）。更有趣的是，*张量*是由自然数列表参数化的，这些列表指定它们在每个维度上的大小。（为简单起见，假设张量的底层字段是固定的。）'
- en: 'Our debugger has a command line, so we can ask it questions about the types
    of things in our program (`:t` is for type):'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的调试器有一个命令行，因此我们可以询问它关于程序中事物类型的问题（`:t`用于类型）：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The type of matrix multiplication should make sense. We say a matrix multiply
    takes two 2-D tensors of sizes AxB and BxC, and produces a tensor of size AxC.
    An equivalent way of phrasing, as was done in the type above, is to say, “for
    any natural numbers A, B and C, matrix multiply will take a tensor of size AxB
    and a tensor of BxC, and give you a tensor of size AxC”.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵乘法的类型应该是合理的。我们说矩阵乘法接受两个大小为AxB和BxC的二维张量，并生成大小为AxC的张量。如上所述，另一种表达方式是说，“对于任何自然数A、B和C，矩阵乘法将接受大小为AxB和BxC的张量，并给出大小为AxC的张量”。
- en: 'It is also instructive to see what the type of `load` is:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`load`的类型也是有教育意义的：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We do not know what the dimensions of a tensor loaded from a file are; all we
    can say is that *there exists* some size (list of natural numbers), which describes
    the tensor in question. Our compile-time debugger has helpfully given us names
    for the sizes of our tensors in scope, `_x_size` and `_y_size`, and has also told
    us how to compute them at runtime (`x.size()` and `y.size()`).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不知道从文件加载的张量的维度是多少；我们只能说*存在*一些大小（自然数列表），描述了所讨论的张量。我们的编译时调试器友好地为我们提供了作用域内张量大小的名称
    `_x_size` 和 `_y_size`，并告诉我们如何在运行时计算它们（`x.size()` 和 `y.size()`）。
- en: 'Enough of this. Let''s remind ourselves why our program has failed to typecheck:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 'Enough of this. Let''s remind ourselves why our program has failed to typecheck:'
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The compiler is absolutely right. We don't know anything about the size of x
    or y; they could be 2D, or they could be 100D, or not have matching dimensions.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器是完全正确的。我们对x或y的大小一无所知；它们可能是2D，也可能是100D，或者根本不具有匹配的维度。
- en: 'As an aside: sometimes, it''s OK not to know anything about the sizes. Consider
    the case of adding a tensor to itself:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种附加说明：有时候，不了解大小的任何信息也是可以的。考虑将张量加到自身的情况：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We don't know anything about `_x_size`, but `add` doesn't care; it'll take any
    `List(Nat)`, and `_x_size` is certainly one of those.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对`_x_size`一无所知，但`add`并不在乎；它会接受任何`List(Nat)`，而`_x_size`肯定是其中之一。
- en: Back to business. We are going to insert dynamic checks will will refine our
    knowledge of x and y, until it is obvious that matrix multiply will succeed.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 回到正题。我们将插入动态检查，以完善我们对x和y的知识，直到显然矩阵乘法将成功。
- en: 'What is a dynamic check? Operationally, a dynamic check tests whether or not
    some condition is true, and aborts if it is not. If we successfully run the dynamic
    check, we now have new *information* about the symbolic types in our scope. So
    for example, after adding a *runtime* test that two numbers are equal, we can
    subsequently assume at *compile time* that the numbers are equal:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是动态检查？操作上，动态检查测试某个条件是否为真，并在条件不满足时中止。如果我们成功运行动态检查，我们现在对我们作用域中的符号类型有了新的*信息*。例如，添加一个*运行时*测试，检查两个数字是否相等后，我们随后可以在*编译时*假设这些数字是相等的：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'First things first, we''d like to assert that our tensors are 2D tensors:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们要确定我们的张量是2D张量：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'List length is a very helpful property to test against, since it greatly specifies
    the shape of the list in question. We can do the same for `_y_size`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 列表长度是一个非常有用的属性，用于对比测试，因为它极大地指定了所讨论列表的形状。我们也可以对`_y_size`做同样的事情：
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We''re very close now. All we need to do is assert that the inner dimensions
    are equal:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在非常接近了。我们所需要做的就是断言内部维度是相等的：
- en: '[PRE9]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Victory!
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 胜利！
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Extracting the contents of this session back into our code, we now have:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 将此会话内容提取回我们的代码，我们现在有：
- en: '[PRE11]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '* * *'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'At this point, I must come clean: the compile time debugger I''ve described
    above doesn''t actually exist. But it is not all that different from the proof
    modes of interactive proof assistants the automated theorem proving community
    works with today. But unlike theorem proving, we have a secret weapon: when the
    going gets tough, the tough turns into a runtime check. Conventional wisdom says
    that automated theorem proving requires too idealized a setting to be useful in
    writing software today. Conventional wisdom is wrong.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我必须坦白：我上面描述的编译时调试器实际上并不存在。但它与交互式证明助理的证明模式并没有太大不同，这是自动定理证明社区今天使用的。但与定理证明不同的是，我们有一个秘密武器：在困难时刻，强者会变成运行时检查。传统智慧认为自动定理证明需要过于理想化的设置才能在今天的软件编写中有用。传统智慧错了。
