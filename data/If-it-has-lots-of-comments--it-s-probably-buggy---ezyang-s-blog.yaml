- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:46'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:46'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'If it has lots of comments, it’s probably buggy : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果有很多注释，那可能就有bug：ezyang的博客
- en: 来源：[http://blog.ezyang.com/2011/05/byron-cook-sla/](http://blog.ezyang.com/2011/05/byron-cook-sla/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2011/05/byron-cook-sla/](http://blog.ezyang.com/2011/05/byron-cook-sla/)
- en: If it has lots of comments, it’s probably buggy
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果有很多注释，那么它可能有bug
- en: Yesterday we had guest speaker [Byron Cook](http://research.microsoft.com/en-us/people/bycook/)
    come in to give a talk about [SLAM](http://research.microsoft.com/en-us/projects/slam/),
    a nice real-world example of theorem proving technology being applied to device
    drivers.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 昨天，我们邀请到了特邀演讲嘉宾[拜伦·库克](http://research.microsoft.com/en-us/people/bycook/)，他来讲解关于[SLAM](http://research.microsoft.com/en-us/projects/slam/)的话题，这是一个将定理证明技术应用于设备驱动程序的很好的实际例子。
- en: 'Having worked in the trenches, Byron had some very hilarious (and interesting)
    quips about device driver development. After all, when a device driver crashes,
    it''s not the device driver writer that gets blamed: it’s Microsoft. He pointed
    out that, in a hardware company, “If you’re not so smart, you get assigned to
    write software drivers. The smart people go work on hardware”, and that when you’re
    reading device driver code, “If there are a lot of comments and they’re misspelled,
    there’s probably a bug.” Zing! We’re always used to extolling the benefits of
    commenting your code, but it certainly is indisputable that writing comments can
    help clarify confusing code to yourself, whereas if the code wasn’t confusing
    in the first place you wouldn’t have felt the need to write comments anyway. Thus,
    one situation is some guru from the days of yore wrote very clever code, and then
    you came along and weren’t quite clever enough to fully understand what was going
    on, so you wrote lots of comments to explain the code to yourself as you went
    along. Well, it’s not the comment’s fault, but the fact that the code was too
    clever for you probably means you introduced a bug when you made your modifications.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 拜伦曾在设备驱动程序开发方面有过一些非常搞笑（和有趣）的评论。毕竟，当设备驱动程序崩溃时，责任不在设备驱动程序编写者身上，而是在微软身上。他指出，在硬件公司，“如果你不够聪明，你会被分配去写软件驱动程序。聪明人会去做硬件工作”，以及当你阅读设备驱动程序代码时，“如果有很多注释而且拼写错误，那可能就有bug。”
    尖锐！我们一直习惯于赞扬注释代码的好处，但毫无疑问，编写注释可以帮助澄清对自己而言令人困惑的代码，而如果代码一开始就不那么令人困惑，你就不会感到有必要写注释了。因此，有时候是过去的某位大师写了非常聪明的代码，然后你来到这里，却不够聪明完全理解当时的情况，因此在修改时写了很多注释来解释代码。嗯，这不是注释的错，但事实上代码对你来说太聪明了，可能意味着在修改时引入了bug。
- en: The approach used by SLAM to deal with the exponential state space explosion
    was also pretty interesting. What they do is throw out as much state as possible
    (without eliminating the bug), and then see whether or this simplified program
    triggers a bug. It usually does, though due to a spurious transition, so then
    they introduce just enough extra state to remove that spurious path, and repeat
    until the simplified program is judged to fulfill the assert (success) or we come
    across a path in the simplified program which is not spurious in the real program.
    The other really interesting bit was their choice of specification language was
    essentially glorified asserts. In an academic class like Temporal Logic, you spend
    most of your time studying logics like CTL and LTL, which are strange and foreign
    to device driver writers; asserts are much easier to get people started with.
    I could definitely see this applying to other areas of formal verification as
    well (assert based type annotations, anyone?)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: SLAM用于处理指数级状态空间爆炸的方法也非常有趣。他们的做法是尽可能地丢弃多余的状态（而不是消除错误），然后查看简化后的程序是否触发错误。通常情况下会触发，尽管由于虚假的转换，所以他们会引入足够的额外状态来消除这个虚假路径，然后重复这个过程，直到简化后的程序被认为满足断言（成功），或者我们在简化后的程序中发现一个在真实程序中不是虚假的路径。另一个非常有趣的地方是，他们选择的规约语言本质上是增强的断言。在像时态逻辑这样的学术课程中，你会花费大部分时间研究诸如CTL和LTL之类的逻辑，这些对于设备驱动程序编写者来说很陌生和奇怪；断言则更容易让人们开始。我确实可以看到这个方法也适用于形式验证的其他领域（基于断言的类型注释，任何人？）
- en: '*Postscript.* I have some absolutely gargantuan posts coming down the pipeline,
    but in between revising for exams and last minute review sessions, I haven’t been
    able to convince myself that finishing up these posts prior to exams is a good
    use of my time. But they will come eventually! Soon! I hope!'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*附言.* 我有一些绝对巨大的帖子即将推出，但在复习考试和临时复习会议之间，我还没有说服自己在考试前完成这些帖子是一个好的时间利用。但它们最终会来！很快！希望！'
