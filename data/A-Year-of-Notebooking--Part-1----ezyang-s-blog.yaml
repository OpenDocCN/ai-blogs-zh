- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:45'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:45'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'A Year of Notebooking (Part 1) : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'A Year of Notebooking (Part 1) : ezyang’s blog'
- en: 来源：[http://blog.ezyang.com/2011/06/a-year-of-notebooking-part-1/](http://blog.ezyang.com/2011/06/a-year-of-notebooking-part-1/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2011/06/a-year-of-notebooking-part-1/](http://blog.ezyang.com/2011/06/a-year-of-notebooking-part-1/)
- en: 'Over the year, I’ve accumulated three notebooks worth of miscellaneous notes
    and musings. Since these notebooks are falling apart, I’ve decided to transfer
    their contents here. Warning: they might be slightly incoherent! This is the first
    of three notebooks. I recommend skimming the section headers and seeing if any
    of them pop out.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 今年，我已经积累了三本笔记本，记录了各种各样的笔记和思考。由于这些笔记本已经破烂不堪，我决定把它们的内容转移到这里。警告：它们可能有些不连贯！这是三本笔记本中的第一本。我建议你浏览一下各个章节的标题，看看有没有什么特别吸引你的内容。
- en: 'Tony Hoare: Abstract Separation Algebra'
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Tony Hoare：抽象分离代数
- en: 'Tony Hoare wants to leverage “the hard work [that] is already solved” by placing
    the formalism of separation logic (e.g. Hoare triples) into an abstract algebra.
    The idea is that by encoding things in pairs, not triples, we can take advantage
    of the numerous results in algebra. The basic idea is we take a traditional triple
    `{p} q {r}` and convert it into a ordered semigroup relation `p; q <= r`, where
    `;` is a monoidal operation. In the end we end up with a separation algebra, which
    is a monoidal lattice with an extra star operator. The choice of axioms is all:
    “This is abstract algebra, so you should be willing to take these axioms without
    having any model in mind.” (Scribbled here: “Inception as a metaphor for mathematical
    multi-level thinking.”) We have a homomorphism (not isomorphism) between implementations
    and specifications (the right direction is simplification, the left direction
    is a Galois connection.) In fact, as a commenter in the audience points out, this
    is known as the Stone Dualities—something like how two points determine a line—with
    contravariant points and properties. I believe Tony’s been thinking about this
    topic a bit since I went to this talk at the very beginning of this year, so its
    likely some or all of this has been superseded by later discoveries. C''est la
    vie!'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Tony Hoare希望利用已经解决的“艰难工作”，将分离逻辑（例如Hoare三元组）的形式化放置到一个抽象代数中。其想法是通过将事物编码为一对，而不是三元组，我们可以利用代数中的众多结果。基本思想是我们取一个传统的三元组
    `{p} q {r}`，并将其转换为一个有序半群关系 `p; q <= r`，其中 `;` 是一个单调运算。最终，我们得到了一个分离代数，这是一个带有额外星号操作符的单调格。公理的选择很重要：“这是抽象代数，所以你应该愿意接受这些公理，而无需考虑任何模型。”（在这里涂鸦写着：“梦中套梦作为数学多层次思维的隐喻。”）我们有一个同态（而不是同构）在实现和规范之间（右方向是简化，左方向是伽罗华连接）。实际上，正如观众中的一位评论者指出的那样，这被称为斯通对偶性——有点像两点决定一条线——带有逆变点和属性。我相信Tony在今年年初我去听这场讲座时已经对这个主题进行了一些思考，所以这些内容可能已经被后来的发现所取代。C'est
    la vie！
- en: 'Satnam Singh: Multi-target parallel processing'
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Satnam Singh：多目标并行处理
- en: 'Can we write parallel code that can execute on multiple types of hardware:
    e.g. vectorized operations on a traditional CPU, a GPU or an FPGA? He presents
    an EDSL that can be embedded in any language (well, for this particular representation,
    C#), with constructs like `newFloatParallelArray`, `dx9Target.toArray1D(z)` and
    overloaded operators. In my notes, I remark: can this representation be implemented
    taglessly, or do we always pay the cost of building a description of the system
    before we can execute it? Pushing software to hardware is especially important
    in the face of heterogenous processors (e.g. Metropolis). Satnam was a very engaging
    speaker, and many of the [quotes here](http://blog.ezyang.com/2010/10/quote-day/)
    are attributed to him—though one quote I do have is “I hope this is not going
    to be quoted” (don’t worry, I haven’t quoted that sentence). Dancing is a metaphor
    for parallel processing (though I don’t remember what the metaphor was.) What
    about self-modifying hardware: we mmap the circuit description and let the hardware
    reprogram the FPGA!'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能编写可以在多种类型硬件上执行的并行代码吗：例如，在传统CPU上进行矢量化操作，GPU或FPGA？他提出了一种可以嵌入到任何语言中的EDSL（对于这种特定表示，是C#），具有诸如`newFloatParallelArray`、`dx9Target.toArray1D(z)`和重载运算符的构造。在我的笔记中，我备注道：这种表示是否可以无标签地实现，或者我们总是需要在执行之前构建系统描述的成本？在异构处理器面前，将软件推向硬件尤为重要（例如Metropolis）。萨特南姆是一个非常引人入胜的演讲者，[这里的引用](http://blog.ezyang.com/2010/10/quote-day/)很多都是归功于他——尽管我确实有一个引用是“希望这不会被引用”（别担心，我没有引用那句话）。跳舞是并行处理的一个比喻（尽管我不记得那个比喻是什么）。自修改硬件怎么样：我们将电路描述映射到内存，并让硬件重新编程FPGA！
- en: 'Higher level information is crucial to optimization: thus we may want a symbolic
    evaluator with just in time compilation (except we can’t do that for FPGAs.) Memory
    access fusion is important: we want to get rid of accidental semicolons. `Array
    -> Stream / Shift = Delay`. Research idea: geometric encoding of common concurrency
    problems. Matrix inversion is a problem (so don’t invert the matrix, silly), local
    memory bounds GPU versus FPGA, and scheduling problem of *energy*.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 高层信息对优化至关重要：因此，我们可能希望有一个符号评估器，具有即时编译（除了在FPGA上我们无法做到）。内存访问融合很重要：我们想要摆脱意外的分号。`Array
    -> Stream / Shift = Delay`。研究想法：常见并发问题的几何编码。矩阵求逆是一个问题（所以不要反转矩阵，傻瓜），本地内存限制GPU与FPGA，以及*能量*调度问题。
- en: Streambase
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Streambase
- en: 'Streambase is a company that implements a visual, event stream processing language.
    I interviewed with them to possibly work on their compiler; while I ended up turning
    them down, it was a very interesting interview and I think I would have had a
    lot of fun working for them (though working in Java, not so much!) The interview
    was very fun: one question was, “Explain monads to me.” Man, I still don’t know
    how to do that properly. (Side note: people really, really like side effects.
    The programming folklore around writing performant programs that work on persistent
    data is very new, perhaps I’d say even more so than the folklore around lazy evaluation).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Streambase是一家实现视觉事件流处理语言的公司。我曾经参与他们的编译器面试；虽然最终我拒绝了他们，但这是一个非常有趣的面试，我认为如果在那里工作会很有趣（尽管工作语言是Java，我就不是很喜欢！）面试非常有趣：其中一个问题是，“向我解释单子。”天啊，我仍然不知道如何恰当地解释这个概念。（附注：人们确实非常喜欢副作用。围绕编写能在持久数据上运行的高性能程序的编程传说非常新颖，或许我可以说比围绕惰性求值的传说还要新颖。）
- en: Skepticism
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 怀疑论
- en: One of the things Alexander Bird’s book *Philosophy of Science* taught me was
    how to identify unproductive skepticism, even when it is not obvious, in things
    such as Hume’s problem of induction. My essay on Reliabilism was quite good; it
    was the only essay I managed to get a first on in my philosophy supervisions during
    the year. Like type theory, justification is stratified, with layers upon layers.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 亚历山大·伯德的书《科学哲学》教会了我如何识别无效的怀疑，即使在不明显的情况下，比如休谟关于归纳问题。我的可靠主义论文相当不错；这是我在哲学辅导课中唯一一篇拿到一级的论文。像类型理论一样，理由的确证是分层的，有层层叠加的。
- en: 'Simon Peyton Jones: Let Should Not Be Generalized'
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 西蒙·佩顿·琼斯：不应该概括“Let”
- en: 'Programmers in Hindley-Milner type systems have long enjoyed the benefits of
    practical type inference: we can generally expect the most general type to be
    inferred, and syntactic substitution of expressions in their use-sites will always
    typecheck. Of course, type inference algorithms are in general EXPTIME-complete,
    but type theorists can’t complain too much about that, since for more powerful
    logics inference is usually undecidable. (BTW: dictionaries constitute *runtime*
    evidence. Good way of thinking about it.) Curiously enough, in the presence of
    more advanced type features, writing type signatures can actually make the type
    checker’s job harder, but they add local equality assumptions that need to be
    handled by the constraint solver. Generalized let means that all of these constraints
    cannot be solved until we reach the call site. Can we work around this problem
    by doing on the fly solving of equality constraints? The French have a paper about
    this, but Peyton Jones recommends carrying along a jar of aspirins if you decide
    to read the paper. After his talk, one of the grad students remarked that Hindley-Milner
    is, in many ways, an anomaly: users of Agda have an expectation of needing to
    specify all type signatures, except in some special cases where they can eliminate
    them, whereas users of Haskell have an expectation of needing to specify no type
    signatures, except in special cases.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Hindley-Milner类型系统的程序员长期以来一直享受着实用类型推断的好处：我们通常期望推断出最一般的类型，并且在它们的使用位置进行表达式的语法替换总是可以类型检查的。当然，类型推断算法通常是EXPTIME-complete的，但类型理论家们不会因此而抱怨太多，因为对于更强大的逻辑，推断通常是不可判定的。（顺便说一句：字典构成了*运行时*证据。这是一个很好的思路。）有趣的是，在更高级别的类型特性存在的情况下，编写类型签名实际上可能会使类型检查器的工作变得更加困难，但它们会添加需要由约束求解器处理的局部相等性假设。广义的let意味着所有这些约束直到达到调用点才能解决。我们能否通过在解决相等约束时进行即时解决来解决这个问题？法国人有一篇关于这个问题的论文，但Peyton
    Jones建议如果你决定阅读这篇论文，最好随身带上一罐阿司匹林。在他的演讲后，一位研究生评论说Hindley-Milner在许多方面都是一个异常现象：Agda的用户期望需要指定所有类型签名，除非在一些特殊情况下可以消除它们，而Haskell的用户则期望在特殊情况下不需要指定任何类型签名。
- en: Stream processing of trees
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 树的流处理
- en: A long-standing problem with the Document Object Model is that it requires the
    entire document to be loaded up in memory. In cases like PHP’s documentation manual,
    the memory usage can be over a gigabyte large. Unfortunately, the mental model
    for manipulating a DOM is much more natural than that for manipulating a stream
    of XML tag events. Is there a way to automatically project changes to the DOM
    into changes on a stream? We’d like to construct an isomorphism between the two.
    I'm seeking a functional representation of the DOM, for manipulation (you're still
    going to need mutability for a DOM-style event programming model.) “Clowns to
    the left of me, jokers to the right” emphasizes the difference between local and
    global analysis. One way you might look at traversal of a token stream is simply
    traversal, with a zipper to keep track of where you are. Of course, the zipper
    takes up memory (in effect, it forms something like a stack, which is exactly
    how you would convert a token stream into a tree.) So we can efficiently build
    the tree representation without mutation, but we still end up with a tree representation.
    At this point, I have written down, “Stop hitting yourself.” Indeed. Can we take
    advantage of domain specific knowledge, a claim that I promise not to go beyond
    this point? The idea of projecting DOM operations into XML stream operations,
    and using this as a sort of measurement for how costly something is may be profitable.
    Of course, now I should do a literature search.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Document Object Model（DOM）的一个长期问题是它要求将整个文档加载到内存中。在像PHP文档手册这样的情况下，内存使用量可能超过一千兆字节。不幸的是，操作DOM的心理模型比操作XML标签事件流更自然。有没有办法自动将DOM的更改映射到流的更改上？我们希望构建两者之间的同构。我正在寻找DOM的函数表示，用于操作（对于DOM样式的事件编程模型，你仍然需要可变性）。"左边是小丑，右边是小丑"强调了局部和全局分析之间的差异。你可能会认为遍历令牌流的方法只是简单地遍历，使用拉链来跟踪你的位置。当然，这个拉链会占用内存（实际上，它形成了类似堆栈的东西，这正是你将令牌流转换为树的方式）。因此，我们可以高效地构建树表示而无需突变，但最终我们仍然得到了树表示。此时，我已经写下了“别再打自己了。”确实如此。我们能否利用领域特定知识，一个我承诺不再超出这一点的声明？将DOM操作投射到XML流操作中，并将其用作衡量某些事物成本的方法可能会很有利可图。当然，现在我应该做一次文献检索。
- en: Regular expression edit distance
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 正则表达式编辑距离
- en: Given a regular expression and a non-matching string, what is the minimum number
    of edits necessary to make the string match? There may be multiple answers, and
    the algorithm should allow you to weight different changes differently.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个正则表达式和一个不匹配的字符串，需要多少次编辑才能使字符串匹配？可能会有多个答案，算法应允许对不同的修改进行加权。
- en: 'Frank Tip: Test Generation and Fault Localization for Web Applications'
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Frank Tip：为Web应用生成测试和故障定位
- en: 'Apollo takes a hybrid approach to testing web applications, combining concrete
    and symbolic execution. The idea is that most web applications have diffuse, early
    conditionalization, with no complex state transformations or loops. So, we generate
    path constraints on the controller and solve them, and then generate inputs which
    let us exercise all of the control paths. Data is code: we want to describe the
    data. I must not have been paying very close attention to the presentation, because
    I have all sorts of other things scribbled in: “Stacks are the wrong debugging
    mechanism for STGs” (well, yes, because we want to know where we *come from*.
    Unfortunately, knowing where we are *going* isn’t very useful either) and “Can
    we automatically generate QuickCheck shrink implementations using execution traces?”
    (a sort of automated test-case minimization) and a final musing, “Haskell is not
    a good langauge for runtime inspection or fault localization.”'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Apollo采用了测试Web应用程序的混合方法，结合了具体执行和符号执行。其理念是，大多数Web应用程序具有模糊的、早期的条件化，没有复杂的状态转换或循环。因此，我们在控制器上生成路径约束并解决它们，然后生成输入，使我们能够执行所有控制路径。数据即代码：我们想描述数据。我可能没有很仔细地听演讲，因为我写下了各种其他事情：“堆栈不是STG的正确调试机制”（嗯，是的，因为我们想知道我们*来自*哪里。不幸的是，知道我们*要去*哪里也不是很有用）和“我们可以使用执行跟踪自动生成QuickCheck缩减实现吗？”（一种自动化的测试用例最小化）以及最后的思考，“Haskell不是一个适合运行时检查或故障定位的好语言。”
- en: 'Benjamin Pierce: Types and Programming Languages'
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Benjamin Pierce：类型与编程语言
- en: It would be very cool if someone made an interactive visualization of how type
    systems grow and are extended as you add new features to them, a sort of visual
    diff for typing rules and operational semantics.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有人制作出一个交互式可视化，展示在向类型系统添加新功能时类型系统如何生长和扩展，一种类型规则和操作语义的视觉差异，那将非常酷。
- en: Smoothed trending
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 平滑趋势
- en: As a blogger, my page view counts tend to be very spiky, corresponding to when
    my post hits a popular news site and gets picked up (to date, my Bitcoin post
    has had 22k views. Not bad!) But this doesn’t help me figure out long term trends
    for my website. Is there a way to smooth the trends so that spikes become simply
    “popular points” on a longer term trend?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名博客作者，我的页面浏览量往往会非常波动，当我的文章被流行新闻网站推广时，访问量就会飙升（迄今为止，我的比特币文章已经有22k次浏览。不错！）但这并不能帮助我了解网站的长期趋势。有没有办法使这些波动趋势平滑，使得高峰仅仅成为更长期趋势上的“热门点”？
- en: User interfaces
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用户界面
- en: I want a bible of minimal technical effort best practice user interfaces, patterns
    that are easy to implement and won’t confuse users too much. UI design is a bit
    too tweaky for my tastes. In the case of intelligent interfaces, how do we not
    piss off the user (e.g. Google Instant.) We have a user expectation where the
    computer will not guess what I want. That’s just strange.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我想要一个最小技术工作量最佳实践用户界面的圣经，实现起来简单且不会让用户太困惑的模式。对我来说，UI设计有点太琐碎了。在智能界面的情况下，我们如何不让用户生气（例如Google
    Instant）？我们有一个用户期望，即计算机不会猜测我想要什么。那太奇怪了。
- en: Page 32
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第32页
- en: 'In big letters I have: “Prove locality theorems. No action at a distance.”
    Almost precisely these same words Norman Ramsey would tell me while I was working
    with Hoopl. I think this is a pretty powerful idea.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我用大字写着：“证明局部定理。没有远程作用。”诺曼·拉姆齐在我和Hoopl一起工作时，几乎用了同样的话告诉我。我认为这是一个非常有力的想法。
- en: Separation Logic and Graphical Models
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分离逻辑与图形模型
- en: 'I have some mathematical definitions written down, but they’re incomplete.
    I don’t think I wrote anything particularly insightful. This says something about
    the note-taking enterprise: you should record things that you would not be able
    to get later, but you should also make sure you follow up with all the complete
    information you said you’d look up later.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我记录了一些数学定义，但它们并不完整。我不认为我写了什么特别有洞察力的东西。这反映了笔记的目的：你应该记录那些以后可能无法获取的东西，但你也应该确保跟进所有你说过会查找的完整信息。
- en: Jane Street
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Jane Street
- en: I have two pages of scribblings from solving problems over a telephone interview.
    I quite enjoyed them. One was a dynamic programming question (I moffed the recurrence
    at first but eventually got it), the second was implementing a functional programming
    feature in OCaml. Actually, I wanted to write a blog post about the latter, but
    it’s so far been consigned to my drafts bin, awaiting a day of resurrection. Later
    in my notes (page 74) I have recorded the on-site interview questions, unfortunately,
    I can’t share them with you.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我有两页关于通过电话面试解决问题的涂鸦。我非常喜欢它们。一个是动态规划问题（一开始我对递归关系不太理解，但最终搞定了），第二个是在OCaml中实现函数式编程特性。实际上，我想写一篇关于后者的博客文章，但到目前为止，它一直留存在我的草稿箱中，等待重生的一天。在我的笔记中（第74页），我记录了现场面试的问题，不幸的是，我不能与你分享它们。
- en: Quote
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Quote
- en: “It’s like hiring an attorney to drive you across town.” I don’t remember what
    the context was, though.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: “这就像雇用律师开车带你穿越城市。”我不记得具体的语境是什么了。
- en: 'Mohan Ganesalingam: Language of Mathematics'
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Mohan Ganesalingam：数学语言
- en: 'I really enjoyed this talk. Mohan looks at applying NLP at a domain which is
    likely to be more tractable than the unrestricted human corpus: the domain of
    mathematical language. Why is it tractable? Math defines its lexicon in text (mathematical
    words must be explicitly defined), we mix symbols and natural language, and the
    grammar is restricted. Montague Grammars are in correspondence with Denotational
    Semantics. Of course, like normal language, mathematical language is heavily ambiguous.
    We have lexical ambiguity (“prime” can describe numbers, ideals, etc.), structural
    ambiguity (p is normal if p *generates* the *splitting field* of *some polynomial*
    **over F_0**—is F_0 referring to the generating or the polynomial?), symbolic
    ambiguity (`d(x + y)`, and this is not just operator overloading because parse
    trees can change: take for example `(A+B)=C` versus `λ+(M=N)`), and combined symbolic
    and textual ambiguity. It turns out the linguistic type system of maths, which
    is necessary to get the correct parse trees, is not mathematical at all: integers,
    reals and friends are all lumped into one big category of numbers and types are
    not extensional (objects have different types depending on contents.) We need
    a dynamic type system, not a structural or nominal one, and we need to infer types
    *while* parsing.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我真的很喜欢这个演讲。Mohan研究将自然语言处理应用于一个比无限制的人类语料库更易处理的领域：数学语言的领域。为什么这个领域易于处理？数学在文本中定义了其词汇（数学术语必须明确定义），我们混合符号和自然语言，并且语法是受限的。Montague语法与表义语义相对应。当然，像普通语言一样，数学语言也存在严重的歧义。我们有词汇歧义（“质数”可以描述数字、理想等），结构歧义（如果p
    *生成* *某些多项式*的*分裂域* **在F_0上** —— F_0是指生成还是多项式？），符号歧义（`d(x + y)`，这不仅仅是操作符重载，因为解析树可以改变：例如取`(A+B)=C`与`λ+(M=N)`作比较），以及符号和文本结合的歧义。事实证明，数学的语言类型系统，这是正确获取解析树所必需的，根本不是数学性的：整数、实数及其伴侣都归为一个大类别的数字，类型不是外延的（对象根据内容具有不同类型）。我们需要一个动态类型系统，而不是结构或名义类型系统，并且我们需要在解析过程中推断类型。
- en: Writing notes
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 写笔记
- en: From December 1st. I seem to need to write concluding paragraphs that are more
    concluding, and use shorter sentences. Summarize parts of my arguments, give more
    detail about experiments, and not to forget that a large part of historic mathematics
    was geometry. Aim for more in less sentences. Amen!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 从12月1日开始，我似乎需要写更具总结性的结尾段落，使用更短的句子。总结我的论点部分，详细描述实验内容，并不要忘记，历史数学的大部分是几何学。旨在用更少的句子表达更多的内容。阿门！
- en: 'Another set of notes: all questions are traps: the examiner wants you to think
    about what is asked. Think about the broader context around events. You may not
    have enough time to compare with contemporary perspectives. **Put guideposts in
    your essay.** Be careful about non sequiturs. Colons are good: they add emphasis
    (but use them carefully.) **Short sentences!**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 另一组笔记：所有问题都是陷阱：考官希望你思考被问的内容。思考事件周围的更广泛背景。你可能没有足够的时间与当代观点比较。**在你的文章中放置路标。** 小心不要发生非因果关系。冒号很好：它们增加了强调（但要小心使用）。**短句子！**
- en: Principia Mathematica
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Principia Mathematica
- en: What a wonderful conference! There were a lot of talks and I should have taken
    more notes, but this is what I have, some quotes and sketches.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 多么美妙的会议啊！有很多演讲，我本应该多记一些笔记，但这是我有的一些，一些引语和素描。
- en: 'The algebraist versus the analyst. “Four riding in on a bicycle and then riding
    off again.” Numbers as moments, not an object (though it doesn’t lose generality.)
    “Cantor is *hopeless* at it.” (on zero.) “Do [numbers] start with 0 or 1? Yes
    and yes.” Frege and Russell finally give proper status to zero. The misreading
    of counting: does arithmetic start from counting? Number sequence is already in
    place, rather, we construct an isomorphism. There is a mistaken belief we count
    from one. Isomorphisms avoid counting, give proper status to zero, and sidestep
    the issue of how counting actually works (a transitive verb: pre-counting, we
    must decide what to count.) Contrary to popular depiction in Logicomix, Gödel
    and Russell did meet. Quine logic and Church logic. “It is not true that the square
    root of two is not irrational” requires every number be rational or irrational.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 代数学家与分析学家。 “四个人骑自行车进来，然后再骑出去。” 数字作为时刻，而不是对象（尽管它不失一般性）。 “康托尔对此完全*无望*。”（关于零）。“数字是否从0或1开始？是和是。”
    弗雷格和罗素最终给了零适当的地位。计数的误读：算术是否从计数开始？数字序列已经就位，相反，我们构造了同构。有一个错误的信念，我们从一开始数数。同构避免计数，给予零适当的地位，并且避开计数实际如何工作的问题（一个及物动词：预计数，我们必须决定计算什么）。与《逻辑漫游》中的普遍描述相反，哥德尔和罗素确实见过面。奎因逻辑和教会逻辑。“平方根二不是无理数”要求每个数字都是有理数或无理数。
- en: 'Why do we care about old people? How do we make progress in philosophy? Orders
    were syntactic rather than semantic: Kripke and Tarksi developed a hierarchy of
    truths. Free variable reasoning helped resolve nominala nd typical ambiguity:
    a scientific approach to a philosophical problem. “What nowadays constitutes research—namely,
    Googling it.” Nominal ambiguity: assert “x is even”, actually “forall x, x is
    even.” Quote: “It’s clear from the letter that he didn’t get past page five [of
    the Principia].” The word variable is deeply misleading, it’s not a variable name
    (progress!) “There are no undetermined men.” Anaphoric pronoun. We can’t express
    rules of inference this way.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为什么关心老年人？我们如何在哲学中取得进展？秩序是句法而不是语义：克里普克和塔尔斯基发展了一个真理的层次结构。自由变量推理有助于解决名词和典型模糊：对哲学问题的科学方法。“现在什么构成研究——也就是说，谷歌它。”名词模糊：断言“x是偶数”，实际上是“对所有x，x是偶数。”引用：“从信中清楚地表明他没有看过《原理》的第五页。”单词“变量”是非常误导的，它不是变量名（进步！）“没有不确定的人。”
    同指代代词。我们不能用这种方式表达推理规则。
- en: 'Types: variables must have ranges. Hardly any theorems (all of the statements
    were schemas): we wanted to prove things about all types, but couldn’t on pain
    of contradiction. So all of the variables are **type** ically ambiguous. There
    is an argument in volume 2 respecting infinity, but a small world gives you the
    *wrong* mathematics (positivism.) But there was a bright idea:even if there aren’t
    enough things in the world, if there are k things, there are 2^k classes of things,
    etc. Go up the hierarchy. *This* is the interpretation for typical ambiguity.
    Whitehead thought theories were meaningless strings without types (a sort of macro
    in theory-land). ST made the language/metalanguage distinction!! “Seeing” is determining
    the type. The logocentric predicament is you’re supposed to use reasoning, but
    this reasoning is outside the formal system. Puns of operators on higher types,
    decorating all operators with a type label. The stratification of types.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 类型：变量必须具有范围。几乎没有定理（所有的陈述都是模式）：我们想证明关于所有类型的事情，但不能因为矛盾而这样做。所以所有的变量通常是**类型**不明确的。第2卷中有关于无穷的论证，但是小世界给了你错误的数学（实证主义）。但是有一个聪明的想法：即使世界上的东西不够多，如果有k个东西，就有2^k类的东西等等。上升到层次结构。*这*就是典型模糊的解释。怀特海德认为理论是理论土地上的无意义字符串（一种宏）。斯特劳斯基在语言/元语言区分方面有所贡献！！“看”是确定类型的方式。逻各斯中心主义困境是你应该使用推理，但这种推理是在形式系统之外的。更高类型的操作符双关语，所有操作符都带有类型标签。类型的分层。
- en: 'Free variable reasoning is the same for typically ambiguous reasoning. Abbreviation
    for quantified reasoning (needs messy rules for inside quantifiers), indefinite
    names (can’t be the variable name, can’t lead to indefinite things), schematic
    names (lambdas: correct for variables, and modern for types.) But arguments that
    don’t convince someone unless they believe it (skepticism) sees: if the correct
    logic is type theoretic and oustide it, then we don’t have a position outside
    reasoning. (It’s a one way direction.) **I think there is a way of talking about
    a system from within it.** We have a weakened sense of truth: if you already believe
    it, it’s OK, but there is no convincing power.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 自由变量推理对典型模糊推理是相同的。量化推理的缩写（需要内部量化器的混乱规则），不定名（不能是变量名，不能导致不定事物），示意名（λ：正确的变量，现代的类型）。但是如果不让某人相信它（怀疑主义），看起来：如果正确的逻辑是类型理论和外部的，那么我们没有超出推理的立场。（这是一个单向方向。）**我认为有一种从内部谈论系统的方法。**我们有一种削弱的真理感：如果你已经相信它，那就没问题，但没有说服力。
- en: 'The next lecture came from the computer scientist world. “Arguably, the more
    [programming languages] took from formal logic, the better it is.” Otherwise,
    it is the “ad-hoc craetion of electricians”. Computers allow easy formal manipulation
    and correctness checks. But for the mathematics? There isn’t very much of it.
    Proofs can be checked algorithmically (with formal inference rules). “Because
    there are many philosophers here, I hope I can answer questions in a suitably
    ambiguous manner.” Symbolism allows us to do “easy” things mechanically (Whitehead
    quote.) Do we need formal methods? In 1994 Pentium was found to have an error
    in floating point division. Robin’s conjecture was incorrectly proved. Different
    proof systems: de Bruijn generates proofs which are checked by a separate checker,
    LCF reduces all rules to primitive inferences checked by a logical kernel. After
    all, why don’t we prove that our proof assistants work? HOL Light (Principia)
    is only 430 lines of code. Schaffer’s joke: Ramseyfied Types. Right now, formal
    logic is on the edge of 20th century research mathematics, proofs needing “only
    10k lines of code.” Maintenance of formal proofs is a big problem: we need intermediate
    declarative abstract models. Check out Flyspeck.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 下一堂课来自计算机科学家的世界。“可以说，编程语言越多地借鉴形式逻辑，它就越好。” 否则，这是“电工的临时创建”。计算机允许进行简单的形式化操作和正确性检查。但对于数学来说呢？并不是很多。可以通过算法检查证明（使用形式推理规则）。“因为这里有很多哲学家，我希望我能以适当模糊的方式回答问题。”
    符号化允许我们机械地做“容易”的事情（怀特黑德的引用）。我们需要形式方法吗？在1994年，发现奔腾处理器在浮点除法中有错误。罗宾的猜想被错误地证明了。不同的证明系统：德布鲁因生成的证明由单独的检查器检查，LCF将所有规则化简为由逻辑核心检查的原始推理。毕竟，为什么我们不证明我们的证明助手有效？HOL
    Light（Principia）只有430行代码。谢弗的笑话：拉姆赛化的类型。现在，形式逻辑正处于20世纪研究数学的边缘，证明只需要“1万行代码”。形式证明的维护是一个大问题：我们需要中间的声明性抽象模型。看看Flyspeck。
- en: 'I had some scribblings in the margins: “references in logic?” (I think that’s
    linear logic), how about performance proofs (guaranteed to run in such-and-such
    time, realtime proofs), or probabilistically checkable proofs. Maybe complexity
    theory has something to say here.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我在页边有些涂鸦：“逻辑中的引用？”（我认为这是线性逻辑），性能证明如何（保证在某个时间内运行，实时证明），或概率可检查的证明。也许复杂性理论在这里有所发言。
- en: Turing Machines
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 图灵机
- en: Their method of efficient access is... a zipper. Oh man!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 他们有效访问的方法是……拉链。哦，天哪！
- en: GHC
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GHC
- en: 'My scribblings here are largely illegible, but it seems a few concepts initially
    gave me trouble:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里的涂鸦大部分都看不清楚，但最初有些概念让我困扰：
- en: Stack layout, keeping up and down straight, info tables, and the motion of the
    stack pointer. I have a pretty good idea how this all works now, but in the beginning
    it was quite mysterious.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 栈布局，保持上下直线，信息表，以及栈指针的运动。现在我对这一切是如何工作有了相当清楚的理解，但开始时它确实相当神秘。
- en: '`CmmNode` constructors have a lot of field, and constructing a correspondence
    with printed C-- is nontrivial.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CmmNode` 构造器有很多字段，与打印的 C-- 构成对应关系是非平凡的。'
- en: Sizes of variables.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量的大小。
- en: Headers, payloads and code.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标题，负载和代码。
- en: Pointer tagging, esp. with respect to values living in registers, on the stack,
    and what the tag bits mean depending on context (functions or data). I never did
    figure out how the compacting GC worked.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指针标记，特别是关于存储在寄存器中、堆栈上的值，以及标签位在上下文中的含义（函数或数据）。我从未弄清楚压缩GC是如何工作的。
- en: This concludes the first notebook.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这结束了第一本笔记本。
