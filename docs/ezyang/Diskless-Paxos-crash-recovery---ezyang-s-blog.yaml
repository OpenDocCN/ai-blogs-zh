- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:41'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:41'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Diskless Paxos crash recovery : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无盘 Paxos 崩溃恢复：ezyang 博客
- en: 来源：[http://blog.ezyang.com/2011/08/diskless-paxos-crash-recovery/](http://blog.ezyang.com/2011/08/diskless-paxos-crash-recovery/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2011/08/diskless-paxos-crash-recovery/](http://blog.ezyang.com/2011/08/diskless-paxos-crash-recovery/)
- en: '*This is an edited version of an email I sent last week. Unfortunately, it
    does require you to be familiar with the original Paxos correctness proof, so
    I haven’t even tried to expand it into something appropriate for a lay audience.
    The algorithm is probably too simple to be in the literature, except maybe informally
    mentioned—however, if it is wrong, I would love to know, since real code depends
    on it.*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*这是我上周发送的电子邮件的编辑版本。不幸的是，这需要你熟悉原始 Paxos 正确性证明，所以我甚至没有试图将其扩展为适合普通读者的内容。这个算法可能太简单了，以至于不可能在文献中出现，除非可能是非正式提到的—然而，如果它是错误的，我很想知道，因为实际的代码依赖于它。*'
- en: 'I would like to describe an algorithm for [Paxos](http://en.wikipedia.org/wiki/Paxos_algorithm)
    crash-recovery that does not require persistent storage, by utilizing synchronized
    clocks and a lattice-based epoch numbering. The basic idea is to increase the
    ballot/proposal number to one for which it is impossible for the crashed node
    to have made any promises for it. Such an algorithm, as noted in [Paxos made Live](http://labs.google.com/papers/paxos_made_live.html),
    is useful in the case of disk corruption, where persistent storage is lost. (Unfortunately,
    the algorithm they describe in the paper for recovering from this situation is
    incorrect. The reason is left as an exercise for the reader.) It is inspired by
    [Renesse''s](http://www.cs.cornell.edu/home/rvr/) remark about an "epoch-based
    system", and the epoch-based crash-recovery algorithm described in [JPaxos: State
    Machine Replication Based on the Paxos Protocol](http://infoscience.epfl.ch/record/167765).
    However, in correspondence with [Nuno](http://personnes.epfl.ch/nuno.santos),
    I discovered that proofs for the correctness of their algorithm had not been published,
    so I took it upon myself to convince myself of its correctness, and in the process
    discovered a simpler version. It may be the case that this algorithm is already
    in the community folklore, in which case all the better, since my primary interest
    is implementation.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我想描述一个关于 [Paxos](http://en.wikipedia.org/wiki/Paxos_algorithm) 崩溃恢复的算法，该算法不需要持久存储，而是利用同步时钟和基于格子的时期编号。基本思想是将选票/提案号码增加到一个对于崩溃节点不可能做出任何承诺的值。正如在
    [Paxos made Live](http://labs.google.com/papers/paxos_made_live.html) 中指出的那样，这种算法在磁盘损坏的情况下非常有用，其中持久存储丢失了。（不幸的是，他们在论文中描述的从此情况恢复的算法是错误的。原因留给读者作为一个练习。）它受到
    [Renesse](http://www.cs.cornell.edu/home/rvr/) 关于“基于时期的系统”的评论的启发，以及在 [JPaxos：基于
    Paxos 协议的状态机复制](http://infoscience.epfl.ch/record/167765) 中描述的基于时期的崩溃恢复算法。然而，与
    [Nuno](http://personnes.epfl.ch/nuno.santos) 的通信中，我发现他们的算法正确性的证明尚未发表，因此我决定自己确信其正确性，并在此过程中发现了一个更简单的版本。也许这个算法已经在社区传闻中存在，如果是这样，那就更好，因为我的主要兴趣是实现。
- en: First, let's extend proposal numbers from a single, namespaced value n to a
    tuple `(e, n)`, where `n` is a namespaced proposal number as before, and `e` is
    an epoch vector, with length equal to the number of nodes in the Paxos cluster,
    and the usual Cartesian product lattice structure imposed upon it.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们将提案号码从单一的命名空间值 `n` 扩展为元组 `(e, n)`，其中 `n` 是之前的命名空间提案号码，`e` 是一个时期向量，其长度等于
    Paxos 集群中节点的数量，并在其上强制常规的笛卡尔乘积格子结构。
- en: 'Let''s establish what behavior we''d like from a node during a crash:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们确定在节点崩溃期间我们希望从节点中获得的行为：
- en: '**KNOWN-UNKNOWNS.** An acceptor knows a value `e*`, for which for all e where
    `e* ≤ e` (using lattice ordering), the acceptor knows if it has responded to prepare
    requests of form `(e, n)` (for all `n`).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**已知未知。** 一个接受者知道一个值 `e*`，对于所有 `e` 满足 `e* ≤ e`（使用格子排序），接受者知道是否已经响应了形式为 `(e,
    n)` 的准备请求（对所有 `n`）。'
- en: That is to say, the acceptor knows what set of proposal numbers he is guaranteed
    not to have made any promises for.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，接受者知道一组提案号码的集合，他保证不会为这些号码做出任何承诺。
- en: 'How can we establish this invariant? We might write a value to persistent storage,
    and then incrementing it upon a crash; this behavior is then established by monotonicity.
    It turns out we have other convenient sources of monotonic numbers: synchronized
    clocks (which are useful for Paxos in other contexts) have this behavior. So instead
    of using a vector of integers, we use a vector of timestamps. Upon a crash, a
    process sets its epoch to be the zero vector, except for its own entry, which
    is set to his current timestamp.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何建立这个不变性？我们可以将一个值写入持久存储，并在崩溃后递增它；这种行为通过单调性来确立。事实证明，我们还有其他方便的单调数字来源：同步时钟（在Paxos的其他情况下也很有用）具有这种行为。因此，我们不再使用整数向量，而是使用时间戳向量。在崩溃时，进程将其时期设置为零向量，除了其自己的条目，该条目设置为当前时间戳。
- en: 'In [Paxos made Simple](http://academic.research.microsoft.com/Publication/12945610/paxos-made-simple),
    Lamport presents the following invariant on the operation of acceptors:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在[Paxos简介](http://academic.research.microsoft.com/Publication/12945610/paxos-made-simple)中，Lamport介绍了接受者操作的以下不变性：
- en: '**P1a.** An acceptor can accept proposal numbered `n` iff it has not responded
    to a prepare request greater than `n`.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**P1a.** 只有当接受者未对大于`n`的准备请求作出响应时，接受者才能接受编号为`n`的提议。'
- en: 'We can modify this invariant to the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以修改这个不变性为以下内容：
- en: '**P1b.** An acceptor can accept proposal numbered `(e, n)` iff `e* ≤ e` and
    it has not responded to a prepare request `(_, n'')` with `n'' > n`.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**P1b.** 只有当`e* ≤ e`并且该接受者未对具有`n'' > n`的准备请求`(_, n'')`作出响应时，接受者才能接受编号为`(e,
    n)`的提议。'
- en: Notice that this invariant "strengthens" **P1a** in the sense that an acceptor
    accepts a proposal in strictly less cases (namely, it refuses proposals when `e*
    ≰ e`). Thus, safety is preserved, but progress is now suspect.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这个不变性在“强化”了**P1a**，因为接受者在更少的情况下接受提议（即在`e* ≰ e`时拒绝提议）。因此，安全性得到保证，但进展现在是可疑的。
- en: When establishing progress of Paxos, we require that there exist a stable leader,
    and that this leader eventually pick a proposal number that is "high enough".
    So the question is, can the leader eventually pick a proposal number that is "high
    enough"? Yes, define this number to be `(lub{e}, max{n} + 1)`. Does this epoch
    violate **KNOWN-UNKNOWNS**? No, as a zero vector with a single later timestamp
    for that node is always incomparable with any epoch the existing system may have
    converged upon.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在建立Paxos的进展时，我们要求存在一个稳定的领导者，并且该领导者最终选择一个足够“高”的提议号。因此问题是，领导者最终能够选择一个足够“高”的提议号吗？是的，定义这个数为`(lub{e},
    max{n} + 1)`。这个时期违反了**已知未知**吗？不是的，因为零向量与系统已经收敛的任何时期都是不可比的，这个节点有单个较晚的时间戳。
- en: 'Thus, the modifications to the Paxos algorithm are as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对Paxos算法的修改如下：
- en: Extend ballot numbers to include epoch numbers;
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展选票号以包括时期号；
- en: On initial startup, set `e*` to be the zero vector, with the current timestamp
    in this node's entry;
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在初始启动时，将`e*`设置为零向量，并在该节点条目中添加当前时间戳；
- en: Additionally reject accept requests whose epoch numbers are not greater-than
    or equal to `e*`;
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另外，拒绝接受那些时期号不大于`e*`的接受请求；
- en: When selecting a new proposal number to propose, take the least upper bound
    of all epoch numbers.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当选择新的提议号来提议时，取所有时期号的最小上界。
- en: An optimization is on non-crash start, initialize `e*` to be just the zero vector;
    this eliminates the need to establish an epoch in the first round of prepare requests.
    Cloning state from a snapshot is an orthogonal problem, and can be addressed using
    the same mechanisms that fix lagging replicas. We recommend also implementing
    the optimization in which a leader only send accept messages to a known good quorum,
    so a recovered node does not immediately force a view change.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一个优化是在非崩溃启动时，将`e*`初始化为零向量；这消除了在准备请求的第一轮中建立时期的需求。从快照克隆状态是一个正交问题，可以使用修复滞后副本的相同机制来解决。我们建议还实现一种优化，即领导者仅向已知良好的法定人数发送接受消息，因此恢复的节点不会立即强制视图更改。
- en: I would be remiss if I did not mention some prior work in this area. In particular,
    in [Failure Detection and Consensus in the Crash-Recovery Model](http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.17.5958),
    the authors present a remarkable algorithm that, without stable storage, can handle
    more than the majority of nodes failing simultaneously (under some conditions,
    which you can find in the paper). Unfortunately, their solution is dramatically
    more complicated than solution I have described above, and I do not know of any
    implementations of it. Additionally, an alternate mechanism for handling crashed
    nodes with no memory is a group membership mechanism. However, group membership
    is notoriously subtle to implement correctly.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我若不提及此领域的一些先前工作，就会显得不周到。特别是，在[故障检测和一致性在崩溃恢复模型中的应用](http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.17.5958)中，作者们提出了一种卓越的算法，即使在没有稳定存储的情况下，也能处理同时多于大多数节点崩溃的情况（在一些条件下，详见论文）。不幸的是，他们的解决方案比我上面描述的方案要复杂得多，而且我不知道有没有人实现它。此外，处理没有内存的崩溃节点的另一种机制是组成员机制。然而，组成员机制实现起来非常微妙，正确性难以保证。
