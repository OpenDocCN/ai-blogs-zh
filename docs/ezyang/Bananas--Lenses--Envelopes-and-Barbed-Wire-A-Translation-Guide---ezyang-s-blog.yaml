- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-07-01 18:18:23'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-07-01 18:18:23
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Bananas, Lenses, Envelopes and Barbed Wire A Translation Guide : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 香蕉、透镜、信封和铁丝网——翻译指南：ezyang's 博客
- en: 来源：[http://blog.ezyang.com/2010/05/bananas-lenses-envelopes-and-barbed-wire-a-translation-guide/](http://blog.ezyang.com/2010/05/bananas-lenses-envelopes-and-barbed-wire-a-translation-guide/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/05/bananas-lenses-envelopes-and-barbed-wire-a-translation-guide/](http://blog.ezyang.com/2010/05/bananas-lenses-envelopes-and-barbed-wire-a-translation-guide/)
- en: 'One of the papers I''ve been slowly rereading since summer began is ["Functional
    Programming with Bananas, Lenses, Envelopes and Barbed Wire"](http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.41.125),
    by Erik Meijer, Maarten Fokkinga and Ross Paterson. If you want to know what {cata,ana,hylo,para}morphisms
    are, this is the paper to read: section 2 gives a highly readable formulation
    of these morphisms for the beloved linked list.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 自从夏天开始以来，我一直在缓慢地重新阅读一篇论文，这篇论文是 Erik Meijer、Maarten Fokkinga 和 Ross Paterson
    的《香蕉、透镜、信封和铁丝网的函数式编程》。如果你想知道 {cata,ana,hylo,para}morphisms 是什么，这篇论文是必读的：第二节为所爱的链表提供了一个非常易读的形式化定义。
- en: Last time, however, my eyes got a little bit glassy when they started discussing
    algebraic data types, despite having used and defined them in Haskell; part of
    me felt inundated in a sea of triangles, circles and squiggles, and by the time
    they reached the laws for the basic combinators, I might as well have said, "It's
    all math to me!"
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然而上次，当他们开始讨论代数数据类型时，我的眼睛有点发直，尽管我在 Haskell 中已经使用和定义了它们；部分原因是我感到自己淹没在三角形、圆形和波浪线的海洋中，当他们讨论基本组合子的定律时，我甚至可能会说：“这全都是数学！”
- en: A closer reading revealed that, actually, all of these algebraic operators can
    be written out in plain Haskell, and for someone who has been working with Haskell
    for a little bit of time, this can provide a smoother (albeit more verbose) reading.
    Thus, I present this translation guide.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 更仔细地阅读揭示了实际情况，所有这些代数运算符都可以用简单的 Haskell 语言书写出来，对于那些在 Haskell 中已经有一些时间的人来说，这可以提供更流畅（尽管更冗长）的阅读体验。因此，我呈现这份翻译指南。
- en: '*Type operators.* By convention, types are ![A, B, C\ldots](img/d9934bc8566ad567bcb100e158ab01a5.png
    "A, B, C\ldots") on the left and `a, b, c...` on the right. We distinguish these
    from function operators, though the paper does not and relies on convention to
    distinguish between the two.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*类型运算符。* 按照惯例，类型用 ![A, B, C\ldots](img/d9934bc8566ad567bcb100e158ab01a5.png
    "A, B, C\ldots") 表示在左边，而 `a, b, c...` 表示在右边。我们将其与函数运算符区分开来，尽管本文没有并且依赖于惯例来区分这两者。'
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: (For the pedantic, you need to add `Hask Hask Hask` to the end of all the Bifunctors.)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: （对于学究们来说，你需要在所有的 Bifunctors 后面加上 `Hask Hask Hask`。）
- en: '*Function operators.* By convention, functions are ![f, g, h\ldots](img/1c93e1ddd1d811c06cc58b9572f1e318.png
    "f, g, h\ldots") on the left and `f :: a -> b, g :: a'' -> b'', h...` on the right
    (with types unified as appropriate).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*函数运算符。* 按照惯例，函数用 ![f, g, h\ldots](img/1c93e1ddd1d811c06cc58b9572f1e318.png
    "f, g, h\ldots") 表示在左边，而 `f :: a -> b, g :: a'' -> b'', h...` 表示在右边（类型根据需要统一）。'
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, let''s look at the *abides law*:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看 *abides law*：
- en: 'Translated into Haskell, this states:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 被翻译成 Haskell 后，这一句是：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Which (to me at least) makes more sense: if I want to extract a value from
    Either, and then run two functions on it and return the tuple of results, I can
    also split the value into a tuple immediately, and extract from the either "twice"
    with different functions. (Try running the function manually on a `Left x` and
    `Right y`.)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说（至少是这样）更有意义：如果我想从 Either 中提取一个值，然后对其运行两个函数并返回结果的元组，我也可以立即将该值分成一个元组，并使用不同的函数从
    either 中“两次”提取值。（尝试手动在 `Left x` 和 `Right y` 上运行该函数。）
