- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:57'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:57'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Multi-day debugging : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多日调试：ezyang 的博客
- en: 来源：[http://blog.ezyang.com/2011/02/multi-day-debugging/](http://blog.ezyang.com/2011/02/multi-day-debugging/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2011/02/multi-day-debugging/](http://blog.ezyang.com/2011/02/multi-day-debugging/)
- en: Most of my hacking cycles right now are going towards debugging the new code
    generator for GHC. The code generation stage of GHC takes the Spineless Tagless
    G-machine (STG) intermediate representation (IR) to the C-- high-level assembly
    representation; the old code generator essentially performed this step in one
    big bang. The new code generator is many things. It is a more modular, understandable
    and flexible codebase. It is a client of cutting edge research in higher-order
    frameworks for control-flow optimization.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我大部分的编程时间都投入到调试 GHC 的新代码生成器上。GHC 的代码生成阶段将 Spineless Tagless G-machine（STG）中间表示转换为
    C-- 高级汇编表示；旧代码生成器基本上一次性完成了这个步骤。新代码生成器则是多功能的。它是一个更模块化、更易理解和更灵活的代码库。它是控制流优化高阶框架研究的客户端。
- en: It is also frickin’ hard to debug.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 调试也非常难。
- en: 'I used to get frustrated and give up if I couldn’t figure out what was causing
    a bug within a few hours of close analysis. Working on GHC has enlightened me
    about the multi-day debugging: a well-defined bug that persists despite several
    days of intense analysis. (I’ve only managed this a few times in the past—I’m
    quite proud that I managed to pull together enough information to resolve [“the
    bug”](http://bugs.php.net/42362). What is “the bug”? Have you ever been browsing
    a MediaWiki site and then been mysteriously asked to download a PHP file? Yeah,
    that’s “the bug”). It has exponentially increased my proficiency with gdb and
    has been an amazing romp in the theoretics and practice of compiler construction.
    I’ve felt stupid for not immediately understanding what in retrospect seem perfectly
    clear and obvious concepts. I’ve felt an amazing rush, not from when the problem
    is solved (though that certainly gives a good feeling), but when my plan of attack
    is making progress. I’ve seen my theories evolve from one to another to another,
    and have learned never to trust any experimental observation at first sight.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 过去，如果我在经过几个小时的深入分析后仍然无法弄清楚 bug 的原因，我会感到沮丧并放弃。但在 GHC 上的工作使我对多日调试有了更深入的了解：一个明确定义的
    bug，尽管经过数日的强烈分析仍然存在。 （过去我只成功过几次，我很自豪地说我设法收集足够的信息来解决[“这个 bug”](http://bugs.php.net/42362)。什么是“这个
    bug”？你曾经在浏览 MediaWiki 站点时神秘地被要求下载 PHP 文件吗？是的，那就是“这个 bug”）。 这大大提高了我在 gdb 上的熟练程度，并且在编译器构造的理论和实践中进行了惊险的冒险。我觉得自己愚蠢，因为没有立即理解回顾来看似乎完全清晰和显而易见的概念。我感到一种惊人的冲动，不是因为问题解决了（尽管当然这会带来好的感觉），而是因为我的攻击计划正在取得进展。我看到我的理论从一个到另一个再到另一个发展，并且学会了从不信任任何第一眼的实验观察。
- en: While the debugging process is not yet done (though I think I’m close to having
    a correct—but slow—new code generation pipeline), I thought I’d take out some
    time to describe the journey.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然调试过程尚未完成（尽管我认为我接近拥有正确但慢的新代码生成流水线），我想抽出一些时间来描述这段旅程。
- en: Why debugging GHC is easy?
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么调试 GHC 如此容易？
- en: 'Fascinatingly enough, while the bugs result in extremely strange behavior in
    compiled programs that takes ages to decipher, once the bad behavior is fully
    understood, the fix is usually a one-liner. It is this fact that makes debugging
    GHC frustrating and brilliant at the same time: sometimes code you’re debugging
    is fundamentally mistaken, and you have to rewrite the whole thing. GHC’s code
    is fundamentally clear (a testament to those who wrote it), and a bug is usually
    just a small detail someone forgot to attend to. The solutions are like Mystery
    Hunt solutions: short, and you know when you’ve found it. Nothing messy like,
    “What is this actually supposed to do?”'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，虽然错误导致编译程序表现出极其奇怪的行为，需要花费很长时间才能解析，但一旦完全理解了错误行为，修复通常只需一行代码。正是这个事实使得调试 GHC
    既令人沮丧又光辉：有时你正在调试的代码基本上是错的，你必须重写整个东西。 GHC 的代码基本上是清晰的（这是写它的人的证明），而 bug 通常只是有人忘记处理的一个小细节。解决方案就像是神秘的寻宝解：简短，你找到它时就知道。没有杂乱的情况，比如，“这实际上应该做什么？”
- en: I have the benefit of an existing code generation pipeline which I can use to
    compare my results with, although doing so is not trivial since the new code generator
    does go about the compilation in a fundamentally different way, and so sections
    of code are frequently not comparable.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我有一个现有的代码生成管道，可以用来与我的结果进行比较，尽管这样做并不容易，因为新的代码生成器在编译过程中采用了基本不同的方式，所以代码部分经常无法比较。
- en: I also have the benefit of a wondrous test-suite which produces me programs
    that reproduceably segfault with little fuss, and have been relatively blessed
    with bugs that show in single-threaded situations. My programs have well defined
    inputs and outputs, and I have sophisticated mechanisms for inspecting the internal
    state of the multipass compiler.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我也有一个奇妙的测试套件，可以轻松地生成能够在单线程情况下导致段错误的程序，并且相对幸运地遇到只在单线程情况下显示的 bug。我的程序有明确定义的输入和输出，并且我有复杂的机制来检查多通道编译器的内部状态。
- en: What have I fixed so far?
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我到目前为止修复了什么？
- en: 'Warning: Gory technical detail ahead.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 警告：接下来是繁琐的技术细节。
- en: Build it
  id: totrans-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 构建它
- en: My first job was to make the latest new code generation code compile with the
    latest GHC branch (it had bit-rotted a bit in the interim.) This went mostly smoothly,
    except for the fact that Norman Ramsey really likes polymorphic local definitions
    and MonoLocalBinds reared its ugly head in Hoopl and a few other modules.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我的第一个工作是使最新的代码生成代码与最新的 GHC 分支编译（在这段时间内有些陈旧）。这基本上进行得很顺利，除了一个问题，Norman Ramsey
    真的喜欢多态本地定义，MonoLocalBinds 在 Hoopl 和其他几个模块中显现了它丑陋的一面。
- en: Test 4030
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 测试 4030
- en: '[Test 4030](http://hackage.haskell.org/trac/ghc/ticket/4030) was this “simple”
    program (simple is in quotes, because as Simon Peyton-Jones put it, “that looks
    like a hard one to start with... threads, exceptions, etc.”)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[测试 4030](http://hackage.haskell.org/trac/ghc/ticket/4030)是这个“简单”程序（简单用引号，因为正如
    Simon Peyton-Jones 所说的那样，“这看起来像一个难以开始的... 线程、异常等”）。'
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The resulting code segfaulted in stg_BLACKHOLE_info when attempting to dereference
    “something.”
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试解引用“something”时，生成的代码在 stg_BLACKHOLE_info 处导致段错误。
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This something ended up being a new stack slot that Simon Marlow introduced
    when he had [rewritten the blackholing scheme](http://hackage.haskell.org/trac/ghc/ticket/3838).
    The solution was to port these changes to the new code generator. I ended up manually
    reviewing every patch within the merge time window to ensure all changes had been
    ported, and probably squished a few latent bugs in the process. There’s no patch
    because I ended up folding this change into the merge (since the new blackholing
    scheme had not existed at the time the new code generator branch was frozen.)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个“something”最终成为了 Simon Marlow 在他[重写黑洞方案](http://hackage.haskell.org/trac/ghc/ticket/3838)时引入的一个新的栈插槽。解决方案是将这些更改移植到新的代码生成器上。我最终在合并时间窗口内手动审核了每个补丁，以确保所有更改都已移植，并在这个过程中可能消灭了一些潜在的
    bug。没有补丁，因为我最终将这个改动合并到了一起（因为新的黑洞方案在新代码生成器分支冻结时还不存在）。
- en: Test ffi021
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 测试 ffi021
- en: Test ffi021 involved creating a pointer to an imported FFI function, and then
    dynamically executing it. (I didn’t even know you could do that with the FFI!)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 测试 ffi021 包括创建指向导入的 FFI 函数的指针，然后动态执行它。（我甚至不知道你可以用 FFI 做到这一点！）
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This ended up being a latent bug in the inline statement optimizer (not a bug
    in the new code generator, but a bug that the new codegen tickled). I got as far
    as concluding that it was an optimization bug in the native code generator before
    Simon Marlow identified the bug, and we got [a one-line patch](http://www.mail-archive.com/cvs-ghc@haskell.org/msg24392.html).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这最终是内联语句优化器中的潜在 bug（不是新代码生成器中的 bug，而是新代码生成器触发的优化 bug）。我得出结论认为这是本地代码生成器中的优化 bug，然后
    Simon Marlow 辨认出了这个 bug，并且我们得到了[一个单行补丁](http://www.mail-archive.com/cvs-ghc@haskell.org/msg24392.html)。
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Test 4221
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 测试 4221
- en: This one took three weeks to solve. The original test code was fairly complex
    and highly sensitive to code changes. My first theory was that we were attempting
    to access a variable that had never been spilled to the stack, but after talking
    to Simon Peyton Jones about how stack spilling worked I got the inkling that this
    might not actually be the problem, and stopped attempting to understand the Hoopl
    code that did spilling and went back to analysis. There was another false end
    with regards to optimization fuel, which I hoped would help pinpoint the point
    of error but in fact doesn't work yet. (Optimization fuel allows you to incrementally
    increase the number of optimizations applied, so you can binary search which optimization
    introduces the bug. Unfortunately, you most of the so-called “optimizations” were
    actually essential program transformations on the way to machine code.)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题花了三周时间解决。原始的测试代码相当复杂，对代码变更非常敏感。我最初的理论是，我们试图访问一个从未溢出到栈上的变量，但在与 Simon Peyton
    Jones 讨论栈溢出工作原理后，我开始怀疑这可能并不是问题，并停止试图理解做溢出的 Hoopl 代码，重新进行分析。关于优化燃料还有另一个错误的尝试，我希望它能帮助我找到错误点，但事实上并不起作用。（优化燃料允许您逐步增加应用的优化数量，因此您可以二分搜索引入错误的优化。不幸的是，大部分所谓的“优化”实际上是通往机器码的关键程序转换。）
- en: 'The breakthrough came when I realized that the bug persisted when I changed
    the types in the input program from CDouble to CInt64, but not when I changed
    the types to CInt32\. This allowed me to identify the erroneous C-- code involving
    *garbage collection* and reduce the test-case to a very small program which didn’t
    crash but showed the wrong code (since the program needed to run for a while in
    order to trigger a stack overflow at precisely the right place):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 突破口在于我意识到，当我将输入程序中的类型从 CDouble 改为 CInt64 时，错误仍然存在，但当我将类型更改为 CInt32 时却不存在。这使我能够识别出涉及
    *垃圾收集* 的错误 C-- 代码，并将测试用例缩减为一个非常小的程序，它不会崩溃，但显示出错误的代码（因为程序需要运行一段时间才能在正确的位置触发堆栈溢出）：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: After a huge misunderstanding regarding the calling convention and futile attempts
    to find a bug in the stack layout code (I assumed that `slot<foo> + 4` indicated
    a higher memory location; in fact it indicated a lower memory location than `slot<foo>`),
    I finally identified the problem to be with the `stg_gc_*` calling convention.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在对调用约定产生了巨大误解并在栈布局代码中找不到 bug 的徒劳尝试之后（我认为 `slot<foo> + 4` 表示更高的内存位置；实际上它表示比 `slot<foo>`
    更低的内存位置），我最终确认问题出在 `stg_gc_*` 的调用约定上。
- en: 'My first patch to fix this changed the callee (the `stg_gc_*` functions) to
    use the observed calling convention that the new code generator was emitting,
    since I couldn’t see anything wrong with that code. But there was an anomalous
    bit: by this theory, all of the calls to GC should have used the wrong calling
    convention, yet only doubles and 64-bit integers exhibited this behavior. My patch
    worked, but there was something wrong. This something wrong was in fact the fact
    that 32-bit x86 has *no* general purpose non-32-bit registers, which was why the
    code generator was spilling only these types of arguments onto the stack. I learned
    a little bit more about GHC’s virtual registers, and determined another one line
    fix.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我的第一个修补程序是将被调用者（`stg_gc_*` 函数）更改为使用新代码生成器发出的观察到的调用约定，因为我看不出那段代码有什么问题。但有一个异常的地方：按照这个理论，所有调用
    GC 的地方都应该使用错误的调用约定，然而只有双精度和 64 位整数表现出了这种行为。我的修补程序起了作用，但有些不对劲。这个不对劲实际上是 32 位 x86
    没有通用目的的非 32 位寄存器，这就是代码生成器只将这些类型的参数溢出到栈上的原因。我对 GHC 的虚拟寄存器有了更多了解，并确定了另一个一行修复方案。
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Test 2047 (bagels)
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 测试 2047（bagels）
- en: This one is in progress. Fixing the GC bug resolved all of the remaining mysterious
    test suite failures (hooray), and with this I was able to recompile GHC with all
    of the libraries with the new code generator. This triggered [test 2047](http://hackage.haskell.org/trac/ghc/ticket/2047)
    to start segfaulting.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这个正在进行中。修复了 GC bug 后，所有剩余的神秘测试套件失败问题都解决了（万岁），我也能够用新的代码生成器重新编译 GHC 和所有库。这导致了
    [test 2047](http://hackage.haskell.org/trac/ghc/ticket/2047) 开始出现段错误。
- en: 'It took me a little bit of time to establish that I had not introduced a bug
    from compiling the stage 2 compiler with the new codegen (which I had done overzealously)
    and confirm which library code had the bug, but once I had done so I managed to
    reduce it to the following program (which I had lovingly named “bagels”):'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我花了一点时间确认我没有在用新的代码生成器编译第二阶段编译器时引入错误（我做得过于热情了），并确认哪个库代码有错误，但一旦我这样做了，我就设法将它减少到以下程序（我曾经贴心地命名为“begals”）：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'with sort defined in the module Bagel as such:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在模块Bagel中，sort定义如下：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'and run with the following data:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 并使用以下数据运行：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This program has a number of curious properties. The segfault goes away if
    I:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序具有一些奇怪的特性。如果我：
- en: Turn off compacting GC
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关闭紧凑式GC
- en: Reduce the size of master-data
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少主数据的大小
- en: Turn off optimizations
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关闭优化
- en: Use the old codegen
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用旧的代码生成器
- en: Put all of the code in one file
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将所有代码放在一个文件中
- en: Remove the seqs from 'sort' (which isn't actually a sort)
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从'sort'中删除seqs（实际上不是一个排序）
- en: Remove the seqs from 'main'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从'main'中删除seqs
- en: Make the sort function monomorphic on Char
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使sort函数在Char上具有单态性
- en: The current theory is someone (either the new code generator or the compacting
    GC) is not handling a tag bit properly, but I haven’t quite figured out where
    yet. This is the only outstanding bug unique to the new code generator.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的理论是某人（可能是新的代码生成器或紧凑式GC）没有正确处理标签位，但我还没有完全弄清楚具体是哪里。这是新代码生成器唯一的突出问题。
