- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:53'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:53'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'IO evaluates the Haskell Heap : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IO 评估 Haskell 堆：ezyang's 博客
- en: 来源：[http://blog.ezyang.com/2011/04/io-evaluates-the-haskell-heap/](http://blog.ezyang.com/2011/04/io-evaluates-the-haskell-heap/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2011/04/io-evaluates-the-haskell-heap/](http://blog.ezyang.com/2011/04/io-evaluates-the-haskell-heap/)
- en: In today’s post, we focus on *you*, the unwitting person rooting around the
    Haskell heap to open a present. After all, presents in the Haskell heap do not
    spontaneously unwrap themselves.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在今天的文章中，我们关注的是*你*，在 Haskell 堆中翻找打开一个礼物的人。毕竟，Haskell 堆中的礼物并不会自行打开。
- en: Someone has to open the first present.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 某人必须打开第一个礼物。
- en: 'If the Haskell heap doesn’t interact with the outside world, no presents need
    to be opened: thus IO functions are the ones that will open presents. What presents
    they will open is not necessarily obvious for many functions, so we’ll focus on
    one function that makes it particularly obvious: `evaluate`. Which tells you to...'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Haskell 堆不与外界交互，就不需要打开礼物：因此 IO 函数是打开礼物的函数。它们将打开什么礼物对于许多函数来说并不明显，因此我们将专注于一个特别明显的函数：`evaluate`。这告诉你要...
- en: '...open a present.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '...打开一个礼物。'
- en: 'If you get a primitive value, you’re done. But, of course, you might get a
    gift card (constructor):'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你得到一个原始值，你就完成了。但当然，你可能会得到一个礼品卡（构造函数）：
- en: Will you open the rest of the presents? Despite that deep, dissatisfaction inside
    you, the answer is no. `evaluate` only asks you to open one present. If it’s already
    opened, there’s nothing for you to do.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你会打开其余的礼物吗？尽管内心深处充满了不满，答案是否定的。`evaluate`只要求你打开一个礼物。如果它已经被打开，那你就无需做任何事情。
- en: 'Advanced tip: If you want to evaluate more things, make a present containing
    a ghost who will open those things for you! A frequently used example of this
    when lazy IO is involved was `evaluate (length xs)`, but don’t worry too much
    if you don’t understand that yet: I haven’t actually said how we make presents
    yet!'
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 高级技巧：如果你想评估更多东西，可以制作一个包含一个幽灵的礼物，他将帮你打开那些东西！当涉及到延迟 IO 时，这是一个经常使用的例子：`evaluate
    (length xs)`，但如果你还不明白，不用太担心：我还没有说过我们如何制作礼物！
- en: Even though we’re only opening one present, many things can happen, as described
    in the last post. It could execute some IO...
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们只打开了一个礼物，很多事情可能会发生，正如上篇所述。它可能执行一些 IO...
- en: 'This is our direct window into evaluation as it evolves: when we run programs
    normally, we can’t see the presents being opened up; but if we ask the ghost to
    also shout out when it is disturbed, we get back this information. And in fact,
    this is precisely what `Debug.Trace` does!'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在评估过程中直接窥探的窗口：通常情况下运行程序时，我们看不到礼物被打开的过程；但如果我们让幽灵在被扰动时也喊出来，我们就能得到这些信息。事实上，这正是`Debug.Trace`所做的！
- en: 'There are other ways to see what evaluation is going on. A present could blow
    up: this is the exploding booby-trapped present, also known as “bottom”.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他方法可以查看正在进行的评估。一个礼物可能会爆炸：这是爆炸的陷阱礼物，也称为“底部”。
- en: Perhaps the explosion was caused by an `undefined` or `error "Foobar"`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 或许爆炸是由`undefined`或`error "Foobar"`引起的。
- en: Boom.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 砰。
- en: '* * *'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: We’ll end on a practical note. As we’ve mentioned, you can only be sure that
    a present has been opened if you’ve explicitly asked for it to be opened from
    IO. Otherwise, ghosts might play tricks on you. After all, you can’t actually
    *see* the Haskell heap, so there’s no way to directly tell if a present has been
    opened or not.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以一个实用的笔记结束。正如我们所提到的，你只有在显式要求从 IO 打开一个礼物时才能确定它已经被打开。否则，幽灵可能会捉弄你。毕竟，你实际上是看不到
    Haskell 堆的，所以没有直接的方法可以直接告诉一个礼物是否已经被打开。
- en: If you’re unsure when a thunk is being evaluated, add a trace statement to it.
    If ghosts are being lazy behind your back, the trace statement will never show
    up.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不确定一个 thunk 何时被评估，请在其中添加一个跟踪语句。如果幽灵在你背后懒惰，跟踪语句就永远不会出现。
- en: More frequently, however, the trace statement will show up; it’ll just be later
    than you expect (the ghosts may be lazy, but they’ll eventually get the job done.)
    So it’s useful to prematurely terminate your program or add extra print statements
    demarcating various stages of your program.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，更频繁地，跟踪语句将会出现；它可能会比你预期的晚一些（幽灵可能会懒惰，但他们最终会完成工作）。因此，过早终止你的程序或添加额外的打印语句来划分程序的各个阶段是很有用的。
- en: 'Last time: [Evaluation on the Haskell Heap](http://blog.ezyang.com/2011/04/evaluation-on-the-haskell-heap/)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 上次：[在 Haskell 堆上评估](http://blog.ezyang.com/2011/04/evaluation-on-the-haskell-heap/)
- en: 'Next time: [Implementing the Haskell Heap in Python, v1](http://blog.ezyang.com/2011/04/implementing-the-haskell-heap-in-python-v1/)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 下一次：[在Python中实现Haskell堆，v1](http://blog.ezyang.com/2011/04/implementing-the-haskell-heap-in-python-v1/)
- en: '*Technical notes.* Contrary to what I’ve said earlier, there’s no theoretical
    reason why we couldn’t spontaneously evaluate thunks on the heap: this evaluation
    approach is called *speculative evaluation.* Somewhat confusingly, IO actions
    themselves can be thunks as well: this corresponds to passing around values of
    `IO a` without actually “running” them. But since I’m not here to talk about monads,
    I’ll simply ignore the existence of presents that contain `IO` actions—they work
    the same way, but you have to keep the levels of indirection straight. And finally,
    of course infinite loops also count as bottom, but the image of opening one present
    for the rest of eternity is not as flashy as an exploding present.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*技术说明。* 与我之前说过的相反，理论上我们可以在堆上自发地评估`thunk`，这种评估方法称为*推测性评估*。有些令人困惑的是，`IO`操作本身也可以是`thunk`：这相当于传递`IO
    a`的值，而不实际“运行”它们。但因为我不在这里讨论单子，我将简单地忽略包含`IO`操作的存在——它们的工作方式相同，但你必须保持间接层级清晰。当然，无限循环也算作`bottom`，但将其打开一个礼物直到永远的形象，并不像一个爆炸性礼物那样吸引眼球。'
- en: This work is licensed under a [Creative Commons Attribution-ShareAlike 3.0 Unported
    License](http://creativecommons.org/licenses/by-sa/3.0/).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这项工作根据[知识共享署名-相同方式共享 3.0 未本地化许可协议](http://creativecommons.org/licenses/by-sa/3.0/)进行许可。
