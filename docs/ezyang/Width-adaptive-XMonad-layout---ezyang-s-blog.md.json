["```\n{-# LANGUAGE FlexibleInstances, MultiParamTypeClasses #-}\n\n-----------------------------------------------------------------------------\n-- |\n-- Module      :  XMonad.Layout.PerScreen\n-- Copyright   :  (c) Edward Z. Yang\n-- License     :  BSD-style (see LICENSE)\n--\n-- Maintainer  :  <ezyang@cs.stanford.edu>\n-- Stability   :  unstable\n-- Portability :  unportable\n--\n-- Configure layouts based on the width of your screen; use your\n-- favorite multi-column layout for wide screens and a full-screen\n-- layout for small ones.\n-----------------------------------------------------------------------------\n\nmodule XMonad.Layout.PerScreen\n    ( -- * Usage\n      -- $usage\n      PerScreen,\n      ifWider\n    ) where\n\nimport XMonad\nimport qualified XMonad.StackSet as W\n\nimport Data.Maybe (fromMaybe)\n\n-- $usage\n-- You can use this module by importing it into your ~\\/.xmonad\\/xmonad.hs file:\n--\n-- > import XMonad.Layout.PerScreen\n--\n-- and modifying your layoutHook as follows (for example):\n--\n-- > layoutHook = ifWider 1280 (Tall 1 (3/100) (1/2) ||| Full) Full\n--\n-- Replace any of the layouts with any arbitrarily complicated layout.\n-- ifWider can also be used inside other layout combinators.\n\nifWider :: (LayoutClass l1 a, LayoutClass l2 a)\n               => Dimension   -- ^ target screen width\n               -> (l1 a)      -- ^ layout to use when the screen is wide enough\n               -> (l2 a)      -- ^ layout to use otherwise\n               -> PerScreen l1 l2 a\nifWider w = PerScreen w False\n\ndata PerScreen l1 l2 a = PerScreen Dimension Bool (l1 a) (l2 a) deriving (Read, Show)\n\n-- | Construct new PerScreen values with possibly modified layouts.\nmkNewPerScreenT :: PerScreen l1 l2 a -> Maybe (l1 a) ->\n                      PerScreen l1 l2 a\nmkNewPerScreenT (PerScreen w _ lt lf) mlt' =\n    (\\lt' -> PerScreen w True lt' lf) $ fromMaybe lt mlt'\n\nmkNewPerScreenF :: PerScreen l1 l2 a -> Maybe (l2 a) ->\n                      PerScreen l1 l2 a\nmkNewPerScreenF (PerScreen w _ lt lf) mlf' =\n    (\\lf' -> PerScreen w False lt lf') $ fromMaybe lf mlf'\n\ninstance (LayoutClass l1 a, LayoutClass l2 a, Show a) => LayoutClass (PerScreen l1 l2) a where\n    runLayout (W.Workspace i p@(PerScreen w _ lt lf) ms) r\n        | rect_width r > w    = do (wrs, mlt') <- runLayout (W.Workspace i lt ms) r\n                                   return (wrs, Just $ mkNewPerScreenT p mlt')\n        | otherwise           = do (wrs, mlt') <- runLayout (W.Workspace i lf ms) r\n                                   return (wrs, Just $ mkNewPerScreenF p mlt')\n\n    handleMessage (PerScreen w bool lt lf) m\n        | bool      = handleMessage lt m >>= maybe (return Nothing) (\\nt -> return . Just $ PerScreen w bool nt lf)\n        | otherwise = handleMessage lf m >>= maybe (return Nothing) (\\nf -> return . Just $ PerScreen w bool lt nf)\n\n    description (PerScreen _ True  l1 _) = description l1\n    description (PerScreen _ _     _ l2) = description l2\n\n```"]