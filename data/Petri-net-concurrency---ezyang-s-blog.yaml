- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:57'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:57'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Petri net concurrency : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Petri 网并发 : ezyang''s 博客'
- en: 来源：[http://blog.ezyang.com/2011/03/petri-net-concurrency/](http://blog.ezyang.com/2011/03/petri-net-concurrency/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2011/03/petri-net-concurrency/](http://blog.ezyang.com/2011/03/petri-net-concurrency/)
- en: Petri net concurrency
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Petri 网并发
- en: 'A [petri net](http://en.wikipedia.org/wiki/Petri_net) is a curious little graphical
    modeling language for control flow in concurrency. They came up in this talk a
    few weeks ago: [Petri-nets as an Intermediate Representation for Heterogeneous
    Architectures](http://talks.cam.ac.uk/talk/index/29894), but what I found interesting
    was how I could describe some common concurrency structures using this modeling
    language.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [Petri 网](http://en.wikipedia.org/wiki/Petri_net) 是一种有趣的小型图形建模语言，用于并发控制流。几周前在这次演讲中提到了它们：[Petri-nets
    as an Intermediate Representation for Heterogeneous Architectures](http://talks.cam.ac.uk/talk/index/29894)，但我觉得有趣的是我可以用这种建模语言描述一些常见的并发结构。
- en: 'Here is, for example, the well venerated lock:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这里是备受推崇的锁：
- en: 'The way to interpret the graph is thus: each circle is a “petri dish” (place)
    that may contain some number of tokens. The square boxes (transitions) are actions
    that would like to fire, but in order to do so all of the petri dishes feeding
    into them must have tokens. It’s the sort of representation that you could make
    into a board game of sorts!'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 解释图的方式是这样的：每个圆圈是一个“Petri 碟”（位置），可能包含一些令牌。方形框（转换）是希望触发的操作，但为了执行这些操作，所有输入它们的 Petri
    碟必须有令牌。这种表示方法可以说是可以变成某种棋盘游戏的形式！
- en: If multiple transitions can fire off, we pick one of them and only that one
    succeeds; the ability for a token to flow down one or another arrow encodes nondeterminism
    in this model. In the lock diagram, only one branch can grab the lock token in
    the middle, but they return it once they exit the critical area (unlock).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果多个转换可以触发，我们选择其中一个，只有那一个成功；一个令牌沿着一个或另一个箭头流动的能力在这个模型中编码了非确定性。在锁图中，只有一个分支可以获取中间的锁令牌，但它们在退出关键区域（解锁）时将其归还。
- en: 'Here is a semaphore:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个信号量：
- en: 'It’s exactly the same, except that the middle place may contain more than one
    token. Of course, no one said that separate processes must wait before signalling.
    We can implement a simple producer-consumer chain like this:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 它和之前的完全相同，只是中间的位置可能包含多个令牌。当然，没有人说独立的进程必须在发出信号之前等待。我们可以像这样实现一个简单的生产者-消费者链：
- en: Note that petri net places are analogous to `MVar ()`, though it takes a little
    care to ensure we are not manufacturing tokens out of thin air in Haskell, due
    to the lack of linear types. You may also notice that petri nets say little about
    *data flow*; we can imagine the tokens as data, but the formalism doesn’t say
    much about what the tokens actually represent.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Petri 网中的位置类似于 `MVar ()`，尽管在 Haskell 中需要小心确保我们不是在空中制造令牌，这是由于线性类型的缺失。你可能还注意到，Petri
    网对于 *数据流* 并没有说太多；我们可以想象这些令牌代表数据，但形式主义并没有详细说明这些令牌实际上代表什么。
