- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:01'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:01'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Prio: Private, Robust, and Scalable Computation of Aggregate Statistics : ezyang’s
    blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Prio：私密、强大和可扩展的聚合统计计算：ezyang的博客
- en: 来源：[http://blog.ezyang.com/2017/03/prio-private-robust-and-scalable-computation-of-aggregate-statistics/](http://blog.ezyang.com/2017/03/prio-private-robust-and-scalable-computation-of-aggregate-statistics/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2017/03/prio-private-robust-and-scalable-computation-of-aggregate-statistics/](http://blog.ezyang.com/2017/03/prio-private-robust-and-scalable-computation-of-aggregate-statistics/)
- en: I want to take the opportunity to advertise some new work from a colleague of
    mine, [Henry Corrigan-Gibbs](https://www.henrycg.com/) (in collaboration with
    the venerable Dan Boneh) on the subject of preserving privacy when collecting
    aggregate statistics. Their new system is called [Prio](https://www.henrycg.com/pubs/nsdi17prio/)
    and will be appearing at this year's NSDI.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我想借此机会宣传一下我的一位同事[Henry Corrigan-Gibbs](https://www.henrycg.com/)（与备受尊敬的Dan Boneh合作）关于在收集聚合统计数据时保护隐私的一些新工作。他们的新系统名为[Prio](https://www.henrycg.com/pubs/nsdi17prio/)，将出现在今年的NSDI上。
- en: 'The basic problem they tackle is this: suppose you''re Google and you want
    to collect some statistics on your users to compute some aggregate metrics, e.g.,
    averages or a linear regression fit:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 他们解决的基本问题是：假设你是谷歌，你想收集一些关于用户的统计数据以计算一些聚合指标，例如平均值或线性回归拟合：
- en: 'A big problem is how to collect this data without compromising the privacy
    of your users. To preserve privacy, you *don''t* want to know the data of each
    of your individual users: you''d like to get this data in completely anonymous
    form, and only at the end of your collection period, get an aggregate statistic.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一个大问题是如何在不损害用户隐私的情况下收集这些数据。为了保护隐私，*你不想*知道每个个别用户的数据：你希望以完全匿名的形式获取这些数据，并且只在收集期结束时获得一个聚合统计数据。
- en: 'This is an old problem; there are a [number](https://github.com/google/rappor)
    of [existing](http://nms.csail.mit.edu/projects/privacy/privstats-ccs.pdf) [systems](https://iakkus.github.io/papers/2013-sigcomm-chen.pdf)
    which achieve this goal with varying tradeoffs. Prio tackles one particularly
    tough problem in the world of private aggregate data collection: robustness in
    the face of malicious clients. Suppose that you are collecting data for a linear
    regression, and the inputs your clients send you are completely anonymous. A malicious
    client could send you a bad data point that could skew your entire data set; and
    since you never get to see the individual data points of your data set, you would
    never notice:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个古老的问题；有许多[现有系统](https://github.com/google/rappor)在实现这一目标时有不同的权衡。Prio解决了在私人聚合数据收集领域中一个特别棘手的问题：面对恶意客户的强大性。假设你正在为线性回归收集数据，而你的客户发送给你的输入是完全匿名的。一个恶意客户可能会发送给你一个糟糕的数据点，这可能会使整个数据集产生偏差；而且由于你从未看到数据集的个别数据点，你永远也不会注意到：
- en: Thus, Prio looks at the problem of anonymously collecting data, while at the
    same time being able to *validate* that the data is reasonable.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Prio关注匿名收集数据的问题，同时能够*验证*数据是否合理。
- en: The mechanism by which Prio does this is pretty cool, and so in this post, I
    want to explain the key insights of their protocol. Prio operates in a regime
    where a client *secret shares* their secret across a pool of servers which are
    assumed to be non-colluding; as long as at least one server is honest, nothing
    is revealed about the client's secret until the servers jointly agree to publish
    the aggregate statistic.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Prio实现这一目标的机制非常酷，因此在这篇文章中，我想解释一下他们协议的关键见解。Prio在一个客户*秘密共享*他们的秘密给一组被假定为不串通的服务器的情况下运作；只要至少有一个服务器是诚实的，直到服务器共同同意发布聚合统计数据之前，关于客户的秘密不会被透露。
- en: 'Here is the problem: given a secret share of some hidden value, how can we
    *efficiently* check if it is valid? To answer this question, we first have to
    explain a little bit about the world of secret sharing.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是问题所在：给定某个隐藏值的秘密共享，我们如何*高效地*检查它是否有效？为了回答这个问题，我们首先必须解释一下秘密共享的世界。
- en: '* * *'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'A secret sharing scheme allows you to split a secret into many pieces, so that
    the original secret cannot be recovered unless you have some subset of the pieces.
    There are amazingly simple constructions of secret sharing: suppose that your
    secret is the number *x* in some field (e.g., integers modulo some prime *p*),
    and you want to split it into *n* parts. Then, let the first *n-1* shares be random
    numbers in the field, the last random number be *x* minus the sum of the previous
    shares. You reconstruct the secret by summing all the shares together. This scheme
    is information theoretically secure: with only *n-1* of the shares, you have learned
    nothing about the underlying secret. Another interesting property of this secret
    sharing scheme is that it is homomorphic over addition. Let your shares of x and
    y be ![[x]_i](img/3a777f041687882a2aac1f63411c4503.png "[x]_i") and ![[y]_i](img/09843b233ecfaaee21603f5d66cc7880.png
    "[y]_i"): then ![[x]_i + [y]_i](img/36543bd41d0031b6e5f86d169388897b.png "[x]_i
    + [y]_i") form secret shares of *x + y*, since addition in a field is commutative
    (so I can reassociate each of the pairwise sums into the sum for x, and the sum
    for y.)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 秘密分享方案允许您将一个秘密分成许多片段，以便原始秘密除非您拥有某些片段的子集，否则无法恢复。有惊人简单的秘密分享构造：假设您的秘密是某个域中的数字*x*（例如，模某个质数*p*的整数），并且您希望将其分成*n*部分。然后，让前*n-1*份额是域中的随机数，最后一个随机数是*x*减去前面份额的总和。通过将所有份额相加来重建秘密。此方案在信息理论上是安全的：仅使用*n-1*份额，您对底层秘密不知道任何信息。此秘密分享方案的另一个有趣属性是，它在加法上是同态的。让你的*x*和*y*的份额分别是
    ![[x]_i](img/3a777f041687882a2aac1f63411c4503.png "[x]_i") 和 ![[y]_i](img/09843b233ecfaaee21603f5d66cc7880.png
    "[y]_i")：那么 ![[x]_i + [y]_i](img/36543bd41d0031b6e5f86d169388897b.png "[x]_i +
    [y]_i") 形成*x + y*的秘密分享，因为域中的加法是可交换的（因此我可以将每对总和重新分配为x的总和和y的总和）。
- en: 'Usually, designing a scheme with homomorphic addition is easy, but having a
    scheme that supports addition and multiplication simultaneously (so that you can
    compute interesting arithmetic circuits) is a bit more difficult. Suppose you
    want to compute an arithmetic circuit on some a secret shared value: additions
    are easy, but to perform a multiplication, most multiparty computation schemes
    (Prio uses [Beaver''s MPC protocol](https://www.cs.bris.ac.uk/~nigel/FHE-MPC/Lecture8.pdf))
    require you to perform a round of communication:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，设计支持同态加法的方案很容易，但是具有同时支持加法和乘法（以便您可以计算有趣的算术电路）的方案则稍微困难一些。假设您希望在某个秘密分享值上计算算术电路：加法很容易，但要执行乘法，大多数多方计算方案（Prio使用[Beaver的MPC协议](https://www.cs.bris.ac.uk/~nigel/FHE-MPC/Lecture8.pdf)）都要求您进行一轮通信：
- en: While you can batch up multiplications on the same "level" of the circuit, so
    that you only to do as many rounds as the maximum depth of multiplications in
    the circuit, for large circuits, you may end up having to do quite a bit of communication.
    Henry tells me that fully homomorphic secret sharing has been the topic of some
    research ongoing research; for example, [this paper](https://eprint.iacr.org/2016/585)
    about homomorphic secret sharing won best paper at CRYPTO last year.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然您可以批量处理电路中相同“级别”的乘法，以便您只需执行电路中最大乘法深度的轮次，但对于大型电路，您可能需要进行相当多的通信。亨利告诉我，全同态秘密分享已经成为一些正在进行的研究课题；例如，去年[Crypto大会](https://eprint.iacr.org/2016/585)关于同态秘密分享的论文获得了最佳论文奖。
- en: '* * *'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Returning to Prio, recall that we had a secret share of the user provided input,
    and we would like to check if it is valid according to some arithmetic circuit.
    As we''ve seen above, we could try using a multi-party computation protocol to
    compute shares of the output of the circuit, reveal the output of the circuit:
    if it says that the input is valid, accept it. But this would require quite a
    few rounds of communication to actually do the computation!'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到Prio，回想一下我们有用户提供输入的秘密分享，并且我们想要检查它是否根据某个算术电路有效。正如我们上面看到的那样，我们可以尝试使用多方计算协议来计算电路输出的份额，揭示电路的输出：如果它说输入有效，则接受它。但这将需要相当多的通信轮次来实际进行计算！
- en: 'Here is one of the key insights of Prio: we don''t need the servers to *compute*
    the result of the circuit--an honest client can do this just fine--we just need
    them to *verify* that a computation of the circuit is valid. This can be done
    by having the client ship shares of all of the intermediate values on each of
    the wires of the circuit, having the servers recompute the multiplications on
    these shares, and then comparing the results with the intermediate values provided
    to us by the client:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Prio 的一个关键洞察是：我们不需要服务器来*计算*电路的结果--一个诚实的客户端完全可以做到这一点--我们只需要它们来*验证*电路计算的有效性。这可以通过客户端发送电路中每条线上所有中间值的份额，让服务器重新计算这些份额的乘积，然后将结果与客户端提供的中间值进行比较来实现：
- en: When we transform the problem from a *computation* problem to a *verification*
    one, we now have an *embarrassingly parallel* verification circuit, which requires
    only a single round to multiply each of the intermediate nodes of the circuit.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将问题从*计算*问题转换为*验证*问题时，我们现在有一个*尴尬并行*的验证电路，只需要一个轮次来乘以电路的每个中间节点。
- en: 'There is only one final problem: how are we to check that the recomputed multiplies
    of the shares and the client provided intermediate values are consistent? We can''t
    publish the intermediate values of the wire (that would leak information about
    the input!) We *could* build a bigger circuit to do the comparison and combine
    the results together, but this would require more rounds of communication.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 最后有一个问题：我们如何检查重新计算的份额乘积和客户端提供的中间值是否一致？我们不能发布电线的中间值（这将泄露有关输入的信息！）我们*可以*建立一个更大的电路来进行比较并将结果组合在一起，但这将需要更多的通信轮次。
- en: 'To solve this problem, Prio adopts an elegant trick from Ben-Sasson''12 ([Near-linear
    unconditionally-secure multiparty computation with a dishonest minority](https://eprint.iacr.org/2011/629.pdf)):
    rather than publish the *entire* all of the intermediate wires, treat them as
    polynomials and publish the evaluation of each polynomial at a random point. If
    the servers behave correctly, they reveal nothing about the original polynomials;
    furthermore, with high probability, if the original polynomials are not equal,
    then the evaluation of the polynomials at a random point will also be not equal.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，Prio采用了Ben-Sasson'12的一个巧妙技巧（《近线性无条件安全的多方计算与不诚实少数派》）：不是公开*所有*中间线的详细内容，而是将它们视为多项式，并在随机点上发布每个多项式的评估。如果服务器行为正确，它们不会泄露任何关于原始多项式的信息；而且很可能，如果原始多项式不相等，那么在随机点上的多项式评估也不会相等。
- en: '* * *'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'This is all very wonderful, but I''d like to conclude with a cautionary tale:
    you have to be *very* careful about how you setup these polynomials. Here is the
    pitfall: suppose that a malicious server homomorphically *modifies* one of their
    shares of the input, e.g., by adding some delta. Because our secret shares are
    additive, adding a delta to one of the share causes the secret to also be modified
    by this delta! If the adversary can carry out the rest of the protocol with this
    modified share, when the protocol finishes running, he finds out whether or not
    the *modified* secret was valid. This leaks information about the input: if your
    validity test was "is the input 0 or 1", then if you (homomorphically) add one
    to the input and it is still valid, you know that it definitely was zero!'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都非常精彩，但我想以一个警示故事来总结一下：在设置这些多项式时，你必须非常小心。这里有个陷阱：假设一个恶意的服务器同态地*修改*了它们输入的份额之一，例如，添加了一些增量。由于我们的秘密份额是可加的，将增量添加到一个份额会导致秘密也被这个增量修改！如果对手可以用这个修改后的份额完成协议的其余部分，当协议运行结束时，他会发现*修改后的*秘密是否有效。这会泄露关于输入的信息：如果你的有效性测试是“输入是否为0或1”，那么如果你（同态地）给输入加一，并且它仍然有效，你就知道它肯定是零！
- en: Fortunately, this problem can be fixed by *randomizing* the polynomials, so
    that even if the input share is shifted, the rest of the intermediate values that
    it computes cannot be shifted in the same way. The details are described in the
    section "Why randomize the polynomials?" I think this just goes to show how tricky
    the design of cryptographic systems can be!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，这个问题可以通过*随机化*多项式来解决，因此即使输入份额被移动，它计算的其余中间值也不能以相同的方式移动。详细内容请参阅“为什么要随机化多项式？”部分。我认为这只是展示了加密系统设计有多棘手的一个例子！
- en: In any case, if this has piqued your interest, [go read the paper](https://www.henrycg.com/pubs/nsdi17prio/)!
    If you're at MIT, you can also go see Henry give a seminar on the subject on [March
    22](http://css.csail.mit.edu/security-seminar/details.html#Mar2217) at the MIT
    CSAIL Security Seminar.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，如果这引起了你的兴趣，[去阅读这篇论文](https://www.henrycg.com/pubs/nsdi17prio/)吧！如果你在麻省理工学院，你还可以在[3月22日](http://css.csail.mit.edu/security-seminar/details.html#Mar2217)参加亨利在麻省理工学院CSAIL安全研讨会上的演讲。
