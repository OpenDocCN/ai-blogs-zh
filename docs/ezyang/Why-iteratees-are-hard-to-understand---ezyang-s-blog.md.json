["```\ndata Step a b = Continue (Stream a -> m (Step a b)) | Yield b\ntype Iteratee     a b =                  m (Step a b)\ntype Enumerator   a b = Step a b ->      m (Step a b)\ntype Enumeratee o a b = Step a b -> Step o (Step a b)\n\n```", "```\ninterface Iteratee<A,B> {\n  void put(Stream<A>);\n  Maybe<B> result();\n}\n\n```", "```\nvoid Enumerator(Iteratee<A,B>);\n\n```", "```\ntype Enumerator a b = Step a b -> m (Step a b)\n\n```", "```\n-- s :: Step a b\n-- x0, x1 :: Stream a\ncase s of\n    Yield r -> return (Yield r)\n    Continue k -> do\n        s' <- k x0\n        case s' of\n            Yield r -> return (Yield r)\n            Continue k -> do\n                s'' <- k x1\n                return s''\n\n```", "```\ntype Enumerator a b = Step a b -> m ()\n\n```", "```\ntype Enumerator a b = Step a b -> m (Maybe b)\n\n```", "```\n> type Enumerator a b = Step a b -> Iteratee a b\n> \n> ```", "```\ninterface Enumeratee<O,A,B> implements Iteratee<O,B> {\n    Enumeratee(Iteratee<A,B>);\n    bool done();\n    // inherited from Iteratee<O,B>\n    void put(Stream<O>);\n    Maybe<B> result();\n}\n\n```", "```\ntype Enumeratee o a b = Step a b -> Step o (Step a b)\n\n```", "```\ntype Enumeratee o a b = Step a b -> Step o b\n\n```", "```\ntype Enumeratee o a b = Step a b -> Step o (Step a b)\n\n```", "```\n> Step a b -> m (Step o (Step a b))\n> \n> ```"]