- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:16:57'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:16:57'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'The hidden problem(?) with basic block procedures in SSA : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SSA 中基本块过程的隐藏问题：ezyang 博客
- en: 来源：[http://blog.ezyang.com/2020/10/the-hidden-problem-with-basic-block-procedures-in-ssa/](http://blog.ezyang.com/2020/10/the-hidden-problem-with-basic-block-procedures-in-ssa/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2020/10/the-hidden-problem-with-basic-block-procedures-in-ssa/](http://blog.ezyang.com/2020/10/the-hidden-problem-with-basic-block-procedures-in-ssa/)
- en: Years ago, Nadav Rotem related to me this story about why basic block procedures
    in Swift are not as good as they seem. Nelson Elhage reminded me about this [on
    Twitter](https://twitter.com/nelhage/status/1319785483153494016) and so I thought
    this should be put into the public record.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 多年前，Nadav Rotem 向我讲述了关于为什么 Swift 中的基本块过程并不像它们看起来那么好的故事。Nelson Elhage 在 Twitter
    上提醒我这件事，所以我觉得这应该被记录在公众记录中。
- en: 'Basic block procedures make certain optimizations more difficult. Consider
    this program:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 基本块过程使得某些优化变得更加困难。考虑以下程序：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Is this program easier or more difficult to optimize than the traditional SSA
    with phi-nodes formulation?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序比传统的带有 phi 节点公式的 SSA 更容易还是更难优化？
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Suppose that the optimizer determines that y1 is unused inside j3/L3 and can
    be eliminated. In basic block land, y1 can be eliminated simply by deleting "y1
    = phi x1 x3". However, in join point land, you have to not only eliminate y1 but
    also update all the call sites of j3, since you've changed the function signature.
    In a mutable AST, changing function signatures is a pain; in particular, the mutations
    you would have to do to eliminate the argument include intermediate states that
    are not valid ASTs (making it easy to accidentally trigger asserts.)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 假设优化器确定 j3/L3 内的 y1 未被使用并且可以被消除。在基本块环境中，通过删除 "y1 = phi x1 x3" 就可以简单地消除 y1。然而，在连接点环境中，你不仅需要消除
    y1，还要更新 j3 的所有调用点，因为你已经改变了函数签名。在可变 AST 中，改变函数签名很麻烦；特别是，你必须做的突变包括一些无效的中间状态（这很容易意外触发断言）。
- en: 'When I saw this example, I wondered why GHC (which has the moral equivalent
    of basic block procedures in the form of join points) didn''t have this problem.
    Well, it turns out this optimization can be done as a series of local transformations.
    First, we do a worker/wrapper transformation, introducing an intermediate block
    (the worker) that drops the dead argument:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当我看到这个例子时，我想知道为什么 GHC（其具有基本块过程道德等价的连接点形式）没有这个问题。嗯，事实证明，这种优化可以作为一系列局部转换来完成。首先，我们进行一个工作者/包装器转换，引入一个中间块（工作者），丢弃无用参数：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Later, we inline j3, which removes the wrapper. Worker/wrapper is a very important
    optimization for functional programs, but it's easy to imagine why it is less
    preferred in mutable compiler land.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后，我们内联 j3，移除包装器。工作者/包装器是函数式程序的一个非常重要的优化，但很容易想象为什么在可变编译器环境中它不那么受欢迎。
