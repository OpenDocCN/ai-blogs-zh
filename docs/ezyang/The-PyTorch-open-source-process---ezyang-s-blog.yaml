- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:16:57'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:16:57'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'The PyTorch open source process : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PyTorch开源流程：ezyang的博客
- en: 来源：[http://blog.ezyang.com/2021/01/pytorch-open-source-process/](http://blog.ezyang.com/2021/01/pytorch-open-source-process/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2021/01/pytorch-open-source-process/](http://blog.ezyang.com/2021/01/pytorch-open-source-process/)
- en: PyTorch is a fairly large and active open source project, and sometimes we have
    people come to us and ask if there are any lessons from how we run PyTorch that
    they could apply to their own projects. This post is an attempt to describe some
    of the processes as of 2021 that help PyTorch operate effectively as an open source
    project. I won't claim that everything we do necessarily the best way to go about
    doing things, but at the very least, everything I describe here is working in
    practice.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: PyTorch是一个相当大且活跃的开源项目，有时候有人来问我们如何管理PyTorch，是否有一些经验可以应用到他们自己的项目中。本文试图描述一些截至2021年使PyTorch作为一个开源项目有效运作的过程。我不会声称我们所做的一切都是处理事务的最佳方式，但至少可以说，这里描述的一切在实践中都是有效的。
- en: '**Background.** Not all open source projects are the same, and there are some
    peculiarities to PyTorch which may reduce the applicability of some of what I
    describe below in other contexts. Here are some defining features of PyTorch,
    as a project:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**背景。** 并非所有开源项目都一样，PyTorch有一些独特之处，这些独特之处可能会减少我下文所描述内容在其他背景下的适用性。以下是PyTorch作为一个项目的一些定义特征：'
- en: '**The majority of full time PyTorch developers work at Facebook.** To be clear,
    there are many full time PyTorch developers that work at other companies: NVIDIA,
    Intel, Quansight, Microsoft, AMD, IBM, Preferred Networks, Google and Amazon all
    employ people whose job it is to work on PyTorch. But the majority of full timers
    are at Facebook, distinguishing PyTorch from hobbyist open source projects or
    projects run by a foundation of some sort.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**大多数全职PyTorch开发人员在Facebook工作。** 需要明确的是，还有许多全职PyTorch开发人员在其他公司工作：NVIDIA、Intel、Quansight、Microsoft、AMD、IBM、Preferred
    Networks、Google和Amazon都有员工致力于PyTorch的开发。但大多数全职开发人员在Facebook，这使得PyTorch区别于业余爱好者的开源项目或由某种基金会运行的项目。'
- en: '**PyTorch is a federation.** As coined by Nadia Eghbal, PyTorch is a project
    with high contributor growth and user growth. In my [State of PyTorch (2020) talk](https://www.youtube.com/watch?v=xwvtzGm8TsI),
    I go into more details, but suffice to say, we have over nine companies contributing
    to PyTorch, and a long tail of other contributors (making up 40% of all of our
    commits). This makes managing PyTorch sometimes particularly challenging, and
    many of the processes I will describe below arose from growing pains scaling this
    level of activity.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PyTorch是一个联邦项目。** 如Nadia Eghbal所说，PyTorch是一个具有高贡献者增长和用户增长的项目。在我的[PyTorch现状（2020）演讲](https://www.youtube.com/watch?v=xwvtzGm8TsI)中，我详细介绍了更多细节，但可以简单地说，我们有超过九家公司为PyTorch做贡献，还有一大批其他贡献者（占我们所有提交的40%）。这使得管理PyTorch有时特别具有挑战性，下文描述的许多流程都是为了应对这种活动规模的增长带来的困难。'
- en: '**PyTorch has a lot of surface area.** CPU, CUDA, ROCm, ONNX, XLA, serving,
    distributions, quantization, etc. It''s impossible for a single contributor to
    be well-versed in every area of the project, and so some of the challenge is just
    making sure the right people see the things they need to see.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PyTorch的表面积很广。** CPU、CUDA、ROCm、ONNX、XLA、serving、分布式、量化等等。对于单个贡献者来说，精通项目的每一个领域是不可能的，因此其中一些挑战就是确保合适的人看到他们需要看到的东西。'
- en: Alright, so how does PyTorch deal with its scale? Here are some of the things
    we do.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，那么PyTorch是如何处理其规模的？以下是我们所做的一些事情。
- en: '**Issue triage.** PyTorch receives too many bug reports a day for any one person
    to keep track of all of them. Largely inspired by this [apenwarr post](https://apenwarr.ca/log/20171213),
    we setup an oncall rotation amongst Facebook contributors to serve as first line
    triage for all of these issues. The golden rule of issue triage is that you DO
    NOT fix bugs in triage; the goal of triage is to (1) route bugs to the correct
    people via appropriate GitHub labels, and (2) look for high priority bugs and
    raise awareness of these bugs. Every week, we have a meeting to review high priority
    bugs (and other bugs marked for triage review) and talk about them. The oncall
    itself rotates daily, to discourage people from letting a week''s worth of issues
    pile up in the backlog, and we use a relatively intricate [search query](https://github.com/pytorch/pytorch/issues?q=is%3Aissue+is%3Aopen+-label%3Afx+-label%3Ajit+-label%3A%22oncall%3A+jit%22+-label%3Acaffe2+-label%3A%22oncall%3A+quantization%22+-label%3A%22oncall%3A+java%22+-label%3A%22oncall%3A+distributed%22+-label%3A%22oncall%3A+visualization%22+-label%3A%22oncall%3A+mobile%22+-label%3A%22triage+review%22+-label%3Atriaged+updated%3A%3E%3D2019-04-02+sort%3Aupdated-desc+)
    to make sure only relevant issues show up for the oncall to handle.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题分类。** PyTorch每天收到的Bug报告太多，任何一个人都无法跟踪所有这些问题。受到这篇[apenwarr文章](https://apenwarr.ca/log/20171213)的启发，我们在Facebook贡献者之间设置了轮值制度，作为所有这些问题的首次分类的第一线。问题分类的黄金法则是，在分类过程中不修复Bug；分类的目标是（1）通过适当的GitHub标签将Bug路由到正确的人，以及（2）寻找高优先级Bug并提高对这些Bug的认识。每周，我们都会举行会议审查高优先级Bug（以及其他标记为需要分类审查的Bug）并讨论这些问题。轮值本身每天轮换一次，以防止人们让一周的问题积压在积压队列中，我们使用一个相对复杂的[搜索查询](https://github.com/pytorch/pytorch/issues?q=is%3Aissue+is%3Aopen+-label%3Afx+-label%3Ajit+-label%3A%22oncall%3A+jit%22+-label%3Acaffe2+-label%3A%22oncall%3A+quantization%22+-label%3A%22oncall%3A+java%22+-label%3A%22oncall%3A+distributed%22+-label%3A%22oncall%3A+visualization%22+-label%3A%22oncall%3A+mobile%22+-label%3A%22triage+review%22+-label%3Atriaged+updated%3A%3E%3D2019-04-02+sort%3Aupdated-desc+)，以确保只有相关问题显示给轮值处理。'
- en: The most important consequence of issue triage is that you can unwatch PyTorch
    repository as a whole. Instead, by watching various labels (using our [cc bot](https://github.com/pytorch/pytorch/issues/24422)),
    you can trust that you will get CC'ed to issues related to topics, even if the
    triager doesn't know that you're interested in the issue! The weekly meeting makes
    sure that all maintainers collectively have an idea about what major issues are
    currently affecting PyTorch, and helps socialize what we as a project think of
    as a "high priority" issue. Finally, the [high priority](https://github.com/pytorch/pytorch/issues?q=is%3Aopen+is%3Aissue+label%3A%22high+priority%22)
    label is a good way to find impactful problems to work on in the project, even
    if you don't know much else about the project.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 问题分类的最重要后果是你可以整体取消对PyTorch仓库的关注。相反，通过观察各种标签（使用我们的[cc bot](https://github.com/pytorch/pytorch/issues/24422)），您可以相信，即使分类人员不知道您对问题感兴趣，也会抄送与主题相关的问题！每周的会议确保所有维护者共同了解当前影响PyTorch的主要问题，并帮助社交化我们作为项目认为的“高优先级”问题。最后，[高优先级](https://github.com/pytorch/pytorch/issues?q=is%3Aopen+is%3Aissue+label%3A%22high+priority%22)
    标签是在项目中寻找有影响力的问题的好方法，即使您对项目不甚了解。
- en: '**Pull request triage.** Similarly, we receive a decent number of drive by
    pull requests from one time contributors. Those people are not in a good position
    to find reviewers for their contributions, so we also have a triager look through
    these pull requests and make sure someone is assigned to review them. If the PR
    is particularly simple, the triager might just go ahead and merge it themselves.
    There''s actually some good automation for doing this (e.g., [homu](http://huonw.github.io/blog/2015/03/rust-infrastructure-can-be-your-infrastructure/))
    but we''ve been too lazy to set any of it up, and by hand reviewer assignment
    doesn''t seem to be too much burden on top of the existing oncall.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**拉取请求分类。** 同样，我们收到了大量来自一次性贡献者的随意拉取请求。这些人并不处于找到评审者审查他们贡献的好位置，因此我们也有一个分类人员查看这些拉取请求，并确保有人被指派进行审查。如果PR特别简单，分类人员可能会直接合并它们。实际上，有一些良好的自动化工具可以做到这一点（例如，[homu](http://huonw.github.io/blog/2015/03/rust-infrastructure-can-be-your-infrastructure/)），但我们懒得设置任何一个，并且手动指定评审者似乎不会增加太多负担在现有轮值之上。'
- en: '**Tree hugging oncall.** PyTorch has a huge CI system covering many different
    system configurations which most contributors rely on to test if their changes
    are safe. Sometimes people break master. Separate from the triage oncall, we have
    a tree hugging oncall whose job it is to revert jobs if they break master. This
    oncall involves mostly paying attention to the [CI HUD](https://ezyang.github.io/pytorch-ci-hud/build1/pytorch-master)
    and reverting commits if they result in master breakage in one of the configurations.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**树拥抱班次。** PyTorch 拥有一个庞大的 CI 系统，涵盖了许多不同的系统配置，大多数贡献者依赖于此来测试他们的更改是否安全。有时候人们会打破主分支。与问题处理班次分开，我们有一个树拥抱班次，他们的工作是在主分支打破时回滚任务。这个班次主要关注
    [CI HUD](https://ezyang.github.io/pytorch-ci-hud/build1/pytorch-master)，并在一个配置中导致主分支破坏时回滚提交。'
- en: '**Importing to Facebook infrastructure.** We actually run Facebook infrastructure
    directly off of the HEAD branch in PyTorch. The tooling that makes this possible
    is [fbshipit](https://github.com/facebook/fbshipit), which mirrors commits between
    Facebook''s internal monorepo and our public GitHub repository. This setup has
    been something of a double-edged sword for us: requiring Facebook and GitHub to
    be in sync means that only Facebook employees can actually land pull requests
    (we try to [streamline the process](https://github.com/pytorch/pytorch/wiki/Maintainer-notes)
    as much as possible for external maintainers, but at the end of the day someone
    at Facebook has to actually push the green button), but it means we don''t have
    to worry about doing periodic "mega-imports" into Facebook infrastructure (which
    we have done in the past and were quite difficult to do). We are very interested
    in fixing this situation and have floated some proposals on changing how we do
    internal releases to make it possible to let external contributors land PRs directly.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**导入到 Facebook 基础设施。** 实际上，我们直接在 PyTorch 的 HEAD 分支上运行 Facebook 基础设施。使这一切成为可能的工具是
    [fbshipit](https://github.com/facebook/fbshipit)，它在 Facebook 的内部单库和我们的公共 GitHub
    仓库之间同步提交。这种设置对我们来说有点双刃剑：要求 Facebook 和 GitHub 同步意味着只有 Facebook 员工才能实际提交拉取请求（我们尽量在外部维护者那里简化这一过程，但归根结底还是要有
    Facebook 的员工点击绿色按钮），但这也意味着我们不必担心定期进行 "大规模导入" 到 Facebook 基础设施（我们过去曾经做过，而且相当困难）。我们非常有兴趣解决这种情况，并提出了一些关于如何改变我们进行内部发布的建议，以便让外部贡献者直接提交拉取请求。'
- en: '**RFCs.** Most feature discussion happens on GitHub issues, but sometimes,
    a feature is too big and complicated to adequately discuss in a GitHub issue.
    In those cases, they can be discussed in the [rfcs repository](https://github.com/pytorch/rfcs/)
    (inspired by the [Rust RFCs process](https://github.com/rust-lang/rfcs)). The
    formal process on this repository isn''t too solidified yet, but generally people
    go there if they feel that it is too difficult to discuss the issue in GitHub
    issues. We don''t yet have a process for shepherding unsolicited RFCs.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**RFCs。** 大多数功能讨论发生在 GitHub 问题中，但有时候，某个功能太大、太复杂，无法在 GitHub 问题中充分讨论。在这种情况下，它们可以在
    [rfcs 仓库](https://github.com/pytorch/rfcs/) 中讨论（灵感来自 [Rust RFCs 过程](https://github.com/rust-lang/rfcs)）。这个仓库的正式流程尚未完全固定，但通常人们会在那里讨论问题，如果他们觉得在
    GitHub 问题中讨论太困难。我们还没有关于引导未经请求的 RFCs 的流程。'
- en: '**Conclusion.** PyTorch''s open source process isn''t rocket science: there''s
    an oncall, the oncall does some things. The devil is in the details: all of PyTorch''s
    oncall responsibilities are carefully scoped so that your oncall responsibilities
    aren''t something that will take an unbounded amount of time; they''re something
    you can knock out in an hour or two and call it a day. You could make the argument
    that we rely excessively on oncalls when automation is possible, but what we have
    found is that oncalls require less infrastructure investment, and integrate well
    with existing processes and flows at Facebook. They might not be right everywhere,
    but at least for us they seem to be doing a good job.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**结论。** PyTorch 的开源流程并不像火箭科学那样复杂：有一个班次，班次做一些事情。魔鬼在细节中：所有 PyTorch 的班次职责都经过仔细界定，以确保您的班次职责不会花费无限的时间；它们是您可以在一两个小时内完成并结束一天的事情。您可以说我们过分依赖班次，而自动化可能更好，但我们发现班次需要更少的基础设施投入，并且与
    Facebook 现有的流程和工作流程很好地整合在一起。它们可能不适合每个地方，但至少对我们来说，它们似乎做得不错。'
