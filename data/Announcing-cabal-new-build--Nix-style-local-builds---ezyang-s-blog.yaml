- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:06'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:06'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Announcing cabal new-build: Nix-style local builds : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 宣布 cabal new-build：Nix 风格的本地构建：ezyang 的博客
- en: 来源：[http://blog.ezyang.com/2016/05/announcing-cabal-new-build-nix-style-local-builds/](http://blog.ezyang.com/2016/05/announcing-cabal-new-build-nix-style-local-builds/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2016/05/announcing-cabal-new-build-nix-style-local-builds/](http://blog.ezyang.com/2016/05/announcing-cabal-new-build-nix-style-local-builds/)
- en: '`cabal new-build`, also known as “Nix-style local builds”, is a new command
    inspired by Nix that comes with cabal-install 1.24\. Nix-style local builds combine
    the best of non-sandboxed and sandboxed Cabal:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`cabal new-build`，也称为“Nix 风格的本地构建”，是受 Nix 启发的一个新命令，随 cabal-install 1.24 一同发布。Nix
    风格的本地构建结合了非沙盒化和沙盒化 Cabal 的优点：'
- en: Like sandboxed Cabal today, we build sets of independent local packages deterministically
    and independent of any global state. new-build will never tell you that it can't
    build your package because it would result in a “dangerous reinstall.” Given a
    particular state of the Hackage index, your build is completely reproducible.
    For example, you no longer need to compile packages with profiling ahead of time;
    just request profiling and new-build will rebuild all its dependencies with profiling
    automatically.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 像今天的沙盒化 Cabal 一样，我们以确定性和独立于任何全局状态的方式构建一组独立的本地包。`new-build` 永远不会告诉你，它不能构建你的包，因为这将导致“危险的重新安装”。在特定状态的
    Hackage 索引下，你的构建是完全可重复的。例如，你不再需要预先使用性能分析编译包；只需请求性能分析，`new-build` 将自动重新构建所有依赖项以进行性能分析。
- en: 'Like non-sandboxed Cabal today, builds of external packages are cached globally,
    so that a package can be built once, and then reused anywhere else it is also
    used. No need to continually rebuild dependencies whenever you make a new sandbox:
    dependencies which can be shared, are shared.'
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 像今天的非沙盒化 Cabal 一样，外部包的构建全局缓存，因此一个包只需构建一次，然后可以在任何其他使用它的地方重复使用。不需要在每次创建新沙盒时不断重新构建依赖项：可以共享的依赖项会被共享。
- en: Nix-style local builds work with all versions of GHC supported by cabal-install
    1.24, which currently is GHC 7.0 and later. Additionally, cabal-install is on
    a different release cycle than GHC, so we plan to be pushing bugfixes and updates
    on a faster basis than GHC's yearly release cycle.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Nix 风格的本地构建与 cabal-install 1.24 支持的所有 GHC 版本兼容，目前包括 GHC 7.0 及更高版本。此外，cabal-install
    的发布周期与 GHC 不同，因此我们计划以比 GHC 每年一次的发布周期更快的速度推送 bug 修复和更新。
- en: 'Although this feature is in only beta (there are bugs, see “Known Issues”,
    and the documentation is a bit sparse), I’ve been successfully using Nix-style
    local builds exclusively to do my Haskell development. It''s hard to overstate
    my enthusiasm for this new feature: it “just works”, and you don''t need to assume
    that there is a distribution of blessed, version-pegged packages to build against
    (e.g., Stackage). Eventually, `new-build` will simply replace the existing `build`
    command.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管此功能目前仅处于测试版（存在一些 bug，请参见“已知问题”，并且文档有点稀少），但我一直成功地使用 Nix 风格的本地构建来进行我的 Haskell
    开发。难以形容我对这一新功能的热情：它“只是有效”，而且你不需要假设有一个版本固定的、经过认可的包分发来构建（例如 Stackage）。最终，`new-build`
    将简单地取代现有的 `build` 命令。
- en: Quick start
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 快速入门
- en: 'Nix-style local builds “just work”: there is very little configuration that
    needs to be done to start working with it.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Nix 风格的本地构建“只是有效”：几乎不需要任何配置即可开始使用它。
- en: 'Download and install cabal-install 1.24:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并安装 cabal-install 1.24：
- en: '[PRE0]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Make sure the newly installed `cabal` is in your path.
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保新安装的 `cabal` 已添加到你的路径中。
- en: To build a single Cabal package, instead of running `cabal configure; cabal
    build`, you can use Nix-style builds by prefixing these commands with `new-`;
    e.g., `cabal new-configure; cabal new-build`. `cabal new-repl` is also supported.
    (Unfortunately, other commands are not yet supported, e.g. `new-clean` ([#2957](https://github.com/haskell/cabal/issues/2957))
    or `new-freeze` ([#2996](https://github.com/haskell/cabal/issues/2996)).)
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要构建单个 Cabal 包，不需要运行 `cabal configure; cabal build`，可以通过在这些命令前加上 `new-` 来使用 Nix
    风格的构建；例如 `cabal new-configure; cabal new-build`。`cabal new-repl` 也受支持。（不幸的是，其他命令尚未支持，例如
    `new-clean` ([#2957](https://github.com/haskell/cabal/issues/2957)) 或 `new-freeze`
    ([#2996](https://github.com/haskell/cabal/issues/2996))。）
- en: 'To build multiple Cabal packages, you need to first create `cabal.project`
    file in some root directory. For example, in the Cabal repository, there is a
    root directory with a folder per package, e.g., the folders `Cabal` and `cabal-install`.
    Then in `cabal.project`, specify each folder:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要构建多个 Cabal 包，需要首先在某个根目录下创建 `cabal.project` 文件。例如，在 Cabal 存储库中，有一个根目录，其中每个包都有一个文件夹，例如，文件夹
    `Cabal` 和 `cabal-install`。然后在 `cabal.project` 中，指定每个文件夹：
- en: '[PRE1]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, in the directory for a package, you can say `cabal new-build` to build
    all of the components in that package; alternately, you can specify a list of
    targets to build, e.g., `package-tests cabal` asks to build the `package-tests`
    test suite and the `cabal` executable. A component can be built from any directory;
    you don''t have to be cd''ed into the directory containing the package you want
    to build. Additionally, you can qualify targets by the package they came from,
    e.g., `Cabal:package-tests` asks specifically for the `package-tests` component
    from Cabal. There is no need to manually configure a sandbox: add a `cabal.project`
    file, and it just works!'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，在包的目录中，您可以使用 `cabal new-build` 来构建该包中的所有组件；或者，您可以指定要构建的目标列表，例如，`package-tests
    cabal` 要求构建 `package-tests` 测试套件和 `cabal` 可执行文件。组件可以从任何目录构建；您不必 cd 到包含要构建的包的目录中。此外，您可以按其来自的包合格目标，例如
    `Cabal:package-tests` 具体要求从 Cabal 获取 `package-tests` 组件。无需手动配置沙盒：添加 `cabal.project`
    文件，它就可以工作了！
- en: Unlike sandboxes, there is no need to `add-source`; just add the package directories
    to your `cabal.project`. And unlike traditional `cabal install`, there is no need
    to explicitly ask for packages to be installed; `new-build` will automatically
    fetch and build dependencies.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 不像沙盒，无需 `add-source`；只需将包目录添加到您的 `cabal.project` 中。而且与传统的 `cabal install` 不同，无需显式请求安装包；`new-build`
    将自动获取并构建依赖项。
- en: There is also a convenient [script](https://github.com/hvr/multi-ghc-travis/blob/master/make_travis_yml_2.hs)
    you can use for hooking up `new-build` to your [Travis builds](https://github.com/hvr/multi-ghc-travis).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个方便的[脚本](https://github.com/hvr/multi-ghc-travis/blob/master/make_travis_yml_2.hs)，您可以用它来连接
    `new-build` 到您的[Travis 构建](https://github.com/hvr/multi-ghc-travis)。
- en: How it works
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工作原理
- en: 'Nix-style local builds are implemented with these two big ideas:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Nix 风格的本地构建采用了以下两个重要的思想：
- en: For external packages (from Hackage), prior to compilation, we take all of the
    inputs which would influence the compilation of a package (flags, dependency selection,
    etc.) and hash it into an identifier. Just as in Nix, these hashes uniquely identify
    the result of a build; if we compute this identifier and we find that we already
    have this ID built, we can just use the already built version. These packages
    are stored globally in `~/.cabal/store`; you can list all of the Nix packages
    that are globally available using `ghc-pkg list --package-db=$HOME/.cabal/store/ghc-VERSION/package.db`.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于外部包（来自 Hackage），在编译之前，我们将会影响包编译的所有输入（标志，依赖选择等）进行哈希处理，生成一个标识符。就像在 Nix 中一样，这些哈希唯一地标识构建的结果；如果我们计算出此标识符，并发现我们已经构建了这个
    ID，我们可以直接使用已经构建好的版本。这些包存储在全局的 `~/.cabal/store` 中；您可以使用 `ghc-pkg list --package-db=$HOME/.cabal/store/ghc-VERSION/package.db`
    列出所有全局可用的 Nix 包。
- en: For local packages, we instead assign an `inplace` identifier, e.g., `foo-0.1-inplace`,
    which is local to a given `cabal.project`. These packages are stored locally in
    `dist-newstyle/build`; you can list all of the per-project packages using `ghc-pkg
    list --package-db=dist-newstyle/packagedb`. This treatment applies to any remote
    packages which depend on local packages (e.g., if you vendored some dependency
    which your other dependencies depend on.)
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于本地包，我们使用 `inplace` 标识符，例如 `foo-0.1-inplace`，这是针对给定 `cabal.project` 的本地包。这些包存储在本地的
    `dist-newstyle/build` 目录中；您可以使用 `ghc-pkg list --package-db=dist-newstyle/packagedb`
    列出所有按项目分组的包。这种处理方式适用于任何依赖于本地包的远程包（例如，如果您嵌入某些依赖项，而其他依赖项依赖于它们）。
- en: Furthermore, Nix local builds use a deterministic dependency solving strategy,
    by doing dependency solving independently of the locally installed packages. Once
    we've solved for the versions we want to use and have determined all of the flags
    that will be used during compilation, we generate identifiers and then check if
    we can improve packages we would have needed to build into ones that are already
    in the database.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Nix 的本地构建采用确定性依赖解决策略，通过独立于本地安装包进行依赖解决。一旦我们解决了要使用的版本，并确定了编译过程中将使用的所有标志，我们生成标识符，然后检查是否可以改进我们需要构建的包，使其成为已经在数据库中的包。
- en: Commands
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命令
- en: '`new-configure FLAGS`'
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`new-configure FLAGS`'
- en: Overwrites `cabal.project.local` based on FLAGS.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 FLAGS 覆盖 `cabal.project.local`。
- en: '`new-build [FLAGS] [COMPONENTS]`'
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`new-build [FLAGS] [COMPONENTS]`'
- en: Builds one or more components, automatically building any local and non-local
    dependencies (where a local dependency is one where we have an inplace source
    code directory that we may modify during development). Non-local dependencies
    which do not have a transitive dependency on a local package are installed to
    `~/.cabal/store`, while all other dependencies are installed to `dist-newstyle`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个或多个组件，自动构建任何本地和非本地依赖项（本地依赖项是指我们在开发过程中可以修改的现有源代码目录）。不具有本地包的传递依赖关系的非本地依赖项安装到
    `~/.cabal/store`，而所有其他依赖项安装到 `dist-newstyle`。
- en: 'The set of local packages is read from `cabal.project`; if none is present,
    it assumes a default project consisting of all the Cabal files in the local directory
    (i.e., `packages: *.cabal`), and optional packages in every subdirectory (i.e.,
    `optional-packages: */*.cabal`).'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '从 `cabal.project` 中读取本地包的集合；如果不存在，则假定默认项目包括本地目录中的所有 Cabal 文件（即 `packages: *.cabal`），以及每个子目录中的可选包（即
    `optional-packages: */*.cabal`）。'
- en: 'The configuration of the build of *local* packages is computed by reading flags
    from the following sources (with later sources taking priority):'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*本地* 包的构建配置是通过以下来源读取标志来计算的（后续来源具有优先级）：'
- en: '`~/.cabal/config`'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`~/.cabal/config`'
- en: '`cabal.project`'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`cabal.project`'
- en: '`cabal.project.local` (usually generated by `new-configure`)'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`cabal.project.local`（通常由 `new-configure` 生成）'
- en: '`FLAGS` from the command line'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命令行的 `FLAGS`
- en: The configuration of non-local packages is only affect by package-specific flags
    in these sources; global options are not applied to the build. (For example, if
    you `--disable-optimization`, this will only apply to your local inplace packages,
    and not their remote dependencies.)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 非本地包的配置只受这些来源中特定于包的标志的影响；全局选项不适用于构建。（例如，如果 `--disable-optimization`，则仅适用于本地的
    inplace 包，而不适用于它们的远程依赖项。）
- en: '`new-build` does not read configuration from `cabal.config`.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`new-build` 不从 `cabal.config` 中读取配置。'
- en: Phrasebook
  id: totrans-40
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 短语手册
- en: 'Here is a handy phrasebook for how to do existing Cabal commands using Nix
    local build:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个便捷的短语手册，说明如何使用 Nix 本地构建来执行现有的 Cabal 命令：
- en: '| old-style | new-style |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| old-style | new-style |'
- en: '| --- | --- |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `cabal configure` | `cabal new-configure` |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `cabal configure` | `cabal new-configure` |'
- en: '| `cabal build` | `cabal new-build` |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `cabal build` | `cabal new-build` |'
- en: '| `cabal clean` | `rm -rf dist-newstyle cabal.project.local` |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `cabal clean` | `rm -rf dist-newstyle cabal.project.local` |'
- en: '| `cabal run EXECUTABLE` | `cabal new-build; ./dist-newstyle/build/PACKAGE-VERSION/build/EXECUTABLE/EXECUTABLE`
    |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `cabal run EXECUTABLE` | `cabal new-build; ./dist-newstyle/build/PACKAGE-VERSION/build/EXECUTABLE/EXECUTABLE`
    |'
- en: '| `cabal repl` | `cabal new-repl` |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `cabal repl` | `cabal new-repl` |'
- en: '| `cabal test TEST` | `cabal new-build; ./dist-newstyle/build/PACKAGE-VERSION/build/TEST/TEST`
    |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `cabal test TEST` | `cabal new-build; ./dist-newstyle/build/PACKAGE-VERSION/build/TEST/TEST`
    |'
- en: '| `cabal benchmark BENCH` | `cabal new-build; ./dist-newstyle/build/PACKAGE-VERSION/build/BENCH/BENCH`
    |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `cabal benchmark BENCH` | `cabal new-build; ./dist-newstyle/build/PACKAGE-VERSION/build/BENCH/BENCH`
    |'
- en: '| `cabal haddock` | does not exist yet |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `cabal haddock` | 目前不存在 |'
- en: '| `cabal freeze` | does not exist yet |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `cabal freeze` | 目前不存在 |'
- en: '| `cabal install --only-dependencies` | unnecessary (handled by `new-build`)
    |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `cabal install --only-dependencies` | 不必要的（由 `new-build` 处理） |'
- en: '| `cabal install` | does not exist yet (for libraries `new-build` should be
    sufficient; for executables, they can be found in `~/.cabal/store/ghc-GHCVER/PACKAGE-VERSION-HASH/bin`)
    |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `cabal install` | 目前不存在（对于库，`new-build` 应该足够；对于可执行文件，它们可以在 `~/.cabal/store/ghc-GHCVER/PACKAGE-VERSION-HASH/bin`
    中找到） |'
- en: cabal.project files
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: cabal.project 文件
- en: '`cabal.project` files actually support a variety of options beyond `packages`
    for configuring the details of your build. Here is a simple example file which
    displays some of the possibilities:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`cabal.project` 文件实际上支持多种选项，用于配置构建的详细信息。以下是一个简单的示例文件，展示了一些可能性：'
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When you run `cabal new-configure`, it writes out a `cabal.project.local` file
    which saves any extra configuration options from the command line; if you want
    to know how a command line arguments get translated into a `cabal.project` file,
    just run `new-configure` and inspect the output.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `cabal new-configure` 时，它会输出一个 `cabal.project.local` 文件，其中保存了从命令行输入的额外配置选项；如果想知道如何将命令行参数转换为
    `cabal.project` 文件，请运行 `new-configure` 并检查输出。
- en: Known issues
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 已知问题
- en: 'As a tech preview, the code is still [a little rough around the edges](https://github.com/haskell/cabal/labels/nix-local-build).
    Here are some more major issues you might run into:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 作为技术预览，这段代码仍然[有些粗糙](https://github.com/haskell/cabal/labels/nix-local-build)。以下是一些可能遇到的更重要的问题：
- en: Although dependency resolution is deterministic, if you update your Hackage
    index with `cabal update`, [dependency resolution will change too](https://github.com/haskell/cabal/issues/2996).
    There is no `cabal new-freeze`, so you'll have to manually construct the set of
    desired constraints.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虽然依赖关系解析是确定性的，如果使用 `cabal update` 更新你的 Hackage 索引，[依赖关系解析也会改变](https://github.com/haskell/cabal/issues/2996)。没有
    `cabal new-freeze`，所以你必须手动构建所需约束的集合。
- en: 'A new feature of new-build is that it avoids rebuilding packages when there
    have been no changes to them, by tracking the hashes of their contents. However,
    this dependency tracking is not 100% accurate (specifically, it relies on your
    Cabal file accurately reporting all file dependencies ala `sdist`, and it doesn''t
    know about search paths). There''s currently no UI for forcing a package to be
    recompiled; however you can induce a recompilation fairly easily by removing an
    appropriate cache file: specifically, for the package named `p-1.0`, delete the
    file `dist-newstyle/build/p-1.0/cache/build`.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: new-build 的一个新功能是，当包没有变化时，它避免重新构建包，通过跟踪它们内容的哈希值。然而，这种依赖跟踪不是百分之百准确（具体来说，它依赖于你的
    Cabal 文件准确地报告所有文件依赖项，就像 `sdist`，并且不知道搜索路径）。目前没有 UI 强制重新编译一个包；不过你可以通过删除适当的缓存文件相对容易地诱发重新编译：特别是对于名为
    `p-1.0` 的包，删除文件 `dist-newstyle/build/p-1.0/cache/build`。
- en: 'On Mac OS X, Haskell Platform, you may get the message “Warning: The package
    list for ''hackage.haskell.org'' does not exist. Run ''cabal update'' to download
    it.” That is [issue #3392](https://github.com/haskell/cabal/issues/3392); see
    the linked ticket for workarounds.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '在 Mac OS X 上，Haskell 平台，你可能会收到“警告：''hackage.haskell.org'' 的包列表不存在。运行 ''cabal
    update'' 下载它。”这是[问题 #3392](https://github.com/haskell/cabal/issues/3392)；查看链接的票证以获取解决方法。'
- en: If you encounter other bugs, please let us know on [Cabal's issue tracker](https://github.com/haskell/cabal/issues/new?labels=nix-local-build).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到其他 bug，请在[Cabal 的问题跟踪器](https://github.com/haskell/cabal/issues/new?labels=nix-local-build)上告诉我们。
