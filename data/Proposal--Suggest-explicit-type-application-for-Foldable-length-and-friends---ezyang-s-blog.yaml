- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:16:59'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:16:59'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Proposal: Suggest explicit type application for Foldable length and friends
    : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Proposal: 建议为Foldable的length及其伙伴添加显式类型应用：ezyang的博客'
- en: 来源：[http://blog.ezyang.com/2017/03/proposal-suggest-explicit-type-application-for-foldable-length/](http://blog.ezyang.com/2017/03/proposal-suggest-explicit-type-application-for-foldable-length/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2017/03/proposal-suggest-explicit-type-application-for-foldable-length/](http://blog.ezyang.com/2017/03/proposal-suggest-explicit-type-application-for-foldable-length/)
- en: '**tl;dr** *If you use a Foldable function like length or null, where instance
    selection is solely determined by the input argument, you should make your code
    more robust by introducing an explicit type application specifying which instance
    you want. This isn''t necessary for a function like fold, where the return type
    can cross-check if you''ve gotten it right or not. If you don''t provide this
    type application, GHC should give a warning suggesting you annotate it explicitly,
    in much the same way it suggests adding explicit type signatures to top-level
    functions.*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**tl;dr** *如果你使用类似于length或null这样的可折叠函数，其中实例选择完全由输入参数决定，那么通过引入显式类型应用来使你的代码更加健壮是很有必要的。对于像fold这样的函数来说，如果你的类型匹配不正确，返回类型可以进行交叉检查，因此这不是必要的。如果你没有提供这种类型应用，GHC应该会发出警告建议你显式注释，就像它建议在顶层函数中添加显式类型签名一样。*'
- en: 'Recently, there has been some dust kicked up about [Foldable instances causing
    "bad" code to compile](https://mail.haskell.org/pipermail/libraries/2017-March/027716.html).
    The prototypical example is this: you''ve written `length (f x)`, where `f` is
    a function that returns a list `[Int]`. At some future point in time, a colleague
    refactors `f` to return `(Warnings, [Int])`. After the refactoring, will `length
    (f x)` continue to type check? Yes: `length (f x)` will always return 1, no matter
    how long the inner list is, because it is using the `Foldable` instance for `(,)
    Warnings`.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，有些人对[Foldable实例导致“坏”代码编译](https://mail.haskell.org/pipermail/libraries/2017-March/027716.html)有所争论。典型例子是这样的：你写了`length
    (f x)`，其中`f`是返回列表`[Int]`的函数。在未来的某个时刻，同事重构`f`以返回`(Warnings, [Int])`。在重构后，`length
    (f x)`是否继续类型检查？是的：`length (f x)`将始终返回1，无论内部列表有多长，因为它使用了`(,) Warnings`的`Foldable`实例。
- en: The solution proposed in the mailing list was to remove `Foldable` for `Either`,
    a cure which is, quite arguably, worse than the disease. But I think there is
    definitely merit to the complaint that the `Foldable` instances for tuples and
    `Either` enable you to write code that typechecks, but is totally wrong.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 邮件列表中提出的解决方案是移除`Either`的`Foldable`，这种疗法可以说比病情更糟糕。但我认为抱怨`Foldable`对元组和`Either`的实例使你能够编写类型检查但完全错误的代码确实有其道理。
- en: '[Richard Eisenberg](https://mail.haskell.org/pipermail/libraries/2017-March/027743.html)
    described this problem as the tension between the goals of "if it compiles, it
    works!" (Haskell must *exclude* programs which don''t work) and general, polymorphic
    code, which should be applicable in as many situations as possible. I think there
    is some more nuance here, however. Why is it that `Functor` polymorphic code never
    causes problems for being "too general", but `Foldable` does? We can construct
    an analogous situation: I''ve written `fmap (+2) (f x)`, where `f` once again
    returns `[Int]`. When my colleague refactors `f` to return `(Warnings, [Int])`,
    `fmap` now makes use of the `Functor` instance `(,) Warnings`, but the code fails
    to compile anyway, because the type of `(+1)` doesn''t line up with `[Int]`. Yes,
    we can still construct situations with `fmap` where code continues to work after
    a type change, but these cases are far more rare.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[Richard Eisenberg](https://mail.haskell.org/pipermail/libraries/2017-March/027743.html)将这个问题描述为“如果它编译，那么它就有效！”与一般的多态代码之间的紧张关系，后者应该在尽可能多的情况下适用。然而，我认为这里有些微妙之处。为什么`Functor`多态代码从来不会因为“太通用”而引起问题，但`Foldable`会？我们可以构造一个类似的情况：我写了`fmap
    (+2) (f x)`，其中`f`再次返回`[Int]`。当我的同事将`f`重构为返回`(Warnings, [Int])`时，`fmap`现在使用了`(,)
    Warnings`的`Functor`实例，但代码仍然无法编译，因为`(+1)`的类型与`[Int]`不匹配。是的，我们仍然可以构造出`fmap`在类型更改后继续工作的情况，但这些情况要少得多。'
- en: 'There is a clear difference between these two programs: the `fmap` program
    is *redundant*, in the sense that the type is constrained by both the input container,
    the function mapping over it, and the context which uses the result. Just as with
    error-correcting codes, redundancy allows us to detect when an error has occurred;
    when you reduce redundancy, errors become harder to detect. With `length`, the
    *only* constraint on the selected instance is the input argument; if you get it
    wrong, we have no way to tell.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个程序之间有一个明显的区别：`fmap` 程序是*冗余*的，因为类型受输入容器、映射在其上的函数以及使用结果的上下文的约束。就像纠错码一样，冗余使我们能够检测到错误的发生；当你减少冗余时，错误变得更难检测。对于
    `length`，对所选实例的唯一约束是输入参数；如果你搞错了，我们就无法判断出来。
- en: 'Thus, the right thing to do is *reintroduce* redundancy where it is needed.
    Functions like `fold` and `toList` don''t need extra redundancy, because they
    are cross-checked by the use of their return arguments. But functions like `length`
    and `null` (and arguably `maximum`, which only weakly constrains its argument
    to have an `Ord` instance) don''t have any redundancy: we should introduce redundancy
    in these places!'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，正确的做法是在需要的地方*重新引入*冗余。像 `fold` 和 `toList` 这样的函数不需要额外的冗余，因为它们通过它们的返回参数的使用进行交叉检查。但是像
    `length` 和 `null`（以及可能是 `maximum`，它仅弱约束其参数具有 `Ord` 实例）这样的函数没有任何冗余：我们应该在这些地方引入冗余！
- en: 'Fortunately, with GHC 8.0 provides a very easy way of introducing this redundancy:
    an **explicit type application.** (This was also independently [suggested by Faucelme](https://www.reddit.com/r/haskell/comments/5x4yka/deprecate_foldable_for_either/def96j4/).)
    In this regime, rather than write `length (f x)`, you write `length @[] (f x)`,
    saying that you wanted length for lists. If you wanted length for maps, you write
    `length @(Map _) (f x)`. Now, if someone changes the type of `f`, you will get
    a type error since the explicit type application no longer matches.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，使用 GHC 8.0 提供了一种非常简单的方法来引入这种冗余：**显式类型应用**。（这也是独立地由[Faucelme建议的](https://www.reddit.com/r/haskell/comments/5x4yka/deprecate_foldable_for_either/def96j4/)。）在这种情况下，不再写
    `length (f x)`，而是写 `length @[] (f x)`，表示你想要列表的长度。如果你想要映射的长度，你会写 `length @(Map
    _) (f x)`。现在，如果有人改变了 `f` 的类型，由于显式类型应用不再匹配，你将会得到一个类型错误。
- en: 'Now, you can write this with your FTP code today. So there is just one more
    small change I propose we add to GHC: let users specify the type parameter of
    a function as "suggested to be explicit". At the call-site, if this function is
    used without giving a type application, GHC will emit a warning (which can be
    disabled with the usual mechanism) saying, "Hey, I''m using the function at this
    type, maybe you should add a type application." If you really want to suppress
    the warning, you could just type apply a type hole, e.g., `length @_ (f x)`. As
    a minor refinement, you could also specify a "default" type argument, so that
    if we infer this argument, no warning gets emitted (this would let you use the
    list functions on lists without needing to explicitly specify type arguments).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以在你的 FTP 代码中写入这个。因此，我建议我们向 GHC 添加一个小小的改进：让用户指定函数的类型参数为“建议为显式”。在调用点，如果这个函数在没有给定类型应用的情况下被使用，GHC
    将会发出一个警告（可以通过通常的机制禁用），并说：“嘿，我在这个类型上使用了这个函数，也许你应该添加一个类型应用。”如果你真的想要抑制警告，你可以简单地在类型上应用一个类型空位，例如
    `length @_ (f x)`。作为一个小小的改进，你还可以指定一个“默认”类型参数，这样如果我们推断出这个参数，就不会发出警告（这将让你在不需要显式指定类型参数的情况下使用列表函数）。
- en: 'That''s it! No BC-breaking flag days, no poisoning functions, no getting rid
    of FTP, no dropping instances: just a new pragma, and an opt-in warning that will
    let people who want to avoid these bugs. It won''t solve all `Foldable` bugs,
    but it should squash the most flagrant ones.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！没有 BC 破坏性标志日，没有污染函数，没有摆脱 FTP，没有丢弃实例：只是一个新的编译指示，和一个可选的警告，让那些想要避免这些 bug 的人们能够使用它。这不会解决所有
    `Foldable` 的 bug，但应该能够消除最明显的一些。
- en: What do people think?
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 大家怎么看？
