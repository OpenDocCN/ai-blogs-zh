- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:18:26'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:18:26'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'How to use Vim’s textwidth like a pro : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何像专业人士一样使用Vim的textwidth：ezyang的博客
- en: 来源：[http://blog.ezyang.com/2010/03/vim-textwidth/](http://blog.ezyang.com/2010/03/vim-textwidth/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/03/vim-textwidth/](http://blog.ezyang.com/2010/03/vim-textwidth/)
- en: 'There are lots of little blog posts containing advice about various one-line
    options you can do in Vim. This post falls into that category, but I''m hoping
    to do a more comprehensive view into one small subsystem of Vim''s configuration:
    automatic line wrapping.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多小的博客文章包含关于Vim中各种单行选项的建议。这篇文章属于这一类别，但我希望能对Vim配置的一个小子系统：自动换行，进行更全面的介绍。
- en: When programming, automatic line wrapping can be a little obnoxious because
    even *if* a piece of code is hanging past the recommended 72/80 column width line,
    you probably don't want to immediately break it; but if you're writing a text
    document or an email message, that is specifically the behavior you want. By default,
    vim does no automatic line wrapping for you; turning it on is a question of being
    able to toggle it on and off when you want it.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程时，自动换行可能有点讨厌，因为即使代码段超过推荐的72/80列宽度，你可能也不想立即将其换行；但如果你在写文档或电子邮件，那确实是你想要的行为。默认情况下，vim不会为你自动换行；打开它只是一个在需要时能够切换开关的问题。
- en: 'Here are the configuration options you care about:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是你关心的配置选项：
- en: '*textwidth* (or *tw*): controls the wrap width you would like to use. Use `:set
    tw=72` to set the wrap width; by default it''s unset and thus disables line-wrapping.
    If this value is set, you''re entirely at the whimsy of the below *formatoptions*,
    which is often *filetype* sensitive.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*textwidth*（或*tw*）：控制你想要使用的换行宽度。使用`:set tw=72`设置换行宽度；默认情况下未设置，因此禁用换行。如果设置了此值，则完全受下面的*formatoptions*影响，这通常是*filetype*敏感的。'
- en: '*formatoptions* (or *fo*): controls whether or not automatic text wrapping
    is enabled, depending on whether or not the `t` flag is set. Toggle the flag on
    with `:set fo+=t`, and toggle it off with `:set fo-=t`. There are also a number
    of auxiliary format options, but they''re not as important.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*formatoptions*（或*fo*）：控制是否启用自动换行，取决于是否设置了`t`标志。使用`：set fo+=t`打开该标志，使用`：set
    fo-=t`关闭该标志。还有一些辅助的格式选项，但它们并不那么重要。'
- en: '*wrapmargin* (or *wm*): controls when to wrap based on terminal size; I generally
    find using this to be a bad idea.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*wrapmargin*（或*wm*）：根据终端大小控制何时换行；我通常认为使用这个功能是一个坏主意。'
- en: 'Understanding the interaction between these two options is important. Here
    is a short table of interactions:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 理解这两个选项之间的互动非常重要。下面是一个简短的互动表：
- en: '*tw=0 fo=cq wm=0*: No automatic wrapping, rewrapping will wrap to 80'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*tw=0 fo=cq wm=0*: 不自动换行，重新换行会在第80列处换行'
- en: '*tw=72 fo=cq wm=0*: No automatic wrapping, rewrapping will wrap to 72'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*tw=72 fo=cq wm=0*: 不自动换行，重新换行会在第72列处换行'
- en: '*tw=0 fo=cqt wm=0*: No automatic wrapping, rewrapping will wrap to 72'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*tw=0 fo=cqt wm=0*: 不自动换行，重新换行会在第72列处换行'
- en: '*tw=0 fo=cqt wm=5*: Automatic wrapping at a 5 col right margin'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*tw=0 fo=cqt wm=5*: 在右边缘5列处自动换行'
- en: '*tw=72 fo=cqt wm=0*: Automatic wrapping at col 72'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*tw=72 fo=cqt wm=0*: 在第72列自动换行'
- en: Notice that to get automatic wrapping you need both *fo+=t* as well as *tw*
    or *wm* to be nonzero. Note also that some *filetype* will automatically give
    you *fo+=t*, while others won't.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，要实现自动换行，你需要同时设置*fo+=t*和*tw*或*wm*为非零值。还要注意，某些*filetype*会自动给你*fo+=t*，而其他的则不会。
- en: 'Here are the keystrokes you care about:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是你关心的按键操作：
- en: '*gq*: performs a "formatting operation", which in our universe means "rewrap
    the text." This will respect leading indent and symbolic characters, which is
    usually nice but a little obnoxious if you''re reflowing a bullet point (since
    the text will suddenly acquire asterisks in front of everything).'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*gq*：执行“格式化操作”，在我们的宇宙中意味着“重新排列文本”。这将尊重前导缩进和符号字符，通常很好，但如果你重新排列一个项目符号点（因为文本将突然在每个前面添加星号），会有点讨厌。'
- en: The paragraph motions. The big one is *vip* (preceding *v* puts us in visual
    mode, for selection), which selects an "inner paragraph"; this means that if you're
    anywhere inside of a paragraph, you can type *vip* and have the entire thing instantly
    selected for you, possibly for you to run *gq* subsequently. *vap* is also equivalent,
    although it selects a whole paragraph and is more appropriate if you want to,
    say, delete it. The curly braces move you between paragraphs.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 段落移动。最重要的是 *vip*（前面的 *v* 将我们放入选择模式），它选择一个“内部段落”；这意味着如果你在段落内的任何位置，你可以输入 *vip*，整个段落将立即为你选择，可能随后可以运行
    *gq*。*vap* 也是等效的，尽管它选择整个段落，如果你想删除它，这更合适。大括号在段落之间移动。
- en: 'The value of *format-options* will drastically change the way Vim behaves,
    so I highly recommend keeping it displayed some where you can reference it quickly.
    I use:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*format-options* 的值将大大改变 Vim 的行为，因此我强烈建议将其显示在一个你可以快速参考的地方。我使用：'
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You probably have a statusline of your own; just add that small snippet minus
    the ellipses in somewhere convenient. For further good measure, I explicitly say
    `set fo-=t` in my vimrc, to prevent myself from being surprised (since I do primarily
    coding in vim).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能有自己的状态栏；只需将那个小片段减去省略号添加到方便的地方即可。为了更好的效果，我在我的 vimrc 中明确地写入 `set fo-=t`，以防止自己感到惊讶（因为我主要在
    vim 中编写代码）。
- en: 'One more neat trick:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 再来一个巧妙的技巧：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will highlight all characters past 74 columns (tweak that number as desired)
    in dark grey (tweak that color as desired), and is a nice visual cue when auto
    linewrapping isn't turned on when you should think about breaking things.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这将突出显示超过 74 列的所有字符（可以根据需要调整该数字）为深灰色（可以根据需要调整该颜色），在没有自动换行时是一个很好的视觉提示，当你需要考虑分行时。
