- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-07-01 18:18:21'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: 'Association maps in mit-scheme : ezyang’s blog'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[http://blog.ezyang.com/2010/04/association-maps-in-mit-scheme/](http://blog.ezyang.com/2010/04/association-maps-in-mit-scheme/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Association maps in mit-scheme
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I recently some did some benchmarking of persistent data structures in mit-scheme
    for my UROP. There were a few questions we were interested in:'
  prefs: []
  type: TYPE_NORMAL
- en: For what association sizes does a fancier data structure beat out your plain
    old association list?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the price of persistence? That is, how many times slower are persistent
    data structures as compared to your plain old hash table?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the best persistent data structure?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'These are by no means authoritative results; I still need to carefully comb
    through the harness and code for correctness. But they already have some interesting
    implications, so I thought I''d share. The implementations tested are:'
  prefs: []
  type: TYPE_NORMAL
- en: All implementations use `eq?` for key comparison.
  prefs: []
  type: TYPE_NORMAL
- en: Unsurprisingly, assoc beats out everyone else, since all it has to do is a simple
    cons. However, there are some strange spikes at regular intervals, which I am
    not sure of the origin; it might be the garbage collector kicking in.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, you pay back the cheap updates in assoc with a linear lookup time;
    the story also holds true for weight-balanced trees, which have fast inserts but
    the slowest lookups.
  prefs: []
  type: TYPE_NORMAL
- en: The hamt really flies when the key isn't present, even beating out hash-tables
    until 15 elements or so.
  prefs: []
  type: TYPE_NORMAL
- en: Source code for running the benchmarks, our home-grown implementations, and
    graphing can be found at the [scheme-hamt repository](http://github.com/ezyang/scheme-hamt).
  prefs: []
  type: TYPE_NORMAL
