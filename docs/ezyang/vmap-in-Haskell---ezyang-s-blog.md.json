["```\nexample1 :: [Float] -> [Float] -> [Float]\nexample1 a0 b0 =\n  vmap0_2 (\\a b -> add a b) a0 b0\n\nexample2 :: [Float] -> [Float] -> [[Float]]\nexample2 a0 b0 =\n  vmap0 (\\a -> vmap1 (\\b -> add a b) b0) a0\n\n```", "```\n*Test> example1 [1,2,3] [4,6,8]\n[5.0,8.0,11.0]\n*Test> example2 [1,2,3] [4,6,8]\n[[5.0,7.0,9.0],[6.0,8.0,10.0],[7.0,9.0,11.0]]\n\n```", "```\n{-# LANGUAGE RankNTypes, GADTs, MultiParamTypeClasses,\n             KindSignatures, TypeApplications, FunctionalDependencies,\n             FlexibleContexts, FlexibleInstances, UndecidableInstances,\n             IncoherentInstances #-}\n\n```", "```\ndata Vec s a = Vec { unVec :: [a] }\ninstance Functor (Vec s) where\n  fmap f (Vec xs) = Vec (map f xs)\n\nvmap0 :: (forall s. Vec s a -> Vec s b) -> [a] -> [b]\nvmap0 f = unVec . f . Vec\n\n```", "```\nvmap0_2 :: (forall s. Vec s a -> Vec s b -> Vec s c) -> [a] -> [b] -> [c]\nvmap0_2 f a b = unVec (f (Vec a) (Vec b))\n\n```", "```\nvmap1 :: Functor f => (forall s. Vec s a -> f (Vec s b)) -> [a] -> f [b]\nvmap1 f = fmap unVec . f . Vec\n\n```", "```\nexample1 :: [Float] -> [Float] -> [Float]\nexample1 a0 b0 =\n  vmap0_2 (\\a b -> _add a b) a0 b0\n\n```", "```\n• Found hole: _add :: Vec s Float -> Vec s Float -> Vec s Float\n  Where: ‘s’ is a rigid type variable bound by\n           a type expected by the context:\n             forall s. Vec s Float -> Vec s Float -> Vec s Float\n\n```", "```\nexample2 :: [Float] -> [Float] -> [[Float]]\nexample2 a0 b0 =\n  vmap0 (\\a -> vmap1 (\\b -> _add a b) b0) a0\n\n```", "```\n• Found hole:\n    _add :: Vec s Float -> Vec s1 Float -> Vec s (Vec s1 Float)\n  Where: ‘s1’ is a rigid type variable bound by\n           a type expected by the context:\n             forall s1\\. Vec s1 Float -> Vec s (Vec s1 Float)\n           at test.hs:41:20-44\n         ‘s’ is a rigid type variable bound by\n           a type expected by the context:\n             forall s. Vec s Float -> Vec s [Float]\n           at test.hs:41:7-48\n\n```", "```\nclass Add a b c | a b -> c where\n  add :: a -> b -> c\n\n```", "```\ninstance Add Float Float Float where\n  add = (+)\n\n```", "```\ninstance Add a b r  => Add (Vec s a) (Vec s b) (Vec s r) where\n  add (Vec a) (Vec b) = Vec (zipWith add a b)\n\n```", "```\ninstance Add a b r => Add (Vec s a) b (Vec s r) where\n  add (Vec a) b = Vec (map (\\x -> add x b) a)\n\ninstance Add a b r => Add a (Vec s b) (Vec s r) where\n  add a (Vec b) = Vec (map (\\x -> add a x) b)\n\n```", "```\nexample1 :: [Float] -> [Float] -> [Float]\nexample1 a0 b0 =\n  vmap0_2 (\\a b -> add a b) a0 b0\n\nexample2 :: [Float] -> [Float] -> [[Float]]\nexample2 a0 b0 =\n  vmap0 (\\a -> vmap1 (\\b -> add a b) b0) a0\n\n```", "```\n*Test> example1 [1,2,3] [4,6,8]\n[5.0,8.0,11.0]\n*Test> example2 [1,2,3] [4,6,8]\n[[5.0,7.0,9.0],[6.0,8.0,10.0],[7.0,9.0,11.0]]\n\n```"]