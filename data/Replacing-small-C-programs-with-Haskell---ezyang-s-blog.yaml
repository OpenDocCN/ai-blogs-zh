- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:18:25'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:18:25'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Replacing small C programs with Haskell : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用Haskell替换小型C程序：ezyang的博客
- en: 来源：[http://blog.ezyang.com/2010/03/replacing-small-c-programs-with-haskell/](http://blog.ezyang.com/2010/03/replacing-small-c-programs-with-haskell/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/03/replacing-small-c-programs-with-haskell/](http://blog.ezyang.com/2010/03/replacing-small-c-programs-with-haskell/)
- en: Replacing small C programs with Haskell
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用Haskell替换小型C程序
- en: 'C is the classic go-to tool for small programs that need to be really fast.
    When [scripts.mit.edu](http://scripts.mit.edu/) needed a small program to be [a
    glorified cat](http://scripts.mit.edu/trac/browser/trunk/server/common/oursrc/execsys/static-cat.c.pre)
    that also added useful HTTP headers to the beginning of its output, there was
    no question about it: it would be written in C, and it would be fast; the speed
    of our static content serving depended on it! (The grotty technical details: our
    webserver is based off of a networked filesystem, and we wanted to avoid giving
    Apache too many credentials in case it got compromised. Thus, we patched our kernel
    to enforce an extra stipulation that you must be running as some user id in order
    to read those files off the filesystem. Apache runs as it''s own user, so we need
    another *small* program to act as the go-between.)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: C 作为小型程序的经典选择，速度非常快。当[scripts.mit.edu](http://scripts.mit.edu/)需要一个小程序来实现[一个增强版的cat](http://scripts.mit.edu/trac/browser/trunk/server/common/oursrc/execsys/static-cat.c.pre)，并且在输出开头添加有用的HTTP头时，毫无疑问：它将会用C语言编写，并且速度非常快；我们静态内容的服务速度取决于它！（技术细节：我们的Web服务器基于网络文件系统，并且我们希望避免在Apache被入侵时给予它过多的凭证。因此，我们修改了内核以强制执行额外的规定，即必须以某个用户ID的身份运行才能从文件系统中读取这些文件。Apache以自己的用户身份运行，因此我们需要另一个*小*程序作为中间人。）
- en: It's also a frankenscript, a program that grew out of the very specific needs
    of our project that you will not find anywhere else in the world. As such, it's
    critically important that the program is concise and well-defined; both properties
    that are quite hard to get in C code. And it only gets worse when you want to
    add features. There were a number of small features (last modified by headers,
    byte ranges) as well as a number of large features (FastCGI support). None of
    the development team was relishing the thought of doubling the size of the C file
    to add all of these enhancements, and rewriting the program in a scripting language
    would cause a performance hit. Benchmarks of replacing the script with a Perl
    CGI made the script ten times slower (this translates into four times slower when
    doing an end-to-end Apache test).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 它也是一个Frankenscript，这是一个根据我们项目非常特定需求而发展出来的程序，在世界上其他地方找不到。因此，保证程序简洁和定义清晰非常重要；这两个特性在C代码中很难达到。当您想要添加功能时情况会变得更糟。有一些小功能（最后修改头，字节范围），以及一些大功能（FastCGI支持）。没有开发团队愿意考虑将C文件的大小加倍以添加所有这些增强功能，并且将程序重写为脚本语言将导致性能下降。用Perl
    CGI替换脚本的基准测试使脚本慢了十倍（这在进行端到端Apache测试时转化为四倍慢）。
- en: 'But there is another way! Anders writes:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 但是还有另一种方式！Anders写道：
- en: 'So I had this realization: replacing it with a compiled Haskell CGI script
    would probably let us keep the same performance. Plus it would be easy to port
    to FastCGI since Haskell’s FastCGI library has the same interface.'
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 所以我意识到：用编译的Haskell CGI脚本替换它可能会让我们保持相同的性能。而且由于Haskell的FastCGI库具有相同的接口，易于移植到FastCGI。
- en: 'And a few weeks later, voila: [static-cat in Haskell](http://andersk.mit.edu/gitweb/scripts-static-cat.git).
    We then saw the following benchmarks:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 几周后，呈现出：[Haskell中的static-cat](http://andersk.mit.edu/gitweb/scripts-static-cat.git)。然后我们看到以下基准测试：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Microbenchmarking reveals a 4ms difference without Apache, which Anders suspects
    is due to the size of the Haskell executable. There is certainly some performance
    snooping to be done, but the Haskell version is more than twice as fast as the
    Perl version on the end-to-end test.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 微基准测试显示没有Apache时有4ms的差异，Anders怀疑这是由于Haskell可执行文件的大小。肯定需要进行一些性能调查，但Haskell版本在端到端测试中比Perl版本快两倍以上。
- en: More generally, the class of languages (Haskell is just one of a few) that compile
    into native code seem to be becoming more and more attractive replacements for
    tight C programs with high performance requirements. This is quite exciting, although
    it hinges on whether or not you can convince your development team that introducing
    Haskell to the mix of languages you use is a good idea. More on this in another
    blog post.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 更一般地说，编译成本地代码的语言类别（Haskell只是其中之一）似乎越来越成为取代具有高性能要求的紧凑C程序的吸引力选择。这是相当令人兴奋的，尽管这取决于您是否能说服开发团队将Haskell引入您使用的语言组合中是一个好主意。关于这一点，我将在另一篇博客文章中详细讨论。
