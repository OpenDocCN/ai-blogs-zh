- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:18:25'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:18:25'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Haskell, The Hard Sell : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Haskell, The Hard Sell : ezyang的博客'
- en: 来源：[http://blog.ezyang.com/2010/03/haskell-the-hard-sell/](http://blog.ezyang.com/2010/03/haskell-the-hard-sell/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/03/haskell-the-hard-sell/](http://blog.ezyang.com/2010/03/haskell-the-hard-sell/)
- en: Haskell, The Hard Sell
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Haskell, The Hard Sell
- en: 'Last week I talked about how [we replaced a small C program with an equivalent
    piece of Haskell code.](http://blog.ezyang.com/2010/03/replacing-small-c-programs-with-haskell/)
    As much as I''d like to say that we deployed the code and there was much rejoicing
    and client side caching, the real story is a little more complicated than that.
    There were some really good questions that we had to consider:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 上周我谈到了我们如何用等效的Haskell代码替换了一个小C程序。[这里](http://blog.ezyang.com/2010/03/replacing-small-c-programs-with-haskell/)。尽管我很想说我们部署了代码，有很多欢呼和客户端缓存，但实际情况比这复杂得多。我们需要考虑一些非常好的问题：
- en: '*How many maintainers at any given time know the language?* The [Scripts](http://scripts.mit.edu)
    project is student-run, and has an unusually high turnover rate: any given maintainer
    is only guaranteed to be around for four to five years (maybe a little longer
    if they stick around town, but besides a few notable exceptions, most people move
    on after their time as a student). This means at any given point we have to worry
    about whether or not the sum knowledge of the active contributors is enough to
    cover all facets of the system, and facility in a language is critical to being
    able to administrate the component effectively (students we are, we frequently
    don both the sysadmin and developer hats). In a corporate setting, this is less
    prominent, but it still plays a factor: employees switch from one group to another
    and eventually people leave or retire. We have two current maintainers who are
    fairly fluent in Haskell. The long-term sustainability of this approach is uncertain,
    and hinges on our ability to attract prospective students who know or are interested
    in learning Haskell; in the worst case, people may crack open the code, say "what
    the fuck is this" and rewrite it in another language.'
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*在任何特定时间，有多少维护者知道这种语言？* [Scripts](http://scripts.mit.edu) 项目由学生管理，并且具有异常高的人员流动率：任何给定的维护者只能保证在这里工作四到五年（如果他们留在城里可能会长一点，但除了一些显著的例外，大多数人在完成学生时代后就会离开）。这意味着在任何特定时点，我们都必须担心活跃贡献者的总知识是否足以涵盖系统的所有方面，而语言的熟练程度对于能够有效地管理组件至关重要（我们是学生，我们经常同时担任系统管理员和开发者的角色）。在企业环境中，这种情况不那么突出，但仍然起到作用：员工从一个组转移到另一个组，最终人们会离开或退休。我们目前有两位相当精通Haskell的维护者。这种方法的长期可持续性不确定，并且取决于我们能否吸引已经了解或有兴趣学习Haskell的潜在学生；在最坏的情况下，人们可能会打开代码，说“这到底是什么鬼”，然后用另一种语言重写它。'
- en: '*How many maintainers at any given time feel comfortable hacking in the language?*
    While superficially similar to the first point, it''s actually quite different;
    posed differently, it''s the difference between "can I write a full program in
    this language" and "can I effectively make changes to a program written in this
    language." At a certain level of fluency, a programmer picks up a special feat:
    the ability to look at any C/Fortran derived language and lift any knowledge they
    need about the syntax from the surrounding code. It''s the difference between
    learning syntax, and learning a new programming paradigm. We may not be simultaneously
    Python/Perl/PHP/Java/Ruby/C experts, but the lessons in these languages carry
    over to one another, and many of us have working "hacker" knowledge in all of
    them. But Haskell is different: it''s lineage is among that of Lisp, Miranda and
    ML, and the imperative knowledge simply *does not translate.* One hopes that it''s
    still possible to tell what any given chunk of Haskell code does, but it''s a
    strictly read-only capability.'
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*在任何特定时间，有多少维护者感觉在这种语言中能够轻松地进行编程？* 虽然表面上类似于第一个观点，但实际上却大不相同；用不同的方式提出，这是“我能在这种语言中编写完整的程序”与“我能有效地对已写好的程序进行更改”的区别。在某种程度的流畅度上，程序员掌握了一项特殊的技能：能够查看任何C/Fortran衍生语言，并从周围的代码中获取他们需要的任何语法知识。这是学习语法和学习新编程范式的区别。我们可能不会同时是Python/Perl/PHP/Java/Ruby/C专家，但这些语言的经验相互促进，很多人都能在所有这些语言中拥有工作中的“黑客”知识。但Haskell是不同的：它的血统与Lisp、Miranda和ML相似，而命令式的知识*无法转换*。人们希望仍然能够理解任何给定的Haskell代码块做什么，但这仅限于只读能力。'
- en: '*Who else uses it?* For one of the team members, migrating from Subversion
    to Git was a pretty hard sell, but at this point, minus the missing infrastructure
    for doing the migration properly, he''s basically been convinced that this is
    the right way forward. One of the big reasons this was ok, though, was because
    they were able to list of projects (Linux, our kernel; AFS, our filesystem; Fedora,
    our distro) that they used regularly that also used Git. We can''t say the same
    for Haskell: the "big" open-source high-visibility applications in Haskell are
    Xmonad and Darcs, of which many people have never used. As a student group, we
    have far more latitude to experiment with new technology, but lack of ubiquity
    means greater risk, and corporations are allergic to that kind of risk.'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*还有谁在使用它？* 对于团队的一名成员来说，从Subversion迁移到Git曾是一个非常难以推动的过程，但到目前为止，除了缺少进行迁移的正确基础设施外，他基本上已经被说服这是正确的前进方式。不过，这样做可以接受的一个重要原因是，他们能够列出一些他们经常使用的项目（Linux，我们的内核；AFS，我们的文件系统；Fedora，我们的发行版），这些项目也在使用Git。但对于Haskell来说，我们无法这样说：Haskell中“大”型的开源高可见应用程序是Xmonad和Darcs，其中许多人从未使用过。作为一个学生团体，我们有更大的自由度来尝试新技术，但缺乏普及意味着更大的风险，而企业对这种风险过敏。'
- en: '*Is the ecosystem mature?* Internally, we''ve given the Ruby maintainers and
    packagers a lot of flak for a terrible record at backwards compatibility (one
    instance left us unable to globally update our Rails instances because the code
    would automatically break the site if it detected a version mismatch). You see
    a little bit of the same in Haskell: static-cat doesn''t actually build on a stock
    Fedora 11 server with the default packages installed, due to an old version of
    the cgi module that uses the Exception backwards compatibility wrapper and thus
    is incompatible with the rest of the exception handling code in the program. Further
    investigation reveals that the cgi module is not actually being actively maintained,
    and the Fedora `cabal2spec` script is buggy. I''ve personally had experiences
    of coming back to some Haskell code with up-to-date libraries from Hackage and
    finding that API drift has made my code not compile anymore. Cabal install refuses
    to upgrade all of your packages in one go.'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*生态系统成熟吗？* 在内部，我们对Ruby的维护者和打包者给予了很多批评，因为他们在向后兼容性方面的记录很糟糕（一次事件使我们无法全局更新我们的Rails实例，因为代码会在检测到版本不匹配时自动破坏网站）。在Haskell中也能看到一些相似的情况：static-cat实际上不能在安装了默认软件包的stock
    Fedora 11服务器上构建，因为旧版本的cgi模块使用了异常的向后兼容包装器，因此与程序中其他异常处理代码不兼容。进一步的调查发现，cgi模块实际上并没有在积极维护，并且Fedora的`cabal2spec`脚本存在问题。我个人也曾经有过这样的经历，从Hackage获得最新库的Haskell代码不再编译，因为API的漂移使得我的代码无法编译。Cabal
    install拒绝一次性升级所有包。'
- en: There are many ways to work around this. A mitigating factor is that once you've
    compiled a Haskell program, you don't have to worry about package composition
    anymore. Workarounds include rewriting our code to be forwards and backwards compatible,
    doing stupid Fedora packaging tricks to make both versions of cgi live on our
    servers, convincing upstream that they really want to take the new version, or
    maintaining a separate system wide cabal install. But it's not ideal, and it makes
    people wonder.
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有许多解决方法。一个缓解因素是，一旦编译了Haskell程序，你就不必再担心包的组合问题了。解决方法包括重写我们的代码以前向和后向兼容，对我们的服务器做愚蠢的Fedora打包技巧以使cgi的两个版本同时存在，说服上游他们确实希望接受新版本，或者维护一个单独的系统范围cabal安装。但这并不理想，会让人产生疑问。
- en: I'm quite blessed to be working in an environment where the first point is really
    *the* point. Can we introduce Haskell into the codebase and expect to be able
    to maintain it in the long run? There'll always be C hackers on the team (or at
    least, there better be; some of our most important security properties are wrapped
    up in a patch to a kernel module), but will there always be Haskell hackers on
    the team? There's no way to really know the answer to the question.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我非常幸运能在一个第一点真正重要的环境中工作。我们可以引入Haskell到代码库中，并期望长期维护吗？团队中总会有C语言的黑客（或者至少应该有；我们一些最重要的安全属性包含在对内核模块的补丁中），但团队中是否总会有Haskell的黑客？对于这个问题真的没有一个确切的答案。
- en: I personally remain optimistic. It's an experiment, and you're not going to
    get any better chance to make this happen than in this environment. The presence
    of Haskell code may attract contributors to the project that may not have been
    originally drawn by the fact that, down beneath it all, we're a "gratis shared
    web hosting provider" for our community. Haskell seems singularly aligned to be
    *the* language to break into mainstream (sorry Simon!) And when was there ever
    any innovation without a little risk?
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我个人保持乐观态度。这是一次实验，你不会在这种环境下有更好的机会让事情发生。Haskell 代码的存在可能会吸引到项目的贡献者，这些贡献者可能最初并不是因为我们是社区的“免费共享网络托管提供者”而被吸引的。Haskell
    似乎是唯一一个能够打破主流的语言（抱歉 Simon！），而且在没有一点风险的情况下，哪里会有创新呢？
