["```\n> import Data.List\n> import Control.Monad\n\n```", "```\n> floorSqrt :: Int -> Int\n> floorSqrt = floor . sqrt . fromIntegral\n>\n> sumSquares :: [Int] -> Int\n> sumSquares as = sum (map (^2) as)\n>\n> rootMax :: Int -> [Int] -> Int\n> rootMax x as = floorSqrt (x - sumSquares as)\n\n```", "```\n> searchSumFourSquares :: Int -> [(Int, Int, Int, Int)]\n> searchSumFourSquares x = do\n>       a <- [1..(rootMax x [])]\n>       b <- [a..(rootMax x [a])]\n>       c <- [b..(rootMax x [a,b])]\n>       d <- [c..(rootMax x [a,b,c])]\n>       guard $ sumSquares [a,b,c,d] == x\n>       return (a,b,c,d)\n\n```", "```\n> search :: Maybe Int\n> search = findIndex (==9) (map (length . searchSumFourSquares) [0..])\n\n```"]