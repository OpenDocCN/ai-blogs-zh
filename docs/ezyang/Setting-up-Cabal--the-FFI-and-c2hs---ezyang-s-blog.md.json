["```\nBuild-tools: c2hs\n\n```", "```\n Building abcBridge-0.1...\n[ 5 of 11] Compiling Data.ABC.Internal.VecPtr (\n  dist/build/Data/ABC/Internal/VecPtr.hs,\n  dist/build/Data/ABC/Internal/VecPtr.o )\n\n```", "```\n-- GENERATED by C->Haskell Compiler, version 0.16.2 Crystal Seed, 24 Jan 2009 (Haskell)\n-- Edit the ORIGNAL .chs file instead!\n\n{-# LINE 1 \"src/Data/ABC/Internal/VecPtr.chs\" #-}{-# LANGUAGE ForeignFunctionInterface #-}\n\nmodule Data.ABC.Internal.VecPtr where\n\n```", "```\n-- This ensures that Cabal places these files in the release tarball,\n-- which is important if you plan to release\nExtra-source-files: cbits, include\n-- ...\nLibrary foobar\n  -- ...\n  -- The C source files to compile, in that order\n  C-sources: cbits/foobar.c, cbits/foobaz.c\n  -- The location of the header files\n  Include-dirs: include\n  -- The header files to be included\n  Includes: foobar.h, foobaz.h\n  -- Header files to install\n  Install-includes: foobar.h, foobaz.h\n\n```", "```\nimport Distribution.Simple\nimport Distribution.Simple.Setup\nimport Distribution.Simple.Utils (rawSystemExit)\n\nmain = defaultMainWithHooks simpleUserHooks\n    { preBuild = \\a b -> makeLib a b >> preBuild simpleUserHooks a b }\n\nmakeLib :: Args -> BuildFlags -> IO ()\nmakeLib _ flags =\n    rawSystemExit (fromFlag $ buildVerbosity flags) \"env\"\n        [\"CFLAGS=-D_LIB\", \"make\", \"--directory=abc\", \"libabc.a\"]\n\n```", "```\nLinking dist/build/abc-test/abc-test ...\n/usr/bin/ld: cannot find -labc\ncollect2: ld returned 1 exit status\n\n```", "```\nimport Distribution.Simple\nimport Distribution.Simple.Setup\nimport Distribution.Simple.Utils (rawSystemExit)\nimport Distribution.PackageDescription (PackageDescription(..))\nimport Distribution.Simple.LocalBuildInfo (\n        LocalBuildInfo(..), InstallDirs(..), absoluteInstallDirs)\n\nmain = defaultMainWithHooks simpleUserHooks\n    { preConf = \\a f -> makeAbcLib a f >> preConf simpleUserHooks a f\n    , copyHook = copyAbcLib\n    }\n\n-- ...\n\ncopyAbcLib :: PackageDescription -> LocalBuildInfo -> UserHooks -> CopyFlags -> IO ()\ncopyAbcLib pkg_descr lbi _ flags = do\n    let libPref = libdir . absoluteInstallDirs pkg_descr lbi\n                . fromFlag . copyDest\n                $ flags\n    rawSystemExit (fromFlag $ copyVerbosity flags) \"cp\"\n        [\"abc/libabc.a\", libPref]\n\n```", "```\nCabal-version:      >= 1.8.0.4\n\n```"]