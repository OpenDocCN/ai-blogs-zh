- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:18:12'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:18:12'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'How to pick your string library in Haskell : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何在 Haskell 中选择你的字符串库：ezyang的博客
- en: 来源：[http://blog.ezyang.com/2010/08/strings-in-haskell/](http://blog.ezyang.com/2010/08/strings-in-haskell/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/08/strings-in-haskell/](http://blog.ezyang.com/2010/08/strings-in-haskell/)
- en: How to pick your string library in Haskell
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何在 Haskell 中选择你的字符串库
- en: '*Notice.* Following a critique from Bryan O’Sullivan, I’ve restructured the
    page.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意。* 在来自布莱恩·奥沙利文的批评后，我重构了页面。'
- en: “How do the different text handling libraries compare, and when should we use
    which package?” [asks Chris Eidhof](http://blog.ezyang.com/2010/07/suggestion-box/#comment-787).
    The latter question is easier to answer. Use [bytestring](http://hackage.haskell.org/package/bytestring)
    for binary data—raw bits and bytes with no explicit information as to semantic
    meaning. Use [text](http://hackage.haskell.org/package/text) for Unicode data
    representing human written languages, usually represented as binary data equipped
    with a character encoding. Both (especially bytestring) are widely used and are
    likely to become—if they are not already—standards.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: “不同的文本处理库如何比较，我们在什么情况下应该使用哪个包？” [克里斯·艾德霍夫提问](http://blog.ezyang.com/2010/07/suggestion-box/#comment-787)。后一个问题更容易回答。使用[bytestring](http://hackage.haskell.org/package/bytestring)处理二进制数据——原始的位和字节，没有关于语义含义的明确信息。使用[text](http://hackage.haskell.org/package/text)处理表示人类书面语言的Unicode数据，通常表示为带有字符编码的二进制数据。两者（尤其是bytestring）广泛使用，并且很可能会成为——如果它们还没有成为的话——标准。
- en: 'There are, however, a lot more niche string handling libraries on Hackage.
    Having not used all of them in substantial projects, I will refrain on judging
    them on stability or implementation; instead, we’ll categorize them on the niche
    they fill. There are several axes that a string library or module may be categorized
    on:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，在 Hackage 上还有很多更专业的字符串处理库。由于没有在实际项目中使用过所有这些库，我不会对它们的稳定性或实现进行评判；相反，我们将根据它们填补的特定需求对它们进行分类。有几个维度可以用来分类字符串库或模块：
- en: '*Binary or text?* Binary is raw bits and bytes: it carries no explicit information
    about what a `0` or `0x0A` means. Text is meant to represent human language and
    is usually binary data equipped with a character encoding. This is [the most important
    distinction](http://www.joelonsoftware.com/articles/Unicode.html) for a programmer
    to know about.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*二进制还是文本？* 二进制是原始的位和字节：它不包含关于`0`或`0x0A`的明确信息。文本用于表示人类语言，通常是带有字符编码的二进制数据。这是程序员需要了解的[最重要的区别](http://www.joelonsoftware.com/articles/Unicode.html)。'
- en: If text, *ASCII, 8-bit or Unicode?* ASCII is simple but English-only; 8-bit
    (e.g. Latin-1) is ubiquitous and frequently necessary for backwards compatibility;
    Unicode is the “Right Way” but somewhat complicated. Unicode further asks, *What
    in-memory encoding?* UTF-16 is easy to process while UTF-8 can be twice as memory
    efficient for English text. Most languages pick Unicode and UTF-16 for the programmer.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果是文本，*ASCII、8位或Unicode？* ASCII简单但只支持英语；8位（例如Latin-1）无处不在，经常因向后兼容性而必需；Unicode是“正确的方式”但稍微复杂。Unicode进一步问，*内存编码是什么？*
    UTF-16易于处理，而UTF-8对英文文本可能会节省一倍的内存。大多数语言选择Unicode和UTF-16供程序员使用。
- en: '*Unpacked or packed?* Unpacked strings, the native choice, are just linked
    lists of characters. Packed strings are classic C arrays, allowing efficient processing
    and memory use. Most languages use packed strings: Haskell is notable (or perhaps
    notorious) in its usage of linked lists.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*解包还是打包？* 解包字符串是本地选择，只是字符的链表。打包字符串是经典的C数组，允许高效的处理和内存使用。大多数语言使用打包字符串：Haskell以其使用链表而闻名（或者说是臭名昭著）。'
- en: '*Lazy or strict?* Laziness is more flexible, allowing for things like streaming.
    Strict strings must be held in memory in their entirety, but can be faster when
    the whole string would have needed to be computed anyway. Packed lazy representations
    tend to use chunking to reduce the number of generated thunks. Needless to say,
    strict strings are the classic interpretation, although lazy strings have useful
    applications for streaming.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*懒惰还是严格？* 懒惰更灵活，允许诸如流式处理之类的操作。严格字符串必须完全保存在内存中，但在整个字符串需要计算的情况下可能更快。打包的懒惰表示通常使用分块来减少生成的惰性求值。毋庸置疑，严格字符串是经典解释，尽管懒惰字符串在流式处理中有用。'
- en: 'Based on these questions, here are where the string libraries of Hackage fall:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这些问题，以下是 Hackage 字符串库的分类：
- en: 'Beyond in-memory encoding, there is also a question of source and target encodings:
    hopefully something normal, but occasionally you get Shift_JIS text and you need
    to do something to it. You can convert it to Unicode with [encoding](http://hackage.haskell.org/package/encoding)
    (handles `String` or strict/lazy `ByteString` with possibility for extension with
    `ByteSource` and `ByteSink`) or [iconv](http://hackage.haskell.org/package/iconv)
    (handles strict/lazy `ByteString`).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 除了内存编码外，还涉及到源和目标编码的问题：希望是正常的东西，但偶尔你会遇到 Shift_JIS 文本，需要对其进行处理。你可以用 [encoding](http://hackage.haskell.org/package/encoding)（处理
    `String` 或严格/懒惰 `ByteString`，可以通过 `ByteSource` 和 `ByteSink` 扩展）或者 [iconv](http://hackage.haskell.org/package/iconv)（处理严格/懒惰
    `ByteString`）。
- en: '*Unicode joke.*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*Unicode 笑话。*'
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Alt text.* Yeah, I got to the Supplementary Special-purpose Plane, but then
    I got killed by TAG LATIN CAPITAL LETTER A. It looked like a normal A so I assumed
    it was just an Archon...'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*Alt 文本。* 是的，我到了补充特殊用途平面，但后来被 TAG LATIN CAPITAL LETTER A 给干掉了。看起来像是普通的 A，所以我以为它只是一个
    Archon……'
