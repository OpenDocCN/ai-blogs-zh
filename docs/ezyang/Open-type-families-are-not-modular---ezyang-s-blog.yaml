- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:11'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:11'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Open type families are not modular : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开放类型族不是模块化：ezyang 的博客
- en: 来源：[http://blog.ezyang.com/2014/09/open-type-families-are-not-modular/](http://blog.ezyang.com/2014/09/open-type-families-are-not-modular/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2014/09/open-type-families-are-not-modular/](http://blog.ezyang.com/2014/09/open-type-families-are-not-modular/)
- en: One of the major open problems for building a module system in Haskell is the
    treatment of type classes, which I have [discussed previously](http://blog.ezyang.com/2014/07/type-classes-confluence-coherence-global-uniqueness/)
    on this blog. I've noted how the current mode of use in type classes in Haskell
    assume “global uniqueness”, which is inherently anti-modular; breaking this assumption
    risks violating the encapsulation of many existing data types.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建 Haskell 模块系统时面临的一个主要问题是处理类型类，我在此博客中[之前讨论过](http://blog.ezyang.com/2014/07/type-classes-confluence-coherence-global-uniqueness/)。我指出了目前在
    Haskell 中使用类型类的模式假设“全局唯一性”，这在本质上是反模块化的；打破这一假设会有违许多现有数据类型的封装。
- en: As if we have a choice.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 好像我们有选择一样。
- en: 'In fact, our hand is forced by the presence of **open type families** in Haskell,
    which are feature many similar properties to type classes, but with the added
    property that global uniqueness is *required* for type safety. We don''t have
    a choice (unless we want type classes with associated types to behave differently
    from type classes): we have to figure out how to reconcile the inherent non-modularity
    of type families with the Backpack module system.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，**开放类型族**在 Haskell 中强制我们这样做，它们具有与类型类非常相似的特性，但附加的属性是对类型安全性 *要求* 的全局唯一性。我们别无选择（除非我们希望具有关联类型的类型类与类型类行为有所不同）：我们必须想办法调和类型族固有的非模块化特性与
    Backpack 模块系统。
- en: In this blog post, I want to carefully lay out why open type families are *inherently*
    unmodular and propose some solutions for managing this unmodularity. If you know
    what the problem is, you can skip the first two sections and go straight to the
    proposed solutions section.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇博文中，我想仔细阐述为什么开放类型族 *本质上* 是非模块化的，并提出一些解决这种非模块化的方案。如果你知道问题所在，可以跳过前两节，直接进入提出的解决方案部分。
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Before we talk about open type family instances, it''s first worth emphasizing
    the (intuitive) fact that a signature of a module is supposed to be able to *hide*
    information about its implementation. Here''s a simple example:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们讨论开放类型族实例之前，首先值得强调的（直观）事实是，模块的签名应能够 *隐藏* 有关其实现的信息。这里有一个简单的例子：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here, `A` is a signature, while `B` is a module which imports the signature.
    One of the points of a module system is that we should be able to type check `B`
    with respect to `A`, without knowing anything about what module we actually use
    as the implementation. Furthermore, if this type checking succeeds, then for *any*
    implementation which provides the interface of `A`, the combined program should
    also type check. This should hold even if the implementation of `A` defines other
    identifiers not mentioned in the signature:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`A` 是一个签名，而 `B` 是一个导入该签名的模块。模块系统的一个要点是，我们应该能够针对 `A` 来检查 `B` 的类型，而不知道我们实际上使用了哪个模块作为实现。此外，如果此类型检查成功，则对于
    *任何* 提供 `A` 接口的实现，组合程序也应该能够通过类型检查。即使 `A` 的实现定义了签名中未提到的其他标识符：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If `B` had directly imported this implementation, the identifier `y` would be
    ambiguous; but the signature *filtered out* the declarations so that `B` only
    sees the identifiers in the signature.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `B` 直接导入了这个实现，标识符 `y` 就会有歧义；但签名 *过滤掉* 了声明，以便 `B` 只能看到签名中的标识符。
- en: '* * *'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'With this in mind, let''s now consider the analogous situation with open type
    families. Assuming that we have some type family `F` defined in the prelude, we
    have the same example:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，现在让我们考虑一下与开放类型族类似的情况。假设我们在预置中定义了一些类型族`F`，我们有相同的例子：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, should the following module `A` be a permissible implementation of the
    signature?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，以下模块`A`是否可以作为签名的合法实现？
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If we view this example with the glasses off, we might conclude that it is a
    permissible implementation. After all, the implementation of `A` provides an extra
    type instance, yes, but when this happened previously with a (value-level) declaration,
    it was hidden by the signature.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们用正常的眼光看这个例子，我们可能会认为它是一个合法的实现。毕竟，`A` 的实现提供了额外的类型实例，但在先前出现（值级）声明时，它被签名隐藏了。
- en: 'But if put our glasses on and look at the example as a whole, something bad
    has happened: we''re attempting to use the integer 42 as a function from integers
    to booleans. The trouble is that `F Bool` has been given different types in the
    module `A` and module `B`, and this is unsound... like, *segfault* unsound. And
    if we think about it some more, this should not be surprising: we already knew
    it was unsound to have overlapping type families (and eagerly check for this),
    and signature-style hiding is an easy way to allow overlap to sneak in.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果我们戴上眼镜看整个示例，就会发生不好的事情：我们试图将整数42作为从整数到布尔值的函数。问题在于在模块`A`和模块`B`中，`F Bool`已被赋予不同的类型，这是不合理的…像*段错误*一样不合理。如果我们再仔细考虑一下，这并不奇怪：我们已经知道有重叠的类型家族是不合理的（并且热切地检查这一点），而签名样式的隐藏是允许重叠
    sneak in 的一种简单方法。
- en: 'The distressing conclusion: **open type families are not modular.**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 令人沮丧的结论：**开放类型家族不是模块化的。**
- en: '* * *'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: So, what does this mean? Should we throw our hands up and give up giving Haskell
    a new module system? Obviously, we’re not going to go without a fight. Here are
    some ways to counter the problem.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这是什么意思？我们应该举起双手放弃给Haskell一个新的模块系统吗？显然，我们不会束手无策。以下是一些对抗问题的方法。
- en: 'The basic proposal: require all instances in the signature'
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基本提议：要求签名中的所有实例
- en: 'The simplest and most straightforward way to solve the unsoundness is to require
    that a signature mention all of the family instances that are *transitively* exported
    by the module. So, in our previous example, the implementation of `A` does not
    satisfy the signature because it has an instance which is not mentioned in the
    signature, but would satisfy this signature:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 解决不完全性最简单和最直接的方法是要求签名中提及由模块*传递*导出的所有家族实例。因此，在我们之前的例子中，`A`的实现不符合签名，因为它具有未在签名中提及的实例，但将满足此签名：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'While at first glance this might not seem too onerous, it''s important to note
    that this requirement is *transitive*. If `A` happens to import another module
    `Internal`, which itself has its own type family instances, *those must be represented
    in the signature as well.* (It''s easy to imagine this spinning out of control
    for type classes, where any of the forty imports at the top of your file may be
    bringing in any manner of type classes into scope.) There are two major user-visible
    consequences:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然乍一看这似乎并不太繁重，但重要的是要注意，此要求是*传递*的。如果`A`碰巧导入另一个模块`Internal`，它本身有其自己的类型家族实例，*那些也必须在签名中表示*。（可以想象对于类型类来说，文件顶部的四十个导入中的任何一个可能会将各种类型类引入范围内，这很容易使情况失控。）这有两个主要用户可见的后果：
- en: Module imports are *not* an implementation detail—you need to replicate this
    structure in the signature file, and
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模块导入*不是*实现细节——您需要在签名文件中复制此结构，并且
- en: Adding instances is *always* a backwards-incompatible change (there is no weakening).
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加实例*总是*一种不兼容的更改（没有减弱）。
- en: Of course, as Richard pointed out to me, this is *already* the case for Haskell
    programs (and you just hoped that adding that one extra instance was "OK").
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，正如理查德对我指出的那样，这对于Haskell程序来说*已经*是事实（而您只是希望添加一个额外实例是“可以接受的”）。
- en: Despite its unfriendliness, this proposal serves as the basis for the rest of
    the proposals, which you can conceptualize as trying to characterize, “When can
    I avoid having to write all of the instances in my signature?”
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管它不友好，但这一提议为其余提议提供了基础，您可以将其概念化为试图描述“何时可以避免编写所有签名中的实例”。
- en: 'Extension 1: The orphan restriction'
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扩展 1：孤儿限制
- en: 'Suppose that I write the following two modules:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我写了以下两个模块：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'While it is true that these two type instances are overlapping and rightly
    rejected, they are not equally at fault: in particular, the instance in module
    `B` is an *orphan*. An orphan instance is an instance for type class/family `F`
    and data type `T` (it just needs to occur anywhere on the left-hand side) which
    lives in a module that defines neither. (`A` is not an orphan since the instance
    lives in the same module as the definition of data type `T`).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这两种类型实例确实重叠且被正确拒绝，但它们并非同样有问题：特别是，在模块`B`中的实例是一个*孤儿*。孤儿实例是类型类/族`F`和数据类型`T`的实例（它只需出现在左侧的任何位置），它位于一个既不定义的模块中。
    （`A`不是孤儿，因为实例位于与数据类型`T`定义相同的模块中）。
- en: 'What we might wonder is, “If we disallowed all orphan instances, could this
    rule out the possibility of overlap?” The answer is, “Yes! (...with some technicalities).”
    Here are the rules:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能会想知道的是，“如果我们禁止所有孤立实例，这是否会排除重叠的可能性？”答案是，“是的！（...有些技术性问题）。”以下是规则：
- en: The signature must mention all what we will call *ragamuffin instances* transitively
    exported by implementations being considered. An instance of a family `F` is a
    *ragamuffin* if it is not defined with the family definition, or with the type
    constructor at the head in the first parameter. (Or some specific parameter, decided
    on a per-family basis.) All orphan instances are ragamuffins, but not all ragamuffins
    are orphans.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 签名必须提到所有被考虑的实现所导出的*所有*我们将称之为流浪汉实例的实例。如果一个家族 `F` 的实例不是与家族定义一起定义的，或者不是在第一个参数的头部与类型构造函数一起定义的，那么它就是一个*流浪汉*。所有孤立实例都是流浪汉，但并非所有流浪汉都是孤立实例。
- en: A signature exporting a type family must mention *all* instances which are defined
    in the same module as the definition of the type family.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个导出类型族的签名必须提到*所有*与类型族定义在同一模块中定义的实例。
- en: It is strictly optional to mention non-ragamuffin instances in a signature.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在签名中提及非流浪汉实例是完全可选的。
- en: '(Aside: I don''t think this is the most flexible version of the rule that is
    safe, but I do believe it is the most straightforward.) The whole point of these
    rules is to make it impossible to write an overlapping instance, while only requiring
    local checking when an instance is being written. Why did we need to strengthen
    the orphan condition into a ragamuffin condition to get this non-overlap? The
    answer is that absence of orphans does not imply absence of overlap, as this simple
    example shows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: （旁注：我认为这不是最安全、但我认为这是最直接的规则版本。）这些规则的整点在于使得不可能编写重叠的实例，同时只要在写入实例时进行本地检查即可。为什么我们需要将孤立条件加强为流浪汉条件来得到这种非重叠性呢？答案是孤立的缺失并不意味着没有重叠，正如这个简单的例子所示：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, the two instances of `F` are overlapping, but neither are orphans (since
    their left-hand sides mention a data type which was defined in the module.) However,
    the `B` instance is a ragamuffin instance, because `B` is not mentioned in the
    first argument of `F`. (Of course, it doesn't really matter if you check the first
    argument or the second argument, as long as you're consistent.)
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`F` 的两个实例是重叠的，但都不是孤立的（因为它们的左手边提到了模块中定义的数据类型）。然而，`B` 实例是一个流浪汉实例，因为在 `F` 的第一个参数中没有提到
    `B`。（当然，无论你检查第一个参数还是第二个参数，只要你保持一致即可。）
- en: Another way to think about this rule is that open type family instances are
    not standalone instances but rather metadata that is associated with a type constructor
    *when it is constructed*. In this way, non-ragamuffin type family instances are
    modular!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种思考这个规则的方式是，开放类型族实例并不是独立的实例，而是与类型构造函数*在其构造时*关联的元数据。这种方式下，非流浪汉类型族实例是模块化的！
- en: 'A major downside of this technique, however, is that it doesn''t really do
    anything for the legitimate uses of orphan instances in the Haskell ecosystem:
    when third-parties defined both the type family (or type class) and the data type,
    and you need the instance for your own purposes.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种技术的一个主要缺点是它对于 Haskell 生态系统中孤立实例的合法用途实际上无济于事：当第三方同时定义了类型族（或类型类）和数据类型，并且你需要这个实例来满足自己的需求时。
- en: 'Extension 2: Orphan resolution'
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扩展 2：孤立解决
- en: This proposal is based off of one that Edward Kmett has been floating around,
    but which I've refined. The motivation is to give a better story for offering
    the functionality of orphan instances without gunking up the module system. The
    gist of the proposal is to allow the package manager to selectively enable/disable
    orphan definitions; however, to properly explain it, I'd like to do first is describe
    a few situations involving orphan type class instances. (The examples use type
    classes rather than type families because the use-cases are more clear. If you
    imagine that the type classes in question have associated types, then the situation
    is the same as that for open type families.)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个提案基于 Edward Kmett 提出的一个提案，但我进行了改进。动机是为提供孤立实例的功能提供一个更好的解决方案，同时不会搞乱模块系统。提案的要点是允许包管理器有选择地启用/禁用孤立定义；然而，为了恰当地解释它，我想首先描述几种涉及孤立类型类实例的情况。（示例使用类型类而不是类型族，因为用例更清晰。如果你想象所讨论的类型类有关联类型，那么情况与开放类型族相同。）
- en: 'The story begins with a third-party library which defined a data type `T` but
    did not provide an instance that you needed:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 故事始于一个第三方库，定义了一个数据类型 `T`，但没有提供你所需的实例：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you really need the instance, you might be tempted to just go ahead and
    define it:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你确实需要这个实例，你可能会被诱惑去定义它：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Later, you upgrade `Data.Foo` to version 1.0.0, which does define a `Show` instance,
    and now your overlapping instance error! Uh oh.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 后来，你将`Data.Foo`升级到了1.0.0版本，现在你的重叠实例错误！哎呀。
- en: 'How do we get ourselves out of the mess? A clue is how many package authors
    currently “get out of jail” by using preprocessor macros:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何摆脱困境？线索在于，目前许多包作者是通过使用预处理器宏来“逃脱监狱”的：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Morally, we''d like to hide the orphan instance when the real instance is available:
    there are two variations of `MyApp` which we want to transparently switch between:
    one which defines the orphan instance, and one which does not and uses the non-orphan
    instance defined in the `Data.Foo`. The choice depends on which `foo` was chosen,
    a decision made by the package manager.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 从道德上讲，我们希望在真实实例可用时隐藏孤立实例：我们希望在两个变体的`MyApp`之间进行透明切换：一个定义了孤立实例，另一个不定义并使用`Data.Foo`中定义的非孤立实例。选择取决于选择了哪个`foo`，这是由包管理器做出的决定。
- en: 'Let''s mix things up a little. There is no reason the instance has to be a
    non-orphan coming from `Data.Foo`. Another library might have defined its own
    orphan instance:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们稍微混合一下。实例不必来自于`Data.Foo`，它可以是一个孤立实例的定义来自另一个库：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'It''s a bit awful to get this to work with preprocessor macros, but there are
    *two* ways we can manually resolve the overlap: we can erase the orphan instance
    from `MyOtherApp`, or we can erase the orphan instance from `MyApp`. A priori,
    there is no reason to prefer one or the other. However, depending on which one
    is erased, `Main` may have to be compiled *differently* (if the code in the instances
    is different). Furthermore, we need to setup a *new* (instance-only) import between
    the module who defines the instance to the module whose instance was erased.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用预处理器宏使其工作有些糟糕，但我们有 *两种* 方法可以手动解决重叠：我们可以从`MyOtherApp`中删除孤立的实例，或者从`MyApp`中删除孤立的实例。先验地，没有理由偏好其中一个。但是，根据删除的实例，`Main`可能需要以
    *不同的* 方式编译（如果实例中的代码不同）。此外，我们需要在定义实例的模块与被删除实例的模块之间设置 *新的* （仅实例的）导入。
- en: 'There are a few takeaways from these examples. First, the most natural way
    of resolving overlapping orphan instances is to simply “delete” the overlapping
    instances; however, which instance to delete is a global decision. Second, *which*
    overlapping orphan instances are enabled affects compilation: you may need to
    add module dependencies to be able to compile your modules. Thus, we might imagine
    that a solution allows us to do both of these, without modifying source code.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 从这些例子中可以得出几个要点。首先，解决重叠孤立实例的最自然方式是简单地“删除”重叠实例；然而，删除哪个实例是一个全局决策。其次，启用哪些重叠的孤立实例会影响编译：您可能需要添加模块依赖关系才能编译您的模块。因此，我们可以想象一个解决方案，允许我们在不修改源代码的情况下做到这两点。
- en: 'Here is the game plan: as before, packages can define orphan instances. However,
    the list of orphan instances a package defines is part of the metadata of the
    package, and the instance itself may or may not be used when we actually compile
    the package (or its dependencies). When we do dependency resolution on a set of
    packages, we have to consider the set of orphan instances being provided and only
    enable a set which is non-overlapping, the so called **orphan resolution**. Furthermore,
    we need to add an extra dependency from packages whose instances were disabled
    to the package who is the sole definer of an instance (this might constrain which
    orphan instance we can actually pick as the canonical instance).'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的计划：与以往一样，包可以定义孤立实例。但是，包定义的孤立实例列表是包的元数据的一部分，而实例本身在我们实际编译包（或其依赖项）时可能会被使用或不被使用。当我们对一组包进行依赖解析时，我们必须考虑所提供的孤立实例集合，并且只启用一个非重叠的实例集合，这就是所谓的
    **孤立实例解析**。此外，我们需要从禁用其实例的包到唯一定义其实例的包添加额外的依赖关系（这可能限制我们实际可以选择为规范实例的孤立实例）。
- en: The nice thing about this proposal is that it solves an already existing pain
    point for type class users, namely defining an orphan type class instance without
    breaking when upstream adds a proper instance. But you might also think of it
    as a big hack, and it requires cooperation from the package manager (or some other
    tool which manages the orphan resolution).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这个提议的好处是，它解决了类型类用户已经存在的一个痛点，即在上游添加适当实例时定义孤立类型类实例不会出错。但你也可以把它看作是一个大型的hack，并且它需要包管理器（或者其他管理孤立解决方案的工具）的配合。
- en: '* * *'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: The extensions to the basic proposal are not mutually exclusive, but it's an
    open question whether or not the complexity they incur are worth the benefits
    they bring to existing uses of orphan instances. And of course, there may other
    ways of solving the problem which I have not described here, but this smorgasbord
    seems to be the most plausible at the moment.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对基本提议的扩展并不是互斥的，但是否值得为了现有的孤立实例的使用带来的好处而增加复杂性，这是一个开放的问题。当然，解决问题的其他方法可能还有，但眼下这些看起来是最合理的。
- en: 'At ICFP, I had an interesting conversation with Derek Dreyer, where he mentioned
    that when open type families were originally going into GHC, he had warned Simon
    that they were not going to be modular. With the recent addition of closed type
    families, many of the major use-cases for open type families stated in the original
    paper have been superseded. However, even if open type families had never been
    added to Haskell, we still might have needed to adopt these solutions: the *global
    uniqueness of instances* is deeply ingrained in the Haskell community, and even
    if in some cases we are lax about enforcing this constraint, it doesn''t mean
    we should actively encourage people to break it.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在ICFP会议上，我与Derek Dreyer有过一次有趣的交谈，他提到当开放类型族最初进入GHC时，他曾警告Simon它们不会是模块化的。随着封闭类型族的最近添加，原始论文中陈述的开放类型族的许多主要用例已经过时。然而，即使从未将开放类型族添加到Haskell中，我们仍然可能需要采纳这些解决方案：实例的全局唯一性深深植根于Haskell社区，即使在某些情况下我们对这个约束的实施比较松散，也不意味着我们应该积极鼓励人们打破它。
- en: 'I have a parting remark for the ML community, as type classes make their way
    in from Haskell: when you do get type classes in your language, don’t make the
    same mistake as the Haskell community and start using them to enforce invariants
    in APIs. This way leads to the global uniqueness of instances, and the loss of
    modularity may be too steep a price to pay.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我对ML社区有一个离别的评论，因为类型类从Haskell进入：当你在你的语言中引入类型类时，不要犯和Haskell社区同样的错误，开始使用它们来强制API中的不变性。这种方式导致了实例的全局唯一性，而且失去了模块化可能是一个付出的代价太大。
- en: '* * *'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '*Postscript.* One natural thing to wonder, is if overlapping type family instances
    are OK if one of the instances “is not externally visible.” Of course, the devil
    is in the details; what do we mean by external visibility of type family instances
    of `F`?'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*后记.* 一个自然的问题是，如果重叠的类型族实例中有一个“在外部不可见”，那么是否可以接受？当然，魔鬼在细节中；我们所说的类型族实例`F`的外部可见性是什么意思呢？'
- en: 'For some definitions of visibility, we can find an equivalent, local transformation
    which has the same effect. For example, if we never use the instance *at all*,
    it certainly OK to have overlap. In that case, it would also have been fine to
    delete the instance altogether. As another example, we could require that there
    are no (transitive) mentions of the type family `F` in the signature of the module.
    However, eliminating the mention of the type family requires knowing enough parameters
    and equations to reduce: in which case the type family could have been replaced
    with a local, closed type family.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 对于某些可见性的定义，我们可以找到一个等效的本地转换，它具有相同的效果。例如，如果我们根本不使用这个实例，那么有重叠是完全可以接受的。在这种情况下，直接删除该实例也是可以的。另一个例子是，我们可以要求在模块签名中没有类型族`F`的（传递性）提及。然而，消除类型族的提及要求了解足够的参数和方程式以减少：在这种情况下，类型族可以被替换为本地的封闭类型族。
- en: 'One definition that definitely does *not* work is if `F` can be mentioned with
    some unspecified type variables. Here is a function which coerces an `Int` into
    a function:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个明确不起作用的定义是，如果`F`可以在一些未指定的类型变量中提及。这里有一个函数，它将`Int`强制转换为一个函数：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '...the point being that, even if a signature doesn''t directly mention the
    overlapping instance `F Int`, type refinement (usually by some GADT-like structure)
    can mean that an offending instance can be used internally.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '...重点在于，即使一个签名并没有直接提到重叠实例 `F Int`，类型细化（通常通过某种类似 GADT 的结构）可以意味着一个有问题的实例可以在内部使用。'
