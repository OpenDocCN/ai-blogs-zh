- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:18:25'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:18:25'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Mutation sleuthing in Python : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 中的变异追踪：ezyang 的博客
- en: 来源：[http://blog.ezyang.com/2010/03/mutation-sleuthing-in-python/](http://blog.ezyang.com/2010/03/mutation-sleuthing-in-python/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/03/mutation-sleuthing-in-python/](http://blog.ezyang.com/2010/03/mutation-sleuthing-in-python/)
- en: 'Python is a language that gives you a lot of rope, in particular any particular
    encapsulation scheme is only weakly enforced and can be worked around by a sufficiently
    savvy hacker. I fall into the "my compiler should stop me from doing stupid things"
    camp, but I''ll certainly say, dynamic capabilities sure are convenient. But here''s
    the rub: *the language must show you where you have done something stupid.*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一种赋予你很大自由度的语言，特别是任何特定的封装方案都只是弱约束，可以被足够精明的黑客绕过。我属于“我的编译器应该阻止我做愚蠢事情”的阵营，但我肯定会说，动态能力确实非常方便。但问题来了：*语言必须告诉你，你做了什么愚蠢的事情*。
- en: In this case, we'd like to see when you have improperly gone and mutated some
    internal state. You might scoff and say, "well, I know when *I* change *my* state",
    but this is certainly not the case when you're debugging an interaction between
    two third party libraries that you did not write. Specifically I should be able
    to point at a variable (it might be a local variable, a global variable, or a
    class/instance attribute) and say to Python, "tell me when this variable changes."
    When the variable changes, Python should tell me who changed the variable (via
    a backtrace) and what the variable changed to. I should be able to say, "tell
    me when this variable changed to this value."
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们希望看到当你错误地改变了一些内部状态时。你可能会嗤之以鼻地说：“嗯，我知道当*我*改变*我的*状态时”，但当你调试两个你没有编写的第三方库之间的交互时，情况肯定不是这样。具体来说，我应该能够指向一个变量（它可能是一个局部变量、全局变量或类/实例属性），并对
    Python 说：“告诉我这个变量何时发生了变化。”当变量改变时，Python 应该告诉我谁改变了变量（通过一个回溯）以及变量变成了什么。我应该能够说：“告诉我这个变量何时改变成了这个值。”
- en: 'Well, here is a small module that does just that: [mutsleuth](http://github.com/ezyang/mutsleuth/blob/master/mutsleuth.py).
    Import this module and install the watcher by passing `mutsleuth.watch` an expression
    that evaluates to the variable you''d like to check.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这里有一个小模块可以做到这一点：[变异侦察员](http://github.com/ezyang/mutsleuth/blob/master/mutsleuth.py)。导入这个模块并通过
    `mutsleuth.watch` 传递一个表达式，这个表达式会评估为你想要检查的变量。
- en: 'Here''s an example: suppose I have the following files:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子：假设我有以下文件：
- en: '`good.py`:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`good.py`：'
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`evil.py`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`evil.py`：'
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`test.py`:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`test.py`：'
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When you run test.py, you''ll get the following trace:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行 test.py 时，你将得到以下的追踪：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'There are a few caveats:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个注意事项：
- en: Tracing doesn't start until you enter another local scope, whether by calling
    a function or importing a module. For most larger applications, you will invariably
    get this scope, but for one-off scripts this may not be the case.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪不会开始，直到你进入另一个本地作用域，无论是调用一个函数还是导入一个模块。对于大多数较大的应用程序，你肯定会获得这个作用域，但对于一次性脚本可能不是这样。
- en: In order to keep performance tolerable, we only do a shallow comparison between
    instances, so you'll need to specifically zoom in on a value to get real mutation
    information about it.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了保持性能的可接受性，我们仅对实例之间进行浅层比较，因此你需要专门关注一个值，以获取有关它的真实变异信息。
- en: Bug reports, suggestions and improvements appreciated! I went and tested this
    by digging up an old bug that I would have loved to have had this module for (it
    involved logging code being initialized twice by two different sites) and verified
    it worked, but I haven't tested it "cold" yet.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎提交 Bug 报告、建议和改进！我测试过了，找到了一个旧 Bug，我本来希望有这个模块（它涉及由两个不同站点初始化的日志代码被初始化两次），并验证了它可以工作，但我还没有“冷”测试过它。
- en: Hat tip to [Bengt Richter](http://mail.python.org/pipermail/python-list/2002-September/164261.html)
    for suggesting this tracing originally.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢 [Bengt Richter](http://mail.python.org/pipermail/python-list/2002-September/164261.html)
    最初建议这种追踪方式。
