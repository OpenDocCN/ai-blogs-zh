- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:42'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:42'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'From data type definitions to code : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从数据类型定义到代码：ezyang 的博客
- en: 来源：[http://blog.ezyang.com/2011/07/data-type-definitions-to-code/](http://blog.ezyang.com/2011/07/data-type-definitions-to-code/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2011/07/data-type-definitions-to-code/](http://blog.ezyang.com/2011/07/data-type-definitions-to-code/)
- en: 'What do these problems have in common: recursive equality/ordering checks,
    printing string representations, serializing/unserializing binary protocols, hashing,
    generating getters/setters? They are repetitive boilerplate pieces of code that
    have a strong dependence on the structure of the data they operate over. Since
    programmers love automating things away, various schools of thought have emerged
    on how to do this:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这些问题有什么共同点：递归的相等性/排序检查，打印字符串表示，序列化/反序列化二进制协议，哈希，生成获取器/设置器？它们是具有强烈依赖于它们操作的数据结构的重复样板代码。由于程序员喜欢自动化事务，因此出现了各种关于如何做到这一点的思想流派：
- en: Let your IDE generate this boilerplate for you. You right-click on the context
    menu, click “Generate `hashCode()`”, and your IDE does the necessary program analysis
    for you;
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让你的 IDE 为你生成这些样板代码。你右键单击上下文菜单，点击“生成 `hashCode()`”，你的 IDE 就会为你进行必要的程序分析；
- en: Create a custom metadata format (usually XML), which you then run another program
    on which converts this description into code;
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个自定义的元数据格式（通常是 XML），然后运行另一个程序，将这个描述转换为代码；
- en: Add sufficiently strong macro/higher-order capabilities to your language, so
    you can write programs which generate implementations in-program;
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的语言中添加足够强大的宏/高阶功能，这样你就可以编写生成程序内实现的程序；
- en: Add sufficiently strong reflective capabilities to your language, so you can
    write a fully generic dynamic implementation for this functionality;
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的语言中添加足够强大的反射功能，这样你就可以为这个功能编写一个完全通用的动态实现；
- en: Be a compiler and do static analysis over abstract syntax trees in order to
    figure out how to implement the relevant operations.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 做一个编译器，并在抽象语法树上进行静态分析，以找出如何实现相关操作。
- en: It hadn’t struck me how prevalent the fifth option was until I ran into wide
    scale use of one particular facet of the [camlp4](http://caml.inria.fr/pub/old_caml_site/camlp4/index.html)
    system. While it describes itself as a “macro system,” in [sexplib](http://caml.inria.fr/cgi-bin/hump.en.cgi?contrib=474)
    and [bin-prot](http://caml.inria.fr/cgi-bin/hump.en.cgi?contrib=642), the macros
    being used are not those of the C tradition (which would be good for implementing
    3), rather, they are in the Lisp tradition, including access to the full syntax
    tree of OCaml and the ability to modify OCaml’s grammar. Unlike most Lisps, however,
    camlp4 has access to the abstract syntax tree of *data type definitions* (in untyped
    languages these are usually implicit), which it can use to transform into code.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 直到我遇到 [camlp4](http://caml.inria.fr/pub/old_caml_site/camlp4/index.html) 系统广泛使用的一个特定方面时，我才意识到第五个选项有多么普遍。虽然它自称为“宏系统”，但在
    [sexplib](http://caml.inria.fr/cgi-bin/hump.en.cgi?contrib=474) 和 [bin-prot](http://caml.inria.fr/cgi-bin/hump.en.cgi?contrib=642)
    中使用的宏并不是 C 传统的宏（这对于实现 3 是有好处的），而是 Lisp 传统的宏，包括访问 OCaml 的完整语法树和修改 OCaml 的语法的能力。然而，与大多数
    Lisp 不同，camlp4 可以访问 *数据类型定义* 的抽象语法树（在非类型化语言中，这些通常是隐式的），它可以用来转换成代码。
- en: 'One question that I’m interested in is whether or not this sort of metaprogramming
    can be made popular with casual users of languages. If I write code to convert
    a data structure into a Lisp-like version, is a logical next step to generalize
    this code into metaprogramming code, or is that a really large leap only to be
    done by extreme power users? At least from a user standpoint, camlp4 is extremely
    unobtrusive. In fact, I didn’t even realize I was using it until a month later!
    Using sexplib, for example, is a simple matter of writing:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我感兴趣的一个问题是，这种元编程是否能在语言的休闲用户中流行起来。如果我编写代码将数据结构转换为类似 Lisp 的版本，那么将这段代码概括为元编程代码，是否是一个逻辑上的下一步，还是一个仅由极限用户完成的非常大的飞跃？至少从用户的角度来看，camlp4
    非常不显眼。事实上，一个月后我甚至没有意识到我在使用它！例如，使用 sexplib 就是一个简单的事情，只需写：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Almost magically, `sexp_of_t` and `sexp_to_t` spring into existence.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎像魔法一样，`sexp_of_t` 和 `sexp_to_t` 就会出现。
- en: But defining new transformations is considerably more involved. Part of the
    problem is the fact that the abstract-syntax tree you are operating over is quite
    complex, the unavoidable side-effect of making a language nice to program in.
    I could theoretically define all of the types I cared about using sums and products,
    but real OCaml programs use labeled constructors, records, anonymous types, anonymous
    variants, mutable fields, etc. So I have to write cases for all of these, and
    that’s difficult if I’m not already a language expert.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 但是定义新的转换显然更加复杂。问题的一部分在于你操作的抽象语法树非常复杂，这是使语言编程友好的不可避免的副作用。我可以理论上使用求和和乘积定义我关心的所有类型，但是真实的OCaml程序使用带标签的构造函数、记录、匿名类型、匿名变体、可变字段等。因此，我必须为所有这些情况编写案例，如果我不是一个语言专家的话，这就很困难了。
- en: A possible solution for this is to define a simpler, core language on which
    to operate over, much the same way GHC Haskell compiles down to Core prior to
    code generation. You can then make the extra information available through an
    annotations system (which is desirable even when you have access to the full AST.)
    If the idea is fundamentally simple, don’t force the end-user to have to handle
    all of the incidental complexity that comes along with making a nice programming
    language. Unless, of course, they want to.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的一个可能的方法是定义一个更简单的核心语言进行操作，这与 GHC Haskell 在代码生成之前编译到核心语言的方式类似。然后，您可以通过注解系统（即使您可以访问完整的AST时也是如此）提供额外的信息。如果这个想法基本上很简单，就不要强迫最终用户处理所有与创建良好的编程语言相关的附带复杂性。当然，除非他们愿意。
- en: '*Postscript.* One of the things I’m absolutely terrible at is literature search.
    As with most ideas, it’s a pretty safe bet to assume someone else has done this
    already. But I couldn’t find any prior art here. Maybe I need a better search
    query than “intermediate language for metaprogramming.”'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*后记.* 我绝对不擅长文献检索。与大多数想法一样，可以安全地假设其他人已经做过了。但我在这里找不到任何先前的研究成果。也许我需要一个比“用于元编程的中间语言”更好的搜索查询。'
