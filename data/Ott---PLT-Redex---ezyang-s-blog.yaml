- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:15'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:15'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Ott ⇔ PLT Redex : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ott ⇔ PLT Redex：ezyang 的博客
- en: 来源：[http://blog.ezyang.com/2014/01/ott-iff-plt-redex/](http://blog.ezyang.com/2014/01/ott-iff-plt-redex/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2014/01/ott-iff-plt-redex/](http://blog.ezyang.com/2014/01/ott-iff-plt-redex/)
- en: '[Ott](http://www.cl.cam.ac.uk/~pes20/ott/) and [PLT Redex](http://redex.racket-lang.org/)
    are a pair of complimentary tools for the working semanticist. Ott is a tool for
    writing definitions of programming languages in a nice ASCII notation, which then
    can be typeset in LaTeX or used to generate definitions for a theorem prover (e.g.
    Coq). PLT Redex is a tool for specifying and debugging operational semantics.
    Both tools are easy to install, which is a big plus. Since the tools are quite
    similar, I thought it might be interesting to do a comparison of how various common
    tasks are done in both languages. (Also, I think the Redex manual is pretty terrible.)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[Ott](http://www.cl.cam.ac.uk/~pes20/ott/) 和 [PLT Redex](http://redex.racket-lang.org/)
    是一对互补的工具，适用于工作中的语义学家。Ott 是一个用 ASCII 符号写程序语言定义的工具，可以用 LaTeX 排版，也可用于生成定理证明器（如 Coq）的定义。PLT
    Redex 是一种用于指定和调试操作语义的工具。这两个工具都很容易安装，这是一个很大的优点。由于这两个工具相似，我觉得对它们进行比较执行各种常见任务可能会很有趣。（而且我认为
    Redex 的手册相当糟糕。）'
- en: '**Variables.** In Ott, variables are defined by way of metavariables (`metavar
    x`), which then serve as variable (by either using the metavariable alone, or
    suffixing it with a number, index variable or tick).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**变量。** 在 Ott 中，变量通过元变量（`metavar x`）定义，然后作为变量使用（可以单独使用元变量，也可以将其后缀为数字、索引变量或
    tick）。'
- en: 'In Redex, there is no notion of a metavariable; a variable is just another
    production. There are a few different ways say that a production is a variable:
    the simplest method is to use `variable-not-otherwise-mentioned`, which automatically
    prevents keywords from acting as variables. There are also several other variable
    patterns `variable`, `variable-except` and `variable-prefix`, which afford more
    control over what symbols are considered variables. `side-condition` may also
    be useful if you have a function which classifies variables.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Redex 中，没有“元变量”的概念；变量只是另一种产生式。有几种不同的方法可以表明一个产生式是变量：最简单的方法是使用 `variable-not-otherwise-mentioned`，这可以自动防止关键字被视为变量。还有几种其他变量模式
    `variable`、`variable-except` 和 `variable-prefix`，可以更精确地控制哪些符号被视为变量。如果你有一个分类变量的函数，`side-condition`
    也许会很有用。
- en: '**Grammar.** Both Ott and Redex can identify ambiguous matches. Ott will error
    when it encounters an ambiguous parse. Redex, on the other hand, will produce
    all valid parses; while this is not so useful when parsing terms, it is quite
    useful when specifying non-deterministic operational semantics (although this
    can have bad performance implications). `check-redundancy` may be useful to identify
    ambiguous patterns.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**语法。** Ott 和 Redex 都可以识别模糊匹配。Ott 在遇到模糊解析时会报错。而 Redex 则会生成所有有效的解析结果；尽管在解析术语时这并不那么有用，但在指定非确定性操作语义时却非常有用（尽管这可能会对性能产生不良影响）。`check-redundancy`
    可能对识别模糊模式很有用。'
- en: '**Binders.** In Ott, binders are explicitly declared in the grammar using `bind
    x in t`; there is also a binding language for collecting binders for pattern-matching.
    Ott can also generate substitution/free variable functions for the semantics.
    In Redex, binders are not stated in the grammar; instead, they are implemented
    solely in the reduction language, usually using substitution (Redex provides a
    workhorse substitution function for this purpose), and explicitly requiring a
    variable to be fresh. Redex does have a special-form in the metalanguage for doing
    let-binding (`term-let`), which substitutes immediately.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**绑定器。** 在 Ott 中，绑定器通过在语法中明确声明 `bind x in t` 来定义；还有一个用于模式匹配收集绑定器的绑定语言。Ott 还可以为语义生成替换/自由变量函数。在
    Redex 中，绑定器不在语法中声明；而是仅在规约语言中实现，通常使用替换（Redex 提供了一个实用的替换函数用于此目的），并明确要求变量是新鲜的。Redex
    还在元语言中提供了一个用于立即进行 let 绑定的特殊形式（`term-let`）。'
- en: '**Lists.** Ott supports two forms of lists: dot forms and list comprehensions.
    A dot form looks like `x1 , .. , xn` and requires an upper bound. A list comprehension
    looks like `</ xi // i IN 1 .. n />`; the bounds can be omitted. A current limitation
    of Ott is that it doesn’t understand how to deal with nested dot forms, this can
    be worked around by doing a comprension over a production, and then elsewhere
    stating the appropriate equalities the production satisfies.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表。** Ott支持两种形式的列表：点形式和列表理解。点形式看起来像`x1 , .. , xn`并需要上限。列表理解看起来像`</ xi //
    i IN 1 .. n />`；上下限可以省略。目前Ott的一个限制是它不理解如何处理嵌套的点形式，可以通过在制品上做理解，然后在其他地方说明制品满足的适当等式来解决这个问题。'
- en: 'Redex supports lists using ellipsis patterns, which looks like `(e ...)`. There
    is no semantic content here: the ellipses simply matches zero or more copies of
    `e`, which can lead to nondeterministic matches when there are multiple ellipses.
    Nested ellipses are supported, and simply result in nested lists. Bounds can be
    specified using side-conditions; however, Redex supports a limited form of bounding
    using named ellipses (e.g. `..._1`), where all ellipses with the same name must
    have the same length.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Redex使用省略号模式支持列表，看起来像`(e ...)`。这里没有语义内容：省略号只是匹配零个或多个`e`的副本，当存在多个省略号时可能导致非确定性匹配。支持嵌套的省略号，并且简单地导致嵌套列表。可以使用侧条件指定边界；但是Redex支持使用命名省略号进行有限形式的绑定（例如`..._1`），其中具有相同名称的所有省略号必须具有相同的长度。
- en: '**Semantics.** Ott is agnostic to whatever semantics you want to define; arbitrary
    judgments can be specified. One can also define judgments as usual in Redex, but
    Redex provides special support for *evaluation semantics*, in which a semantics
    is given in terms of evaluation contexts, thus allowing you to avoid the use of
    structural rules. So a usual use-case is to define a normal expression language,
    extend the language to have evaluation contexts, and then define a `reduction-relation`
    using `in-hole` to do context decomposition. The limitation is that if you need
    to do anything fancy (e.g. [multi-hole evaluation contexts](https://github.com/iu-parfunc/lvars/tree/master/redex/lambdaLVar)),
    you will have to fall back to judgment forms.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**语义。** Ott对您想定义的任何语义都是不可知的；可以指定任意判断。在Redex中也可以像通常一样定义判断，但Redex专门支持*评估语义*，其中语义是通过评估上下文来给出的，从而允许您避免使用结构规则。因此，通常的用例是定义一个正常的表达式语言，扩展该语言以具有评估上下文，然后使用`in-hole`定义一个`reduction-relation`进行上下文分解。限制在于，如果需要做任何复杂操作（例如[multi-hole
    evaluation contexts](https://github.com/iu-parfunc/lvars/tree/master/redex/lambdaLVar)），则必须返回到判断形式。'
- en: '**Type-setting.** Ott supports type-setting by translation into LaTeX. Productions
    can have custom LaTeX associated with them, which is used to generate their output.
    Redex has a `pict` library for directly typesetting into PDF or Postscript; it
    doesn’t seem like customized typesetting is an intended use-case for PLT Redex,
    though it can generate reasonable Lisp-like output.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**排版。** Ott支持通过转换为LaTeX进行排版。制品可以有与之关联的自定义LaTeX，用于生成它们的输出。Redex有一个`pict`库，可以直接排版成PDF或Postscript；虽然PLT
    Redex似乎不支持定制排版作为预期用例，但它可以生成合理的类似Lisp的输出。'
- en: '**Conclusion.** If I had to say what the biggest difference between Ott and
    PLT Redex was, it is that Ott is primarily concerned with the abstract semantic
    meaning of your definitions, whereas PLT Redex is primarily concerned with how
    you would go about *matching* against syntax (running it). One way to see this
    is in the fact that in Ott, your grammar is a BNF, which is fed into a CFG parser;
    whereas in PLT Redex, your grammar is a pattern language for the pattern-matching
    machine. This should not be surprising: one would expect each tool’s design philosophy
    to hew towards their intended usage.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**结论。** 如果我必须说Ott和PLT Redex之间最大的区别是什么，那就是Ott主要关注于您定义的抽象语义含义，而PLT Redex主要关注于如何*匹配*语法（运行）。可以通过观察到，在Ott中，您的语法是BNF，这被馈送到CFG解析器中；而在PLT
    Redex中，您的语法是用于模式匹配机器的模式语言。这不应该令人惊讶：人们期望每个工具的设计理念符合其预期的使用方式。'
