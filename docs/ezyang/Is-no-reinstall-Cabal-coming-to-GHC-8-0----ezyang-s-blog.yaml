- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:06'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:06'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Is no-reinstall Cabal coming to GHC 8.0? : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不需重新安装的 Cabal 是否即将到来 GHC 8.0？：ezyang’s 博客
- en: 来源：[http://blog.ezyang.com/2015/09/is-no-reinstall-cabal-coming-to-ghc-8/](http://blog.ezyang.com/2015/09/is-no-reinstall-cabal-coming-to-ghc-8/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2015/09/is-no-reinstall-cabal-coming-to-ghc-8/](http://blog.ezyang.com/2015/09/is-no-reinstall-cabal-coming-to-ghc-8/)
- en: 'You might be wondering: with the [beta release of no-reinstall Cabal](http://blog.ezyang.com/2015/08/help-us-beta-test-no-reinstall-cabal/),
    is this functionality be coming to GHC 8.0? (Or even a new release of Cabal, since
    the no-reinstall feature works with GHC 7.10). Unfortunately, there is a split
    among the Cabal developers over whether or not the actual no-reinstall behavior
    should go into Cabal by default as is. Duncan Coutts, in particular, has argued
    that it''s a bad idea to enable no-reinstall without other (unimplemented) changes
    to Cabal. Since the extra needed changes are not fully implemented yet, it''s
    unclear if Duncan will manage them for GHC 8.0.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想：使用 [不需重新安装的 Cabal 的测试版](http://blog.ezyang.com/2015/08/help-us-beta-test-no-reinstall-cabal/)，这个功能是否会被引入到
    GHC 8.0 中？（甚至是新版本的 Cabal，因为不需重新安装功能在 GHC 7.10 上也有效）。不幸的是，Cabal 的开发人员在是否应将实际的不需重新安装行为默认加入
    Cabal 中存在分歧。尤其是 Duncan Coutts 认为在没有其他（未实施的）对 Cabal 的更改的情况下启用不需重新安装是一个坏主意。由于额外所需的更改尚未完全实施，目前不清楚
    Duncan 是否会在 GHC 8.0 中管理它们。
- en: I've heard a smattering of feedback that no-reinstall Cabal actually is working
    just fine for people, so I suspect many people would be in favor of just biting
    the bullet and putting in the "good" (but not "best") solution into Cabal. But
    I want to foster an informed discussion, so I'd like to explain what the (known)
    problems with no-reinstall are.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我听说不需要重新安装的 Cabal 对于大多数人来说实际上运行良好，因此我怀疑很多人会赞成直接采取“好”（而非“最佳”）解决方案并将其纳入 Cabal。但我希望促进一个理性的讨论，因此我想解释一下不需要重新安装的（已知的）问题。
- en: What is no reinstall?
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是不需重新安装？
- en: 'Currently, GHC and Cabal maintain an invariant in the installed package database
    that for any package name and version (i.e. (source) package ID), there is at
    most one matching package in the database:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当前，GHC 和 Cabal 在已安装的软件包数据库中维护一个不变量，即对于任何软件包名称和版本（即（源）软件包 ID），数据库中最多只有一个匹配的软件包：
- en: 'The arrows indicate a "depends on" relationship: so if you have a database
    that has bar-0.1, bar-0.2 and an instance of foo-0.1 built against bar-0.1, you
    aren''t allowed to install another instance of foo-0.1 built against bar-0.2 (though
    you are allowed to install foo-0.2 built against bar-0.2).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 箭头表示“依赖于”关系：因此，如果你有一个数据库，其中包含 bar-0.1、bar-0.2 和一个构建在 bar-0.1 上的 foo-0.1 实例，那么你将不允许安装另一个构建在
    bar-0.2 上的 foo-0.1 实例（尽管你可以安装构建在 bar-0.2 上的 foo-0.2）。
- en: 'If cabal-install wants to install a package with the same package ID as a package
    already in the database, but with different dependencies, it must destructively
    overwrite the previous entry to maintain this invariant, pictured below:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 cabal-install 希望安装一个与已在数据库中的软件包具有相同软件包 ID 但具有不同依赖项的软件包，则必须破坏性地覆盖先前的条目以维护下面显示的此不变量：
- en: 'No reinstall relaxes this invariant, so that "reinstalling" a package with
    different dependencies just works:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 无需重新安装此不变量，因此“重新安装”具有不同依赖项的软件包正常运行：
- en: The recently beta released no-reinstall Cabal achieves this with two small features.
    First, in GHC 7.10, we added the flag `--enable-multi-instance` to `ghc-pkg` which
    makes `ghc-pkg` no longer error if you attempt to add multiple copies of the same
    package in the database. Second, in Vishal Agrawal's patchset for Cabal, cabal-install
    is modified to use this flag, so that the dependency solver no longer has to avoid
    reinstalls.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 最近发布的不需重新安装的 Cabal 通过两个小功能实现了这一点。首先，在 GHC 7.10 中，我们为 `ghc-pkg` 添加了 `--enable-multi-instance`
    标志，使得 `ghc-pkg` 在尝试向数据库中添加同一软件包的多个副本时不再报错。其次，在 Vishal Agrawal 的 Cabal 补丁集中，修改了
    cabal-install 以使用此标志，因此依赖解析器不再需要避免重新安装。
- en: However, breaking this invariant has consequences. Let's look at some of them.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，破坏此不变量会产生后果。让我们看看其中的一些后果。
- en: 'Problem 1: It doesn''t work on old versions of GHC'
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题1：它在旧版本的 GHC 上不起作用
- en: '**Summary:** In GHC 7.8 and earlier, it''s not possible to directly implement
    no reinstall (because `ghc-pkg` will reject it.) And even if it were possible,
    installing a new instance of a package (which has the same source package ID of
    an existing package) either (1) causes the old package and all of its dependents
    to become hidden from the default view of GHC, even though they are still usable,
    or (2) fails to be exposed in the default view of GHC.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**总结：** 在 GHC 7.8 及之前的版本中，直接实现无重新安装是不可能的（因为 `ghc-pkg` 将拒绝它）。即使可能，安装一个具有与现有包相同源包
    ID 的新包的实例，会导致以下情况之一：（1）使旧包及其所有依赖项从 GHC 的默认视图中隐藏，尽管它们仍然可用；或者（2）未能在 GHC 的默认视图中暴露。'
- en: 'Suppose that a package `foo-0.1`, which defines a type `Foo`, and has been
    compiled twice with different versions of its dependencies:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 假设包 `foo-0.1` 定义了类型 `Foo`，并且已经使用其依赖项的不同版本编译了两次：
- en: 'GHC 7.8 could not distinguish between two compilations of the package: symbols
    from both packages would live in the `foo-0.1` namespace, and colliding symbols
    would simply be considered the same. Disaster! To avoid this situation, GHC has
    a shadowing algorithm which remove incompatible packages from its visible set.
    Here is an example:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: GHC 7.8 无法区分包的两次编译：来自两个包的符号将存在于 `foo-0.1` 命名空间中，并且冲突的符号将简单地被视为相同。灾难！为避免这种情况，GHC
    有一个遮蔽算法，从其可见集中移除不兼容的包。以下是一个例子：
- en: 'We have two package databases, the user database and the global database, laid
    side-to-side (the user database is "on top"). When there is a conflicting package
    ID in the combined database, GHC prefers the package from the topmost database:
    thus, in our example the global `foo-0.1` is shadowed (any packages which transitively
    have it as a dependency are also shadowed). When a package is shadowed, it doesn''t
    exist at all to GHC: GHC will not suggest it or make any mention it exists.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有两个包数据库，用户数据库和全局数据库，侧边放置（用户数据库位于“顶部”）。当组合数据库中存在冲突的包 ID 时，GHC 更喜欢来自顶部数据库的包：因此，在我们的例子中，全局
    `foo-0.1` 被遮蔽（任何直接或间接依赖于它的包也被遮蔽）。当一个包被遮蔽时，对于 GHC 来说它根本不存在：GHC 不会提及它或者暗示它存在。
- en: No reinstall requires us to allow these duplicate packages the same database!
    In this case, GHC will apply shadowing; however, it is not well-defined which
    package should be shadowed. If GHC chooses to shadow the old package, they "vanish"
    from GHC's default view (it is as if they do not exist at all); if GHC chooses
    to shadow the new package, a package that a user just `cabal-install`'d will be
    mysteriously absent! Troublesome.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 无重新安装要求我们允许这些重复包存在于同一数据库中！在这种情况下，GHC 将应用遮蔽；然而，不清楚应该遮蔽哪个包。如果 GHC 选择遮蔽旧包，则它们会从
    GHC 的默认视图中“消失”（就像它们根本不存在一样）；如果 GHC 选择遮蔽新包，则用户刚刚通过 `cabal-install` 安装的包会神秘地消失！令人头疼。
- en: 'Problem 2: Using multiple instances of the same package is confusing'
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '问题 2: 使用多个相同包实例很令人困惑。'
- en: '**Summary:** In GHC 7.10 or later, multiple instances of the same package may
    be used together in the same GHC/GHCi session, which can result in confusing type
    inequalities.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**总结：** 在 GHC 7.10 或更新版本中，可以在同一 GHC/GHCi 会话中同时使用多个相同包的实例，这可能导致混乱的类型不等式。'
- en: In GHC 7.10, we now use "package keys" to test for type identity. A package
    key is a source package ID augmented with a hash of the package keys of all the
    dependencies. This means that GHC no longer needs to apply shadowing for soundness,
    and you can register duplicates of a package using the `--enable-mult-instances`
    flag on `ghc-pkg`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GHC 7.10 中，我们现在使用“包键”来测试类型标识。包键是源包 ID 加上所有依赖包键的哈希值。这意味着 GHC 不再需要应用遮蔽来保证完整性，你可以使用
    `ghc-pkg` 上的 `--enable-mult-instances` 标志注册包的重复实例。
- en: 'However, this can still result in confusing behavior. Consider the previous
    example in GHC 7.10:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这仍然可能导致混乱的行为。考虑在 GHC 7.10 中的前述示例：
- en: 'Both versions of `foo` are visible, and so if we try to import `Foo`, GHC will
    complain that it doesn''t know which `Foo` we want. This can be fixed by hiding
    one package or the other. However, suppose that both `baz` and `qux` are exposed,
    and furthermore, they both export a value `foo` which has type `Foo`. These types
    are "distinct", despite the fact that they are: (1) both named `Foo`, and (2)
    come from a package named `foo-0.1`: they are two different instances of `foo-0.1`.
    Confusing!'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`foo` 的两个版本都是可见的，因此如果我们尝试导入 `Foo`，GHC 将抱怨不知道我们想要哪个 `Foo`。可以通过隐藏其中一个包或另一个包来解决这个问题。然而，假设
    `baz` 和 `qux` 都是公开的，并且它们都导出了类型为 `Foo` 的值 `foo`。尽管它们: (1) 都命名为 `Foo`，并且 (2) 来自名为
    `foo-0.1` 的包：它们是 `foo-0.1` 的两个不同实例。令人困惑！'
- en: 'Problem 3: Nix hashing non-sdist''ed packages is difficult'
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题 3：Nix 对非 sdist 包的哈希是困难的
- en: 'It is easy to "trick" Cabal into hashing a set of source files which is not
    representative of the true input of the build system: for example, you can omit
    files in the `other-modules` field, or you can modify files in between the time
    Cabal has computed the source hash and the time it builds the files. And if you
    can''t trust the Nix hash, you now have to worry about what happens when you really
    need to clobber an old entry in the Nix database (which incorrectly has the "same"
    hash as what you are attempting to install).'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易“欺骗”Cabal去哈希一组源文件，这些文件并不代表构建系统的真正输入：例如，您可以省略 `other-modules` 字段中的文件，或者在 Cabal
    计算源哈希后和构建文件之间修改文件。如果你不能信任 Nix 哈希，那么当你真正需要覆盖 Nix 数据库中的旧条目（它错误地具有与您尝试安装的内容“相同”的哈希）时，现在你必须担心会发生什么。
- en: This problem doesn't exist for tarballs downloaded from Hackage, because you
    can simply hash the tarball and that is guaranteed to be the full set of source
    for building the file.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Hackage 下载的 tarballs 不会存在这个问题，因为你可以简单地对 tarball 进行哈希，这可以保证是用于构建文件的完整源代码集。
- en: Duncan's patchset
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Duncan 的补丁集
- en: 'To deal with these problems, Duncan has been working on a bigger patchset,
    with the following properties:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这些问题，Duncan 一直在开发一个更大的补丁集，具有以下特性：
- en: To support old versions of GHC, he is maintaining a separate "default view"
    package database (which is used by bare invocations of GHC and GHCi) from the
    actual "Nix store" package database. `cabal-install` is responsible for maintaining
    a consistent default view, but also installs everything into the Nix store database.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了支持旧版本的 GHC，他维护了一个单独的“默认视图”包数据库（它由裸露的 GHC 和 GHCi 调用使用），与实际的“Nix 存储”包数据库不同。`cabal-install`
    负责维护一个一致的默认视图，但也将所有内容安装到 Nix 存储数据库中。
- en: Nix-style hashing is only done on Hackage packages; local source tree are to
    be built and installed only into a sandbox database, but never the global database.
    Thus, an actual Nix hash is only ever computed by `cabal-install`.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Nix 风格的哈希仅针对 Hackage 包执行；本地源代码树只能构建并安装到沙盒数据库中，而不是全局数据库。因此，实际的 Nix 哈希仅由 `cabal-install`
    计算。
- en: 'He also wants to make it so that `cabal-install`''s install plan doesn''t depend
    on the local state of the Nix database: it should give the same plan no matter
    what you have installed previously. This is done by dependency resolving without
    any reference to the Nix database, and then once IPIDs are calculated for each
    package, checking to see if they are already built. This plan would also make
    it possible to support `cabal install --enable-profiling` without having to blow
    away and rebuild your entire package database.'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 他还希望使 `cabal-install` 的安装计划不依赖于 Nix 数据库的本地状态：无论您之前安装了什么，它都应该提供相同的计划。这通过依赖解析而没有任何参考
    Nix 数据库的方式来完成，然后一旦为每个包计算了 IPID，就检查它们是否已经构建。这个计划还将使支持 `cabal install --enable-profiling`
    成为可能，而无需清空并重建整个包数据库。
- en: Vishal's patchset
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Vishal 的补丁集
- en: Vishal was also cognizant of the problems with the default view of the package
    database, and he worked on [some patches](https://phabricator.haskell.org/D1119)
    to GHC for support for modifying package environments, which would serve a similar
    role to Duncan's extra package databases. Unfortunately, these patches have been
    stuck in code review for a bit now, and they wouldn't help users of old versions
    of GHC. While the code review process for these patches may get unstuck in the
    near future, I'm hesitant to place any bets on these changes landing.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Vishal 也意识到了包数据库默认视图的问题，并且他为支持修改包环境而在 GHC 上[工作了一些补丁](https://phabricator.haskell.org/D1119)，这将起到与
    Duncan 的额外包数据库类似的作用。不幸的是，这些补丁目前在代码审查中遇到了些许问题，并且它们不会帮助那些使用旧版本 GHC 的用户。虽然这些补丁的代码审查过程可能在不久的将来会有所进展，但我对这些变化是否能够落地表示怀疑。
- en: Conclusion
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论
- en: My view is that, historically, problems one and two have been the big stated
    reasons why "no reinstall", while being a simple change, hasn't been added to
    Cabal as the default mode of operation. However, there's been rising sentiment
    (I think I can safely [cite Simon Marlow](https://www.reddit.com/r/haskell/comments/3ite8n/noreinstall_cabal_a_project_to_move_cabal_to_a/cuk7gn9)
    in this respect) among some that these problems are overstated, and that we should
    bite the bullet.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我的观点是，历史上，问题一和问题二一直是“无需重新安装”未被添加为 Cabal 的默认操作模式的主要原因。然而，有越来越多的观点（我认为可以安全地[引用
    Simon Marlow](https://www.reddit.com/r/haskell/comments/3ite8n/noreinstall_cabal_a_project_to_move_cabal_to_a/cuk7gn9)在这方面）认为这些问题被夸大了，并且我们应该接受这一现实。
- en: If we want to turn on "no reinstall" before Duncan finishes his patchset (whenever
    that will be—or maybe someone else will finish it), I think there will need to
    be some concerted effort to show that these problems are a small price to pay
    for no reinstall Cabal, and that the Haskell community is willing to pay... at
    least, until a better implementation comes around.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想在 Duncan 完成他的补丁集之前（不管那会是什么时候 — 或者也许有其他人会完成它），我认为需要一些协同努力来表明，这些问题是为了无需重新安装
    Cabal 所付出的小代价，并且 Haskell 社区愿意承担…… 至少在更好的实现方法出现之前。
