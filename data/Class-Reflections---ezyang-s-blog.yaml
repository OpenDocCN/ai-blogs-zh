- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:18:18'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:18:18'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Class Reflections : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Class Reflections : ezyang’s blog'
- en: 来源：[http://blog.ezyang.com/2010/05/class-reflections/](http://blog.ezyang.com/2010/05/class-reflections/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/05/class-reflections/](http://blog.ezyang.com/2010/05/class-reflections/)
- en: Last February, I posted about [classes that I was going to be taking](http://blog.ezyang.com/2010/02/classes-begin/).
    Here are some reflections, now that final projects and examinations are over.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 去年二月，我发表了有关[我将要上的课程](http://blog.ezyang.com/2010/02/classes-begin/)。现在期末项目和考试结束，我想做些反思。
- en: '*6.005: Software Construction.* Teaching students how to engineer large software
    projects is one of the oddest paradoxes that you might encounter in academic life.
    The institute is certainly capable of teaching concepts, tools and methodologies,
    but, to actually be capable of constructing a system from scratch? It''s not really
    something you can learn, it something that you have to do. And the amount of work
    you have to put in to start getting the taste of real code as opposed to school
    code (which gets thrown away at the end of the term) doesn''t fit into one term.
    We''ve joked that MIT ought to have a two part series, where the second part you
    are asked to go modify some code you wrote a year ago in the face of shifting
    requirements. (Unfortunately, I suspect a large number of people will rewrite
    the thing: one of the problems of not actually being able to do *large* systems.)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*6.005：软件构造*。教授学生如何设计大型软件项目是你在学术生涯中可能遇到的最奇怪的悖论之一。学院当然能够教授概念、工具和方法论，但要真正从零开始构建系统？这并不是你可以学到的，而是你必须去做的。要想开始尝试真实代码的味道而不是学校代码（学期结束时会丢弃的代码），需要投入的工作量远超一个学期。我们开玩笑说，MIT应该开设一个两部曲系列课程，第二部分要求你在面对不断变化的需求时修改一年前写的代码。（不幸的是，我怀疑很多人会重写这个东西：这就是实际上无法做到*大规模*系统的一个问题。）'
- en: 'When you get past this fundamental issue, the class was relevant and even a
    smidge enjoyable. While I didn''t personally get much out of it, I was delighted
    to see the class trace course across all of the big tricky ideas that I encountered
    when I was cutting my teeth as a programmer: roughly, the course can be divided
    into state machines, functional ideas and relational modeling. Despite what others
    say, I find these formalisms useful, and the key ways I helped develop intuition
    for what a traditional imperative program should smell like. Unfortunately, each
    of these are really big ideas, and the course doesn''t manage to do it justice.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你解决了这个基本问题，这门课程就变得相关甚至有点愉快了。虽然我个人没从中得到太多收获，但看到课程涉及我刚开始学习编程时遇到的一些大难点，我还是感到很高兴：大致来说，课程可以分为状态机、函数式思想和关系建模。尽管其他人说的不一样，我觉得这些形式化方法很有用，并且是我帮助培养对传统命令式程序应该具备的直觉的关键途径。不幸的是，每个都是非常重要的思想，而课程并未能充分展现它们的重要性。
- en: '*6.02: Intro to EECS II.* MIT seems to like threes: for 6.02 the big three
    was signals, encodings and networks. The class was a pleasant walk through the
    three subjects, even though, while the class professes to be "introductory", none
    of the topics are what I''m really interested these days in computer science.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*6.02：EECS II导论*。MIT似乎喜欢三个：对于6.02而言，大三是信号、编码和网络。尽管课程声称是“入门级”的，但这些主题都不是我现在在计算机科学中真正感兴趣的内容。'
- en: 'One of the notable rough patches I hit taking the course was when the class
    hit frequency analysis. I''m a big believer in understanding the underlying principles
    behind complex systems: it''s one of the reasons why the calculus driven mechanical
    physics class worked so much better for me. Here, this predisposition was counterproductive:
    as Robert put it (and I paraphrase), yes, you could do it that way, but it is
    messy and not particularly insightful.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我上这门课时遇到的一个显著困难是在课程讲到频率分析时。我非常相信理解复杂系统背后的基本原理：这也是为什么基于微积分驱动的力学物理课对我有如此大帮助的原因之一。但在这里，这种偏好是适得其反的：正如罗伯特所说（我引用的），是的，你可以那样做，但这样做会很混乱，并且并不特别有见地。
- en: '*6.045: Automata, Computing and Complexity.* So much fun! Scott Aaronson is
    a charming lecturer and after dealing with the bread and butter of automata and
    complexity (which the course teaches well; as one math major taking the class
    put it, "I can actually understand these lectures!") it veers off into the magical
    worlds of cryptography, probably approximately correct learning and quantum computing
    (three out of ten questions on the comprehensive final, to be precise). By the
    end, you will know how to conduct a Diffie-Helman key exchange, why babies might
    be able to break RSA, and when to apply a Hadamard gate to a qubit! Unfortunately
    the graders weren''t exactly "quick" about grading problem sets, but in my opinion
    6.045''s troubles were solely administrative.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*6.045：自动机、计算和复杂性*。非常有趣！Scott Aaronson是一个迷人的讲师，处理完自动机和复杂性的基础知识后（课程教得很好；正如一位数学专业的学生所说，“我确实能理解这些讲座！”），课程开始涉及到密码学、可能近似正确的学习和量子计算的神奇世界（具体说来，综合期末考试中有十分之三的问题）。到最后，你将知道如何进行Diffie-Helman密钥交换，为什么婴儿可能能够破解RSA，以及何时在量子比特上应用Hadamard门！不幸的是，评分者对于评分问题集并不“迅速”，但在我看来，6.045的问题仅仅是行政上的。'
- en: '*6.945: Large-scale Symbolic Systems.* The subject-matter of the class is well
    worth having in the toolkit of any enterprising programmer: combinators, pattern
    matching and generic dispatch all our powerful tools with wide applicability in
    many systems. You also learn how to use continuations (gee!)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*6.945：大规模符号系统*。课程内容非常值得任何有进取心的程序员掌握：组合子、模式匹配和通用分派都是强大的工具，在许多系统中都有广泛的应用。你还将学会如何使用延续（哇！）'
- en: 'Sussman as a lecturer is an interesting phenomenon, especially when you reach
    the ending lectures when they are essentially talking about ideas that they cooked
    up *last night*. It''s rare that electrical engineering and highly symbolic programming
    come together, but that''s precisely the problem Sussman knows best: he knows
    how to solve circuit engineering and he wants to figure out the implementation
    details of an essentially artificially intelligent system that has this knowledge
    too. Unfortunately, if you''re not completely versed in this analysis the analogies
    being made may be difficult to understand, and this was a primary blocking point
    later on in the term. Feedback was late to nonexistent; take this course if you
    don''t need too much motivation to learn about these things.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Sussman作为讲师是一个有趣的现象，特别是当你达到结尾的讲座时，他们基本上是在讲述他们昨晚刚想出来的想法。很少有电气工程和高度符号化的编程结合在一起，但这恰恰是Sussman最擅长的问题：他知道如何解决电路工程问题，并且他想弄清楚一个基本上是人工智能系统的实现细节，该系统也具备这方面的知识。不幸的是，如果你对这种分析不是完全精通，那么所作的类比可能很难理解，这在学期后期是一个主要的阻碍点。反馈时晚到几乎没有；如果你不需要太多动力来学习这些东西，可以选这门课程。
- en: '*21M.283: Musicals of Stage and Screen.* I watched lots of musicals. It was
    great.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*21M.283：舞台和屏幕上的音乐剧*。我看了很多音乐剧。真是太棒了。'
