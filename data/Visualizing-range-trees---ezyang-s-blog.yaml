- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:37'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:37'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Visualizing range trees : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化范围树：ezyang's 博客
- en: 来源：[http://blog.ezyang.com/2012/02/visualizing-range-trees/](http://blog.ezyang.com/2012/02/visualizing-range-trees/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2012/02/visualizing-range-trees/](http://blog.ezyang.com/2012/02/visualizing-range-trees/)
- en: '**Range trees** are a data structure which lets you efficiently query a set
    of points and figure out what points are in some bounding box. They do so by maintaining
    nested trees: the first level is sorted on the x-coordinate, the second level
    on the y-coordinate, and so forth. Unfortunately, due to their fractal nature,
    range trees a bit hard to visualize. (In the higher dimensional case, this is
    definitely a “Yo dawg, I heard you liked trees, so I put a tree in your tree in
    your tree in your...”) But we’re going to attempt to visualize them anyway, by
    taking advantage of the fact that a *sorted list* is basically the same thing
    as a balanced binary search tree. (We’ll also limit ourselves to two-dimensional
    case for sanity’s sake.) I’ll also describe a nice algorithm for building range
    trees.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**范围树**是一种数据结构，可以让您有效地查询一组点，并找出在某个边界框内的点。它通过维护嵌套树来实现：第一级按x坐标排序，第二级按y坐标排序，依此类推。不幸的是，由于它们的分形性质，范围树有点难以可视化。（在更高维度的情况下，这绝对是一个“Yo
    dawg，我听说你喜欢树，所以我把一棵树放在你的树里...”）但是无论如何，我们打算通过利用一个*排序列表*基本上与平衡二叉搜索树相同的事实来可视化它们。（出于理智的考虑，我们还将限制自己到二维情况。）我还将描述一种用于构建范围树的好算法。'
- en: Suppose that we have a set of points ![(x_1, y_1), (x_2, y_2), \cdots (x_n,
    y_n)](img/9f27f271c1f48733661330c69079571f.png "(x_1, y_1), (x_2, y_2), \cdots
    (x_n, y_n)"). How do we build a range tree? The first thing we do is build a balanced
    binary search tree for the x-coordinate (denoted in blue). There are a number
    of ways we can do this, including sorting the list with your favorite sorting
    algorithm and then building the BBST from that; however, we can build the tree
    directly by using quicksort with median-finding, pictured below left.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一组点 ![(x_1, y_1), (x_2, y_2), \cdots (x_n, y_n)](img/9f27f271c1f48733661330c69079571f.png
    "(x_1, y_1), (x_2, y_2), \cdots (x_n, y_n)")。我们如何构建范围树？我们首先为x坐标建立一个平衡二叉搜索树（用蓝色标出）。我们可以通过使用您喜欢的排序算法对列表进行排序，然后从中构建BBST来完成此操作；但是，我们可以直接使用具有中位数查找的快速排序来直接构建树，如下图所示左侧。
- en: Once we’ve sorted on x-coordinate, we now need to re-sort every x-subtree on
    the y-coordinates (denoted in red), the results of which will be stored in another
    tree we’ll store inside the x-subtree. Now, we could sort each list from scratch,
    but since for any node we're computing the y-sorted trees of its children, we
    can just merge them together ala mergesort, pictured above right. (This is where
    the -1 in ![n\lg^{d-1} n](img/7da641bfa9237f700d3c93be51cd3947.png "n\lg^{d-1}
    n") comes from!)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们按照x坐标排序完毕，我们现在需要重新按照每个x子树的y坐标（用红色标出）进行排序，排序结果将存储在我们将在x子树内部存储的另一棵树中。现在，我们可以从头开始对每个列表进行排序，但是由于对于任何节点，我们正在计算其子节点的y排序树，我们可以像归并排序那样将它们合并在一起，如上图所示的右侧。（这就是
    ![n\lg^{d-1} n](img/7da641bfa9237f700d3c93be51cd3947.png "n\lg^{d-1} n") 中的 -1
    来源！）
- en: 'So, when we create a range-tree, we first **quicksort on the x-coordinate**,
    and then **mergesort on the y-coordinate** (saving the intermediate results).
    This is pictured below:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，当我们创建范围树时，我们首先对x坐标进行**快速排序**，然后对y坐标进行**归并排序**（保存中间结果）。如下图所示：
- en: 'We can interpret this diagram as a range tree as follows: the top-level tree
    is the x-coordinate BBST, as when we get the leaves we see that all of the points
    are sorted by x-coordinate. However, the points that are stored inside the intermediate
    nodes represent the y-coordinate BBSTs; each list is sorted on the y-coordinate,
    and implicitly represents another BBST. I’ve also thrown in a rendering of the
    points being held by this range tree at the bottom.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将这个图解释为一个范围树：顶层树是x坐标的平衡二叉搜索树（BBST），当我们到达叶子节点时，所有点都按照x坐标排序。然而，存储在中间节点内部的点代表y坐标的BBST；每个列表都按y坐标排序，并隐式地表示另一个BBST。我还在底部添加了一个显示这个范围树中保存的点的渲染图。
- en: Let’s use this as our working example. If we want to find points between the
    x-coordinates 1 and 4 inclusive, we search for the leaf containing 1, the leaf
    containing 4, and take all of the subtrees between this.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以这个作为我们的工作示例。如果我们想要找到x坐标在1到4之间的点，我们搜索包含1的叶子节点，包含4的叶子节点，并获取这之间的所有子树。
- en: What if we want to find points between the y-coordinates 2 and 4 inclusive,
    with no filtering on x, we can simply look at the BBST stored in the root node
    and do the range query.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要在 y 坐标为 2 和 4 之间（包括）找到点，而不对 x 进行过滤，我们可以简单地查看存储在根节点中的 BBST 并执行范围查询。
- en: 'Things are a little more interesting when we actually want to do a bounding
    box (e.g. (1,2) x (4,4) inclusive): first, we locate all of the subtrees in the
    x-BBST; then, we do range queries in each of the y-BBSTs.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们实际上想要执行边界框（例如 (1,2) x (4,4) 包括）时，事情就变得更有趣了：首先，我们定位 x-BBST 中的所有子树；然后，在每个 y-BBST
    中进行范围查询。
- en: Here is another example (4,4) x (7,7) inclusive. We get lucky this time and
    only need to check one y-BBST, because the X range directly corresponds to one
    subtree. In general, however, we will only need to check ![O(\lg n)](img/0fd0ce085d9f23267b01ffb501477a39.png
    "O(\lg n)") subtrees.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有另一个例子 (4,4) x (7,7) 包括。这一次我们很幸运，只需要检查一个 y-BBST，因为 X 范围直接对应于一个子树。然而，一般情况下，我们只需要检查
    ![O(\lg n)](img/0fd0ce085d9f23267b01ffb501477a39.png "O(\lg n)") 个子树。
- en: It should be easy to see that query time is ![O(\lg^2 n)](img/b7ef8692a54deb6714de0e7e358c6b30.png
    "O(\lg^2 n)") (since we may need to perform a 1-D range query on ![O(\lg n)](img/0fd0ce085d9f23267b01ffb501477a39.png
    "O(\lg n)") trees, and each query takes ![O(\lg n)](img/0fd0ce085d9f23267b01ffb501477a39.png
    "O(\lg n)") time). Perhaps less obviously, this scheme only takes up ![O(n\lg
    n)](img/4b53576f2c8b2cc981b4e3b09f25e252.png "O(n\lg n)") space. Furthermore,
    we can actually get the query time down to ![O(\lg n)](img/0fd0ce085d9f23267b01ffb501477a39.png
    "O(\lg n)"), using a trick called *fractional cascading*. But that’s for [another
    post!](http://blog.ezyang.com/2012/03/you-could-have-invented-fractional-cascading/)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 查询时间为 ![O(\lg^2 n)](img/b7ef8692a54deb6714de0e7e358c6b30.png "O(\lg^2 n)")，这是很容易理解的（因为我们可能需要在
    ![O(\lg n)](img/0fd0ce085d9f23267b01ffb501477a39.png "O(\lg n)") 棵树上执行一维范围查询，每次查询花费
    ![O(\lg n)](img/0fd0ce085d9f23267b01ffb501477a39.png "O(\lg n)") 的时间）。或许不太明显的是，这种方案只占用
    ![O(n\lg n)](img/4b53576f2c8b2cc981b4e3b09f25e252.png "O(n\lg n)") 的空间。此外，我们实际上可以通过一种称为*分数级联*的技巧将查询时间降低到
    ![O(\lg n)](img/0fd0ce085d9f23267b01ffb501477a39.png "O(\lg n)")。但这是另一篇[博文！](http://blog.ezyang.com/2012/03/you-could-have-invented-fractional-cascading/)
