- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的指针网络意味着我们需要替换树中*每一个*节点！当寻找持久性更新时，额外的循环指针对我们造成了不利影响。
- en: 'date: 2024-07-01 18:18:23'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-07-01 18:18:23
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'You could have invented zippers : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 因此，在单个节点上，我们希望快速访问父节点和子节点以及快速更新。快速访问意味着我们需要指向远离这个节点的指针，快速更新意味着我们需要消除指向这个节点的指针。
- en: 来源：[http://blog.ezyang.com/2010/04/you-could-have-invented-zippers/](http://blog.ezyang.com/2010/04/you-could-have-invented-zippers/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 指针的流动自然地从树的根部流向叶子，像蓝莓馅饼一样容易走到一个节点的子节点。
- en: 'In the beginning, there was a binary tree:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一开始，有一个二叉树：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The flow of pointers ran naturally from the root of the tree to the leaves,
    and it was easy as blueberry pie to walk to the children of a node.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你本可以发明拉链：ezyang's博客
- en: 'Unfortunately, given a node, there was no good way to find out its parent!
    If you only needed efficient parent access, though, you could just use a single
    pointer in the other direction:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，给定一个节点，没有好的方法找出其父节点！如果只需要高效的父节点访问，你可以简单地在另一个方向使用单个指针：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The flow of pointers then ran from the leaves of the tree to the root:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 指针的流向然后从树的叶子到根部：
- en: 'And of course, put together, you could have the best of both worlds:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，综合起来，你可以拥有两者的最佳：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Our data structure had become circular, but as a result we had extremely efficient
    ways to walk up and down the tree, as well as insert, delete and move nodes, simply
    by mutating the relevant pointers on our node, its children and its parent.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的数据结构已经变成了循环的，但结果是我们有了非常高效的方法来在树上上下移动，以及插入、删除和移动节点，只需通过改变节点、其子节点和其父节点上的相关指针进行变化。
- en: '*Trouble in paradise.* Pointer tricks are fine and good for the mutable story,
    but we want immutable nodes. We want nodes that won''t change under our nose because
    someone else decided to muck around the pointer.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*天堂出问题了。* 指针技巧对于可变的情况来说没问题，但我们想要的是不可变的节点。我们想要的节点不会在我们不知情的情况下发生变化，因为其他人决定乱动指针。'
- en: In the case of `ctree`, we can use a standard practice called *path copying*,
    where we only need to change the nodes in the path to the node that changed.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`ctree`，我们可以使用一种称为*路径复制*的标准做法，我们只需要更改到节点变更的路径上的节点。
- en: 'In fact, path copying is just a specific manifestation of the rule of immutable
    updates: if you replace (i.e. update) something, you have to replace anything
    that points to it, recursively. In a `ptree`, we''d need to know the subtree of
    the updated node and change all of them.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，路径复制只是不可变更新规则的一个具体表现：如果你替换（即更新）了某些东西，你必须递归地替换指向它的任何东西。在`ptree`中，我们需要知道更新节点的子树并更改它们全部。
- en: 'But `btree` fails pretty spectacularly:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 但是`btree`失败得相当惨重：
- en: Our web of pointers has meant we need to replace *every* single node in the
    tree! The extra circular pointers work to our detriment when looking for a persistent
    update.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 指针的流动自然地从树的根部流向叶子，轻而易举地走到一个节点的子节点。
- en: What we'd like to do is somehow combine the `ptree` and the `ctree` more intelligently,
    so we don't end up with a boat of extra pointers, but we still can find the children
    and the parent of a node.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要做的是以更智能的方式结合`ptree`和`ctree`，这样我们就不会得到一堆额外的指针，但我们仍然可以找到节点的子节点和父节点。
- en: 'Here, we make the critical simplifying assumption: we only care about efficient
    access of parents and children as well as updates *of a single node.* This is
    not actually a big deal in a world of immutable data structures: the only reason
    to have efficient updates on distinct nodes is to have a modification made by
    one code segment show up in another, and the point of immutability is to stop
    that spooky action at a distance.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们做出了关键的简化假设：我们只关心对单个节点的父母和子女的高效访问以及更新。快速访问意味着我们需要指向远离这个节点的指针，快速更新意味着我们需要消除指向这个节点的指针。
- en: So, on a single node, we want fast access to the parent and children and fast
    updates. Fast access means we need pointers going away from this node, fast updates
    means we need to eliminate pointers going into this node.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: Easy! Just flip some pointers (shown in red.)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 很简单！只需翻转一些指针（显示为红色）。
- en: Congratulations, the data structure you see here is what we call a zipper! The
    only task left for us now is to figure out how we might actually encode this in
    a `struct` definition. In the process, we'll assign some names to the various
    features inside this diagram.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你看到的数据结构就是我们称之为拉链的东西！现在我们唯一要做的任务是弄清楚如何在`struct`定义中实际编码它。在此过程中，我们将为这个图表内部的各种特性分配一些名称。
- en: 'Let''s consider a slightly more complicated example:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个稍微复杂的例子：
- en: 'We''ve introduced a few more notational conveniences: triangles represent the
    tree attached to a given node when we don''t care about any of its subnodes. The
    squares are the values attached to any given node (we''ve shown them explicitly
    because the distinction between the node and its data is important.) The red node
    is the node we want to focus around, and we''ve already gone and flipped the necessary
    pointers (in red) to make everything else accessible.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们引入了一些符号便利：三角形代表与给定节点连接的树，当我们不关心任何子节点时。正方形是附加到任何给定节点的值（我们明确显示它们，因为节点与其数据的区别很重要）。红色节点是我们想要围绕的节点，我们已经翻转了必要的指针（红色）使其他所有东西都可以访问。
- en: When we're at this location, we can either traverse the tree, or go up the red
    arrow pointed away from the green node; we'll call the structure pointed to by
    this arrow a context. The combination of a tree and a context gives us a location
    in the zipper.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在这个位置时，我们可以遍历树，或者沿着指向远离绿色节点的红色箭头上升；我们将这个箭头指向的结构称为上下文。树和上下文的结合给我们在拉链中的一个位置。
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The context, much like the tree, is a recursive data-structure. In the diagram
    below, it is precisely the node shaded in black. It's not a normal node, though,
    since it's missing one of its child pointers, and may contain a pointer to its
    own parent.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 就像树一样，上下文也是一个递归数据结构。在下面的图表中，它正是被涂黑的节点。然而，它不是一个普通的节点，因为它缺少一个子节点指针，并且可能包含指向它自己父节点的指针。
- en: The particular one that this location contains is a "right context", that is,
    the arrow leading to the context points to the right (shown in black in the following
    diagram).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特定位置包含的是"右上下文"，也就是说，指向上下文的箭头指向右边（如下图所示为黑色）。
- en: As you can see, for our tree structure, a context contains another context,
    a tree, and a value.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，在我们的树结构中，上下文包含另一个上下文、一棵树和一个值。
- en: 'Similarly, a "left context" corresponds to an arrow pointing to the left. It
    contains the same components, although it may not be quite obvious from the diagram
    here: where''s the recursive subcontext? Well, since we''re at the top of the
    tree, instead we have a "top context", which doesn''t contain any values. It''s
    the moral equivalent of `Nothing`.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，"左上下文"对应于指向左边的箭头。它包含相同的组件，尽管从这里的图表可能不太明显：递归子上下文在哪里？好吧，因为我们在树的顶部，所以我们有一个"顶部上下文"，它不包含任何值。这相当于`Nothing`的道德等价物。
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And there we have it! All the pieces you need to make a zipper:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！你需要制作一个拉链的所有部分：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Exercises:*'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*练习：*'
- en: Write functions to move up, down-left and down-right our definition of `Tree`.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写函数以向上、向左下和向右下移动我们的`Tree`定义。
- en: If we had the alternative tree definition `data Tree a = Leaf a | Branch Tree
    a) (Tree a)`, how would our context definition change?
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们有另一种树的定义 `data Tree a = Leaf a | Branch Tree a) (Tree a)`，我们的上下文定义会如何改变？
- en: Write the data and context types for a linked list.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为链表编写数据和上下文类型。
- en: '*Further reading:* The original crystallization of this pattern can be found
    in [Huet''s paper (PDF)](http://www.st.cs.uni-saarland.de/edu/seminare/2005/advanced-fp/docs/huet-zipper.pdf),
    and two canonical sources of introductory material are at [Wikibooks](http://en.wikibooks.org/wiki/Haskell/Zippers)
    and [Haskell Wiki](http://www.haskell.org/haskellwiki/Zipper). From there, there
    is a fascinating discussion about how the differentiation of a type results in
    a zipper! See [Conor''s paper (PDF)](http://www.cs.nott.ac.uk/~ctm/diff.pdf),
    the Wikibooks article, and also Edward Kmett''s post on using [generating functions](http://comonad.com/reader/2008/generatingfunctorology/)
    to introduce more exotic datatypes to the discussion.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*进一步阅读：* 这种模式的最初晶化可以在[Huet的论文（PDF）](http://www.st.cs.uni-saarland.de/edu/seminare/2005/advanced-fp/docs/huet-zipper.pdf)中找到，两个入门材料的经典来源在[维基书籍](http://en.wikibooks.org/wiki/Haskell/Zippers)和[Haskell
    Wiki](http://www.haskell.org/haskellwiki/Zipper)。从那里，关于类型微分如何导致拉链的迷人讨论！请参阅[Conor的论文（PDF）](http://www.cs.nott.ac.uk/~ctm/diff.pdf)，维基书籍文章，以及Edward
    Kmett在使用[生成函数](http://comonad.com/reader/2008/generatingfunctorology/)引入更多异国情调数据类型讨论的文章。'
