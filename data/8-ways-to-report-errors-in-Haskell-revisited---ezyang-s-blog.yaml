- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:41'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:41'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: '8 ways to report errors in Haskell revisited : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8种在Haskell中报告错误的方式再访：ezyang的博客
- en: 来源：[http://blog.ezyang.com/2011/08/8-ways-to-report-errors-in-haskell-revisited/](http://blog.ezyang.com/2011/08/8-ways-to-report-errors-in-haskell-revisited/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2011/08/8-ways-to-report-errors-in-haskell-revisited/](http://blog.ezyang.com/2011/08/8-ways-to-report-errors-in-haskell-revisited/)
- en: In 2007, Eric Kidd wrote a quite popular article named [8 ways to report errors
    in Haskell](http://www.randomhacks.net/articles/2007/03/10/haskell-8-ways-to-report-errors/).
    However, it has been four years since the original publication of the article.
    Does this affect the veracity of the original article? Some names have changed,
    and some of the original advice given may have been a bit... dodgy. We’ll take
    a look at each of the recommendations from the original article, and also propose
    a new way of conceptualizing all of Haskell’s error reporting mechanisms.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 2007年，Eric Kidd写了一篇相当流行的文章，名为[8 ways to report errors in Haskell](http://www.randomhacks.net/articles/2007/03/10/haskell-8-ways-to-report-errors/)。然而，自原文发表以来已经过去四年了。这是否会影响原文章的真实性？一些名称已经更改，原来给出的建议可能有些...靠不住。我们将审视原始文章中的每一个建议，并提出一种新的概念来理解Haskell的所有错误报告机制。
- en: I recommend reading this article side-to-side with the old article.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议你将这篇文章与旧文章并列阅读。
- en: 1\. Use error
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1\. 使用error
- en: 'No change. My personal recommendation is that you should only use `error` in
    cases which imply *programmer* error; that is, you have some invariant that only
    a programmer (not an end-user) could have violated. And don’t forget, you should
    probably see if you can enforce this invariant in the type system, rather than
    at runtime. It is also good style to include the name of the function which the
    `error` is associated with, so you say “myDiv: division by zero” rather than just
    “Division by zero.”'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 没有改变。我个人的建议是，只有在涉及*程序员*错误的情况下才使用`error`；也就是说，你有一些不变量只有程序员（而不是最终用户）可能会违反。不要忘记，你可能应该看看能否在类型系统中强制执行这个不变量，而不是在运行时。在与`error`相关联的函数名称中包含函数的名称也是良好的风格，这样你可以说“myDiv：除以零”而不仅仅是“除以零”。
- en: 'Another important thing to note is that `error e` is actually an abbreviation
    for `throw (ErrorCall e)`, so you can explicitly pattern match against this class
    of errors using:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的事情要注意的是，`error e`实际上是`throw (ErrorCall e)`的缩写，所以你可以显式地模式匹配这类错误，例如：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: However, testing for string equality of error messages is bad juju, so if you
    do need to distinguish specific `error` invocations, you may need something better.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，测试错误消息的字符串相等性是不好的做法，所以如果你确实需要区分特定的`error`调用，你可能需要更好的东西。
- en: 2\. Use Maybe a
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2\. 使用Maybe a
- en: No change. Maybe is a convenient, universal mechanism for reporting failure
    when there is only one possible failure mode and it is something that a user probably
    will want to handle in pure code. You can easily convert a returned Maybe into
    an error using `fromMaybe (error "bang") m`. Maybe gives no indication what the
    error was, so it’s a good idea for a function like `head` or `tail` but not so
    much for `doSomeComplicatedWidgetThing`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 没有改变。Maybe是一个方便的、通用的机制，用于在只有一种可能的失败模式和用户可能会想要在纯代码中处理的情况下报告失败。你可以很容易地将返回的Maybe转换成一个错误，使用`fromMaybe
    (error "bang") m`。Maybe不提供错误的指示，所以对于像`head`或`tail`这样的函数是个好主意，但对于`doSomeComplicatedWidgetThing`这样的函数就不是那么好了。
- en: 3\. Use Either String a
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3\. 使用Either String a
- en: I can’t really recommend using this method in any circumstance. If you don’t
    need to distinguish errors, you should have used `Maybe`. If you don’t need to
    handle errors while you’re in pure code, use exceptions. If you need to distinguish
    errors in pure code, for the love of god, don’t use strings, make an enumerable
    type!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何情况下，我实际上不能推荐使用这种方法。如果你不需要区分错误，你应该使用`Maybe`。如果你不需要在纯代码中处理错误，使用异常。如果你需要在纯代码中区分错误，请不要使用字符串，而是制作一个可枚举类型！
- en: 'However, in base 4.3 or later (GHC 7), this monad instance comes for free in
    `Control.Monad.Instances`; you no longer have to do the ugly `Control.Monad.Error`
    import. But there are some costs to having changed this: see below.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在base 4.3或更高版本（GHC 7）中，这个monad实例在`Control.Monad.Instances`中是免费的；你不再需要做丑陋的`Control.Monad.Error`导入。但是改变这一点也有一些成本：请参见下文。
- en: 4\. Use Monad and fail to generalize 1-3
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4\. 使用Monad和fail来泛化1-3
- en: If you at all a theoretician, you reject `fail` as an abomination that should
    not belong in `Monad`, and refuse to use it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是一个理论家，你会拒绝将`fail`作为不应该属于`Monad`的憎恶，并拒绝使用它。
- en: 'If you’re a bit more practical than that, it’s tougher to say. I’ve already
    made the case that catching string exceptions in pure code isn’t a particularly
    good idea, and if you’re in the `Maybe` monad `fail` simply swallows your nicely
    written exception. If you’re running base 4.3, `Either` will not treat `fail`
    specially either:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您比这更加实际，那么情况就更加复杂。我已经提到，在纯代码中捕获字符串异常不是一个特别好的主意，如果您在`Maybe` monad中，`fail`会简单地吞噬您精心编写的异常。如果您运行的是base
    4.3，`Either`也不会对`fail`特别处理：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: So you have this weird generalization that doesn’t actually do what you want
    most of the time. It just might (and even so, only barely) come in handy if you
    have a custom error handling application monad, but that’s it.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，您有这种不真正做您大部分时间所需的奇怪泛化。它可能会（即使如此，仅仅是勉强）在您有一个自定义错误处理应用monad时有点用处，但仅此而已。
- en: It’s worth noting `Data.Map` does not use this mechanism anymore.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，`Data.Map`不再使用这种机制。
- en: 5\. Use MonadError and a custom error type
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5\. 使用MonadError和自定义错误类型
- en: '`MonadError` has become a lot more reasonable in the new world order, and if
    you are building your own application monad it’s a pretty reasonable choice, either
    as a transformer in the stack or an instance to implement.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在新的世界秩序中，`MonadError`变得更加合理了，如果您正在构建自己的应用monad，这是一个相当合理的选择，无论是作为堆栈中的转换器还是要实现的实例。
- en: 'Contrary to the old advice, you can use `MonadError` on top of `IO`: you just
    transform the `IO` monad and lift all of your IO actions. I’m not really sure
    why you’d want to, though, since IO has it’s own nice, efficient and extensible
    error throwing and catching mechanisms (see below.)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 与旧建议相反，您可以在`IO`的顶部使用`MonadError`：您只需转换`IO` monad并提升所有IO操作。尽管如此，我不太确定为什么您会想要这样做，因为IO有自己的良好、高效且可扩展的错误抛出和捕获机制（见下文）。
- en: 'I’ll also note that canonicalizing errors that the libraries you are interoperating
    is a good thing: it makes you think about what information you care about and
    how you want to present it to the user. You can always create a `MyParsecError`
    constructor which takes the parsec error verbatim, but for a really good user
    experience you should be considering each case individually.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我还要注意，规范化与您正在交互的库中的错误是一件好事：它让您考虑您关心的信息以及您希望向用户展示信息的方式。您总是可以创建一个`MyParsecError`构造器，它直接使用parsec错误，但是对于真正良好的用户体验，您应该考虑每种情况。
- en: 6\. Use throw in the IO monad
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 6\. 在IO monad中使用throw
- en: 'It’s not called `throwDyn` and `catchDyn` anymore (unless you import `Control.OldException`),
    just `throw` and `catch`. You don’t even need a Typeable instance; just a trivial
    `Exception` instance. I highly recommend this method for unchecked exception handling
    in IO: despite the mutation of these libraries over time, the designers of Haskell
    and GHC’s maintainers have put a lot of thought into how this exceptions should
    work, and they have broad applicability, from normal synchronous exception handling
    to *asynchronous* exception handling, which is very nifty. There are a load of
    bracketing, masking and other functions which you simply cannot do if you’re passing
    Eithers around.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在不再称为`throwDyn`和`catchDyn`（除非您导入`Control.OldException`），只是`throw`和`catch`。您甚至不需要一个Typeable实例；只需要一个微不足道的Exception实例。我强烈推荐在IO中用这种方法处理未经检查的异常：尽管随着时间的推移这些库的变化，Haskell和GHC的维护者们对这些异常应该如何工作已经进行了深思熟虑，并且它们具有广泛的适用性，从正常的同步异常处理到*异步*异常处理，这非常巧妙。有很多bracketing、masking和其他函数，如果您在传递Eithers的话，您根本做不到这些。
- en: Make sure you do use `throwIO` and not `throw` if you are in the IO monad, since
    the former guarantees ordering; the latter, not necessarily.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您在IO monad中使用`throwIO`而不是`throw`，因为前者保证了顺序；后者则不一定。
- en: 7\. Use ioError and catch
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7\. 使用ioError和catch
- en: No reason to use this, it’s around for hysterical raisins.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 没有理由使用这个，它存在是因为有些历史原因。
- en: 8\. Go nuts with monad transformers
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 8\. 在monad transformers中大肆发挥
- en: This is, for all intents and purposes, the same as 5; just in one case you roll
    your own, and in this case you compose it with transformers. The same caveats
    apply. Eric does give good advice here shooing you away from using this with IO.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有情况下，这与第5种情况是相同的；只是在一个情况中，您自己编写，而在这种情况下，您使用transformers组合它。同样的注意事项适用。Eric在这里给出了一个很好的建议，劝阻您不要在IO中使用这个。
- en: '* * *'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Here are some new mechanisms which have sprung up since the original article
    was published.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些自原始文章发布以来涌现的新机制。
- en: 9\. Checked exceptions
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 9\. 已检查的异常
- en: Pepe Iborra wrote a nifty [checked exceptions library](http://hackage.haskell.org/package/control-monad-exception)
    which allows you to explicitly say what `Control.Exception` style exceptions a
    piece of code may throw. I’ve never used it before, but it’s gratifying to know
    that Haskell’s type system can be (ab)used in this way. Check it out if you don’t
    like the fact that it’s hard to tell if you caught all the exceptions you care
    about.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Pepe Iborra 写了一个非常巧妙的 [checked exceptions library](http://hackage.haskell.org/package/control-monad-exception)，它允许你明确指出一段代码可能抛出哪些
    `Control.Exception` 风格的异常。我以前从未使用过它，但知道 Haskell 的类型系统可以（被滥用）这样使用是令人满意的。如果你不喜欢很难确定是否捕获了所有你关心的异常，可以去看看它。
- en: 10\. Failure
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 10\. 失败
- en: The [Failure typeclass](http://hackage.haskell.org/packages/archive/failure/0.1.0.1/doc/html/Control-Failure.html)
    is a really simple library that attempts to solve the interoperability problem
    by making it easy to wrap and unwrap third-party errors. I’ve used it a little,
    but not enough to have any authoritative opinion on the matter. It’s also worth
    taking a look at the [Haskellwiki page](http://www.haskell.org/haskellwiki/Failure).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[Failure typeclass](http://hackage.haskell.org/packages/archive/failure/0.1.0.1/doc/html/Control-Failure.html)
    是一个非常简单的库，试图通过简化包装和解包第三方错误来解决互操作性问题。我用过一点点，但不足以对此事发表权威意见。还值得看一看 [Haskellwiki 页面](http://www.haskell.org/haskellwiki/Failure)。'
- en: Conclusion
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论
- en: 'There are two domains of error handling that you need to consider: *pure errors*
    and *IO errors*. For IO errors, there is a very clear winner: the mechanisms specified
    in `Control.Exception`. Use it if the error is obviously due to an imperfection
    in the outside universe. For pure errors, a bit more taste is necessary. `Maybe`
    should be used if there is one and only one failure case (and maybe it isn’t even
    that big of a deal), `error` may be used if it encodes an *impossible* condition,
    string errors may be OK in small applications that don’t need to react to errors,
    custom error types in those that do. For interoperability problems, you can easily
    accomodate them with your custom error type, or you can try using some of the
    frameworks that other people are building: maybe one will some day gain critical
    mass.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要考虑两个错误处理领域：*纯错误* 和 *IO 错误*。对于 IO 错误，有一个非常明确的选择：`Control.Exception` 中指定的机制。如果错误明显是由于外部环境的不完善造成的，请使用它。对于纯错误，需要稍微有些品味。如果只有一个失败的情况（也许甚至不是什么大不了的事），应该使用
    `Maybe`；如果编码了一个*不可能*的条件，可以使用 `error`；在不需要对错误做出反应的小应用程序中，字符串错误可能是可以接受的；而在需要对其做出反应的应用程序中，则可以使用自定义错误类型。对于互操作性问题，你可以很容易地通过自定义错误类型来解决它们，或者尝试使用一些其他人正在构建的框架：也许某一天会达到关键质量。
- en: 'It should be clear that there is a great deal of choice for Haskell error reporting.
    However, I don’t think this choice is unjustified: each tool has situations which
    are appropriate for its use, and one joy of working in a high level language is
    that error conversion is, no really, not that hard.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 应该清楚地指出，Haskell 的错误报告有很多选择。但是，我认为这种选择并非没有道理：每种工具都有适合其使用的情况，而在高级语言中工作的一大乐趣就是错误转换并不是那么难。
