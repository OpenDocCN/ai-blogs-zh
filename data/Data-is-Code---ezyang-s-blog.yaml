- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '分类: 未分类'
- en: 'date: 2024-07-01 18:18:08'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '日期: 2024-07-01 18:18:08'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Data is Code : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据即代码：ezyang的博客
- en: 来源：[http://blog.ezyang.com/2010/09/data-is-code/](http://blog.ezyang.com/2010/09/data-is-code/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/09/data-is-code/](http://blog.ezyang.com/2010/09/data-is-code/)
- en: 'Yesterday I had the pleasure of attending a colloquium given by [Chung-Chieh
    Shan](http://www.cs.rutgers.edu/~ccshan/) on [Embedding Probabilistic Languages](http://www.cs.rutgers.edu/news/colloquia/?action=view&colloquium_id=4263&organization_id=1).
    A full account for the talk can be found in [this paper](http://okmij.org/ftp/kakuritu/dsl-paper.pdf),
    so I want to focus in on one specific big idea: the idea that *data is code.*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 昨天，我有幸参加了[Chung-Chieh Shan](http://www.cs.rutgers.edu/~ccshan/)的学术报告，主题是[嵌入式概率语言](http://www.cs.rutgers.edu/news/colloquia/?action=view&colloquium_id=4263&organization_id=1)。关于报告的完整内容可以在[本文](http://okmij.org/ftp/kakuritu/dsl-paper.pdf)中找到，所以我想专注于一个特定的大观点：即*数据即代码*的理念。
- en: '* * *'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Lispers are well acquainted with the mantra, “code is data,” the notion that
    behind every source code listing there is a data structure of cons-cells and tags
    representing the code that can constructed, modified and evaluated. With this
    framework, a very small set of data is code: `''(cons 1 (cons 2 ()))` is code
    but `''((.5 ((.5 #t) (.5 #f))) (.5 ((.5 #t))))` isn’t.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 'Lisp程序员熟悉的口头禅是，“代码即数据”，这个概念认为每个源代码清单背后都有一个由cons单元和标签组成的数据结构，表示可以构建、修改和评估的代码。在这个框架下，一小部分数据是代码：`''(cons
    1 (cons 2 ()))`是代码，但`''((.5 ((.5 #t) (.5 #f))) (.5 ((.5 #t))))`则不是。'
- en: 'Under what circumstances could the latter be code? Consider the following question
    (a hopefully unambiguous phrasing of the [Boy-Girl paradox](http://en.wikipedia.org/wiki/Boy_or_Girl_paradox)):'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在什么情况下后者可以成为代码呢？考虑以下问题（一种希望明确表达的[男孩或女孩悖论](http://en.wikipedia.org/wiki/Boy_or_Girl_paradox)）：
- en: You close your eyes. I hand you a red ball or a blue ball. Then, I will hand
    you a red ball or a blue ball. You then peek and discover that at least one of
    the balls is red. What are the odds that the first one was red?
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你闭上眼睛。我会递给你一个红球或一个蓝球。然后，我会再递给你一个红球或一个蓝球。然后你偷偷看了一眼，发现至少有一个球是红色的。第一个球是红色的概率是多少？
- en: 'Those of you familiar with probability might go write up the probability table
    and conclude the answer is `2/3`, but for those who are less convinced, you might
    go write up some code to simulate the situation:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 了解概率的你们可能会编写概率表格，并得出答案是`2/3`，但对于那些不太确信的人来说，可能会去编写一些代码来模拟这种情况：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Where `dist` is some function that randomly picks a variable from a distribution,
    and `fail` reports a contradiction and ignores the generated universe. This code
    is data, but it is data in a much deeper way than just an abstract syntax tree.
    In particular, it encodes the *tree of inference* `''((.5 ((.5 #t) (.5 #f))) (.5
    ((.5 #t))))`:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '其中`dist`是从分布中随机选择变量的某个函数，而`fail`则报告矛盾并忽略生成的宇宙。这段代码是数据，但它比抽象语法树更深刻地是数据。特别是，它编码了推理树
    `''((.5 ((.5 #t) (.5 #f))) (.5 ((.5 #t))))`：'
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '* * *'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '*Aside.* Interested Haskellers may now find it instructive to go off and write
    the naive and continuation passing implementations of the probability monad suggested
    by the above code, a monad which, when run, returns a list of the probabilities
    of all possible outcomes. It is an interesting technical detail, which will possibly
    be the subject of a future blog post, but it''s treated quite well in sections
    2.2, 2.3 and 2.4 of the [above linked paper](http://okmij.org/ftp/kakuritu/dsl-paper.pdf)
    and fairly standard practice in the continuation-using community.'
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*旁注.* 对Haskeller来说，现在可以尝试去编写上述代码建议的概率单子的朴素和延续传递实现，这是一个返回所有可能结果概率列表的单子。这是一个有趣的技术细节，可能会成为未来博客文章的主题，但在[上述链接的论文](http://okmij.org/ftp/kakuritu/dsl-paper.pdf)的2.2、2.3和2.4节中已经很好地讨论了这个问题，并且在延续使用社区中是相当标准的做法。'
- en: 'Now, I haven’t really shown you how data is code; rather, I’ve shown how code
    can map onto an “abstract syntax tree” representation or an “inference tree” representation.
    However, unlike an AST, we shouldn’t naively build out the entire inference tree:
    inference trees whose nodes have many children can branch out exponentially, and
    we’d run out of memory before we could do what is called *exact inference*: attempt
    to build out the entire inference tree and look at every result.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我并没有真正向你展示数据如何成为代码；相反，我展示了代码如何映射到“抽象语法树”表示或“推理树”表示。然而，与AST不同的是，我们不应该简单地构建整个推理树：推理树的节点如果有许多子节点，会呈指数级分支，我们在尝试进行*精确推理*时会在内存耗尽之前做不了多少事情。
- en: However, if we follow the mantra that “data is code” and we represent our tree
    as a *lazy* data structure, where each child of a node is actually a continuation
    that says “build out this subtree for me,” we recover an efficient representation.
    These continuation can, themselves, contain more continuations, which are to be
    placed at the leaves of the subtree, to be applied with the value of the leaf.
    Thus our *data* structure is, for the most part, represented by *code.* (This
    is in fact how all lazy data structures work, but it’s particularly poignant in
    this case.)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们遵循“数据即代码”的口头禅，并将我们的树表示为*惰性*数据结构，其中每个节点的子节点实际上是一个延续，表示“为我构建这个子树”，我们可以恢复一个高效的表示。这些延续本身可以包含更多的延续，这些延续要放置在子树的叶子节点上，并且可以用叶子的值应用。因此，我们的*数据*结构在很大程度上由*代码*表示。（事实上，所有惰性数据结构都是这样工作的，但在这种情况下尤为显著。）
- en: Even more powerfully, first-class support for delimited continuations means
    that you can take a regular function `() -> e` and reify it into a (partial) tree
    structure, with more continuations as children ready to themselves be reified.
    We can, of course, evaluate this tree structure to turn it back into a function.
    (Monads in Haskell cheat a little bit in that, since lambdas are everywhere, you
    get this representation for free from the abstraction’s interface.)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 更具有说服力的是，对于分界延续的一流支持意味着你可以将一个常规函数 `() -> e` 实体化为一个（部分）树结构，其中更多的延续作为子节点准备好自行实体化。当然，我们可以评估这个树结构，以将其转回成一个函数。（在
    Haskell 中，Monad 通过在抽象接口中无处不在的 lambda 使这种表示免费获得了一些小技巧。）
- en: '* * *'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'What I find really fascinating is that a whole class of algorithms for efficient
    probabilistic inference become *obvious* when recast on top of an inference tree.
    For example:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现真正迷人的是，一整类用于高效概率推断的算法，在推理树顶端重新组合时变得*显而易见*。例如：
- en: Variable and bucket elimination corresponds to memoizing continuations,
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量和桶消除对应于记忆化延续，
- en: Rejection sampling corresponds to randomly traversing paths down our tree, discarding
    samples that result in contradictions (`fail`), and
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拒绝采样对应于随机地沿着我们的树遍历路径，丢弃导致矛盾 (`fail`) 的样本，并且
- en: Importance sampling corresponds to randomly traversing a path but switching
    to another branch if one branch fails.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重要性采样对应于随机地遍历路径，但如果一个分支失败，则切换到另一个分支。
- en: Being a shallow embedding, we unfortunately can’t do things like compare if
    two continuations are equal or do complex code analysis. But some preliminary
    experimental results show that this approach is competitive with existing, custom
    built inference engines.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 作为浅层嵌入，遗憾的是我们无法进行像比较两个延续是否相等或进行复杂的代码分析这样的事情。但是一些初步的实验结果显示，这种方法在与现有的专门构建的推理引擎竞争时具有竞争力。
- en: '* * *'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: There’s a bigger story to be told here, one about DSL compilers, where we give
    users the tools to easily implement their own languages, thereby increasing their
    expressiveness and productivity, but *also* allow them to implement their own
    optimizations, thereby not trading away speed that usually is associated with
    just writing an interpreter for your language. We’d like to leverage the existing
    compiler framework but add enhancements for our own problem domain as appropriate.
    We’d like to give behavioral specifications for our problem domains and teach
    the compiler how to figure out the details. It’s not feasible to write a compiler
    that fits everyone, but everyone can have the compiler spirit in them—and I think
    that will have an exciting and liberating effect on software engineering.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个更大的故事待讲述，关于 DSL 编译器，我们给用户提供工具来轻松实现他们自己的语言，从而提高其表达能力和生产力，但*也*允许他们实现自己的优化，从而不会像通常情况下仅编写解释器那样损失速度。我们希望利用现有的编译器框架，但根据适当的情况增加我们自己问题领域的增强功能。我们希望为我们的问题域提供行为规范，并教导编译器如何解决细节问题。编写一个适合所有人的编译器是不可行的，但每个人都可以拥有编译器精神
    —— 我认为这将对软件工程产生令人兴奋和解放的影响。
