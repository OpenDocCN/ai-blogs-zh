["```\n{-# LANGUAGE GADTs #-}\nimport Control.Monad.Writer\n\ndata Expr a where\n    Abs :: (Expr a -> Expr b) -> Expr (a -> b)\n    App :: Expr (a -> b) -> Expr a -> Expr b\n    Int :: Int -> Expr Int\n    Add :: Expr Int -> Expr Int -> Expr Int\n    Print :: String -> Expr a -> Expr a\n\ninstance Show (Expr a) where\n    show (Abs _) = \"Abs\"\n    show (App _ _) = \"App\"\n    show (Int i) = show i\n    show (Add _ _) = \"Add\"\n    show (Print _ _) = \"Print\"\n\ntype M a = Writer String a\ncbneed :: Expr a -> M (Expr a)\ncbneed e@(Abs _) = return e\ncbneed (App (Abs f) e) =\n    let ~(x,w) = run (cbneed e)\n    in cbneed (f (Print w x))\ncbneed e@(Int _) = return e\ncbneed (Add e1 e2) = do\n    Int e1' <- cbneed e1\n    Int e2' <- cbneed e2\n    return (Int (e1' + e2'))\ncbneed (Print s e) = do\n    tell s\n    cbneed e\n\nsample = App (Abs (\\x -> Print \"1\" (Add x x))) (Add (Print \"2\" (Int 2)) (Int 3))\nrun = runWriter\n\n```", "```\nextract :: Functor f => f a -> (a, f ())\ns.t.  m == let (x,y) = extract m in fmap (const x) y\n\n```"]