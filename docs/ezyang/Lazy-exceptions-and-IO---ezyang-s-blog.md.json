["```\nimport Prelude hiding (catch)\nimport Control.Exception\n\nmain :: IO ()\nmain = do\n    t <- safeCall\n    unsafeCall t\n    putStrLn \"Done.\"\n\nsafeCall :: IO String\nsafeCall = do\n    return alwaysFails `catch` errorHandler\n\n--alwaysFails = throw (ErrorCall \"Oh no!\")\nalwaysFails = error \"Oh no!\"\n\nerrorHandler :: SomeException -> IO String\nerrorHandler e = do\n    putStrLn \"Caught\"\n    return \"Ok.\"\nerrorHandler_ e = errorHandler e >> return ()\n\nunsafeCall :: String -> IO ()\nunsafeCall = putStrLn\n\n```", "```\ndef main():\n    t = safeCall()\n    unsafeCall(t)\n    print \"Done\"\n\ndef safeCall():\n    try:\n        return alwaysFails()\n    except:\n        return errorHandler()\n\ndef alwaysFails():\n    raise Exception(\"Oh no!\")\n\ndef errorHandler():\n    print \"Caught.\"\n    return \"Ok.\"\n\ndef unsafeCall(output):\n    print output\n\n```", "```\nCaught.\nOk.\nDone.\n\n```", "```\n*** Exception: Oh no!\n\n```"]