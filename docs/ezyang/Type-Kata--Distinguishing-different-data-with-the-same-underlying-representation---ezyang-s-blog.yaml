- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-07-01 18:18:11'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-07-01 18:18:11
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Type Kata: Distinguishing different data with the same underlying representation
    : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型卡塔：区分具有相同基础表示的不同数据：ezyang的博客
- en: 来源：[http://blog.ezyang.com/2010/08/type-kata-newtypes/](http://blog.ezyang.com/2010/08/type-kata-newtypes/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/08/type-kata-newtypes/](http://blog.ezyang.com/2010/08/type-kata-newtypes/)
- en: '*Punning is the lowest form of humor. And an endless source of bugs.*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*双关语是最低级的幽默形式。也是无尽的错误来源。*'
- en: '*The imperative.* In programming, semantically different data may have the
    same representation (type). Use of this data requires manually keeping track of
    what the extra information about the data that may be in a variable. This is dangerous
    when the alternative interpretation is right *most* of the time; programmers who
    do not fully understand all of the extra conditions are lulled into a sense of
    security and may write code that seems to work, but actually has subtle bugs.
    Here are some real world examples where it is particularly easy to confuse semantics.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*命令式。* 在编程中，语义上不同的数据可能具有相同的表示（类型）。使用这些数据需要手动跟踪关于数据的额外信息。当另一种解释大部分时间是正确的时，这是危险的；不完全理解所有额外条件的程序员会被安全感所蒙蔽，可能编写看似正常工作但实际上存在微妙错误的代码。以下是一些真实世界的例子，其中很容易混淆语义。'
- en: '*Variables and literals.* The following is a space efficient representation
    of boolean variables (`x, y, z`) and boolean literals (`x` or `not x`). Boolean
    variables are simply counted up from zero, but boolean literals are shifted left
    and least significant bit is used to store complement information.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*变量和字面值。* 以下是布尔变量（`x, y, z`）和布尔字面值（`x`或`not x`）的空间高效表示。布尔变量简单地从零开始计数，但布尔字面值被左移，最低有效位用于存储补码信息。'
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Consider, then, the following function:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，考虑以下函数：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'It is not immediately obvious whether or not the `iCtrl`, `iData1` and `iData0`
    arguments correspond to literals or variables: only an understanding of what this
    function does (it makes no sense to disallow muxes with complemented inputs) or
    an inspection of the function body is able to resolve the question for certain
    (the body calls `Gia_LitNot`). Fortunately, due to the shift misinterpreting a
    literal as a variable (or vice versa) will usually result in a spectacular error.
    (Source: [ABC](http://www.eecs.berkeley.edu/~alanmi/abc/))'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 不清楚`iCtrl`、`iData1`和`iData0`参数是否对应字面值或变量：只有了解这个函数的作用（禁止带补码输入的多路复用器是没有意义的）或检查函数体才能确定这个问题（函数体调用`Gia_LitNot`）。幸运的是，由于移位错误地将字面值解释为变量（或反之），通常会导致致命错误。（来源：[ABC](http://www.eecs.berkeley.edu/~alanmi/abc/)）
- en: '*Pointer bits.* It is well known that the lower two bits of a pointer are usually
    unused: on a 32-bit system, 32-bit integers are the finest granularity of alignment,
    which force any reasonable memory address to be divisible by four. Space efficient
    representations may use these two extra bits to store extra information but need
    to mask out the bits when dereferencing the pointer. Building on our previous
    example, consider a pointer representation of variables and literals: if a vanilla
    pointer indicates a variable, then we can use the lowest bit to indicate whether
    or not the variable is complemented or not, to achieve a literal representation.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*指针位。* 众所周知，指针的低两位通常是未使用的：在32位系统上，32位整数是最细粒度的对齐方式，这迫使任何合理的内存地址必须能被四整除。空间高效的表示可能会使用这两个额外位来存储额外信息，但在解引用指针时需要屏蔽这些位。在我们之前的例子基础上，考虑一个变量和字面值的指针表示：如果普通指针表示一个变量，那么我们可以使用最低位来指示变量是否被补码，以实现字面值表示。'
- en: 'Consider the following function:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下函数：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: where `iDiff0` is an `int` field in the `Gia_Obj_t` struct. It is not clear
    whether or not the input pointer or the output pointer may be complemented or
    not. In fact, the input pointer must not be complemented and the output pointer
    will never be complemented.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`iDiff0`是`Gia_Obj_t`结构体中的一个`int`字段。不清楚输入指针或输出指针是否可能带补码。实际上，输入指针不得带补码，输出指针永远不会带补码。
- en: 'Misinterpreting the output pointer as possibly complemented may seem harmless
    at first: all that happens is the lower two bits are masked out, which is a no-op
    on a normal pointer. However, it is actually a critical logic bug: it assumes
    that the returned pointer’s LSB says anything about whether or not the fanin was
    complemented, when in fact the returned bit will always be zero. (Source: [ABC](http://www.eecs.berkeley.edu/~alanmi/abc/))'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最初可能会误将输出指针的互补视为无害：所有发生的只是将低两位掩码掉，这在正常指针上是无操作的。然而，这实际上是一个关键逻辑错误：它假设返回的指针的最低位说出了风扇输入是否被补充，而实际上返回的位将始终为零。（来源：[ABC](http://www.eecs.berkeley.edu/~alanmi/abc/)）
- en: '*Physical and virtual memory.* One of the steps on the road to building an
    operating system is memory management. When implementing this, a key distinction
    is the difference between physical memory (what actually is on the hardware) and
    virtual memory (which your MMU translates from). The following code comes from
    a toy operating system skeleton that students build upon:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*物理内存和虚拟内存。* 在构建操作系统的过程中，内存管理是其中的一个重要步骤。在实现此过程时，关键的区别在于物理内存（实际硬件上的内容）和虚拟内存（由MMU翻译的内容）。以下代码来自学生构建的玩具操作系统框架：'
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Note that though the code distinguishes with a type synonym `uintptr_t` (virtual
    addresses) from `physaddr_t` (physical addresses), the compiler will not stop
    the student from mixing the two up. (Source: [JOS](http://pdos.csail.mit.edu/6.828/2009/overview.html))'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，尽管代码使用了类型同义词`uintptr_t`（虚拟地址）和`physaddr_t`（物理地址）来区分，但编译器不会阻止学生混淆两者。（来源：[JOS](http://pdos.csail.mit.edu/6.828/2009/overview.html)）
- en: '*String encoding.* Given an arbitrary sequence of bytes, there is no canonical
    interpretation of what the bytes are supposed to mean in human language. A decoder
    determines what the bytes probably mean (from out-of-band data like HTTP headers,
    or in-band data like meta tags) and then converts a byte stream into a more structured
    internal memory representation (in the case of Java, UTF-16). However, in many
    cases, the original byte sequence was the most efficient representation of the
    data: consider the space-difference between UTF-8 and UCS-32 for Latin text. This
    encourages developers to use native bytestrings to pass data around (PHP’s string
    type is just a bytestring), but has caused [endless headaches](http://en.wikipedia.org/wiki/Mojibake)
    if the appropriate encoding is not also kept track of. This is further exacerbated
    by the existence of Unicode normalization forms, which preclude meaningful equality
    checks between Unicode strings that may not be in the same normalization form
    (or may be completely un-normalized).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*字符串编码。* 给定任意字节序列，没有一个标准的解释说明这些字节应该如何理解成人类语言。解码器根据超出带外数据（如HTTP标头）或带内数据（如元标签）来确定字节的可能含义，然后将字节流转换为更结构化的内部内存表示（在Java中为UTF-16）。然而，在许多情况下，原始的字节序列是数据的最有效表示方式：考虑UTF-8和UCS-32在拉丁文本上的空间差异。这鼓励开发人员使用本机字节串来传递数据（PHP的字符串类型只是一个字节串），但如果不跟踪适当的编码，这可能会导致[无尽的问题](http://en.wikipedia.org/wiki/Mojibake)。Unicode规范化形式的存在进一步加剧了这一问题，这使得不能对不在同一规范化形式中的Unicode字符串进行有意义的相等性检查（或可能完全未规范化）。'
- en: '*Endianness.* Given four bytes corresponding to a 32-bit integer, there is
    no canonical “number” value that you may assign to the bytes: what number you
    get out is dependent on the endianness of your system. The sequence of bytes `0A
    0B 0C 0D` may be interpreted as `0x0A0B0C0D` (big endian) or `0x0D0C0B0A` (little
    endian).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*字节序。* 给定四个字节对应的32位整数，没有一个标准的“数值”可以分配给这些字节：你得到的数字取决于系统的字节序。字节序列`0A 0B 0C 0D`可以被解释为`0x0A0B0C0D`（大端序）或`0x0D0C0B0A`（小端序）。'
- en: '*Data validation.* Given a data structure representing a human, with fields
    such as “Real name”, “Email address” and “Phone number”, there are two distinct
    interpretations that you may have of the data: the data is trusted to be correct
    and may be used to directly perform an operation such as send an email, or the
    data is unvalidated and cannot be trusted until it is processed. The programmer
    must remember what status the data has, or force a particular representation to
    never contain unvalidated data. “Taint” is a language feature that dynamically
    tracks the validated/unvalidated status of this data.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*数据验证。* 给定一个表示人类的数据结构，包含“真实姓名”、“电子邮件地址”和“电话号码”等字段，可能有两种不同的数据解释：数据被信任为正确，可以直接用于执行操作（例如发送电子邮件），或者数据未经验证，直到处理后才能被信任。程序员必须记住数据的状态，或者强制特定表示永远不包含未验证的数据。“污点”是一种语言特性，动态跟踪此数据的验证/未验证状态。'
- en: '*The kata.* Whenever a data structure (whether simple or complex) could be
    interpreted multiple ways, `newtype` it once for each interpretation.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*挑战任务。* 每当数据结构（无论简单还是复杂）可能有多种解释时，对每种解释都进行一次`newtype`。'
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Identifying when data may have multiple interpretations may not be immediately
    obvious. If you are dealing with underlying representations you did not create,
    look carefully at variable naming and functions that appear to interconvert between
    the same type. If you are designing a high-performance data structure, identify
    *your* primitive data types (which are distinct from `int`, `char`, `bool`, the
    primitives of a general purpose programming language.) Multiple interpretations
    can creep in over time as new features are added to code: be willing to refactor
    (possibly breaking API compatibility) or speculatively newtype important user-visible
    data.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 辨别数据可能存在多种解释的情况可能并不明显。如果你处理的是你没有创建的底层表示，请仔细查看变量命名和看起来在同一类型之间进行相互转换的函数。如果你设计高性能数据结构，请确定*你的*原始数据类型（这些类型不同于`int`、`char`、`bool`，通用编程语言的原始类型）。随着代码增加新功能，多种解释可能逐渐出现：要愿意重构（可能破坏
    API 兼容性）或者推测性地为重要的用户可见数据创建新类型。
- en: 'A common complaint about newtypes is the wrapping and unwrapping of the type.
    While some of this is a necessary evil, it should not be ordinarily necessary
    for end-users to wrap and unwrap the newtypes: the internal representation should
    stay hidden! (This is a closely related but orthogonal property that newtypes
    help enforce.) Try not to export newtype constructors; instead, export smart constructors
    and destructors that do runtime sanity checks and are prefixed with `unsafe`.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有关新类型的常见抱怨是类型的包装和解包。虽然这部分是必要之恶，但普通用户通常不需要包装和解包新类型：内部表示应保持隐藏！（这是一个密切相关但正交的属性，新类型有助于强制执行。）尽量不要导出新类型构造函数；而是导出智能构造函数和解构函数，进行运行时合理性检查，并以`unsafe`为前缀。
- en: 'When an underlying value is wrapped in the newtype, you are indicating to the
    compiler that you believe that the value has a meaningful interpretation under
    that newtype: do your homework when you wrap something! Conversely, you should
    assume that an incoming newtype has the appropriate invariants (it’s a valid UTF-8
    string, its least significant bit is zero, etc.) implied by that newtype: let
    the static type checker do that work for you! Newtypes have no runtime overhead:
    they are strictly checked at compile time.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当底层值被新类型包装时，你告诉编译器你相信该值在该新类型下有一个有意义的解释：当你包装某些东西时要做好你的功课！相反，你应假设传入的新类型具有由该新类型隐含的不变量（它是有效的
    UTF-8 字符串，其最低有效位为零等）：让静态类型检查器为你完成这项工作！新类型在编译时没有运行时开销：它们严格在编译时检查。
- en: '*Applicability.* A newtype is no substitute for an appropriate data structure:
    don’t attempt to do DOM transformations over a bytestring of HTML. Newtypes can
    be useful even when there is only one interpretation of the underlying representation—however,
    the immediate benefit derives primarily from encapsulation. However, newtypes
    are *essential* when there are multiple interpretations of a representation: don’t
    leave home without them!'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*适用性。* 新类型不能替代适当的数据结构：不要试图在 HTML 的字节字符串上进行 DOM 转换。即使在底层表示仅有一种解释的情况下，新类型也可能有用——然而，即时的好处主要来自封装。然而，当表达方式存在多种解释时，新类型是*必不可少的*：不要出门忘记它们！'
