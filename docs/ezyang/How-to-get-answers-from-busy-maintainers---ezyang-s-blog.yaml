- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-07-01 18:18:07'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: 'How to get answers from busy maintainers : ezyang’s blog'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[http://blog.ezyang.com/2010/09/how-to-get-answers-from-busy-maintainers/](http://blog.ezyang.com/2010/09/how-to-get-answers-from-busy-maintainers/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How to get answers from busy maintainers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As one of those “busy maintainers,” I’ve noticed that I assume a certain cognitive
    mode when fielding support requests. This post is about how I deal with support
    requests, but I’ve also seen this behavior widely on other projects. While, as
    the person making the request, you may find such a mentality frustrating and obtuse,
    if you are a fellow developer you can use it in your favor.
  prefs: []
  type: TYPE_NORMAL
- en: What do I think when I see your support request?
  prefs: []
  type: TYPE_NORMAL
- en: '*I want to help you.* If I wasn’t interesting in answering your questions,
    I would have desupported this project. However...'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*I want to fix the issue with as little cognitive effort as possible.* I want
    to use my brain power thinking about new features and theory, not doing sleuthing
    for the user. Relatedly,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*I want to fix the issue with as little real effort as possible.* If I have
    actually *do* things to figure out how to fix your problem, I’m more inclined
    to procrastinate on it. Add a doubling modifier if I’m not sure what I need to
    do. Paradoxically, if I have access to your setup, I might just go and *fix* it,
    because my usual debugging cycle is much faster than, “Ask you to try something
    or get some information and report it to me.”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notice that feature requests operate on a different set of rules. For scratch
    an itch software I may have little interest in features that don’t help me. But
    if I am going to put a feature in that doesn’t immediately help you, I want to
    do it right—just because it works for *you* doesn’t mean it should be in *my*
    codebase. And, of course, the moment it’s someone else trying to get code in,
    my code standards shoot way up.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In accordance with these principals of benevolent laziness, answers to support
    requests you get might be:'
  prefs: []
  type: TYPE_NORMAL
- en: Short,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A guess that it’s some common issue that you may have already noticed while
    Googling (you *did* try Googling it first, right?),
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Asking you for more (sometimes seemingly irrelevant) information,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Asking you to try something that may or may not work, and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Late. (I set aside some time every few weeks to go through their open tickets,
    and you won’t get an answer until then.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So how do you use these facts to your favor?
  prefs: []
  type: TYPE_NORMAL
- en: '*Don’t assume that your problem is the same as someone else’s.* Support requests
    are not bugs! They may be generated by bugs, but every support request has its
    own individual flavor to it, and until its cause is pinned down to a specific
    technical issue, you’re muddying the waters if you decide that your problem is
    the same as some other complicated problem. Reference the existing bug or support
    request in your request and let the maintainer decide.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Give me lots of information, even if you think it’s unnecessary.* Why did
    you make this support request? I can’t speak for everyone, but when I ask for
    help it’s usually because I believe that someone out there has a much more comprehensive
    big picture and because I believe that they will have some insight that I don’t
    have. So why do I have any reason to believe some debugging information that I
    think is useless won’t help someone who is much more attuned to the software divine
    the problem? Furthermore, if I am only looking at support requests once every
    two weeks, you better hope you’ve given me enough information to figure it out
    when I actually look at your request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Relatedly, don’t be tempted to “curate” the information: some of the worst
    debugging sessions I’ve had were because I misinterpreted some evidence I got,
    and then acted on that wrong assumption.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Make it easy for the maintainer to debug the problem.* Minimal test cases,
    minimal test cases, minimal test cases. It’s even better if it’s running code
    that doesn’t require any setting up, but frequently the specific setup will have
    the information the maintainer needs to figure out your problem.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Do your own debugging.* You’ve handed the maintainer a problem that they don’t
    know an answer off the top of their head to. It might be a real bug. If they’re
    particularly accommodating, they’ll try to recreate your problem and then debug
    it from their local setup; if they’re not, they’ll try simulating their debugging
    process through you. You can tell that this is the case when the start asking
    you for specific pieces of information or tweaks. Don’t let them initiate this
    lengthy and time-consuming process: do your own debugging. Because you are seeing
    the problem, you are the best person to actually debug it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '“But,” you might say, “Why should I voluntarily debug *other* people’s code!”
    This case is a little different: this is not legacy code where the original author
    is nowhere to be found: you have a benevolent upstream willing to help you out.
    You have someone to sanity check your results, tell you what tools to use (something
    like PHP will be easy to debug: just edit some source files; something like a
    C application is tougher, but gdb with debug symbols can work wonders), point
    you in the right direction and short-circuit the rest of the process when you
    tell them some key piece of information. The key bit is: if you have a question
    about the software, and you know an experiment you can run to answer that question,
    don’t ask: *run the experiment.*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Make me fix my documentation.* I’m worried about answering your question,
    not necessarily about fixing my software. If there is some doc somewhere that
    was unclear, or some runtime check that could have prevented you from needing
    to ask your question, make me fix it by pointing it out! Different people absorb
    information differently, so it''s good if as many ways as possible to communicate
    some piece of information are available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
