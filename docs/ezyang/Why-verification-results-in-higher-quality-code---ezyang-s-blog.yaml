- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:30'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:30'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Why verification results in higher quality code : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么验证会导致更高质量的代码：ezyang的博客
- en: 来源：[http://blog.ezyang.com/2012/06/why-verification-results-in-higher-quality-code/](http://blog.ezyang.com/2012/06/why-verification-results-in-higher-quality-code/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2012/06/why-verification-results-in-higher-quality-code/](http://blog.ezyang.com/2012/06/why-verification-results-in-higher-quality-code/)
- en: Correctness is overrated. After all, no one knows what it means for any reasonably
    complicated system to be "correct", and even when we do, the mileposts move around
    on a daily basis. With the *raison d'être* of formal verification stripped away,
    can we still consider it a worthy goal?
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 正确性被高估了。毕竟，对于任何合理复杂的系统，“正确”是什么意思都没人知道，即使我们知道了，里程碑每天都在变化。如果去掉形式验证的*raison d'être*，我们还能认为它是一个值得追求的目标吗？
- en: 'Perhaps verification results in higher quality code. But this is not obviously
    true: correctness is not quality. We might hope that high quality code is readable
    and easily understood, that it should be as self-contained and independent from
    the rest of the system, that it is efficient and economical. There is no a priori
    reason to believe that verification would grant us any of these properties. No
    matter how horrible some code is, as long as it is correct, there exists a proof
    which vouches for its correctness.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 或许验证结果会产生更高质量的代码。但这显然并不正确：正确性并非质量。我们可能希望高质量的代码易读且容易理解，应尽可能自包含和独立于系统的其他部分，而且高效且经济。事实上，并没有先验理由相信验证会赋予我们这些属性中的任何一个。无论代码多么糟糕，只要它是正确的，就存在一个可以证明其正确性的证明。
- en: 'But as anyone who has gone through the sweat and tears of verifying a program
    can tell you, formal verification really does make your code better. Here''s the
    secret: proving theorems is really hard. If we want any hope to successfully prove
    something about a program, we *must* to make *reasoning* about the code as easy
    as possible. A program under verification irresistibly gravitates towards it’s
    most “reasonable” form, because otherwise the proofs are simply too arduous to
    carry out. And in this form, the tenets of high quality code follow.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，任何经历过验证程序的辛苦与泪水的人都能告诉你，形式验证确实可以让你的代码更好。这是个秘密：证明定理非常困难。如果我们希望成功地证明关于程序的某些事情，我们必须尽可能使对代码的推理变得简单。经过验证的程序不可避免地朝着其最“合理”的形式发展，因为否则证明就会变得太艰难。而在这种形式下，高质量代码的原则便随之而来。
- en: 'Take for example [Bedrock](http://adam.chlipala.net/bedrock/), a system for
    building verified low-level programs which manipulate pointers and registers.
    These are programs that deal with mutable state, a feature which is well known
    to dramatically increase the difficulty of reasoning. Bedrock, and many systems
    like it, would be dead out of the water if not for the development of an important
    system called [separation logic](http://en.wikipedia.org/wiki/Separation_logic).
    The central idea behind it is so obvious to any experienced practitioner it is
    barely worth stating: private local state is easier to reason about than public
    global state—**modularity** is good. It enforces this through a clever formalism,
    the star operator, which combines two assertions about two regions of memory while
    assuring that the regions are *disjoint*. Regardless, the end result is this:
    if your components are independent, the theorem proving is easy; if your components
    are tangled together, the theorem proving is hard. You do the math.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以 [Bedrock](http://adam.chlipala.net/bedrock/) 为例，这是一个用于构建操作指针和寄存器的验证低级程序的系统。这些程序涉及可变状态，这一特性众所周知地显著增加了推理的难度。Bedrock
    及其类似系统之所以得以存在，主要归功于一种重要系统的开发，称为 [分离逻辑](http://en.wikipedia.org/wiki/Separation_logic)。其核心思想对于任何有经验的从业者来说显而易见，几乎不值得一提：私有局部状态比公共全局状态更易推理——**模块化**是好的。它通过一种巧妙的形式化方法，星号运算符，结合了关于内存两个区域的两个断言，同时确保这些区域是*不交叉*的。不管怎样，最终结果是：如果你的组件是独立的，定理证明就很容易；如果你的组件交织在一起，定理证明就很困难。自己算吧。
- en: But it doesn’t stop there. When different components do interact, the principle
    of **encapsulation** says that I do not want to know all of the gory details of
    a component, just its high-level interface. In theorem prover land, “all of the
    gory details” means unmanageably large facts about many pointers, and a "high-level
    interface" is an *abstract predicate* which rolls up all of these facts into a
    single, cohesive logical fact (“this is a linked list.”) Developing these predicates
    is critical to keeping your theorem statements concise and understandable, and
    in higher-order provers like Bedrock, they can apply not only to data but also
    to code, i.e. function pointers.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但事情并不止于此。当不同的组件相互作用时，**封装**的原则指出，我不想知道一个组件的所有细节，只需知道其高级接口。在定理证明器的世界中，“所有的细节”意味着关于许多指针的难以管理的大量事实，而“高级接口”是一个*抽象谓词*，将所有这些事实卷入一个单一的、连贯的逻辑事实中（“这是一个链表。”）。开发这些谓词对于保持你的定理陈述简洁和易理解至关重要，在像Bedrock这样的高阶证明器中，它们不仅可以适用于数据，还可以适用于代码，即函数指针。
- en: The tenets of high quality code speak for code that is written for humans to
    understand, and not just machines to execute. But code that is written for machines
    to understand have many of the same properties that are valued by humans, for
    if they do not, getting the machine to “understand” becomes an impossible task.
    Computers may be simple-minded, but all that means is code a computer can understand
    is code that you can understand too. And *that* is high quality code.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 高质量代码的准则表明，编写的代码应该是为了人类理解，而不仅仅是为了机器执行。但是，为了让机器理解的代码具有许多人类所重视的相同特性，因为如果没有这些特性，让机器“理解”就变得不可能。计算机可能很简单，但这意味着计算机能理解的代码也是你能理解的代码。而*那*才是高质量的代码。
