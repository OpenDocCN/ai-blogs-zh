["```\n> type Machine input output = input -> output\n\n```", "```\n> data Program input output = Program\n\n```", "```\n> type Interpreter input output = (Program input output, input) -> output\n\n```", "```\n> type Compiler input output = Program input output -> Machine input output\n\n```", "```\ntype Compiler input output = Program input output -> (input -> output)\n\n```", "```\n> type Specializer program input output =\n>     ((program, input) -> output, program) -> (input -> output)\n\n```", "```\n> data In = In\n> data Out = Out\n>\n> type P = Program In Out\n> p :: P\n> p = undefined\n>\n> type I = Interpreter In Out\n> i :: I\n> i = undefined\n\n```", "```\n> s :: Specializer program input output\n> -- s (x, p) i = x (p, i)\n> s = uncurry curry\n\n```", "```\n> type M = Machine In Out\n> m :: M\n> m = s1 (i, p)\n\n```", "```\nMain> :t s1\ns1 :: ((P, In) -> Out, P) -> In -> Out\n\n```", "```\n> type S1 = Specializer P In Out\n> s1 :: S1\n> s1 = s\n\n```", "```\n> type C = Compiler In Out\n> c :: C\n> c = s2 (s1, i)\n\n```", "```\n> type S2 = Specializer I P M\n> s2 :: S2\n> s2 = s\n\n```", "```\n> type IC = I -> C\n> ic :: IC\n> ic = s3 (s2, s1)\n\n```", "```\nMain> :t s3\ns3 :: ((S1, I) -> C, S1) -> I -> Program In Out -> In -> Out\n\n```", "```\nI -> (Program In Out -> (In -> Out))\n\n```", "```\n> type S3 = Specializer S1 I C\n> s3 :: S3\n> s3 = s\n\n```", "```\n> s1ic :: S1 -> IC\n> s1ic = s4 (s3, s2)\n>\n> type S4 = Specializer S2 S1 IC\n> s4 :: S4\n> s4 = s\n\n```", "```\n> s2ic :: S2 -> (S1 -> IC)\n> s2ic = s5 (s4, s3)\n>\n> type S5 = Specializer S3 S2 (S1 -> IC)\n> s5 :: S5\n> s5 = s\n>\n> s3ic :: S3 -> (S2 -> (S1 -> IC))\n> s3ic = s6 (s5, s4)\n>\n> type S6 = Specializer S4 S3 (S2 -> (S1 -> IC))\n> s6 :: S6\n> s6 = s\n\n```", "```\n*Main> :t s (s,s) s\ns (s,s) s\n  :: ((program, input) -> output) -> program -> input -> output\n*Main> :t s (s,s) s s\ns (s,s) s s\n  :: ((input, input1) -> output) -> input -> input1 -> output\n*Main> :t s (s,s) s s s\ns (s,s) s s s\n  :: ((input, input1) -> output) -> input -> input1 -> output\n*Main> :t s (s,s) s s s s\ns (s,s) s s s s\n  :: ((input, input1) -> output) -> input -> input1 -> output\n*Main> :t s (s,s) s s s s s\ns (s,s) s s s s s\n  :: ((input, input1) -> output) -> input -> input1 -> output\n\n```"]