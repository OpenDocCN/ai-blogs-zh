- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:45'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:45'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'On type synonyms : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于类型同义词：ezyang 的博客
- en: 来源：[http://blog.ezyang.com/2011/06/on-type-synonyms/](http://blog.ezyang.com/2011/06/on-type-synonyms/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2011/06/on-type-synonyms/](http://blog.ezyang.com/2011/06/on-type-synonyms/)
- en: On type synonyms
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于类型同义词
- en: I recently had to remove a number of type synonyms from the GHC code base which
    were along the lines of `type CmmActuals = [CmmActual]`. The process made me wonder
    a little about *when* type synonyms are appropriate for Haskell code. The [Wikibooks
    article](http://en.wikibooks.org/wiki/Haskell/Type_declarations) says type synonyms
    are “for making the roles of types clearer or providing an alias to, for instance,
    a complicated list or tuple type” and [Learn You a Haskell](http://learnyouahaskell.com/making-our-own-types-and-typeclasses)
    says they “make more sense to someone reading our code and documentation.” But
    under what circumstances is this actually true?
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我最近不得不从 GHC 代码库中移除了一些类型同义词，例如 `type CmmActuals = [CmmActual]`。这个过程让我对 Haskell
    代码中适合使用类型同义词的时机产生了一些思考。[Wikibooks 的文章](http://en.wikibooks.org/wiki/Haskell/Type_declarations)
    表示类型同义词是用来“使类型的角色更加清晰或者为复杂的列表或元组类型提供一个别名”，而 [Learn You a Haskell](http://learnyouahaskell.com/making-our-own-types-and-typeclasses)
    则说它们“使得代码和文档对于读者更加易于理解”。但是真正的情况是在什么情况下呢？
- en: 'Let''s try dividing the following use-cases of type synonyms:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试将以下类型同义词的用例进行分类：
- en: They can give extra semantic content, for example `DateString` is more informative
    than `String` about its contents, though they are the same.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们可以提供额外的语义内容，例如 `DateString` 比 `String` 更详尽地描述其内容，尽管它们实际上是相同的。
- en: They can abbreviate long constructed types, for example `TcSigFun` might abbreviate
    `Name -> Maybe TcSigInfo`.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们可以缩写长构造类型，例如 `TcSigFun` 可以缩写 `Name -> Maybe TcSigInfo`。
- en: 'The first is an example of code reader benefit: types with extra semantic information
    make it easier to see what a function is doing; the second is example of coder
    writer benefit: abbreviations of long types make writing type signatures more
    pleasurable. Sometimes a type synonym can give both benefits.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个例子展示了代码阅读者的好处：带有额外语义信息的类型使得理解函数的操作更加容易；第二个例子展示了代码编写者的好处：长类型的缩写使得编写类型签名更加愉快。有时候，类型同义词可以同时提供这两种好处。
- en: 'The downside of type signatures is their opacity of implementation. Seeing
    a value with type `Address`, I do not know if this is an algebraic data type or
    a type synonym, where as if it were a `String` I would know immediately what functions
    I could use on it. The type synonym adds an extra layer of indirection to figuring
    out how to manipulate the value: thus, it is a downside for the writer. It is
    true that algebraic data types and newtypes also add a layer of indirection, but
    they also bring to the table extra type safety that type synonyms don’t. (Furthermore,
    an algebraic data type is usually marvelously self documenting, as each of its
    constructors gets its own name).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 类型签名的缺点在于其实现的不透明性。看到一个类型为 `Address` 的值，我不知道它是一个代数数据类型还是一个类型同义词，而如果它是一个 `String`
    的话，我会立即知道可以在其上使用哪些函数。类型同义词增加了一个额外的间接层，以便弄清如何操作该值：因此，这对于编写者来说是一个缺点。当然，代数数据类型和新类型也会增加一个间接层，但它们也带来了类型安全性，而类型同义词则不会。
    （此外，一个代数数据类型通常在自我文档中是非常出色的，因为它的每个构造函数都有自己的名称。）
- en: 'I think my taste in the matter is as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为我的见解如下：
- en: Don’t use type synonyms if are not going to give any extra semantic information
    beyond the structure of the type.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果类型同义词没有提供除了类型结构之外的额外语义信息，就不要使用它们。
- en: Synonyms for atomic types can be used freely, if the correspondence is unique.
    If you have many synonyms referring to the same atomic type, consider newtypes.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于原子类型的同义词可以自由使用，如果对应关系是唯一的。如果有多个同义词引用同一个原子类型，考虑使用新类型（newtypes）。
- en: Synonyms for non-function compound types should be used sparingly. They should
    not leak out of module boundaries, and are candidates for promotion into algebraic
    data-types.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非函数复合类型的同义词应该谨慎使用。它们不应该泄露到模块边界之外，并且适合提升为代数数据类型。
- en: Synonyms for function compound types are mostly OK (since conversion into an
    ADT doesn’t buy you much, and they are unlikely to get mixed up), but make sure
    they are documented properly.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于函数复合类型的同义词，大多数情况下是可以接受的（因为将其转换为代数数据类型并不会带来太多好处，并且它们不太可能混淆），但一定要确保有适当的文档记录。
- en: Prefer to keep type synonyms inside module boundaries, un-exported. (Though,
    I know a few cases where I”ve broken this rule.)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更倾向于保持类型同义词在模块边界内部，不导出。（尽管我知道一些例外情况，我也打破了这个规则。）
- en: How do you feel about type synonyms?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你如何看待类型同义词？
