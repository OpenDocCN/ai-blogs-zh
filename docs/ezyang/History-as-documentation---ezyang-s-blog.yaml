- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:18:26'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:18:26'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'History as documentation : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 历史作为文档：ezyang 的博客
- en: 来源：[http://blog.ezyang.com/2010/02/history-as-documentation/](http://blog.ezyang.com/2010/02/history-as-documentation/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/02/history-as-documentation/](http://blog.ezyang.com/2010/02/history-as-documentation/)
- en: History as documentation
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 历史作为文档
- en: It's [real](http://developers.slashdot.org/story/09/11/16/1626218/If-the-Comments-Are-Ugly-the-Code-Is-Ugly)
    [easy](http://ask.slashdot.org/article.pl?sid=06/01/09/1544201) to [argue](http://developers.slashdot.org/story/10/01/01/226232/Myths-About-Code-Comments)
    about the utility, style and implementation of source code comments, those good
    ole' pals of code that try to add supplementary information when the [pure code
    isn't enough](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-7.html).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这里提到的 [real](http://developers.slashdot.org/story/09/11/16/1626218/If-the-Comments-Are-Ugly-the-Code-Is-Ugly)
    和 [easy](http://ask.slashdot.org/article.pl?sid=06/01/09/1544201) [argue](http://developers.slashdot.org/story/10/01/01/226232/Myths-About-Code-Comments)
    讨论的是源代码注释的实用性、风格和实现方式，这些注释在 [pure code isn't enough](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-7.html)
    时尝试添加补充信息。
- en: 'However, to focus solely on the latest snapshot of any particular source file
    is to miss a wealth of information that is not inside the file; namely, the history
    of the file and the genealogy of every line that graces the file. This is not
    so relevant when you are rapidly prototyping functionality and versions of the
    file in source control history represent incomplete, half-baked figments of thought,
    but once a codebase transitions into a more maintenance-oriented workflow, the
    history takes on a keen and unusual importance. In particular:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，仅仅关注特定源文件的最新快照，就会忽略文件内未包含的大量信息；即文件的历史和每一行的源流。这在快速原型功能时可能并不重要，因为源代码控制历史中的文件版本代表了不完整的、半成品的思想碎片，但一旦代码库过渡到更多的维护型工作流程，历史记录就显得尤为重要和不同寻常。特别是：
- en: A log of the evolution of the file over time can illustrate what the *original*
    intent of the module was, and then how it got retrofitted or extended or hacked
    up over time. If you have inherited code from someone else that you need to rearchitect,
    what better way to get in the heads of the original designers than to study the
    revisions they went through.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着时间推移文件演变的日志可以说明模块的 *original* 意图，以及随后如何通过改装、扩展或修改进行调整。如果你需要重构其他人编写的代码，研究他们经历的修订版本是理解原始设计者思路的最佳方式。
- en: Any particular line may have simply been part of the ambient code present during
    the initial check-in, or it may have been touched by a highly targeted commit
    addressing some issue. In this case, the output of `git blame` is highly relevant
    for identifying why that particular line might be special, or why a subtly different
    permutation is incorrect. In the case of delocalized changes, associating a line
    with a commit can give you the fast pass to understanding how one operation is
    orchestrated with many others for some global effect.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何特定行可能仅仅是初始检入时的环境代码的一部分，或者可能被针对某些问题的高度定位的提交所触及。在这种情况下，`git blame` 的输出对于识别为何这一特定行可能特殊，或者为何一个细微不同的排列方式是不正确的，是非常相关的。在非局部性更改的情况下，将一行与提交关联起来可以让您快速理解一个操作如何与其他许多操作一起产生全局效果。
- en: 'Developers should be highly encouraged to write impeccably descriptive commit
    messages (with the diff in hand: never write a commit message without the diff
    in hand) for the sake of those who may pick through the logs in the future. It''s
    ok to even be a little wordier than you might be in an inline comment, since:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 鼓励开发人员编写非常描述性的提交信息（手中有差异：绝不在手上没有差异时编写提交信息），以便未来可能查看日志的人使用。即使在内联注释中可能会略显啰嗦，也是可以接受的，因为：
- en: 'Log messages never grow old: they are always relevant to the revision they
    are attached to!'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志信息永不过时：它们始终与所附的修订版本相关！
- en: A good commit message facilitates code review, since it poses an informal specification
    of what the change does, which an external observer can then take and verify against
    the code. Otherwise, the reviewer would have to determine *both* the intended
    and actual semantics of the code, stylistic issues aside.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个良好的提交信息有助于代码审查，因为它提供了更改的非正式规范，外部观察者可以拿来验证代码。否则，审阅者需要确定代码的预期语义和实际语义，不考虑风格问题。
- en: 'Finally, a few words about keeping the history clean and easy to use:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，关于保持历史记录清晰易用的几句话：
- en: Logically organized patch sets mean that any given change is immediately relevant
    to the log message. If you push a big commit which contains lots of semantic changes,
    the reader has to disambiguate which particular semantic change is associated
    with which part of the diff. It is certainly worth your time to `git add -p` to
    stage hunks individually.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逻辑上组织良好的补丁集意味着任何给定的更改立即与日志消息相关联。如果您提交了一个包含大量语义更改的大提交，读者必须消除哪些特定的语义更改与差异的哪个部分相关。有意识地花时间使用`git
    add -p`逐个暂存片段是绝对值得的。
- en: Make high quality diffs, which avoid touching unnecessary code. High traffic
    mailing lists such as LKML which receive many patches have published [patch submission
    guidelines](http://lxr.linux.no/#linux+v2.6.32/Documentation/SubmittingPatches)
    in order to make diffs as readable as possible to a possible reviewer. Even if
    you don't need to convince a temperamental upstream to take your changes, later
    in time you may care about your diffs.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作高质量的差异，避免触及不必要的代码。高流量的邮件列表，如 LKML，接收大量补丁，已经发布了[补丁提交指南](http://lxr.linux.no/#linux+v2.6.32/Documentation/SubmittingPatches)，以使差异尽可能易读，以供可能的审阅者查看。即使您不需要说服一个反应激烈的上游采纳您的更改，以后您可能会关心您的差异。
- en: Stylistic changes are highly disruptive the `git blame` output, since they result
    in a line being marked as changed even though no semantic difference took place.
    If you must, they should be strictly alone. Infrequent is best.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 格式上的更改极大地扰乱了`git blame`输出，因为它们导致一行被标记为已更改，尽管没有语义上的差异发生。如果必须，它们应该是严格单独的。不频繁地进行更改是最好的选择。
- en: Utilize history rewriting to allow for cheap commits which are polished up later
    for submission.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用历史重写来实现廉价提交，稍后再进行润色以供提交。
