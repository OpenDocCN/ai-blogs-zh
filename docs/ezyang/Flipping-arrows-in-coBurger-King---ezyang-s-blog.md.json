["```\nclass Monad m where\n  (>>=) :: m a -> (a -> m b) -> m b\n  return :: a -> m a\n\nclass Comonad w where\n  (=>>) :: w a -> (w a -> b) -> w b\n  extract :: w a -> a\n\n```", "```\nclass Functor t where\n  fmap :: (a -> b) -> (t a -> t b)\n\n```", "```\nclass Functor f => Pointed f where\n  pure :: a -> f a -- aka return\n\n```", "```\nfmap (g . f) == fmap g . fmap f\n\n```", "```\nclass Category (~>) where\n  (.) :: (b ~> c) -> (a ~> b) -> (a ~> c)\n  id :: a ~> a\n\n```", "```\nclass ContraFunctor t where\n  contramap :: (a -> b) -> t b -> t a\n\n```", "```\nnewtype ContraF a b = ContraF (b -> a)\ninstance ContraFunctor (ContraF a) where\n  contramap g (ContraF f) = ContraF (f . g)\n\n```", "```\nclass Monad m where\n  (>>=) :: m a -> (a -> m b) -> m b\n  return :: a -> m a\n\n```", "```\nclass Functor m => Monad m where\n  join :: m (m a) -> m a\n  return :: a -> m a\n\n```", "```\nm >>= f = join (fmap f m)\njoin m = m >>= id\n\n```", "```\nnewtype Identity a = Identity a\ninstance Functor Identity where\n  fmap f (Identity x) = Identity (f x)\n\n```", "```\nfmap2 f m = fmap (fmap f) m\n\n```", "```\nfmap2 = fmap . fmap\n\n```", "```\ntype (f :<*> g) x = f (g x)\n\n```", "```\njoin . return == id == join . fmap return\njoin . join == join . fmap join\n\n```", "```\nclass Functor w => Comonad w where\n  cojoin :: w a -> w (w a)\n  coreturn :: w a -> a\n\n```", "```\nextract . duplicate == id == duplicate . extract\nduplicate . duplicate == fmap duplicate . duplicate\n\n```"]