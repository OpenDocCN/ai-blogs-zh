["```\n          ; let (cha', fbase') = mapFoldWithKey\n-                                (updateFact lat lbls)\n+                                (updateFact lat lbls')\n                                 (cha,fbase) out_facts\n\n```", "```\n-       return (Fixed sz (getRegisterReg use_sse2 reg) nilOL)\n+       return (Fixed size (getRegisterReg use_sse2 reg) nilOL)\n\n```", "```\n      cecManVerify :: Gia_Man_t -> Cec_ParCec_t_ -> IO Int\n-     cecManVerify a b = handleAbcError \"Cec_ManVerify\" $ cecManVerify a b\n+     cecManVerify a b = handleAbcError \"Cec_ManVerify\" $ cecManVerify' a b\n\n```", "```\n$string = trim($string);\n$string = str_replace('/', '_', $string);\n$string = ...\n\n```", "```\ntest.hs:1:24:\n    Warning: This binding for `a' shadows the existing binding\n               bound at test.hs:1:11\n\n```", "```\nlet z = clipJ a . clipI b . extendIJ $ getIJ (q ! (i-1) ! (j-1))\n\n```", "```\nf x y = let x' = unpack x\n        in ... -- using only x'\n\n```", "```\nf (unpack -> x) y = ... -- use x as if it were x'\n\n```", "```\ngetRegister (CmmReg reg)\n  = do use_sse2 <- sse2Enabled\n       let\n         sz = cmmTypeSize (cmmRegType reg)\n         size | not use_sse2 && isFloatSize sz = FF80\n              | otherwise                      = sz\n       --\n       return (Fixed sz (getRegisterReg use_sse2 reg) nilOL)\n\n```", "```\ntest.hs:1:24: Warning: Defined but not used: `b'\n\n```", "```\n{-# OPTIONS -w #-}\n-- The above warning supression flag is a temporary kludge.\n-- While working on this module you are encouraged to remove it and fix\n-- any warnings in the module. See\n--     http://hackage.haskell.org/trac/ghc/wiki/Commentary/CodingStyle#Warnings\n-- for details\n\n```"]