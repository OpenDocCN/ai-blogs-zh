["```\nimport Control.Concurrent.MVar\nimport Control.Concurrent\nmain = do\n    x <- newMVar 0\n    forkIO $ do\n        putMVar x 1\n        putStrLn \"child done\"\n    threadDelay 100\n    readMVar x\n    putStrLn \"parent done\"\n\n```", "```\nimport Control.Concurrent.MVar\nimport Control.Concurrent\n\ndata SkipChan a = SkipChan (MVar (a, [MVar ()])) (MVar ())\n\nnewSkipChan :: IO (SkipChan a)\nnewSkipChan = do\n    sem <- newEmptyMVar\n    main <- newMVar (undefined, [sem])\n    return (SkipChan main sem)\n\nputSkipChan :: SkipChan a -> a -> IO ()\nputSkipChan (SkipChan main _) v = do\n    (_, sems) <- takeMVar main\n    putMVar main (v, [])\n    mapM_ (\\sem -> putMVar sem ()) sems\n\ngetSkipChan :: SkipChan a -> IO a\ngetSkipChan (SkipChan main sem) = do\n    takeMVar sem\n    (v, sems) <- takeMVar main\n    putMVar main (v, sem:sems)\n    return v\n\ndupSkipChan :: SkipChan a -> IO (SkipChan a)\ndupSkipChan (SkipChan main _) = do\n    sem <- newEmptyMVar\n    (v, sems) <- takeMVar main\n    putMVar main (v, sem:sems)\n    return (SkipChan main sem)\n\n```"]