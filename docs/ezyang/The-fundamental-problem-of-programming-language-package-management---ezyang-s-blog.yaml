- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:14'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:14'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'The fundamental problem of programming language package management : ezyang’s
    blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编程语言包管理的根本问题：ezyang的博客
- en: 来源：[http://blog.ezyang.com/2014/08/the-fundamental-problem-of-programming-language-package-management/](http://blog.ezyang.com/2014/08/the-fundamental-problem-of-programming-language-package-management/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2014/08/the-fundamental-problem-of-programming-language-package-management/](http://blog.ezyang.com/2014/08/the-fundamental-problem-of-programming-language-package-management/)
- en: Why are there so many goddamn package managers? They sprawl across both operating
    systems (apt, yum, pacman, Homebrew) as well as for programming languages (Bundler,
    Cabal, Composer, CPAN, CRAN, CTAN, EasyInstall, Go Get, Maven, npm, NuGet, OPAM,
    PEAR, pip, RubyGems, etc etc etc). "It is a truth universally acknowledged that
    a programming language must be in want of a package manager." What is the fatal
    attraction of package management that makes programming language after programming
    language jump off this cliff? Why can't we just, you know, [reuse](http://www.standalone-sysadmin.com/blog/2014/03/just-what-we-need-another-package-manager/)
    an existing package manager?
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么有这么多该死的包管理器？它们横跨操作系统（apt、yum、pacman、Homebrew）以及编程语言（Bundler、Cabal、Composer、CPAN、CRAN、CTAN、EasyInstall、Go
    Get、Maven、npm、NuGet、OPAM、PEAR、pip、RubyGems等等等等）。“普遍认为，每一种编程语言都必须需要一个包管理器。” 是什么致使每一种编程语言都跳入这个悬崖？我们为什么不能，你知道的，[重复利用](http://www.standalone-sysadmin.com/blog/2014/03/just-what-we-need-another-package-manager/)一个现有的包管理器？
- en: You can probably think of a few reasons why trying to use apt to manage your
    Ruby gems would end in tears. "System and language package managers are completely
    different! Distributions are vetted, but that's completely unreasonable for most
    libraries tossed up on GitHub. Distributions move too slowly. Every programming
    language is different. The different communities don't talk to each other. Distributions
    install packages globally. I want control over what libraries are used." These
    reasons are all *right*, but they are missing the essence of the problem.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想到了几个理由，为什么试图使用 apt 管理你的 Ruby gems 会以泪水收场。“系统和语言包管理器完全不同！分发是经过审查的，但对于 GitHub
    上投放的大多数库来说，这完全不合理。分发移动速度太慢了。每种编程语言都不同。不同的社区彼此之间不交流。分发全局安装软件包。我想控制使用哪些库。” 这些理由都是*正确*的，但它们错过了问题的本质。
- en: The fundamental problem is that programming languages package management is
    **decentralized**.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 编程语言包管理的根本问题在于其**去中心化**。
- en: 'This decentralization starts with the central premise of a package manager:
    that is, to install software and libraries that would otherwise not be locally
    available. Even with an idealized, centralized distribution curating the packages,
    there are still two parties involved: the distribution and the *programmer* who
    is building applications locally on top of these libraries. In real life, however,
    the library ecosystem is further fragmented, composed of packages provided by
    a huge variety of developers. Sure, the packages may all be uploaded and indexed
    in one place, but that doesn''t mean that any given author knows about any other
    given package. And then there''s what the Perl world calls DarkPAN: the uncountable
    lines of code which probably exist, but which we have no insight into because
    they are locked away on proprietary servers and source code repositories. Decentralization
    can only be avoided when you control absolutely *all* of the lines of code in
    your application.. but in that case, you hardly need a package manager, do you?
    (By the way, my industry friends tell me this is basically mandatory for software
    projects beyond a certain size, like the Windows operating system or the Google
    Chrome browser.)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这种去中心化始于包管理器的核心前提：即安装软件和库，否则这些软件和库将无法在本地使用。即使有一个理想化的集中式分发来管理这些软件包，依然涉及到两个主体：分发和*构建应用程序的程序员*。然而，在现实生活中，库生态系统进一步分裂，由众多开发者提供的各种软件包组成。当然，这些软件包可能都被上传并在一个地方索引，但这并不意味着任何一个作者知道其他任何一个软件包的情况。然后就有了
    Perl 世界所称的 DarkPAN：可能存在的无法计数的代码行，但我们对此一无所知，因为它们锁在专有的服务器和源代码仓库中。只有当你完全控制你应用程序中的*所有*代码行时，去中心化才能避免...但在那种情况下，你几乎不需要一个包管理器，对吧？（顺便说一句，我的行业朋友告诉我，对于像
    Windows 操作系统或 Google Chrome 浏览器这样的软件项目来说，这基本上是强制性的。）
- en: 'Decentralized systems are hard. Really, really hard. Unless you design your
    package manager accordingly, your developers *will* fall into dependency hell.
    Nor is there a one "right" way to solve this problem: I can identify at least
    three distinct approaches to the problem among the emerging generation of package
    managers, each of which has their benefits and downsides.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 去中心化系统很难。真的非常难。除非你根据此设计你的包管理器，否则你的开发者们*一定会*陷入依赖地狱。解决这个问题没有一种“正确”的方式：我至少可以辨认出在新一代包管理器中有三种不同的方法来处理这个问题，每一种方法都有其利与弊。
- en: '**Pinned versions.** Perhaps the most popular school of thought is that developers
    should aggressively pin package versions; this approach advocated by Ruby''s Bundler,
    PHP''s Composer, Python''s virtualenv and pip, and generally any package manager
    which describes itself as inspired by the Ruby/node.js communities (e.g. Java''s
    Gradle, Rust''s Cargo). Reproduceability of builds is king: these package managers
    solve the decentralization problem by simply pretending the ecosystem doesn''t
    exist once you have pinned the versions. The primary benefit of this approach
    is that you are always in control of the code you are running. Of course, the
    downside of this approach is that you are always in control of the code you are
    running. An all-to-common occurrence is for dependencies to be pinned, and then
    forgotten about, even if there are important security updates to the libraries
    involved. Keeping bundled dependencies up-to-date requires developer cycles--cycles
    that more often than not are spent on other things (like new features).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**固定版本。** 或许最流行的观点是，开发者应该积极地固定软件包的版本；这种方法由Ruby的Bundler、PHP的Composer、Python的virtualenv和pip倡导，一般来说，任何自称受到Ruby/node.js社区启发的包管理器（例如Java的Gradle、Rust的Cargo）都采用这种方法。构建的可复现性至关重要：这些包管理器通过简单地假装一旦固定了版本，生态系统就不存在了来解决去中心化问题。这种方法的主要好处在于，你始终控制着你正在运行的代码。当然，这种方法的缺点是，你始终控制着你正在运行的代码。一个很常见的情况是将依赖固定下来，然后就把它们忘记了，即使其中有重要的安全更新。保持捆绑依赖项的最新状态需要开发者的时间——通常这些时间都花在其他事情上（比如新功能）。'
- en: '**A stable distribution.** If bundling requires every individual application
    developer to spend effort keeping dependencies up-to-date and testing if they
    keep working with their application, we might wonder if there is a way to centralize
    this effort. This leads to the second school of thought: to *centralize* the package
    repository, creating a blessed distribution of packages which are known to play
    well together, and which will receive bug fixes and security fixes while maintaining
    backwards compatibility. In programming languages, this is much less common: the
    two I am aware of are Anaconda for Python and Stackage for Haskell. But if we
    look closely, this model is *exactly the same* as the model of most operating
    system distributions. As a system administrator, I often recommend my users use
    libraries that are provided by the operating system as much as possible. They
    won''t take backwards incompatible changes until we do a release upgrade, and
    at the same time you''ll still get bugfixes and security updates for your code.
    (You won''t get the new hotness, but that''s essentially contradictory with stability!)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**稳定的发行版。** 如果捆绑要求每个应用程序开发者花时间保持依赖项的最新状态并测试它们是否与他们的应用程序正常工作，我们可能会想知道是否有一种方法可以集中这种努力。这导致了第二种思路：*集中管理*软件包仓库，创建一组已知能良好协作的软件包，并且将获得bug修复和安全更新，同时保持向后兼容性。在编程语言中，这种模式并不常见：我所知道的只有Anaconda用于Python和Stackage用于Haskell。但是如果我们仔细观察，这个模型与大多数操作系统发行版的模型*完全相同*。作为系统管理员，我经常建议用户尽可能使用操作系统提供的库。他们不会在我们进行发布升级之前采用不向后兼容的更改，同时您仍将获得您的代码的bug修复和安全更新。（您将无法得到最新的炫酷功能，但这与稳定性本质上是相矛盾的！）'
- en: '**Embracing decentralization.** Up until now, both of these approaches have
    thrown out decentralization, requiring a central authority, either the application
    developer or the distribution manager, for updates. Is this throwing out the baby
    with the bathwater? The primary downside of centralization is the huge amount
    of *work* it takes to maintain a stable distribution or keep an individual application
    up-to-date. Furthermore, one might not expect the entirety of the universe to
    be compatible with one another, but this doesn''t stop subsets of packages from
    being useful together. An ideal decentralized ecosystem distributes the problem
    of identifying what subsets of packages *work* across everyone participating in
    the system. Which brings us to the fundamental, unanswered question of programming
    languages package management:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**拥抱去中心化。** 直到现在，这两种方法都抛弃了去中心化，需要一个中央权威，无论是应用开发者还是分发管理者，来进行更新。这是不是舍弃孩子而保留水中的？中心化的主要缺点是维护稳定分发或保持单个应用程序更新所需的大量*工作*。此外，人们可能不会期望整个宇宙都能彼此兼容，但这并不能阻止某些软件包的子集彼此一起使用。一个理想的去中心化生态系统将问题分布到参与系统的每个人身上，以确定哪些软件包的子集*能够*共同使用。这也引出了编程语言包管理的根本未解之谜：'
- en: '*How can we create a decentralized package ecosystem that works?*'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*我们如何创建一个能够运作的去中心化包生态系统？*'
- en: 'Here are a few things that can help:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几件事情可以帮助：
- en: '**Stronger encapsulation for dependencies.** One of the reasons why dependency
    hell is so insidious is the dependency of a package is often an inextricable part
    of its outwards facing API: thus, the choice of a dependency is not a local choice,
    but rather a global choice which affects the entire application. Of course, if
    a library uses some library internally, but this choice is entirely an implementation
    detail, this *shouldn''t* result in any sort of global constraint. Node.js''s
    NPM takes this choice to its logical extreme: by default, it doesn''t deduplicate
    dependencies at all, giving each library its own copy of each of its dependencies.
    While I''m [a little dubious](http://stackoverflow.com/questions/25268545/why-does-npms-policy-of-duplicated-dependencies-work)
    about duplicating everything (it certainly occurs in the Java/Maven ecosystem),
    I certainly agree that keeping dependency constraints local improves *composability.*'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**更强的依赖封装。** 依赖地狱之所以如此阴险，其中一个原因是一个软件包的依赖通常是其外部面向API的不可分割的一部分：因此，依赖的选择不是一个局部选择，而是一个全局选择，影响整个应用程序。当然，如果一个库在内部使用某些库，但这个选择完全是实现细节，这*不应该*导致任何全局约束。Node.js的NPM将这种选择推向其逻辑极限：默认情况下，它根本不会对依赖进行去重，使每个库都拥有其依赖的副本。虽然我对复制所有内容（它在Java/Maven生态系统中确实存在）有些怀疑，但我完全同意保持依赖约束局部化可以提高*可组合性*。'
- en: '**Advancing semantic versioning.** In a decentralized system, it''s especially
    important that library writers give *accurate* information, so that tools and
    users can make informed decisions. Wishful, invented version ranges and artistic
    version number bumps simply exacerbate an already hard problem (as I mentioned
    in my [previous post](http://blog.ezyang.com/2014/08/whats-a-module-system-good-for-anyway/)).
    If you can [enforce semantic versioning](http://bndtools.org/), or better yet,
    ditch semantic versions and record the true, *type-level* dependency on interfaces,
    our tools can make better choices. The gold standard of information in a decentralized
    system is, "Is package A compatible with package B", and this information is often
    difficult (or impossible, for dynamically typed systems) to calculate.'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**推进语义化版本控制。** 在去中心化系统中，图书馆作者提供*准确*的信息尤为重要，以便工具和用户能够做出知情决策。虚构的版本范围和艺术化的版本号增加了已经存在的难题（正如我在[上一篇文章](http://blog.ezyang.com/2014/08/whats-a-module-system-good-for-anyway/)中提到的）。如果你可以[强制执行语义化版本控制](http://bndtools.org/)，或者更好地说，放弃语义版本并记录真实的、*类型级*的接口依赖关系，我们的工具可以做出更好的选择。在去中心化系统中信息的黄金标准是，“软件包A与软件包B兼容”，这种信息通常很难（或者对于动态类型系统来说是不可能的）计算。'
- en: '**Centralization as a special-case.** The point of a decentralized system is
    that every participant can make policy choices which are appropriate for them.
    This includes maintaining their own central authority, or deferring to someone
    else''s central authority: centralization is a special-case. If we suspect users
    are going to attempt to create their own, operating system style stable distributions,
    we need to give them the tools to do so... and make them easy to use!'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**中心化是一种特例。** 分布式系统的要点是每个参与者都可以为自己选择合适的策略。这包括维护自己的中央权威，或者推迟到别人的中央权威：中心化只是一种特例。如果我们怀疑用户将尝试创建自己的操作系统风格的稳定发行版，我们需要给予他们相应的工具……并且让这些工具易于使用！'
- en: 'For a long time, the source control management ecosystem was completely focused
    on centralized systems. Distributed version control systems such as Git fundamentally
    changed the landscape: although Git may be more difficult to use than Subversion
    for a non-technical user, the benefits of decentralization are diverse. The Git
    of package management doesn''t exist yet: if someone tells you that package management
    is solved, just reimplement Bundler, I entreat you: think about decentralization
    as well!'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 长期以来，源代码控制管理生态系统完全集中在中心化系统上。分布式版本控制系统如Git从根本上改变了这一格局：尽管对于非技术用户而言，Git可能比Subversion更难使用，但去中心化的好处却是多样化的。包管理的Git尚不存在：如果有人告诉你包管理问题已解决，只需重新实现Bundler，我恳求你：也要考虑去中心化！
