["```\n{-# INCLUDE <math.h> #-}\n{-# LANGUAGE ForeignFunctionInterface #-}\nmodule FfiExample where\nimport Foreign.C -- get the C types\n\n-- pure function\n-- \"unsafe\" means it's slightly faster but can't callback to haskell\nforeign import ccall unsafe \"sin\" c_sin :: CDouble -> CDouble\nsin :: Double -> Double\nsin d = realToFrac (c_sin (realToFrac d))\n\n```", "```\n/* cbit.c */\n#include <stdio.h>\nint bottom(int a) {\n    while (1) {printf(\"%d\\n\", a);sleep(1);}\n    return a;\n}\n\n```", "```\n/* cbit.h */\nint bottom(int a);\n\n```", "```\n{-# LANGUAGE ForeignFunctionInterface #-}\n\nimport Foreign.C\nimport Control.Concurrent\n\nmain = do\n    forkIO $ do\n        safeBottom 1\n        return ()\n    yield\n    print \"Pass (expected)\"\n    forkIO $ do\n        unsafeBottom 2\n        return ()\n    yield\n    print \"Pass (not expected)\"\n\nforeign import ccall \"cbit.h bottom\" safeBottom :: CInt -> IO CInt\nforeign import ccall unsafe \"cbit.h bottom\" unsafeBottom :: CInt -> IO CInt\n\n```", "```\ngcc -c -o cbit.o cbit.c\nghc -threaded --make UnsafeFFITest.hs cbit.o\n./UnsafeFFITest +RTS -N4\n\n```", "```\nezyang@javelin:~/Dev/haskell/unsafe-ffi$ ./UnsafeFFITest +RTS -N2\n1\n\"Pass (expected)\"\n2\n1\n2\n1\n2\n\n```"]