- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:18:11'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:18:11'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'A radical Hackage social experiment : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个激进的 Hackage 社会实验：ezyang 的博客
- en: 来源：[http://blog.ezyang.com/2010/08/the-radical-hackage-social-experiment/](http://blog.ezyang.com/2010/08/the-radical-hackage-social-experiment/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/08/the-radical-hackage-social-experiment/](http://blog.ezyang.com/2010/08/the-radical-hackage-social-experiment/)
- en: '*Prologue.* This post is an attempt to solidify some of the thoughts about
    the upcoming Hackage 2.0 that have been discussed around the Galois lunch table.
    Note that I have never overseen the emergence of a language into mainstream, so
    take what I say with a grain of salt. The thesis is that Hackage can revolutionize
    what it means to program in Haskell if it combines the cathedral (Python), the
    bazaar (Perl/CPAN), and the wheels of social collaboration (Wikipedia, StackOverflow,
    Github).'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*序言*。这篇文章试图明确一些关于即将到来的 Hackage 2.0 的想法，这些想法在 Galois 的午餐桌周围已经讨论过。请注意，我从未见证过一门语言进入主流，所以请对我说的话持保留态度。论点是，如果
    Hackage 结合了大教堂（Python）、集市（Perl/CPAN）和社会协作的轮子（Wikipedia、StackOverflow、Github），它可以彻底改变在
    Haskell 中编程的含义。'
- en: 'New programming languages are a dime a dozen: one only needs to stroll down
    the [OSCON Emerging Languages track](http://emerginglangs.com/speakers/) to see
    why. As programmers, our natural curiosity is directed towards the language itself:
    “What problems does it solve? What does it look like?” As engineers, we might
    ask “What is its runtime system?” As computer scientists, we might ask: “What
    novel research has been incorporated into this language?” When a language solves
    a problem we can relate to or shows off fancy new technology, our interest is
    whetted, and we look more closely.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 新的编程语言层出不穷：只需漫步在[OSCON Emerging Languages track](http://emerginglangs.com/speakers/)，就能看到原因所在。作为程序员，我们的自然好奇心集中在语言本身：“它解决了什么问题？它是什么样子？”作为工程师，我们可能会问：“它的运行时系统是什么？”作为计算机科学家，我们可能会问：“这门语言融入了哪些新颖的研究？”当一门语言解决了我们能够理解的问题或展示了时髦的新技术时，我们的兴趣被激发了，我们会更仔细地看待它。
- en: 'But as the language grows and gains mindshare, as it moves beyond the “emerging”
    phase and into “emergent”, at some point, *the language stops being important.*
    Instead, it is the community around the language that takes over: both socially
    and technically. A community of people and a community of code—the libraries,
    frameworks, platforms. An engineer asks: “Ok. I need to do X. Is there a library
    that fills this need?”'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 但随着语言的发展和知名度的提升，随着它从“新兴”阶段进入“新生”阶段，在某些时候，*语言本身变得不再重要*。取而代之的是围绕语言的社区：无论是社会上还是技术上。一个由人和代码组成的社区——库、框架、平台。一个工程师会问：“好的。我需要做
    X。有没有填补这个需求的库？”
- en: 'The successful languages are the ones that can unambiguously answer, “Yes.”
    It’s a bit of an obvious statement, really, since the popular languages attract
    developers who write more libraries which attracts more developers: a positive
    feedback loop. It’s also not helpful for languages seeking to break into the mainstream.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的语言能够毫无疑问地回答：“是的。”这是一个显而易见的陈述，因为受欢迎的语言吸引了编写更多库的开发者，这又吸引了更多开发者：一个正反馈循环。但对于试图打入主流的语言来说，这并不有利。
- en: Tune down the popularity level a little, and then you can see languages defined
    by the mechanism by which developers can get the functionality they need. Two
    immediate examples are Python and Perl.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 降低流行水平一点，然后你可以看到由开发者获取所需功能的机制定义的语言。两个即时的例子是Python和Perl。
- en: 'Python has the mantra: “batteries included,” comparing a language without libraries
    to a fancy piece of technology that doesn’t have batteries: pretty but—at the
    moment—pretty useless. The [Python documentation](http://www.python.org/about/)
    boasts about the fact that any piece of basic functionality is only an import
    away on a vanilla Python install. The Python standard library itself follows a
    cathedral model: commits are restricted to members of [python-dev](http://www.python.org/dev/committers),
    a list of about 120 trusted people. Major additions to the standard library, including
    the [addition of new modules](http://www.python.org/dev/peps/pep-0002/) most go
    through a [rigorous proposal process](http://www.python.org/dev/peps/) in which
    they demonstrate that your module is accepted, widely used and will be actively
    maintained. If a maintainer disappears, python-dev takes stewardship of the module
    while a new maintainer is found, or deprecates the module if no one is willing
    to step up to maintain it. This model has lead to over [three hundred relatively
    high-quality modules](http://docs.python.org/library/) in the standard library.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的口号是：“一切都包括在内”，将一个没有库的语言比作一台没有电池的花哨技术：看起来漂亮，但目前来说相当无用。[Python 文档](http://www.python.org/about/)
    自豪地宣称，在原生 Python 安装中，任何基本功能都只需一行导入操作。Python 标准库本身遵循大教堂模型：提交受限于 [python-dev](http://www.python.org/dev/committers)
    成员，大约 120 名信任的人员列表。对于标准库的主要增加，包括 [新增模块的添加](http://www.python.org/dev/peps/pep-0002/)
    需要经历 [严格的提案过程](http://www.python.org/dev/peps/)，在这个过程中，他们必须证明你的模块被接受、广泛使用并将得到积极维护。如果维护者消失，python-dev
    将接管模块的管理，直到找到新的维护者，否则将弃用该模块。这种模型已经导致标准库中有 [三百多个相对高质量的模块](http://docs.python.org/library/)。
- en: 'On the other hand, Perl has adopted the bazaar model with [CPAN](http://www.cpan.org),
    to the point where the slow release cycle of core Perl has meant that some core
    modules have been dual-lifed: that is, they exist in both the core and CPAN. Absolutely
    anyone can upload to CPAN: the result is over 20,000 modules and a resource many
    Perl developers consider indispensable. Beyond its spartan home interface, there
    is also [massive testing infrastructure](http://deps.cpantesters.org/) for all
    of CPAN and a [ratings system](http://cpanratings.perl.org/) (perhaps of dubious
    utility). CPAN has inspired similar bazaar style repositories across many programming
    languages (curiously enough, some of the most popular langauges—C and Java—have
    largely resisted this trend).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Perl 采用了与 [CPAN](http://www.cpan.org) 相关的集市模型，以至于核心 Perl 的缓慢发布周期意味着一些核心模块已经双重存在：即它们既存在于核心中又存在于
    CPAN 中。任何人都可以上传到 CPAN：结果是超过 20,000 个模块，被许多 Perl 开发人员视为必不可少的资源。除了它朴素的主页界面外，还有 [大规模的测试基础设施](http://deps.cpantesters.org/)
    适用于 CPAN 中的所有内容，以及一个 [评级系统](http://cpanratings.perl.org/)（或许效用存疑）。CPAN 已经启发了许多编程语言中类似的集市风格的仓库（有趣的是，一些最流行的语言，如
    C 和 Java，大部分都抵制了这一趋势）。
- en: It’s a tall order for any language to build up over a hundred trusted committers
    or a thriving community on the scale of CPAN. But without this very mechanism,
    the language is dead out of the water. The average engineer would have to rewrite
    too much functionality for it to be useful as a general purpose language.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何语言来说，要建立超过一百名可信任的提交者或规模庞大的社区都是一个很高的要求。但如果没有这个机制，该语言就无法生存。一般工程师必须重写太多的功能才能使其成为一种有用的通用语言。
- en: 'Which brings us back to the original point: where does Hackage stand?'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这将我们带回到最初的问题：**Hackage** 站在哪里？
- en: The recent results from the [State of the Haskell 2010 survey](http://blog.johantibell.com/2010/08/results-from-state-of-haskell-2010.html)
    gives voice to the feeling that any Haskell programmer who has attempted to use
    Hackage has gotten. There are *too many libraries without enough quality.*
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最近的结果来自 [Haskell 2010 调查报告](http://blog.johantibell.com/2010/08/results-from-state-of-haskell-2010.html)，反映了任何尝试使用
    **Hackage** 的 Haskell 程序员的感受。有*太多质量不足的库*。
- en: 'How do we fix this? After all, it is all open source made by volunteers: you
    can’t go around telling people to make their libraries better. Does one increase
    the set of core modules—that is, the Haskell platform—and the number of core contributors,
    requiring a rigorous quality review (the Python model)? Or do you let natural
    evolution take place and add mechanisms for measuring popularity (the Perl model)?'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何解决这个问题？毕竟，这是由志愿者制作的开源软件：你不能到处告诉人们要改进他们的库。是否增加核心模块集（即Haskell平台）和核心贡献者的数量，需要严格的质量审查（Python模型）？还是让自然演变发生，并添加测量流行度的机制（Perl模型）？
- en: To succeed, I believe Hackage needs to do both. And if it succeeds, I believe
    that it may become *the* model for growing your standard library.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要取得成功，我认为Hackage需要做到两者兼顾。如果成功了，我相信它可能会成为*标准库增长的*模式。
- en: 'The cathedral model is the obvious solution to rapidly increase the quality
    of a small number of packages. Don Stewart has employed this to good effect before:
    [bytestring](http://hackage.haskell.org/package/bytestring) started off as a hobby
    project, before the Haskell community realized how important efficiently packed
    strings were. A “strike team” of experienced Haskellers was assembled and the
    code was heavily improved, fleshed out and documented, generating several papers
    in the process. Now bytestring is an extremely well tuned library that is the
    basis for efficient input and output in Haskell. Don has suggested that we should
    adopt similar strike teams for the really important pieces of functionality. We
    can encourage this process by taking libraries that are deemed important into
    a shared repository that people not the primary maintainer can still help do basic
    maintenance and bugfixes.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 大教堂模型是快速提高少量包质量的明显解决方案。Don Stewart以前已经成功地使用了这种方法：[bytestring](http://hackage.haskell.org/package/bytestring)最初是一个业余项目，然后Haskell社区意识到高效打包字符串有多重要。一支由经验丰富的Haskeller组成的“突击队”被组建起来，代码得到了大幅改进、充实和文档化，并在此过程中产生了多篇论文。现在bytestring是一个非常调优的库，是Haskell中高效输入输出的基础。Don建议我们为真正重要的功能块采用类似的突击队。我们可以通过将被认为重要的库放入一个共享的存储库中来促进这一过程，以便不是主要维护者的人们仍然可以帮助进行基本维护和错误修复。
- en: 'But this process is not scalable. For one, growing a set of trusted maintainers
    is difficult. The current base libraries are maintained by a very small number
    of people: one has to wonder how much time the Simons spend maintaining `base`
    when they could be doing work on GHC. And you can only convince most people to
    take maintainership of `X` packages before they wise up. (Active maintainership
    of even a single package can be extremely time consuming.)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 但是这个过程并不可扩展。首先，培养一组可信任的维护者是困难的。当前的基础库只由非常少的人维护：人们不得不思考一下Simons在维护`base`时可能会花费多少时间，而他们本可以在GHC上工作。人们只能说服大多数人在智慧之前维护`X`个包。即使是单个包的积极维护也可能非常耗时。
- en: '[Hackage 2.0](http://cogracenotes.wordpress.com/2010/08/08/hackage-on-sparky/)
    is directed at facilitating the Bazaar model. Package popularity and reverse dependencies
    can help a developer figure out whether or not it is something worth using.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[Hackage 2.0](http://cogracenotes.wordpress.com/2010/08/08/hackage-on-sparky/)致力于促进Bazaar模型。包的流行度和反向依赖性可以帮助开发人员判断是否值得使用。'
- en: But if we consider both developers and package maintainers, we are tackling
    a complex socio-technical problem, for which we don’t have a good idea what will
    revolutionize the bazaar. Would a StackOverflow style reputation system encourage
    maintainers to polish their documentation? Would a Wikipedian culture of rewarding
    contributors with increased privileges help select the group of trusted stewards?
    Would the ability to fork any package instantly ala GitHub help us get over our
    obsession with official packages? Most of these ideas have not been attempted
    with a system so integral to the fabric of a programming language, and we have
    no way of telling if they will work or not without implementing them!
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果我们同时考虑开发人员和包维护人员，我们正在解决一个复杂的社会技术问题，我们不知道什么能彻底改变集市。像StackOverflow风格的声誉系统会鼓励维护者完善他们的文档吗？像维基百科那样奖励贡献者增加特权的文化是否有助于选择一组可信的管理者？即使在一个编程语言的结构中没有尝试过这些想法，我们也无法判断它们是否有效！
- en: I am cautiously optimistic that we are at the cusp of a major transformation
    of what Hackage represents to the Haskell community. But to make this happen,
    we need your help. Vive la révolution!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我谨慎乐观地认为我们正处在 Hackage 对 Haskell 社区所代表的重大转变的边缘。但要实现这一目标，我们需要您的帮助。Vive la révolution!
- en: '*Credit.* Most of these ideas are not mine. I just wrote them down. Don Stewart,
    in particular, has been thinking a lot about this problem.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*致谢.* 大多数想法不是我自己的。我只是把它们记录下来了。尤其是 Don Stewart，他对这个问题思考很多。'
