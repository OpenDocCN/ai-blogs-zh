- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-07-01 18:16:50'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-07-01 18:16:50
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Dynamic scoping is an effect, implicit parameters are a coeffect : ezyang’s
    blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态作用域是一种效果，隐式参数是一种共效：ezyang 的博客
- en: 来源：[http://blog.ezyang.com/2020/08/dynamic-scoping-is-an-effect-implicit-parameters-are-a-coeffect/](http://blog.ezyang.com/2020/08/dynamic-scoping-is-an-effect-implicit-parameters-are-a-coeffect/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2020/08/dynamic-scoping-is-an-effect-implicit-parameters-are-a-coeffect/](http://blog.ezyang.com/2020/08/dynamic-scoping-is-an-effect-implicit-parameters-are-a-coeffect/)
- en: For the longest time, I thought of [implicit parameters](https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#implicit-parameters)
    and dynamic scoping were basically the same thing, since they both can be used
    to solve similar problems (e.g., the so called "configuration problem" where you
    need to plumb down some configuration deep into a nested body of function definitions
    without defining them all explicitly). But implicit parameters have a reputation
    of being [something you shouldn't use](https://www.reddit.com/r/haskell/comments/6gz4w5/whats_wrong_with_implicitparams/)
    ([use reflection instead](https://www.reddit.com/r/haskell/comments/5xqozf/implicit_parameters_vs_reflection/dek9eqg/)),
    whereas dynamic scoping via the reader monad is a useful and well understood construct
    (except for the bit where you have to monadify everything). Why the difference?
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 长久以来，我一直认为[隐式参数](https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#implicit-parameters)和动态作用域基本上是相同的东西，因为它们都可以用来解决类似的问题（例如所谓的“配置问题”，其中你需要将某些配置深入到函数定义的嵌套体中而不显式地定义它们）。但隐式参数却有一个不被推荐使用的名声（[使用反射代替](https://www.reddit.com/r/haskell/comments/5xqozf/implicit_parameters_vs_reflection/dek9eqg/)），而通过读者单子进行动态作用域是一个有用且被充分理解的构造（除了你需要将一切变成单子的那一点）。为什么会有这样的差异？
- en: '[Oleg](http://okmij.org/ftp/Computation/dynamic-binding.html#implicit-parameter-neq-dynvar)
    points out that implicit parameters are not really dynamic scoping, and gives
    an example where Lisp and Haskell disagree. And you don''t even want the Lisp
    behavior in Haskell: if you think about the operational notion of dynamic scoping
    (walk up the stack until you find a binding site of the dynamic variable), it''s
    not very compatible with laziness, since a thunk (which accesses a dynamic variable)
    will be forced at some unpredictable point in program execution. You really don''t
    want to have to reason about where exactly a thunk will be executed to know how
    its dynamic variables will be bound, that way lies madness. But somehow, in a
    strict language, no one has trouble figuring out what should happen with dynamic
    scoping ([well](https://blog.klipse.tech/clojure/2018/12/25/dynamic-scope-clojure.html),
    [mostly](https://stuartsierra.com/2013/03/29/perils-of-dynamic-scope)--more on
    this shortly).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[Oleg](http://okmij.org/ftp/Computation/dynamic-binding.html#implicit-parameter-neq-dynvar)
    指出隐式参数并不真正是动态作用域，并且举了一个例子，展示了Lisp和Haskell在此问题上的分歧。而你甚至不希望在Haskell中出现Lisp的行为：如果你考虑动态作用域的操作概念（沿着堆栈向上走，直到找到动态变量的绑定位置），它与惰性计算并不兼容，因为一个thunk（访问动态变量）将在程序执行的某个不可预测的点被强制执行。你确实不想要去思考thunk将在何处执行以确定它的动态变量将如何绑定，这样做只会导致疯狂。但在严格语言中，没人会觉得需要去理解动态作用域应该如何运行（[好吧](https://blog.klipse.tech/clojure/2018/12/25/dynamic-scope-clojure.html)，[大多数情况下](https://stuartsierra.com/2013/03/29/perils-of-dynamic-scope)--稍后会更详细说明）。'
- en: 'It turns out that the research community has figured out the difference is
    that implicit parameters are a coeffect. I believe this was first observed in
    [Coeffects: Unified static analysis of context-dependence](http://tomasp.net/academic/papers/coeffects/coeffects-icalp.pdf)
    (a more modern presentation is in [Coeffects: A calculus of context-dependent
    computation](https://www.doc.ic.ac.uk/~dorchard/publ/coeffects-icfp14.pdf); and
    a more Haskelly presentation can be found in [Embedding effect systems in Haskell](http://tomasp.net/academic/papers/haskell-effects/haskell-effects.pdf)).
    Although, Tomas was [commenting on my blog in 2012](http://blog.ezyang.com/2012/10/generalizing-the-programmable-semicolon/)
    about similar ideas, so this probably had been in the works for a while. The key
    point is that for some coeffects (namely, implicit parameters), call-by-name reduction
    preserves types and coeffects, and so implicit parameters do not blow up in your
    face in the same way dynamic scoping (an effect) would. These necessarily behave
    differently! Type classes are coeffects too, and this is why modern use of implicit
    parameters in Haskell explicitly acknowledges this (e.g., in the reflection package).'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 研究界已经发现，隐式参数与**附效**有所不同。我相信这最初是在[Tomas Petricek](http://tomasp.net/academic/papers/coeffects/coeffects-icalp.pdf)的研究中首次观察到的（更现代的呈现在[Tomas
    Petricek](https://www.doc.ic.ac.uk/~dorchard/publ/coeffects-icfp14.pdf); 更Haskelly的呈现可以在[Tomas
    Petricek](http://tomasp.net/academic/papers/haskell-effects/haskell-effects.pdf)找到）。然而，Tomas在2012年[在我的博客上发表评论](http://blog.ezyang.com/2012/10/generalizing-the-programmable-semicolon/)，探讨了类似的想法，所以这可能已经在酝酿了一段时间了。关键点是，对于一些附效（即隐式参数），按名调用的减少保持类型和附效，因此隐式参数不会像动态作用域（一种效果）那样在使用时出现问题。这些肯定有不同的行为方式！类型类也是附效，这就是为什么Haskell中现代隐式参数的使用明确承认了这一点（例如，在反射包中）。
- en: At this year's ICFP, I was pointed at an interesting technical report about
    [implicit values and functions](https://www.microsoft.com/en-us/research/uploads/prod/2019/03/implicits-tr-v2.pdf)
    in Koka, a new twist on the dynamic scoping. I found myself wondering if Haskell
    implicit parameters could learn a thing or two from this work. Implicit values
    make the good choice of defining implicit values globally at the top level, so
    that they can participate in normal module namespacing, as opposed to an un-namespaced
    bag of dynamically scoped names (this is also an improvement that reflection makes
    over implicit parameters). But actually, it seems to me that implicit functions
    are taking a page from implicit parameters!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在今年的ICFP上，我看到了有关[Koka中隐式值和函数](https://www.microsoft.com/en-us/research/uploads/prod/2019/03/implicits-tr-v2.pdf)的有趣技术报告，这是动态作用域的一个新变化。我不禁想到了Haskell隐式参数可能从这项工作中学到一些东西。隐式值明智地选择在顶层全局定义隐式值，以便它们可以参与正常的模块命名空间，而不是一组没有命名空间的动态作用域名称（这也是反射在隐式参数上的改进）。但实际上，隐式函数似乎正在借鉴隐式参数的一部分！
- en: The big innovation is the implicit function is that it resolves all dynamic
    references in the function (not just lexically, but for all further dynamic calls)
    to the lexical scope (the dynamic scope at the time the function was defined),
    producing a function that has no dependence on implicit values (aka, has no *effect*
    saying that the implicit value must be defined at the time the function is called.)
    This is exactly what an implicit parameter `let ?x = ...` binding would have done,
    in effect directly filling in the dictionary for the implicit function at definition
    site, rather than waiting. Very contextual! (Of course, Koka implements this using
    algebraic effects, and gets to the right semantics with a very simple translation
    anyway). The result is not exactly dynamic scoping, but as the TR says, it leads
    to better abstraction.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 最大的创新在于隐式函数，它解决了函数中所有动态引用（不仅仅是词法上，而是所有后续的动态调用）到词法范围（函数定义时的动态范围）的问题，生成一个函数，它不依赖于隐式值（也就是说，没有*效果*表明在调用函数时必须定义隐式值）。这正是隐式参数`let
    ?x = ...`绑定会做的事情，在定义时直接为隐式函数填充字典，而不是等待。非常具有上下文意识！（当然，Koka使用代数效应实现了这一点，并通过非常简单的转换得到了正确的语义）。结果并不完全是动态作用域，但正如TR所述，它导致更好的抽象。
- en: It is difficult to see how implicit values/functions could make their way back
    into Haskell, at least without some sequencing constructing (e.g., a monad) lurking
    around. Though implicit functions behave much like implicit parameters, the rest
    of the dynamic scoping (including the binding of the implicit function itself)
    is just good old effectful (not coeffectful) dynamic scope. And you can't just
    do that in Haskell, without breaking type preservation under beta-reduction and
    eta-expansion. Haskell has no choice but to go *all the way*, and once you get
    beyond the obvious problems of implicit parameters (which reflection fixes), things
    seem to mostly work out.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 很难想象隐式值/函数如何重新进入Haskell，至少不是在某种序列构造（例如，一个单子）潜伏的情况下。尽管隐式函数的行为很像隐式参数，但其余的动态作用域（包括隐式函数本身的绑定）仍然是良好的旧有效果动态作用域。你不能在Haskell中轻易实现这一点，因为这会破坏在Beta-还原和Eta-扩展下的类型保持性。Haskell别无选择，只能*走到底*，一旦你超越了隐式参数的明显问题（这是反射修复的），事情似乎大部分可以解决。
