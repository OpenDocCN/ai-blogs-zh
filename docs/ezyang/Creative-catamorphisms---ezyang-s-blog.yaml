- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:18:21'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:18:21'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Creative catamorphisms : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创造性折叠映射：ezyang 的博客
- en: 来源：[http://blog.ezyang.com/2010/04/creative-catamorphisms/](http://blog.ezyang.com/2010/04/creative-catamorphisms/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/04/creative-catamorphisms/](http://blog.ezyang.com/2010/04/creative-catamorphisms/)
- en: '*The bag of programming tricks that has served us so well for the last 50 years
    is the wrong way to think going forward and must be thrown out.*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*过去50年来为我们服务良久的编程技巧包是前行的错误方式，必须被抛弃。*'
- en: 'Last week, Guy Steele came in and did a guest lecture ["The Future is Parallel:
    What''s a Programmer to Do?"](http://groups.csail.mit.edu/mac/users/gjs/6.945/readings/MITApril2009Steele.pdf)
    for my advanced symbolic class (6.945). It''s a really excellent talk; such an
    excellent talk that I had seen the slides for prior to the talk. However hearing
    Guy Steele talk about it in person really helped set things in context for me.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 上周，Guy Steele 来了，为我高级符号课（6.945）做了一次客座讲座 ["未来是并行的：程序员该怎么做？"](http://groups.csail.mit.edu/mac/users/gjs/6.945/readings/MITApril2009Steele.pdf)。这真是一场非常精彩的演讲；如此出色的演讲，以至于在演讲之前我已经看过幻灯片。然而，听
    Guy Steele 亲自讲述确实帮助我更好地理解了背景。
- en: 'One of the central points of the talk is the call for more *creative catamorphisms.*
    Well, what is a creative catamorphism? To answer this question, we first have
    to understand what a catamorphism is. The functional programming crowd is well
    familiar with a few relatively banal examples of the catamorphism, namely the
    left fold and the right fold. One way to think about folds is simply a "level
    of abstraction" above a loop one might write in an imperative language. Another
    way to think of the fold is replacing the type constructor for the list (the cons
    or `:` operation) with another function, as seen in Cale Gibbard''s excellent
    diagrams:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 演讲的核心观点之一是呼吁更多*创造性的折叠映射*。那么，什么是创造性的折叠映射？要回答这个问题，我们首先要了解什么是折叠映射。函数式编程群体对折叠映射有一些相对平凡的例子非常熟悉，即左折叠和右折叠。理解折叠的一种方式只是比在命令式语言中编写的循环更高一层次的“抽象水平”。折叠的另一种方式是用另一个函数替换列表的类型构造器（cons
    或 `:` 操作），如 Cale Gibbard 的出色图表所示：
- en: The point of the catamorphism is that this doesn't need to apply just to lists;
    in fact, we can run a catamorphism on *any* recursive data structure! Just make
    a function for each constructor in the type, with the appropriate arity (so a
    ternary tree would require functions that take three arguments, and so forth),
    and let her rip! This is vitally important because the old left and right fold
    are the "wrong way to think"; by the very nature of their structure they require
    you to evaluate sequentially. But set things up in a binary tree, and you can
    evaluate all the subtrees first before combining them at the end.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 折叠映射的要点在于，这不仅适用于列表；事实上，我们可以对*任何*递归数据结构运行折叠映射！只需为类型中的每个构造器编写一个函数，具有适当的元数（因此三元树将需要接受三个参数的函数，依此类推），然后让它发挥作用！这非常重要，因为老式的左折叠和右折叠是“错误的思维方式”；由于它们的结构特性，它们要求你按顺序评估。但是在二叉树中设置好结构，你可以在最后组合它们之前先评估所有子树。
- en: So what is a *creative* catamorphism? It's when the original recursive data
    structure doesn't map cleanly on to the atoms that your computation wants to deal
    with. The example Guy Steele discusses in his talk is the time honored task of
    breaking a string into its words. A string is merely a list of characters, which
    only lets us handle it character by character (traditional sequential), or a naive
    transformation into a binary tree, which only gives us efficient bisection (parallelizable).
    The trouble with naive bisection is that it might split in the middle of the word,
    so our combining function has to account for this case. How to deal with this
    is left as an exercise for the reader (or you can go read the slides.)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是*创造性*的折叠映射（catamorphism）？这是当原始递归数据结构无法清晰地映射到计算需要处理的原子时。Guy Steele 在他的演讲中讨论的例子是传统任务，将字符串分解为单词。字符串仅仅是字符列表，这仅让我们逐个字符处理（传统顺序），或者是朴素地转换为二叉树，这只提供了高效的二分（可并行化）。朴素二分的问题在于可能在单词中间分割，因此我们的合并函数必须考虑这种情况。如何处理这个问题留给读者作为练习（或者你可以去看幻灯片）。
- en: 'In fact, this was the critical moment when I understood the global reasoning
    behind what Edward Kmett was talking about when he gave his (in my opinion pretty
    crazy) talk on ["A Parallel Parsing Trifecta: Iteratees, Parsec, and Monoids"](http://comonad.com/reader/wp-content/uploads/2009/08/A-Parsing-Trifecta.pdf).
    The goal of this code is to massively parallelize parsing by splitting up the
    input document into chunks and then recombining them with the parsing function.
    He has to deal with the same problems that showed up in the toy example in Steele''s
    talk, and he pulls out all sorts of tricks to get things pumping.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这是我理解Edward Kmett在他关于["并行解析三连击：迭代器、Parsec和单子"](http://comonad.com/reader/wp-content/uploads/2009/08/A-Parsing-Trifecta.pdf)的（在我看来相当疯狂）演讲背后的全局推理的关键时刻。这段代码的目标是通过将输入文档分割成块并使用解析函数重新组合它们来进行大规模并行解析。他不得不处理与Steele演讲中的玩具示例中出现的相同问题，并采用各种技巧来解决这些问题。
- en: I will admit, the work is complicated, and at times, it feels like overkill.
    But it's a brave new parallel world, and it's time we fully explore the designs
    and implications of it. With any luck, we will be able to write parallel programs
    as naturally we can write sequential programs, but it's a long way getting there.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我承认，这项工作很复杂，有时感觉有点过火。但这是一个勇敢的新并行世界，现在是我们充分探索其设计和影响的时候了。带着一些运气，我们将能够像写顺序程序一样自然地编写并行程序，但这条路还很漫长。
- en: '* * *'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Update (2013-05-21).** Oleg writes in to tell me that there is actually a
    name for these types of tricks: an *almost homomorphism*. It is not surprising
    to see that the [work described in the Skepara project](http://research.nii.ac.jp/~hu/project/skepara.html)
    collaborated with Guy Steele and the Fortress project; it is well worth checking
    out for a *calculational* approach for deriving these catamorphisms.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**更新（2013-05-21）。** Oleg 给我写信说，这些技巧实际上有一个名称：*准同态*。看到在[Skepara项目描述的工作](http://research.nii.ac.jp/~hu/project/skepara.html)与Guy
    Steele和Fortress项目合作，确实是值得一看，因为它提供了一种*计算方法*来推导这些catamorphism。'
