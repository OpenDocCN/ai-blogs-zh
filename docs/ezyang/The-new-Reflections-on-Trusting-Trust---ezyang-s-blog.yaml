- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:39'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:39'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'The new Reflections on Trusting Trust : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新的《反思信任的信任》：ezyang 的博客
- en: 来源：[http://blog.ezyang.com/2011/10/the-new-reflections-on-trusting-trust/](http://blog.ezyang.com/2011/10/the-new-reflections-on-trusting-trust/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2011/10/the-new-reflections-on-trusting-trust/](http://blog.ezyang.com/2011/10/the-new-reflections-on-trusting-trust/)
- en: 'In his classic essay [Reflections on Trusting Trust](http://cm.bell-labs.com/who/ken/trust.html),
    Ken Thompson describes a self-replicating compiler bug which is undetectable by
    source code inspection. The self-replication is made possible by the fact that
    most compilers are self-compiling: old versions of a compiler are used to compile
    new ones, and if the old version is malicious, it can slip the same bug when it
    detects it is compiling itself.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在他的经典文章[反思信任的信任](http://cm.bell-labs.com/who/ken/trust.html)中，Ken Thompson描述了一种通过源代码检查无法检测到的自复制编译器错误。这种自复制是由于大多数编译器是自编译的：旧版本的编译器用于编译新版本，如果旧版本是恶意的，则在检测到它正在编译自身时它可以滑入相同的错误。
- en: 'A new trend is precisely this self-hosting process, but for [self-certifying
    typecheckers](http://research.microsoft.com/en-us/projects/fstar/): typecheckers
    which are used to prove their own correctness. (Note that these are powerful typecheckers,
    close to being able to check arbitrary theorems about code.) This may seem a little
    odd, since I could write a trivial typechecker which always claimed it was correct.
    In order to work around this, we must bootstrap the correctness proof by proving
    the typechecker correct in another language (in the case of F*, this language
    is Coq). Once this has been done, we can then use this verified typechecker to
    check a specification of itself. This process is illustrated below.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一个新的趋势恰恰是这种自托管的过程，但对于[自我认证的类型检查器](http://research.microsoft.com/en-us/projects/fstar/)：用于证明其自身正确性的类型检查器。（请注意，这些是强大的类型检查器，几乎能够检查关于代码的任意定理。）这可能看起来有点奇怪，因为我可以编写一个微不足道的类型检查器，它总是声称自己是正确的。为了解决这个问题，我们必须通过在另一种语言中（在F*的情况下，这种语言是Coq）证明类型检查器的正确性来启动正确性证明的引导过程。一旦完成了这个过程，我们就可以使用这个经过验证的类型检查器来检查它自身的规范。这个过程如下图所示。
- en: The question then is whether or not such self-certifying typecheckers are similarly
    vulnerable to the problem Ken described for self-hosting compilers. For arguments
    sake, let's assume that the backend compiler and runtime are certified (a strong
    assumption that is almost universally untrue, including for F*). Since the typechecker
    can't insert malicious bugs into the programs it compiles (it only, you know,
    typechecks), one would have to rely on a bug in the source code itself. Surely
    such a bug would be obvious!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 那么问题是是否类似的自我认证的类型检查器对于Ken所描述的自托管编译器问题同样容易受到攻击。从论据上来说，让我们假设后端编译器和运行时是验证过的（这是一个几乎普遍不成立的强假设，包括对于F*也是如此）。由于类型检查器无法在它编译的程序中插入恶意的bug（它只是，你知道，类型检查），一个人必须依赖于源代码本身的bug。当然，这样的bug肯定是显而易见的！
- en: 'This is unclear: we have certified our implementation, but what of our specification?
    In Coq, we proved various theorems about the soundness and adequacy of our type
    system, which give us at least some hope that it is correct in the way we expect.
    But these proofs are nowhere to be seen in the emancipated F* world. If we want
    to evolve our specification (less plausible for a full-blooded dependently typed
    language, but within the realm of possibility for a less powerful one), we must
    turn back to Coq and adjust the relevant theorems. Otherwise, we run the risk
    of changing our type system to an unsound one.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是不清楚的：我们已经验证了我们的实现，但是我们的规范呢？在 Coq 中，我们证明了关于我们类型系统的声音性和适当性的各种定理，这至少让我们有些希望它在我们期望的方式上是正确的。但是这些证明在解放的
    F* 世界中无处可见。如果我们想要发展我们的规范（对于一个全面依赖类型的语言来说可能性较小，但对于一个不那么强大的语言来说可能性在可能的范围内），我们必须回到
    Coq 并调整相关的定理。否则，我们面临将我们的类型系统改变为不完备的风险。
- en: 'Fortunately, that''s all we have to do: we can use the old F* type checker
    to certify the new one, rather than attempt to export certificates and reverify
    with them Coq. All told, though, don''t throw out your Coq code yet... not, at
    least, if you think your type system may change in the future.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，这就是我们所要做的：我们可以使用旧的F*类型检查器来验证新的类型检查器，而不是试图导出证书并用它们重新验证Coq。总的来说，不要把你的Coq代码扔掉...
    至少，如果你认为你的类型系统可能在未来发生变化的话。
