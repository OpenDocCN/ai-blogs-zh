- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:03'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:03'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'How to integrate GHC API programs with Cabal : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[如何将 GHC API 程序与 Cabal 集成](http://blog.ezyang.com/2017/02/how-to-integrate-ghc-api-programs-with-cabal/)：ezyang
    的博客'
- en: 来源：[http://blog.ezyang.com/2017/02/how-to-integrate-ghc-api-programs-with-cabal/](http://blog.ezyang.com/2017/02/how-to-integrate-ghc-api-programs-with-cabal/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2017/02/how-to-integrate-ghc-api-programs-with-cabal/](http://blog.ezyang.com/2017/02/how-to-integrate-ghc-api-programs-with-cabal/)
- en: 'GHC is not just a compiler: it is also a library, which provides a variety
    of functionality that anyone interested in doing any sort of analysis on Haskell
    source code. Haddock, hint and ghc-mod are all packages which use the GHC API.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: GHC 不仅是一个编译器：它还是一个库，提供了多种功能，任何对 Haskell 源代码进行分析感兴趣的人都可以使用。Haddock、hint 和 ghc-mod
    都是使用 GHC API 的包。
- en: One of the challenges for any program that wants to use the GHC API is integration
    with Cabal (and, transitively, cabal-install and Stack). The most obvious problem
    that, when building against packages installed by Cabal, GHC needs to be passed
    appropriate flags telling it which package databases and actual packages should
    be used. At this point, people tend to adopt [some hacky strategy](https://groups.google.com/forum/#!topic/haskell-cafe/3ZgLB2khhcI)
    to get these flags, and hope for the best. For commonly used packages, this strategy
    will get the job done, but for the rare package that needs something extra--preprocessing,
    extra GHC flags, building C sources--it is unlikely that it will be handled correctly.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于希望使用 GHC API 的任何程序而言，与 Cabal（以及通过它的 cabal-install 和 Stack）集成是一个挑战。最明显的问题是，在构建时针对由
    Cabal 安装的包时，需要向 GHC 传递适当的标志，告诉它应该使用哪些包数据库和实际包。在这一点上，人们往往采用 [某些不太正规的策略](https://groups.google.com/forum/#!topic/haskell-cafe/3ZgLB2khhcI)
    来获取这些标志，并希望一切顺利。对于常用的包，这种策略可以完成任务，但对于需要额外处理的罕见包（例如预处理、额外的 GHC 标志、构建 C 源码），不太可能得到正确处理。
- en: 'A more reliable way to integrate a GHC API program with Cabal is *inversion
    of control*: have Cabal call your GHC API program, not the other way around! How
    are we going to get Cabal/Stack to call our GHC API program? What we will do is
    replace the GHC executable which passes through all commands to an ordinary GHC,
    except for `ghc --interactive`, which we will then pass to the GHC API program.
    Then, we will call `cabal repl`/`stack repl` with our overloaded GHC, and where
    we would have opened a GHCi prompt, instead our API program gets run.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Cabal 集成 GHC API 程序的一个更可靠的方法是*控制反转*：让 Cabal 调用你的 GHC API 程序，而不是反过来！我们要如何让
    Cabal/Stack 调用我们的 GHC API 程序？我们将替换掉经过所有命令的普通 GHC 的 GHC 可执行文件，除了 `ghc --interactive`，我们将将其传递给
    GHC API 程序。然后，我们将使用我们重载的 GHC 调用 `cabal repl`/`stack repl`，在我们本来会打开 GHCi 提示符的地方，我们将运行我们的
    API 程序。
- en: With this, all of the flags which would have been passed to the invocation of
    `ghc --interactive` are passed to our GHC API program. How should we go about
    parsing the flags? The most convenient way to do this is by creating a [frontend
    plugin](https://downloads.haskell.org/~ghc/master/users-guide/extending_ghc.html#frontend-plugins),
    which lets you create a new major mode for GHC. By the time your code is called,
    all flags have already been processed (no need to muck about with `DynFlags`!).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，所有应该传递给 `ghc --interactive` 调用的标志都传递给我们的 GHC API 程序。我们如何解析这些标志？最方便的方法是创建一个
    [前端插件](https://downloads.haskell.org/~ghc/master/users-guide/extending_ghc.html#frontend-plugins)，这样你可以为
    GHC 创建一个新的主要模式。当你的代码被调用时，所有标志已经被处理过了（无需与 `DynFlags` 纠缠！）。
- en: 'Enough talk, time for some code. First, let''s take a look at a simple frontend
    plugin:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 言归正传，是时候写一些代码了。首先，让我们看一个简单的前端插件：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This frontend plugin is taken straight from the GHC documentation (but with
    enough imports to make it compile ;-). It prints out the arguments passed to it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这个前端插件直接来自 GHC 文档（但导入了足够的内容以使其能够编译；-)）。它打印出传递给它的参数。
- en: 'Next, we need a wrapper program around GHC which will invoke our plugin instead
    of regular GHC when we are called with the `--interactive` flag. Here is a simple
    script which works on Unix-like systems:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要一个围绕 GHC 的包装程序，当以 `--interactive` 标志调用时，将调用我们的插件而不是常规的 GHC。以下是适用于类 Unix
    系统的简单脚本：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Give this a Cabal file, and then install it to the user package database with
    `cabal install` (see the second bullet point below if you want to use a non-standard
    GHC via the `-w` flag):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 给这个 Cabal 文件，并使用 `cabal install` 将其安装到用户包数据库中（如果你想使用非标准的 GHC，请参阅下面的第二个要点）：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, to run your plugin, you can do any of the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要运行你的插件，你可以执行以下任意一种方法：
- en: '`cabal repl -w hello-plugin`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cabal repl -w hello-plugin`'
- en: '`cabal new-repl -w hello-plugin`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cabal new-repl -w hello-plugin`'
- en: '`stack repl --system-ghc --with-ghc hello-plugin`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stack repl --system-ghc --with-ghc hello-plugin`'
- en: To run the plugin on a specific package, pass the appropriate flags to the `repl`
    command.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要在特定包上运行插件，请将适当的标志传递给`repl`命令。
- en: The full code for this example can be retrieved at [ezyang/hello-plugin](https://github.com/ezyang/hello-plugin)
    on GitHub.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例的完整代码可以在GitHub上的[ezyang/hello-plugin](https://github.com/ezyang/hello-plugin)检索到。
- en: 'Here are a few miscellaneous tips and tricks:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些杂项提示和技巧：
- en: To pass extra flags to the plugin, add `--ghc-options=-ffrontend-opt=arg` as
    necessary (if you like, make another wrapper script around this!)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如有必要，可以添加`--ghc-options=-ffrontend-opt=arg`来向插件传递额外的标志（如果愿意，可以围绕这一点编写另一个包装脚本！）
- en: If you installed `hello-plugin` with a GHC that is not the one from your PATH,
    you will need to put the correct `ghc`/`ghc-pkg`/etc executables first in the
    PATH; Cabal's autodetection will get confused if you just use `-w`. If you are
    running `cabal`, another way to solve this problem is to pass `--with-ghc-pkg=PATH`
    to specify where `ghc-pkg` lives (Stack does not support this.)
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您使用的GHC不是来自您的PATH的那个安装了`hello-plugin`，您需要将正确的`ghc`/`ghc-pkg`/等可执行文件放在PATH的最前面；如果您仅使用`-w`，Cabal的自动检测将会混淆。如果您正在运行`cabal`，解决此问题的另一种方法是通过传递`--with-ghc-pkg=PATH`来指定`ghc-pkg`的位置（Stack不支持此功能）。
- en: You don't have to install the plugin to your user package database, but then
    the wrapper program needs to be adjusted to be able to find wherever the package
    does end up being installed. I don't know of a way to get this information without
    writing a Custom setup script with Cabal; hopefully installation to the user package
    database is not too onerous for casual users.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您不必将插件安装到用户包数据库中，但是需要调整包装程序以便能够找到包实际安装的位置。我不知道有什么方法可以在不编写自定义设置脚本的情况下获取此信息；希望将插件安装到用户包数据库中对于普通用户来说不会太麻烦。
- en: '`cabal-install` and `stack` differ slightly in how they go about passing home
    modules to the invocation of GHCi: `cabal-install` will call GHC with an argument
    for every module in the home package; Stack will pass a GHCi script of things
    to load. I''m not sure which is more convenient, but it probably doesn''t matter
    too much if you know already know which module you want to look at (perhaps you
    got it from a frontend option.)'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cabal-install`和`stack`在如何传递主模块给GHCi的调用上略有不同：`cabal-install`将为每个主包模块调用GHC；Stack将传递一个GHCi脚本以加载这些内容。我不确定哪种方法更方便，但如果您已经知道要查看哪个模块（可能是从前端选项中获得的），那可能并不太重要。'
