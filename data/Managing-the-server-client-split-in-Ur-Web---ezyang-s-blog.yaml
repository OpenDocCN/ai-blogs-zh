- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-07-01 18:17:29'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-07-01 18:17:29
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Managing the server/client split in Ur/Web : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理Ur/Web中的服务器/客户端分离：ezyang的博客
- en: 来源：[http://blog.ezyang.com/2012/07/managing-the-server-client-split-in-ur-web/](http://blog.ezyang.com/2012/07/managing-the-server-client-split-in-ur-web/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2012/07/managing-the-server-client-split-in-ur-web/](http://blog.ezyang.com/2012/07/managing-the-server-client-split-in-ur-web/)
- en: 'The holy grail of web application development is a *single language* which
    runs on both the server side and the client side. The reasons for this are multifarious:
    a single language promotes reuse of components that no longer need to be reimplemented
    in two languages and allows for much more facile communication between the server
    and the client. Web frameworks that explicitly strive to handle both the server
    and client include [Meteor](http://www.meteor.com/), [Ur/Web](http://www.impredicative.com/ur/),
    [Opa](http://opalang.org/) and [Google Web Toolkit](https://developers.google.com/web-toolkit/overview).'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序开发的圣杯是一种*单一语言*，既可以在服务器端运行，也可以在客户端运行。其原因是多方面的：单一语言促进了组件的重用，不再需要在两种语言中重新实现，并且允许服务器和客户端之间进行更轻松的通信。明确努力处理服务器和客户端的Web框架包括[Meteor](http://www.meteor.com/)、[Ur/Web](http://www.impredicative.com/ur/)、[Opa](http://opalang.org/)和[Google
    Web Toolkit](https://developers.google.com/web-toolkit/overview)。
- en: 'One of the biggest implementation difficulties facing anyone wishing to build
    such a system is the fact that there are multiple runtimes: the server runtime
    and the browser runtime, each with an accordingly different set of primitives
    and APIs available. Furthermore, some code we might wish to only live on the server,
    and never be sent to the client. When a language feature can be implemented on
    both runtimes, we maintain the illusion that client and server are indistinguishable;
    when it cannot, the illusion is broken.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 任何希望构建这样一个系统的人面临的最大实施困难之一是存在多个运行时：服务器运行时和浏览器运行时，每个都有相应不同的原语和可用的API。此外，我们可能希望某些代码仅存在于服务器上，而不发送到客户端。当某个语言特性可以在两个运行时上实现时，我们保持客户端和服务器不可区分的假象；当无法时，这种假象就破灭了。
- en: 'Thus, in order to support runtime-specific FFI calls in such an integrated
    language, the following questions must be answered:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了支持在这种集成语言中运行时特定的FFI调用，必须回答以下问题：
- en: When is code sent to the client and when is code kept on the server? This information
    must be exposed to the user (rather than be kept as an “implementation detail”).
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码何时发送到客户端，何时保留在服务器上？这些信息必须对用户进行公开（而不是作为“实现细节”保留）。
- en: How do I force execution on the server?
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何强制在服务器上执行？
- en: How do I force execution on the client?
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何强制在客户端执行？
- en: In this blog post, I’ll discuss how [Ur/Web](http://www.impredicative.com/ur/)
    addresses these questions. The answers are rather simple (any with any luck generalize
    to other similar systems), but they are rather difficult to come by if you treat
    the compiler as a black box.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇博文中，我将讨论[Ur/Web](http://www.impredicative.com/ur/)如何解决这些问题。答案相当简单（如果有幸可以推广到其他类似系统），但如果你把编译器视为黑匣子，那么找到它们就相当困难。
- en: 1\. Client/server split
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1\. 客户端/服务器分割
- en: 'An obvious solution to the client/server division problem is to label entry
    points (e.g. the main function or an onClick handler) as starting from the server
    (main) or client (onClick), and then conducting reachability analysis to label
    all other functions. Thus, in the following Ur/Web code, `txn : transaction unit`
    would execute on the server here:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '解决客户端/服务器分割问题的一个明显解决方案是标记入口点（例如主函数或onClick处理程序）为从服务器（main）或客户端（onClick）开始，然后进行可达性分析以标记所有其他函数。因此，在下面的Ur/Web代码中，`txn
    : transaction unit` 将在这里在服务器上执行：'
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'while it would execute on the client here:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在此处它将在客户端执行：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When given a fragment like this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当给定像这样的片段时：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: it is not possible to know whether or not `txn` will be needed on the client
    side or server side without analyzing all of the callers and checking if they
    are client side or server side. Situations like this are the most important for
    forcing server-side or client-side behavior.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 无法知道`txn`是否在客户端或服务器端需要执行，除非分析所有调用方并检查它们是客户端还是服务器端。像这样的情况对于强制服务器端或客户端行为至关重要。
- en: 2\. Forcing server-side
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2\. 强制服务器端
- en: 'Suppose that we wanted to force `txn` to be executed on the server-side. If
    we’re already on the server, there is nothing more to do. However, if we’re on
    the client, we need to make an RPC call back to the server. In Ur/Web, this is
    easily done:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们希望强制`txn`在服务器端执行。如果我们已经在服务器上，那就没有更多的事情要做了。但是，如果我们在客户端，我们需要向服务器发起RPC调用。在Ur/Web中，这很容易实现：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: However, as `rpc` is a client-side only function in Ur/Web, we can no longer
    use this function for server-side computation. One consequence of this choice
    is it forces us to be explicit about when an RPC occurs, which is good news for
    understanding and security.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于`rpc`在Ur/Web中仅限于客户端功能，我们无法再将此功能用于服务器端计算。这种选择的一个后果是，它迫使我们明确何时发生RPC，这对于理解和安全性来说是个好消息。
- en: 3\. Forcing client-side
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3\. 强制客户端执行
- en: 'Suppose we wanted to force `txn` to be executed on the client-side. This is
    tricky: if we’re already on the client we can go ahead as normal, but if we’re
    executing in the server side, *what does it mean to execute some code on the client*?'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们希望强制`txn`在客户端执行。这很棘手：如果我们已经在客户端，我们可以像往常一样继续，但如果我们在服务器端执行，*在客户端执行某些代码*是什么意思呢？
- en: 'One interpretation is this: since we are building some HTML that is to be shown
    to the client, `txn` should be run when the client actually displays the HTML.
    Ur/Web recently added the `active` tag which achieves just this effect:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一种解释是这样的：因为我们正在构建一些要显示给客户端的HTML，当客户端实际显示HTML时，应该运行`txn`。最近Ur/Web添加了`active`标签，实现了这种效果：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `code` attribute acts much like `onclick` and other similar attributes,
    in that it defines an entry point which happens to automatically get run when
    shown in the browser. It is still an event handler, in the sense that if someone
    invokes `fooServer`, but then doesn’t end up using the HTML, `txn` never gets
    called: `active` can be thought of a sort of lazy execution.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`code`属性的行为与`onclick`和其他类似属性类似，因为它定义了一个入口点，当在浏览器中显示时自动运行。它仍然是一个事件处理程序，因为如果有人调用了`fooServer`，但随后没有使用HTML，`txn`就不会被调用：`active`可以被视为一种延迟执行。'
- en: 'If we would truly like the client to execute some code *immediately*, our best
    bet is to shove an `active` tag down a `source` which is hooked up to an active
    `dyn` element:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们真的希望客户端立即执行某些代码，我们最好的选择是将`active`标签插入到与活动`dyn`元素挂钩的`source`中：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'but in this case it is not really possible to ask the client what the result
    of the computation was (the server is not permitted to block!) This method of
    mobile code delivery can even be done asynchronously, using channels:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 但在这种情况下，实际上不可能询问客户端计算的结果（服务器不允许阻塞！）这种移动代码传递方法甚至可以异步完成，使用通道：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 4\. Interaction with the optimizer
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4\. 与优化器的交互
- en: 'The code within HTML event handlers (e.g. `onclick={...}` and `active code={...}`)
    can have free variables which bind to variables in their lexical scope, which
    may have been calculated from the server. As such, you might expect in this case,
    `foo : int -> xbody` would be executed on the server:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 'HTML事件处理程序中的代码（例如`onclick={...}`和`active code={...}`）可以有自由变量，这些自由变量绑定到它们的词法作用域中的变量，这些变量可能是从服务器计算的。因此，在这种情况下，您可以期望`foo:
    int -> xbody`在服务器上执行：'
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'However, Ur/Web’s optimizer is too smart for it’s own good: since `foo` is
    pure and thus referentially transparent, it can always be safely inlined (especially
    when there is only one use-site):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Ur/Web的优化器太聪明了：由于`foo`是纯的，因此引用透明，它总是可以安全地内联（特别是当只有一个使用点时）：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Written this way, it is clear that `foo` is run from the client. Thus, an innocent
    transformation can break your code, if `foo` was a server FFI called that was
    unimplemented on the client.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这样写，清楚地表明`foo`是从客户端运行的。因此，如果`foo`是一个在客户端未实现的服务器FFI调用，那么一个无辜的转换就可能破坏您的代码。
- en: The troubling conclusion is that variable substitution *can make valid programs
    invalid*. Of course, in an eagerly evaluated, impure language, variable substitution
    is not valid. But we might expect it to be true for a pure language like Ur/Web.
    In any case, we can teach Ur/Web not to inline by marking `foo` as being `benignEffectful`
    in our `urp` file.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 令人困扰的结论是变量替换*可能使有效的程序无效*。当然，在急切评估、不纯的语言中，变量替换是无效的。但我们可能期望在像Ur/Web这样的纯语言中是真的。无论如何，我们可以通过在我们的`urp`文件中将`foo`标记为`benignEffectful`来教会Ur/Web不内联。
- en: 5\. Conclusions
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5\. 结论
- en: 'In general, when writing Ur/Web applications, here are some useful guidelines:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，在编写Ur/Web应用程序时，以下是一些有用的指导原则：
- en: Always mark server/client-only identifiers with `serverOnly` and `clientOnly`
    in your `urp` files. Ur/Web will generally handle one-sided FFI functions appropriately,
    but if you have code that takes advantage of language features that are only implemented
    on one side (e.g. closures on the server side), be sure to mark those functions
    appropriately.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 始终在你的`urp`文件中用`serverOnly`和`clientOnly`标记仅限服务器或仅限客户端的标识符。Ur/Web 通常会适当处理单向 FFI
    函数，但如果你的代码利用了只在一侧实现的语言特性（例如服务器端的闭包），请确保适当标记这些函数。
- en: Use `rpc` to move from client-to-server, and `active` to move from server-to-client.
    Because of the “`rpc` must refer to named function” invariant, the general structure
    of Ur/Web applications will be blobs of server code with client-side code embedded
    internally.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`rpc`从客户端到服务器传输，使用`active`从服务器到客户端传输。由于“`rpc`必须引用命名函数”的不变性，Ur/Web 应用程序的一般结构将是服务器代码块内部嵌入的客户端代码。
- en: If you are interested in generating client code that includes pure server-computed
    data, make sure the functions computing that data are marked `benignEffectful`.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你对生成包含纯服务器计算数据的客户端代码感兴趣，请确保计算该数据的函数被标记为`benignEffectful`。
- en: In general, don’t worry about the server/client split! Ur/Web will warn you
    if you need to move things around, but for the most part, things should just work.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一般来说，不必担心服务器/客户端分离！Ur/Web 会在需要移动东西时提醒你，但大部分情况下，事情应该顺利进行。
- en: 'One last word about security in a shared server/client model: how does Ur/Web
    ensure that input validation ends up on the server-side and not the client-side?
    It is rather simple: the only parts of your program that care about input validation
    are ones that involve persistent data, and all of these functions are server only.
    Thus, any user-data that makes it to any of these functions necessarily passed
    through a top-level page handler or an `rpc`, making it a relatively simple job
    to ensure that the validation is on the “right” side of the pond. If you use a
    data-structure that is correct-by-construction, you’re automatically done!'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 最后关于在共享服务器/客户端模型中的安全性问题：Ur/Web 如何确保输入验证最终在服务器端而不是客户端？这相当简单：程序中唯一关心输入验证的部分是涉及持久数据的部分，而所有这些函数都是仅限服务器的。因此，任何传递给这些函数的用户数据必定通过顶级页面处理程序或`rpc`，这使得确保验证在“正确”的一侧非常简单。如果你使用的是正确构造的数据结构，那么验证就会自动完成！
