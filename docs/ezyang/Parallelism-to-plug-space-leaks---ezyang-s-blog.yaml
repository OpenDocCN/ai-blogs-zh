- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:42'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:42'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Parallelism to plug space leaks : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 并行化以堵住空间泄漏：ezyang的博客
- en: 来源：[http://blog.ezyang.com/2011/07/parallelism-to-plug-space-leaks/](http://blog.ezyang.com/2011/07/parallelism-to-plug-space-leaks/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2011/07/parallelism-to-plug-space-leaks/](http://blog.ezyang.com/2011/07/parallelism-to-plug-space-leaks/)
- en: 'It is [not too difficult (scroll to “Non sequitur”)](http://blog.ezyang.com/2010/11/is-multiply-carry-strongly-universal/)
    to create a combinator which combines two folds into a single fold that operates
    on a single input list in one pass. This is pretty important if your input list
    is pretty big, since doing the folds separately could result in a space leak,
    as might be seen in the famous “average” space leak:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 创造一个组合器将两个折叠操作合并成单次输入列表操作的折叠，并不是太困难（请滚动至“非语句”）。如果你的输入列表很大，这一点非常重要，因为分开折叠可能导致空间泄漏，正如著名的“平均”空间泄漏所示：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '(I’ve redefined `sum` so we don’t stack overflow.) I used to think combining
    functions for folds were pretty modular, since they had a fairly regular interface,
    could be combined together, and really represented the core notion of when it
    was possible to eliminate such a space leak: obviously, if you have two functions
    that require random access to elements of the list, they’ll retain the entirety
    of it all the way through.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: （我重新定义了 `sum`，以免栈溢出。）我曾认为合并折叠函数非常模块化，因为它们具有相当规范的接口，可以互相组合，并且真正代表了什么时候可以消除这种空间泄漏的核心概念：显然，如果你有两个需要对列表元素进行随机访问的函数，它们将始终保留整个列表。
- en: 'Of course, a coworker of mine complained, “No! That’s not actually modular!”
    He wanted to write the nice version of the code, not some horrible gigantic fold
    function. This got me thinking: is it actually true that the compiler can’t figure
    out when two computations on a streaming data structure can be run in parallel?'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我的一位同事抱怨说：“不！这实际上并不是模块化的！”他想要编写代码的漂亮版本，而不是一些可怕的巨大折叠函数。这让我思考：编译器是否真的无法判断在流数据结构上两个计算是否可以并行运行？
- en: 'But wait! We can tell the compiler to run these in parallel:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 等等！我们可以告诉编译器并行运行这些：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: And lo and behold, the space leak goes away (don’t forget to compile with `-threaded`
    and run with at least `-N2`. With the power of multiple threads, both operations
    can run at the same time, and thus there is no unnecessary retention.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 令人惊讶的是，空间泄漏消失了（不要忘记用 `-threaded` 编译并至少用 `-N2` 运行）。利用多线程的力量，两个操作可以同时运行，因此没有不必要的保留。
- en: 'It is perhaps not too surprising that `par` can plug space leaks, given that
    `seq` can do so too. But `seq` has denotational content; `par` does not, and indeed,
    does nothing when you are single-threaded. This makes this solution very fragile:
    at runtime, we may or may not decide to evaluate the other thunk in parallel depending
    on core availability. But we can still profitably use `par` in a single-threaded
    context, if it can manage pre-emptive switching between two consumers of a stream.
    This would be a pretty interesting primitive to have, and it would also be interesting
    to see some sort of semantics which makes clear the beneficial space effects of
    such a function. Another unbaked idea is that we already have a notion of good
    producers and consumers for stream fusion. It doesn’t seem like too far a stretch
    that we could use this analysis to determine when consumers could be merged together,
    improving space usage.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 或许并不奇怪，`par` 能够解决空间泄漏问题，因为 `seq` 也能做到。但是 `seq` 具有表示内容；`par` 没有，并且在单线程时什么也不做。这使得这种解决方案非常脆弱：在运行时，我们可能会根据核心的可用性决定是否并行评估其他惰性求值。但是，在单线程环境中，我们仍然可以有益地使用
    `par`，如果它能够管理流的两个消费者之间的抢占式切换。这将是一个非常有趣的原语，并且看到某种明确说明这样一个函数有益于空间效果的语义也是很有趣的。另一个未成形的想法是，我们已经有了对流融合的好的生产者和消费者的概念。看起来我们可以使用这种分析来确定何时可以合并消费者，从而改善空间使用。
