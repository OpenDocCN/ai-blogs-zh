- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-07-01 18:18:11'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-07-01 18:18:11
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Generalizing APIs : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通用化 API：ezyang 博客
- en: 来源：[http://blog.ezyang.com/2010/08/generalizing-apis/](http://blog.ezyang.com/2010/08/generalizing-apis/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/08/generalizing-apis/](http://blog.ezyang.com/2010/08/generalizing-apis/)
- en: '*Edit.* ddarius pointed out to me that the type families examples were backwards,
    so I’ve flipped them to be the same as the functional dependencies.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*编辑.* ddarius 指出，类型族的例子是反过来的，所以我把它们调整成了与函数依赖相同的方式。'
- en: Type functions can be used to do all sorts of neat type-level computation, but
    perhaps the most basic use is to allow the construction of generic APIs, instead
    of just relying on the fact that a module exports “mostly the same functions”.
    How much type trickery you need depends on properties of your API—perhaps most
    importantly, on the properties of your data types.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 类型函数可用于执行各种精妙的类型级计算，但也许最基本的用途是允许构建通用 API，而不仅仅依赖于模块导出的“大部分相同的函数”。你需要多少类型技巧取决于
    API 的属性，也许最重要的是你的数据类型的属性。
- en: '* * *'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Suppose I have a single function on a single data type:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我有一个单一数据类型上的单一函数：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'and I would like to generalize it. I can do so easily by creating a *type class*:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 而我想要通用化它。我可以通过创建一个*类型类*来轻松实现：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Abstraction on a single type usually requires nothing more than vanilla type
    classes.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对单个类型的抽象通常只需要普通的类型类。
- en: '* * *'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Suppose I have a function on several data types:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我有一个在多个数据类型上的函数：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We’d like to abstract over `IntSet` and `Int`. Since all of our functions mention
    both types, all we need to do is write a *multiparameter type class*:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望对`IntSet`和`Int`进行抽象化。由于我们所有的函数都提到了这两种类型，我们所需做的就是编写一个*多参数类型类*：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '* * *'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'If we’re unlucky, some of the functions will not use all of the data types:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运气不好，一些函数可能不会使用所有的数据类型：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In which case, when we attempt to use the function, GHC will tell us it can’t
    figure out what instance to use:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，当我们尝试使用该函数时，GHC 会告诉我们它无法确定使用哪个实例：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'One thing to do is to introduce a *functional dependency* between `IntSet`
    and `Int`. A dependency means something is depending on something else, so which
    type depends on what? We don’t have much choice here: since we’d like to support
    the function `empty`, which doesn’t mention `Int` anywhere in its signature, the
    dependency will have to go from `IntSet` to `Int`, that is, given a set (`IntSet`),
    I can tell you what it contains (an `Int`).:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一件事要做的就是引入 `IntSet` 和 `Int` 之间的*功能依赖*。依赖意味着某些东西依赖于另一些东西，那么哪种类型依赖于什么？在这里我们没有太多选择：因为我们想要支持函数
    `empty`，其签名中并没有任何地方提到 `Int`，因此依赖将从 `IntSet` 到 `Int`，也就是说，给定一个集合（`IntSet`），我可以告诉你它包含的是什么（一个
    `Int`）。
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Notice that this is still fundamentally a multiparameter type class, we’ve
    just given GHC a little hint on how to pick the right instance. We can also introduce
    a fundep in the other direction, if we need to allow a plain `e`. For pedagogical
    purposes, let’s assume that our boss really wants a “null” element, which is always
    a member of a Set and when inserted doesn’t do anything:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这仍然基本上是一个多参数类型类，我们只是给 GHC 一个小提示，告诉它如何选择正确的实例。如果需要，我们也可以引入反方向的功能依赖。出于教育目的，让我们假设我们的老板真的想要一个“null”元素，它总是集合的成员，并且在插入时不做任何事情：
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Also notice that whenever we add a functional dependency, we preclude ourselves
    from offering an alternative instance. The following is illegal with the last
    typeclass for `Set`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，每当我们添加功能依赖时，我们就排除了提供另一个实例的可能性。在最后一个类型类对于 `Set` 是非法的：
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This will report a “Functional dependencies conflict.”
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这将报告“功能依赖冲突。”
- en: '* * *'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Functional dependencies are somewhat maligned because they interact poorly with
    some other type features. An equivalent feature that was recently added to GHC
    is *associated types* (also known as *type families* or *data families*.)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 功能依赖有时会因为与其他某些类型特性的交互而受到诟病。GHC 最近添加的等效功能是*关联类型*（也称为*类型族*或*数据族*）。
- en: 'Instead of telling GHC how automatically infer one type from the other (via
    the dependency), we create an explicit type family (also known as a type function)
    which provides the mapping:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是告诉 GHC 如何自动从另一个类型中推断（通过依赖），我们创建一个显式的类型族（也称为类型函数），它提供了映射：
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Notice that our typeclass is no longer multiparameter: it’s a little like as
    if we introduced a functional dependency from `c -> e`. But then, how does it
    know what the type of `null` should be? Easy: it makes you tell it:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们的类型类不再是多参数的：它有点像如果我们从 `c -> e` 引入了一个函数依赖。但是，它如何知道 `null` 的类型应该是什么？简单：它让你告诉它：
- en: '[PRE10]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Notice on the right hand side of `data` is not a type: it’s a data constructor
    and then a type. The data constructor will let GHC know what instance of `Elem`
    to use.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 `data` 的右侧不是一个类型：它是一个数据构造函数，然后是一个类型。数据构造函数将告诉 GHC 使用哪个 `Elem` 的实例。
- en: '* * *'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'In the original version of this article, I had defined the type class in the
    opposite direction:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文的原始版本中，我定义了相反方向的类型类：
- en: '[PRE11]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Our type function goes the other direction, and we can vary the implementation
    of the *container* based on what type is being used, which may not be one that
    we own. This is one primary use case of data families, but it’s not directly related
    to the question of generalizing APIs, so we leave it for now.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的类型函数朝着另一个方向发展，我们可以根据正在使用的类型变体实现*容器*，这可能不是我们拥有的类型。这是数据族的一个主要用例，但与通用化 API 的问题不直接相关，所以我们暂时不考虑它。
- en: '* * *'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '`IntContainer` looks a lot like a newtype, and in fact can be made one:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`IntContainer` 看起来很像一个 newtype，并且实际上可以成为一个：'
- en: '[PRE12]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If you find wrapping and unwrapping newtypes annoying, in some circumstances
    you can just use a type synonym:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你觉得包装和解包 newtype 很烦人，在某些情况下，你可以只使用类型同义词：
- en: '[PRE13]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'However, this rules out some functions you might like to write, for example,
    automatically specializing your generic functions:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这样做会排除一些你可能想写的功能，例如自动专门化你的通用函数：
- en: '[PRE14]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'GHC will error:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: GHC 会报错：
- en: '[PRE15]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Since I could have also written:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我也可以写成：
- en: '[PRE16]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'GHC doesn’t know which instance of `Set` to use for `null`: `IntSet` or `BetterIntSet`?
    You will need for this information to be transmitted to the compiler in another
    way, and if this happens completely under the hood, you’re a bit out of luck.
    This is a distinct difference from functional dependencies, which conflict if
    you have a non-injective relation.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: GHC 不知道要使用 `null` 的哪个 `Set` 实例：`IntSet` 还是 `BetterIntSet`？你需要通过另一种方式将此信息传递给编译器，如果这完全在幕后进行，你就有点倒霉了。这与函数依赖有着明显的不同，如果你有一个非单射关系，它们会产生冲突。
- en: '* * *'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Another method, if you have the luxury of defining your data type, is to define
    the data type inside the instance:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法，如果你有幸定义你的数据类型，是在实例内部定义数据类型：
- en: '[PRE17]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'However, notice that the type of the new `Record` is not `Record`; it’s `Elem
    RecordMap`. You might find a type synonym useful:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，请注意，新 `Record` 的类型不是 `Record`；它是 `Elem RecordMap`。你可能会发现类型同义词有用：
- en: '[PRE18]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: There is not too much difference from the newtype method, except that we avoided
    adding an extra layer of wrapping and unwrapping.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 与 newtype 方法相比，没有太大区别，只是避免了添加额外的包装和解包层。
- en: '* * *'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'In many cases, we would like to stipulate that a data type in our API has some
    type class:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，我们希望规定我们 API 中的数据类型具有某些类型类：
- en: '[PRE19]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'One low tech way to enforce this is add it to all of our function’s type signatures:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 强制执行这一点的一种低技术方式是将其添加到我们所有函数的类型签名中：
- en: '[PRE20]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'But an even better way is to just add a class constraint on Set with *flexible
    contexts*:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 但更好的方法是只需在 `Set` 上添加一个类约束，使用*灵活的上下文*：
- en: '[PRE21]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '* * *'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: We can make functions and data types generic. Can we also make type classes
    generic?
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使函数和数据类型通用化。我们还可以使类型类通用化吗？
- en: '[PRE22]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Suppose that we decided that we want to allow multiple implementations of `BloomFilter`,
    but we would still like to give a unified API for converting things into whatever
    bloom filter you want.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们决定允许多个 `BloomFilter` 的实现，但仍然希望为转换成任何你想要的布隆过滤器提供统一的 API。
- en: 'Not [directly](http://hackage.haskell.org/trac/ghc/wiki/TypeFunctions/ClassFamilies),
    but we can fake it: just make a catch all generic type class and parametrize it
    on the parameters of the real type class:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 不是[直接](http://hackage.haskell.org/trac/ghc/wiki/TypeFunctions/ClassFamilies)，但我们可以伪造它：只需创建一个捕捉所有通用类型类，并将其参数化为真实类型类的参数：
- en: '[PRE23]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '* * *'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Step back for a moment and compare the type signatures that functional dependencies
    and type families produce:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 稍微退后一步，比较函数依赖和类型族产生的类型签名：
- en: '[PRE24]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: So type families hide implementation details from the type signatures (you only
    use the associated types you need, as opposed to `Set c e => c` where the `e`
    is required but not used for anything—this is more obvious if you have twenty
    associated data types). However, they can be a bit more wordy when you need to
    introduce newtype wrappers for your associated data (`Elem`). Functional dependencies
    are great for automatically inferring other types without having to repeat yourself.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，类型族（type families）将实现细节隐藏在类型签名之后（你只使用你需要的关联类型，与`Set c e => c`相反，其中`e`是必需的但没有用于任何操作—如果你有20个关联数据类型，这更加明显）。然而，当你需要为你的关联数据引入新类型包装器（`Elem`）时，它们可能会显得有些啰嗦。功能依赖（functional
    dependencies）非常适合自动推断其他类型，而无需重复自己。
- en: (Thanks Edward Kmett for pointing this out.)
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: （感谢Edward Kmett指出这一点。）
- en: '* * *'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: What to do from here? We’ve only scratched the surface of type level programming,
    but for the purpose of generalizing APIs, this is essentially all you need to
    know! Find an API you’ve written that is duplicated across several modules, each
    of which provide different implementations. Figure out what functions and data
    types are the primitives. If you have many data types, apply the tricks described
    here to figure out how much type machinery you need. The go forth, and make thy
    API generic!
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始要做什么呢？我们只是初步了解了类型级编程的表面，但是为了通用化API，这基本上就是你需要知道的全部！找到你写过的在多个模块中重复的API，每个模块提供不同的实现。找出哪些函数和数据类型是基本的。如果你有很多数据类型，就应用这里描述的技巧来确定你需要多少类型机制。然后，让你的API变得通用起来吧！
