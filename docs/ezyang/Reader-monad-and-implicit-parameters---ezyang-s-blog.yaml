- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:18:13'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:18:13'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Reader monad and implicit parameters : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读者单子和隐式参数：ezyang 的博客
- en: 来源：[http://blog.ezyang.com/2010/07/implicit-parameters-in-haskell/](http://blog.ezyang.com/2010/07/implicit-parameters-in-haskell/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/07/implicit-parameters-in-haskell/](http://blog.ezyang.com/2010/07/implicit-parameters-in-haskell/)
- en: '*For when the Reader monad seems hopelessly clunky*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*当读者单子看起来无望笨拙时*'
- en: The Reader monad (also known as the Environment monad) and implicit parameters
    are remarkably similar even though the former is the standard repertoire of a
    working Haskell programmer while the latter is a GHC language extension used sparingly
    by those who know about it. Both allow the programmer to code as if they had access
    to a global environment that can still change at runtime. However, implicit parameters
    are remarkably well suited for cases when you would have used a stack of reader
    transformers. Unfortunately, unlike many type system extensions, GHC cannot suggest
    that you enable `ImplicitParams` because the code you innocently wrote is not
    valid Haskell98 but would be valid if you enabled this extension. This post intends
    to demonstrate one way to discover implicit parameters, with a little nudging.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 读者单子（也称为环境单子）和隐式参数非常相似，尽管前者是工作中 Haskell 程序员的标准工具，而后者是 GHC 语言扩展的一个使用较少的功能。两者都允许程序员编写代码，就像他们可以访问一个全局环境，这个环境在运行时仍然可以改变。然而，隐式参数非常适合于那些您本来会使用一堆读者转换器的情况。不幸的是，与许多类型系统扩展不同，GHC
    不能建议您启用 `ImplicitParams`，因为您无意中编写的代码不是有效的 Haskell98 代码，但如果您启用了此扩展，它将是有效的。本文旨在演示一种发现隐式参数的方式，并略微推动一下。
- en: '*Reader monad in practice.* The Reader monad is really quite simple: after
    all, it is isomorphic to `(->) r`, the only real difference being a newtype. Because
    of this, in engineering contexts, it is rarely used as-is; in particular:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*实践中的读者单子。* 读者单子实际上非常简单：毕竟，它与 `(->) r` 同构，唯一的真正区别在于新类型。因此，在工程上下文中，它很少原样使用；特别是：'
- en: It is used as a transformer, endowing an “environment” to whatever application-specific
    monad you are building, and
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它被用作转换器，为您构建的任何特定应用单子提供“环境”，以及
- en: It is used with a record type, because an environment of only one primitive
    value is usually not very interesting.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它与记录类型一起使用，因为只有一个原始值的环境通常不是很有趣。
- en: 'These choices impose some constraints on how code written for a Reader monad
    can be used. In particular, baking in the environment type `r` of `ReaderT r`
    means that your monadic code will not play nicely with some other monadic code
    `ReaderT r2` without some coaxing; additionally, I can’t build up a complicated
    record type `Record { field1 :: Int; field2 :: String; field3 :: Bool}` incrementally
    as I find out values of the environment. I could have my record type be a map
    of some sort, in which case I could place arbitrarily values in it, but in this
    case I have no static assurances of what values will or will not be in the map
    at a given point in time.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '这些选择对 Reader 单子编写的代码如何使用施加了一些约束。特别是，将 `ReaderT r` 的环境类型 `r` 内嵌到您的单子代码中意味着，您的单子代码不能轻易地与其他
    `ReaderT r2` 的单子代码配合使用；此外，我无法逐步构建一个复杂的记录类型 `Record { field1 :: Int; field2 ::
    String; field3 :: Bool}`，并在发现环境值时将其放入。我可以将我的记录类型设计为某种映射，在这种情况下，我可以随意在其中放置值，但在这种情况下，我无法静态保证在特定时间点映射中会有哪些值或不会有哪些值。'
- en: '*Stacked Reader transformers.* To allow ourselves to incrementally build up
    our environment, one might consider stacking the Reader monad transformers. Consider
    the type `ReaderT a (ReaderT b (ReaderT c IO)) ()`. If we desugar this into function
    application, we find `a -> (b -> (c -> IO ()))`, which can be further simplified
    to `a -> b -> c -> IO ()`. If `a`, `b` and `c` happen to be the same type, we
    don’t have any way of distinguishing the different values, except for the location
    in the list of arguments. However, instead of writing out the parameters explicitly
    in our function signature (which, indeed, we are trying to avoid with the reader
    monad), we find ourselves having to lift `ask` repeatedly (zero times for `a`,
    once for `b` and twice for `c`). Unlike the record with three fields, there is
    no name for each environment variable: we have to refer to them by using some
    number of lifts.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*堆叠的 Reader 变换器*。为了允许我们逐步构建环境，我们可以考虑堆叠 Reader Monad 变换器。考虑类型 `ReaderT a (ReaderT
    b (ReaderT c IO)) ()`。如果我们将其解糖成函数应用，我们会得到 `a -> (b -> (c -> IO ()))`，这可以进一步简化为
    `a -> b -> c -> IO ()`。如果 `a`、`b` 和 `c` 恰好是相同类型，我们没有办法区分不同的值，除了参数列表中的位置。然而，与在函数签名中明确写出参数不同（事实上我们正试图通过
    Reader Monad 避免这种情况），我们发现自己不得不反复使用 `ask`（对于 `a` 不用，对于 `b` 使用一次，对于 `c` 使用两次）。与具有三个字段的记录不同，每个环境变量都没有名称：我们必须使用某些数量的
    `ask` 来引用它们。'
- en: '*Aside*. In fact, this is a [De Bruijn index](http://en.wikipedia.org/wiki/De_Bruijn_index),
    which [Oleg](http://okmij.org/ftp/) helpfully pointed in out in an email conversation
    we had after my post about [nested loops and continuations](http://blog.ezyang.com/2010/02/nested-loops-and-continuation/).
    The number of lifts is the index (well, the Wikipedia article is 1-indexed, in
    which case add one) which tells us how many reader binding scopes we need to pop
    out of. So if I have:'
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*旁注*。事实上，这是[德布鲁因索引](http://zh.wikipedia.org/wiki/De_Bruijn_index)，Oleg 在我们关于[嵌套循环和延续](http://blog.ezyang.com/2010/02/nested-loops-and-continuation/)的文章后，通过电子邮件友好地指出了这一点。升降机的数量就是索引（嗯，维基百科文章是从1开始索引的，所以需要加1），告诉我们需要弹出多少读者绑定作用域。因此，如果我有：'
- en: ''
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE0]'
- en: ''
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I get the value of `b`. This turns out to be wonderful for the lambda-calculus
    theoreticians (who are cackling gleefully at trouble-free α-conversion), but not
    so wonderful for software engineers, for whom De Bruijn indexes are equivalent
    to the famous antipattern, the magic number.
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我得到了`b`的值。这对λ演算理论家来说非常棒（他们对无障碍的α-转换感到高兴），但对软件工程师来说并不是那么理想，因为德布鲁因索引等同于著名的反模式，即魔法数字。
- en: 'With typeclass tricks, we can get back names to some extent: for example, Dan
    Piponi [renames the transformers with singleton data types or “tags”](http://blog.sigfpe.com/2010/02/tagging-monad-transformer-layers.html),
    bringing in the heavy guns of `OverlappingInstances` in the process. Oleg [uses
    lexical variables that are typed to the layer they belong to](http://okmij.org/ftp/Haskell/regions.html#light-weight)
    to identify different layers, although such an approach is not really useful for
    a Reader monad stack, since the point of the Reader monad is not to have to pass
    any lexical variables around, whether or not they are the actual variables or
    specially typed variables.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 借助类型类技巧，我们可以在某种程度上恢复名称：例如，Dan Piponi [使用单例数据类型或“标签”重命名变换器](http://blog.sigfpe.com/2010/02/tagging-monad-transformer-layers.html)，在此过程中引入了`OverlappingInstances`的强大功能。Oleg
    [使用与所属层次相关的词法变量类型化](http://okmij.org/ftp/Haskell/regions.html#light-weight)来标识不同的层次，虽然这种方法对于
    Reader Monad 堆栈并不真正有用，因为 Reader Monad 的要点不在于必须传递任何词法变量，无论它们是实际变量还是特别类型化的变量。
- en: '*Implicit parameters.* In many ways, implicit parameters are a cheat: while
    Dan and Oleg’s approaches leverage existing type-level programming facilities,
    implicit parameters define a “global” namespace (well known to Lispers as the
    dynamic scope) that we can stick variables in, and furthermore it extends the
    type system so we can express what variables in this namespace any given function
    call expects to exist (without needing to use monads, the moxy!)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*隐式参数*。在许多方面，隐式参数是一种欺骗：虽然 Dan 和 Oleg 的方法利用现有的类型级编程设施，隐式参数定义了一个“全局”命名空间（Lisper
    们熟知的动态作用域），我们可以在其中放置变量，并且还扩展了类型系统，以便我们可以表达每个函数调用期望存在的这个命名空间中的变量（而无需使用 Monad，这就是它的魔力！）'
- en: 'Instead of an anonymous environment, we assign the variable a name:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是一个匿名环境，我们为变量赋予一个名称：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`f''` is still monadic, but the monad doesn’t express what is in the environment
    anymore: it’s entirely upon the type signature to determine if an implicit variable
    is passed along:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`f''`仍然是单子的，但单子不再表达环境中的内容：完全依赖于类型签名来确定是否传递隐式变量：'
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Indeed, `g` could have just as well been a pure computation:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，`g`也可以是纯计算：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'However, if the type of is:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果类型是：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'the implicit variable is lost, while if it is:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 隐式变量丢失，而如果它是：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: the variable is available.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 变量是可用的。
- en: 'While `runReader(T)` was our method for specifying the environment, we now
    have a custom let syntax:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`runReader(T)`是我们指定环境的方法，但现在我们有了自定义的`let`语法：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Besides having ditched our monadic restraints, we can now easily express our
    incremental environment:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 除了放弃了我们的单子限制外，我们现在可以轻松地表达我们的增量环境：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can also use `where`. Note that, while this looks deceptively like a normal
    `let` binding, it is quite different: you can’t mix implicit and normal variable
    bindings, and if you have similarly named implicit bindings on the right-hand
    side, they refer to their values *outside* of the `let`. No recursion for you!
    (Recall `runReaderT`: the values that we supply in the second argument are pure
    variables and not values in the Reader monad, though with `>>=` you could instrument
    things that way.)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`where`。请注意，虽然这看起来像是普通的`let`绑定，但实际上有很大不同：你不能混合隐式和普通的变量绑定，如果右侧有同名的隐式绑定，它们指的是`let`之外的值。你不能递归！（回想一下`runReaderT`：我们在第二个参数中提供的值是纯变量，而不是Reader单子中的值，尽管通过`>>=`你可以那样处理。）
- en: '*Good practices.* With monadic structure gone, there are fewer source-level
    hints on how the monomorphism restriction and polymorphic recursion apply. Non-polymorphic
    recursion *will* compile, and cause unexpected results, such as your implicit
    parameter not changing when you expect it to. You can play things relatively safely
    by making sure you always supply type signatures with all the implicit parameters
    you are expecting. I hope to do a follow-up post explaining more carefully what
    these semantics are, based off of formal description of types in the [relevant
    paper](http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.9849).'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*良好的实践。* 随着单子结构的消失，在源码级别上少了一些关于单态性约束和多态递归如何应用的提示。非多态递归*将*编译，并导致意外的结果，例如当你期望时，你的隐式参数没有变化。通过确保始终提供带有所有隐式参数的类型签名，你可以相对安全地处理事务。我希望能做一个后续的帖子，更仔细地解释这些语义，基于[相关论文](http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.9849)中类型的形式描述。'
