- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:24'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:24'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'NLP: the missing framework : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'NLP：缺失的框架 : ezyang''s 博客'
- en: 来源：[http://blog.ezyang.com/2013/01/nlp-the-missing-framework/](http://blog.ezyang.com/2013/01/nlp-the-missing-framework/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2013/01/nlp-the-missing-framework/](http://blog.ezyang.com/2013/01/nlp-the-missing-framework/)
- en: 'So you want to make a web app. In today’s world, there is a panoply of software
    to assist you: you can use an all-in-one framework, or you can grab libraries
    to deal with the common needs of templating, database access, interactivity, etc.
    These libraries unify common functionality and take care of edge-cases you might
    otherwise not have the resources to deal with.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你想要制作一个网络应用程序。在今天的世界里，有许多软件可以帮助你：你可以使用一个全能框架，或者使用库来处理模板、数据库访问、交互等常见需求。这些库统一了常见功能，并处理了你可能没有资源处理的边缘情况。
- en: 'But there is one tool which is conspicuously absent: the *natural language
    processing* library.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 但有一个明显缺失的工具：*自然语言处理*（natural language processing）库。
- en: “Now wait!” you may be saying, “of course there are NLP libraries, [nltk](http://nltk.org/)
    and [lingpipe](http://alias-i.com/lingpipe/) come to mind.” Sure, but are you
    actually using these libraries? “Maybe not, but my application doesn’t need NLP,
    you see.”
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: “等等！” 你可能会说，“当然有NLP库，[nltk](http://nltk.org/) 和 [lingpipe](http://alias-i.com/lingpipe/)
    一直存在。” 当然，但你真的在使用这些库吗？“也许不是，但我的应用程序并不需要NLP，你看。”
- en: 'The thing is, you *are* doing language processing in your application, even
    if you don’t realize it: “string concatenation” is really just a simple form of
    [natural language generation](http://en.wikipedia.org/wiki/Natural_language_generation),
    a subfield of NLP in its own right. [1] If you need to perform a more complicated
    task, such as pluralize nouns, capitalize sentences or change the grammatical
    form of verbs, you’ll need linguistic data. [2] This data is an essential part
    of many traditional NLP tasks. However, if you need to pluralize something *today*,
    you’re more likely to copy-paste a [list of regexes](http://kuwamoto.org/2007/12/17/improved-pluralizing-in-php-actionscript-and-ror/)
    off the Internet rather than think, “Hm, I should install an NLP library.” Part
    of this is because, while NLP libraries do contain this data, it is not publicized
    well.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，即使你没有意识到，你的应用程序中也在进行语言处理：“字符串连接”实际上只是自然语言生成的一种简单形式，它是NLP的一个子领域。[1] 如果你需要执行更复杂的任务，比如复数化名词、首字母大写句子或者改变动词的语法形式，你需要语言数据。[2]
    这些数据是许多传统NLP任务的重要组成部分。然而，如果你今天需要复数化某些东西，你更可能从互联网上复制粘贴一些正则表达式列表，而不是想：“嗯，我应该安装一个NLP库。”
    部分原因是，虽然NLP库确实包含这些数据，但它们的宣传并不充分。
- en: It’s also worth considering if your application could benefit from any traditional
    NLP, including keyword generation, canonicalization (When are two things written
    slightly differently the same?), [language identification](http://code.google.com/p/guess-language/),
    full-text search, autocompletion, topic detection and clustering, content summarization,
    parsing human-written dates and locations, etc. While it’s rare for an application
    to need all of these features, most would benefit from a few of them. For example,
    a blog application might want keyword generation to generate tags, full-text search
    to search posts, content summarization for non-fullpage views of posts, and date
    parsing for scheduling posts. These features tend to be absent, however, because
    they are often difficult to implement properly. Modern approaches often require
    models to be trained on large corpora of data—so-called *data-driven models*.
    Most of the time, this setup cost doesn’t seem worth it; if the feature is to
    be implemented (e.g. as an extension), a bag of heuristics is quicker.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，值得考虑的是，你的应用程序是否能从传统的NLP中受益，包括关键词生成、规范化（两个稍微不同写法是否相同？）、[语言识别](http://code.google.com/p/guess-language/)、全文搜索、自动完成、主题检测和聚类、内容摘要、解析人类编写的日期和位置等等。虽然很少有应用程序需要所有这些功能，但大多数应用程序会从中受益。例如，博客应用可能希望通过关键词生成来生成标签，通过全文搜索来搜索帖子，通过内容摘要来生成非全页视图的帖子，通过日期解析来安排帖子。然而，这些功能通常缺失，因为它们往往很难正确实现。现代方法通常需要在大型数据语料库上训练模型，这就是所谓的*数据驱动模型*。大多数情况下，这种设置成本似乎不值得；如果要实施该功能（例如作为扩展），一袋启发式算法可能更快速。
- en: 'Both of these problems hint at the trouble with current NLP frameworks: they
    assume that users are interested in building NLP systems, as opposed to *using*
    NLP systems. I shouldn’t need a PhD in computational linguistics to get my nouns
    to pluralize correctly or parse dates robustly. I shouldn’t need a PhD to get
    passable results on conventional, well-studied NLP applications. The default expectation
    should not be that users need to train a model: pre-existing models can easily
    be reused. Although there is an upper limit to how good an NLP algorithm can do
    without any tuning, the principled approach can still offer improvements over
    heuristics. But even more importantly, once a model is being used, developers
    who want to improve their results can train their own model on text from their
    own application, which is likely to carry domain-specific terminology and patterns.
    The library should be initially easy to use, and principled enough to be a gateway
    drug into the wonderful world of computational linguistics. Who knows what other
    applications could arise when developers recognize NLP as an accessible tool for
    their toolbox? [3]'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个问题都暗示了当前自然语言处理框架的问题：它们假设用户对构建自然语言处理系统感兴趣，而不是*使用*自然语言处理系统。我不应该需要计算语言学博士学位才能正确处理名词的复数形式或者强大地解析日期。我也不应该需要博士学位才能在传统、广为研究的自然语言处理应用中获得可以接受的结果。默认期望不应该是用户需要训练一个模型：现有的模型可以轻松地被重复使用。虽然自然语言处理算法在没有任何调整的情况下能达到的最佳水平有限，但是原则性方法仍然可以比启发式方法带来改进。但更重要的是，一旦使用了模型，希望改进结果的开发人员可以根据自己应用中的文本训练自己的模型，这可能涉及特定领域的术语和模式。库应该最初易于使用，并且足够原则性，以便成为进入计算语言学奇妙世界的引路人。当开发人员意识到自然语言处理是他们工具箱中的一个可访问工具时，谁知道还会出现什么其他应用呢？[3]
- en: 'Here is my call to arms: I want to see all of the current “baby-NLP” functionality
    collected together into a single place, where they get benefit from shared linguistic
    data and serve as easy-to-use features that initially attract developers. I would
    like to see more complicated but useful NLP technology become more accessible
    to a non-linguistic audience. And I would like all of this to be based on principled
    NLP foundations, so that it is possible to improve on the out-of-the-box models
    and algorithms. NLP practitioners are often very careful not to [overstate what
    their systems are capable of](http://languagelog.ldc.upenn.edu/nll/?p=3565) (in
    contrast to the irrational exuberance of the 1980s). That’s OK: sometimes, the
    bar really is *that low.*'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我的呼吁：我希望看到所有当前的“初级自然语言处理”功能汇集到一个地方，从而受益于共享的语言数据，并作为最初吸引开发人员的易于使用的特性。我希望看到更复杂但有用的自然语言处理技术变得更容易访问非语言学的受众。而且我希望所有这些都基于原则性的自然语言处理基础，以便能够改进现有的模型和算法。与20世纪80年代的非理性狂热相比，自然语言处理从业者通常非常谨慎，不会夸大他们的系统能力。这没关系：有时，标准确实*如此低*。
- en: Thanks to Gregory Price, Eric Kow and Richard Tibbetts for helping review earlier
    drafts of this article.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢Gregory Price、Eric Kow和Richard Tibbetts帮助审阅本文初稿。
- en: '* * *'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[1] As a field, natural language generation doesn’t really consider string
    concatenation to be a true method; instead, it is interested in how to generate
    text from a *functional description of intent*. One neat example is [referring
    expression generation](http://hub.darcs.net/kowey/antfarm).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] 作为一个领域，自然语言生成并不真正将字符串连接视为一种真正的方法；相反，它关注的是如何从*功能性意图描述*中生成文本。一个很好的例子是[指称表达生成](http://hub.darcs.net/kowey/antfarm)。'
- en: '[2] For example, the functionality (e.g. [pluralization rules](https://gerrit.wikimedia.org/r/gitweb?p=mediawiki/core.git;a=tree;f=languages;hb=HEAD)
    collected in the `language/` folder in MediaWiki. MediaWiki is one of the most
    international open source projects, and I find it a fascinating source of information
    about linguistic oddities in foreign languages.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] 例如，功能（例如[复数化规则](https://gerrit.wikimedia.org/r/gitweb?p=mediawiki/core.git;a=tree;f=languages;hb=HEAD)在MediaWiki的`language/`文件夹中收集。MediaWiki是最国际化的开源项目之一，我发现它是了解外语中语言怪异之处的一个迷人来源。'
- en: '[3] As an example, I''d like to sketch how natural language generation can
    assist internationalization of applications. Suppose that you would like to let
    a user know that “you have three new messages.” The most obvious way to implement
    this would be with: `printf("You have %d new message(s).", numMessages)`. Now,
    there are a number of shortcuts that have been taken here: we always print out
    a numeric digit, rather than AP style which uses English for numbers between zero
    and nine, and we’ve sidestepped whether or not “message” should be pluralized
    by tacking on an (s) on the end.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[3] 举个例子，我想简要描述一下自然语言生成如何帮助应用国际化。假设您想让用户知道“您有三条新消息”。最明显的实现方式是：`printf("You
    have %d new message(s).", numMessages)`。现在，这里采取了一些捷径：我们总是打印数字，而不是AP风格，后者在零到九之间的数字使用英语，并且我们绕过了“消息”是否应该加复数的问题，直接在末尾加上了一个（s）。'
- en: 'If we’d like to handle those cases, the next obvious thing to do is to add
    a few new functions: we’ll need a function `apnumber` to convert `3` to `three`,
    and we’ll need a function `pluralize` to convert `message` into `messages` when
    `numMessages` is greater than one. So you would end up with something like `printf("You
    have %s new %s", apnumber(numMessages), pluralize("message", numMessages))`. This
    is the ad hoc approach which will work reasonably well on English but will get
    you into trouble when you realize other languages have things like noun-adjective
    agreement (“nouveau message” versus “nouveaux messages”). Internationalization
    frameworks have long recognized and offered mechanisms for dealing with these
    cases; however, the average English-based project is unlikely to know about these
    problems until they internationalize.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想处理这些情况，下一个显而易见的做法是添加一些新函数：我们将需要一个函数`apnumber`将`3`转换为`three`，并且我们将需要一个函数`pluralize`在`numMessages`大于一时将`message`转换为`messages`。因此，您最终会得到类似这样的东西：`printf("You
    have %s new %s", apnumber(numMessages), pluralize("message", numMessages))`。这是一种特定应用的方法，在英语上运行得相当好，但当您意识到其他语言存在名词-形容词一致性问题（“nouveau
    message”与“nouveaux messages”）时，会陷入困境。国际化框架长期以来已经认识到并提供了处理这些情况的机制；然而，平均基于英语的项目不太可能在国际化之前了解这些问题。
- en: 'However, there exists a representation which is agnostic to these issues. Consider
    the [dependency grammar](http://nlp.stanford.edu:8080/parser/) of this sentence,
    which we have extracted with a little NLP:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，存在一种与这些问题无关的表示形式。考虑一下这个句子的[依赖语法](http://nlp.stanford.edu:8080/parser/)，我们用一点NLP提取了它：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We might ask, “Given data of this form, can we automatically generate an appropriate
    sentence in some language, which conveys the information and is grammatically
    correct?” That is a pretty hard task: it is the fundamental question of NLG. (It''s
    not quite equivalent to machine translation, since we might require a user to
    add extra information about the functional intent that would otherwise be very
    hard to extract from text.) While it would be cool if we had a magic black box
    which could crank out the resulting sentences, even today, the tools developed
    by NLG may help reduce translator burden and increase flexibility. I think that’s
    well worth investigating.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能会问，“在有这种形式的数据的情况下，我们是否可以自动生成一种适当的语言句子，传达信息并且语法正确？”这是一个相当困难的任务：这是自然语言生成的基本问题。
    （这与机器翻译并不完全相同，因为我们可能需要用户添加关于功能意图的额外信息，否则从文本中提取这些信息将非常困难。）即使今天，我们希望有一个神奇的黑盒子能够产生结果句子，由NLG开发的工具也可能有助于减少翻译负担并增加灵活性。我认为这值得深入研究。
