- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:18:23'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:18:23'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Cup of FP with a Java twist : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Cup of FP with a Java twist : ezyang’s blog'
- en: 来源：[http://blog.ezyang.com/2010/04/cup-of-fp-java-twis/](http://blog.ezyang.com/2010/04/cup-of-fp-java-twis/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/04/cup-of-fp-java-twis/](http://blog.ezyang.com/2010/04/cup-of-fp-java-twis/)
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Good grief Edward, what do you have there? It's almost as if it were some bastardized
    hybrid of Haskell, Java and ML.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 天啊，爱德华，你那里有什么？简直像是 Haskell、Java 和 ML 的变种混合体。
- en: It actually is a psuedolanguage inspired by ML that was invented by Daniel Jackson.
    It is used by [MIT course 6.005](http://ocw.mit.edu/OcwWeb/Electrical-Engineering-and-Computer-Science/6-005Fall-2008/CourseHome/index.htm)
    to teach its students functional programming concepts. It doesn't have a compiler
    or a formal specification (although I hear the TAs are frantically working on
    one as a type this), though the most salient points of its syntax are introduced
    [in lecture 10 (PDF)](http://ocw.mit.edu/NR/rdonlyres/Electrical-Engineering-and-Computer-Science/6-005Fall-2008/5FC036C0-0505-49AE-BCA2-455E89B1AB18/0/MIT6_005f08_lec10.pdf)
    when they start discussing how to build a SAT solver.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 它实际上是由 Daniel Jackson 发明的受 ML 启发的伪语言。它被 [MIT course 6.005](http://ocw.mit.edu/OcwWeb/Electrical-Engineering-and-Computer-Science/6-005Fall-2008/CourseHome/index.htm)
    用来教授其学生函数编程概念。它没有编译器或正式规范（尽管我听说助教们正在拼命地研究一种类型），但其语法的最显著点在 [第10讲（PDF）](http://ocw.mit.edu/NR/rdonlyres/Electrical-Engineering-and-Computer-Science/6-005Fall-2008/5FC036C0-0505-49AE-BCA2-455E89B1AB18/0/MIT6_005f08_lec10.pdf)
    中介绍，当他们开始讨论如何构建 SAT 求解器时。
- en: Our second problem set asks us to write some code in this pseudolanguage. Unfortunately,
    being a pseudolanguage, you can't actually run it... and I hate writing code that
    I can't run. But it certainly looks a lot like Haskell... just a bit more verbose,
    that's all. I asked the course staff if I could submit the problem set in Haskell,
    and they told me, "No, since the course staff doesn't know it. But if it's as
    close to this language as you claim, you could always write it in Haskell and
    then translate it to this language when you're done."
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第二份问题集要求我们在这种伪语言中编写一些代码。不幸的是，作为伪语言，您实际上无法运行它...而且我讨厌写我无法运行的代码。但它确实看起来很像 Haskell...只是更啰嗦了一点。我问课程工作人员是否可以用
    Haskell 提交问题集，他们告诉我：“不行，因为课程工作人员不懂。但如果它确实与这种语言如您所说的那么接近，您完成后可以将其翻译成这种语言。”
- en: So I did [just that](http://github.com/ezyang/haskell-mit6005).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我就是[这样做的](http://github.com/ezyang/haskell-mit6005)。
- en: The plan wouldn't really have been possible without the existence of an existing
    [pretty printer for Haskell](http://hackage.haskell.org/packages/archive/haskell-src/1.0.1.3/doc/html/Language-Haskell-Pretty.html)
    to do most of the scaffolding for me. From there, it was mucking about with `<>`,
    `lparen` and `comma` and friends in the appropriate functions for rendering data-types
    differently. [Pretty printing combinators rock!](http://hackage.haskell.org/packages/archive/pretty/1.0.1.1/doc/html/Text-PrettyPrint-HughesPJ.html)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这个计划实际上是不可能的，没有一个现有的 [Haskell 漂亮打印程序](http://hackage.haskell.org/packages/archive/haskell-src/1.0.1.3/doc/html/Language-Haskell-Pretty.html)
    来为我做大部分的脚手架工作。从那里开始，在适当的函数中混合使用 `<>`、`lparen` 和 `comma` 等朋友来渲染数据类型。[漂亮打印组合器太棒了！](http://hackage.haskell.org/packages/archive/pretty/1.0.1.1/doc/html/Text-PrettyPrint-HughesPJ.html)
