- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:18:04'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:18:04'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Is multiply-carry strongly universal? : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*multiply-carry*强通用吗？ : ezyang’s blog'
- en: 来源：[http://blog.ezyang.com/2010/11/is-multiply-carry-strongly-universal/](http://blog.ezyang.com/2010/11/is-multiply-carry-strongly-universal/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/11/is-multiply-carry-strongly-universal/](http://blog.ezyang.com/2010/11/is-multiply-carry-strongly-universal/)
- en: I’ve been wanting to implement a [count-min sketch](http://www.eecs.harvard.edu/~michaelm/CS222/countmin.pdf)
    for some time now; it’s a little less widely known than the bloom filter, a closely
    related *sketch* data structure (that is, a probabilistic data structure that
    approximates answers to certain queries), but it seems like a pretty practical
    structure and has been used in [some interesting ways](http://research.microsoft.com/pubs/132859/popularityISeverything.pdf).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我一直想要实现一个[count-min sketch](http://www.eecs.harvard.edu/~michaelm/CS222/countmin.pdf)；这个结构比布隆过滤器稍微不那么广为人知，它是一种相关的*sketch*数据结构（即，一种概率数据结构，用于近似回答某些查询），但它看起来是一个相当实用的结构，并且已经在[一些有趣的方式](http://research.microsoft.com/pubs/132859/popularityISeverything.pdf)中被使用。
- en: Alas, when you want to implement a data structure that was proposed less than
    a decade ago and hasn’t found its way into textbooks yet, there are a lot of theoretical
    vagaries that get in the way. In this particular case, the theoretical vagary
    was selection of a *universal hash family.* Having not taken a graduate-level
    algorithms course yet, I did not know what a universal hash family was, so it
    was off to the books for me.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 可惜的是，当你想要实现一个不到十年前提出的数据结构，而且还没有进入教科书时，会遇到很多理论上的模糊点。在这个特定情况下，理论上的模糊点是选择*通用哈希族*。因为我还没有修过研究生级别的算法课程，所以必须去查书。
- en: From my survey of course notes, papers and textbooks, I noticed two things.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 通过我对课程笔记、论文和教科书的调查，我注意到两件事情。
- en: 'First, there are a lot of different independence guarantees a universal hash
    family may have, each of which may go under many different names. Assume that
    our hash family `H` is a family of functions from `h : M → N` where `M = {0, 1,
    ..., m-1}` and `N = {0, 1, ..., n-1}` with `m >= n`. M corresponds to our “universe”,
    the possibly values being hashed, while N is the range of the hash function.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通用哈希族可能具有许多不同的独立性保证，每一种保证可能会有许多不同的名称。假设我们的哈希族`H`是由函数`h：M → N`组成，其中`M = {0,
    1, ..., m-1}`，`N = {0, 1, ..., n-1}`，且`m >= n`。这里，M对应我们的“全集”，即将被哈希的可能值，而N则是哈希函数的范围。
- en: 'A *weak universal hash family*, also called a *weak 2-universal hash family*
    and sometimes stated with the *weak* elided, is a hash family that for a hash
    function `h` chosen uniformly at random from `H`:'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*弱通用哈希族*，也称为*弱2-universal哈希族*，有时候会简称为*weak*，是一种哈希族，对于从`H`中随机选择的哈希函数`h`：'
- en: '[PRE0]'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'A *strongly 2-universal hash family*, also called a *(strongly) 2-independent
    universal hash family* and sometimes stated with *2-universal* elided, is one
    that fulfills this condition:'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*强2-universal哈希族*，也称为*(强) 2-independent通用哈希族*，有时候会简称为*2-universal*，是满足以下条件的哈希族：'
- en: '[PRE1]'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'A *(strongly) k-independent universal hash family* generalizes the above notion,
    to the following condition:'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*(强) k-independent通用哈希族*将上述概念推广到以下条件：'
- en: '[PRE2]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Second, the reason why *weak* is commonly elided from *weak hash function* is
    that 2-universal hash families tend to also be 2-independent. *Randomized Algorithms*
    states “Most known constructions of 2-universal hash families actually yield a
    strongly 2-universal hash family. For this reason, the two definitions are generally
    not distinguished from one another” and asks the student to prove that if `n =
    m = p` is a prime number, the Carter and Wegman’s hash family is strongly 2-universal.
    (I’ll state what this is shortly.) So [Wikipedia](http://en.wikipedia.org/wiki/Universal_hashing)
    happily adopts the weak criteria and only briefly mentions 2-independence in the
    last section. (I have not edited the article because I’m not sure what, if any
    change, would be made.)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，“弱”通常在“弱哈希函数”中省略，是因为2-universal哈希族往往也是2-independent。《随机化算法》指出：“大多数已知的2-universal哈希族的构造实际上产生了一个强2-universal哈希族。因此，这两个定义通常没有区别。”
    并要求学生证明，如果`n = m = p`是一个素数，那么卡特和韦格曼的哈希族是强2-universal的。（我马上会说明这是什么。） 因此，[维基百科](http://en.wikipedia.org/wiki/Universal_hashing)
    愉快地采纳了弱标准，并在最后一节中简要提到了2-independence。（我没有编辑文章，因为我不确定是否需要做任何更改。）
- en: 'So, what’s Carter and Wegman’s universal hash family? Quite simple:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，卡特和韦格曼的通用哈希族是什么？非常简单：
- en: 'given that *p ≥ m* is prime and ![a,b \in {0, 1, \cdots, p-1}](img/fa6343e069d49d443e9390196446481c.png
    "a,b \in {0, 1, \cdots, p-1}"). Except, uh, no one actually uses a modulus in
    practice. Here’s one example from [Cormode’s implementation](http://www.cs.rutgers.edu/~muthu/massdal-code-index.html):'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于 *p ≥ m* 是质数且 ![a,b \in {0, 1, \cdots, p-1}](img/fa6343e069d49d443e9390196446481c.png
    "a,b \in {0, 1, \cdots, p-1}")。除此之外，呃，实际上没有人在实践中使用模数。这里有一个来自 [Cormode 的实现](http://www.cs.rutgers.edu/~muthu/massdal-code-index.html)
    的例子：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This implementation is clearly correct:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个实现显然是正确的：
- en: The multiplication and addition can’t overflow the `long long` result, and
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 乘法和加法不能使 `long long` 结果溢出，并且
- en: The second line takes advantage of our ability to do fast modulus with Mersenne
    primes with a few alternate bitwise operations. Of course, in order to do this,
    we need to be very careful what prime we pick. Mmm magic numbers.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二行利用了我们利用 Mersenne 质数进行快速取模的能力，结合了几种替代的位运算。当然，为了做到这一点，我们需要非常小心地选择质数。嗯，神奇的数字。
- en: OK, so that’s very nice. There is a minor bit of sloppiness in that we haven’t
    explicitly ensured that `n = m = p`, so I’m not 100% convinced we preserve strong
    universality. But I haven’t worked out the *Randomized Algorithms* exercise so
    I don’t know how important this property is in practice.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，那很好。有一个小小的疏忽，我们没有明确确保 `n = m = p`，所以我不能百分之百确定我们保留了强一般化。但我还没有做完 *Randomized
    Algorithms* 练习，所以我不知道这个属性在实践中有多重要。
- en: 'As an aside, [this function](http://www2.research.att.com/~marioh/sketches/index.html)
    also claims to be this very universal hash but I have a hard time believing it:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一下，[这个函数](http://www2.research.att.com/~marioh/sketches/index.html)也声称是这种非常通用的哈希，但我很难相信它：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We now turn our attention to multiply-carry, which Wikipedia claims is *the
    fastest universal hash family currently known for integers.* It’s designed to
    be easy to implement on computers: `(unsigned) (a*x) >> (w-M)` (with `a` odd)
    is all you need. Well, to be precise, it’s the fastest *2-universal* has family
    currently known: the [relevant paper](http://www.diku.dk/~jyrki/Paper/CP-11.4.1997.pdf)
    only gives the weak universality proof about `Pr[h(x) = h(y)]`.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们把注意力转向 multiply-carry，维基百科声称它是 *目前已知整数最快的通用哈希族*。它设计成在计算机上易于实现：`(unsigned)
    (a*x) >> (w-M)`（其中 `a` 是奇数）就是你所需要的全部。嗯，准确地说，它是目前已知的最快 *2-一般化* 哈希族：相关论文仅就弱一般化给出了证明，详见
    [相关论文](http://www.diku.dk/~jyrki/Paper/CP-11.4.1997.pdf)。
- en: 'So, my question is thus: *is multiply-carry strongly universal*? Motwani and
    Raghavan suggest it probably is, but I couldn’t dig up a proof.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我的问题是：*multiply-carry 是否强一般化*？Motwani 和 Raghavan 暗示它可能是，但我找不到证明。
- en: '*Postscript.* Fortunately, for count-min-sketch, we don’t actually need strong
    universality. I checked with Graham Cormode and they only use 2-universality in
    their paper. But the original question still stands... for strictly theoretical
    grounds, anyway.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*Postscript.* 幸运的是，对于 count-min-sketch，我们实际上并不需要强一般化。我向 Graham Cormode 确认过，他们在论文中只使用了
    2-一般化。但原始问题仍然存在……在严格的理论基础上，无论如何。'
- en: '*Non sequitur.* Here’s an interesting combinator for combining functions used
    in folds:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*Non sequitur.* 这里有一个有趣的组合器，用于组合在折叠中使用的函数：'
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'It lets you bundle up two combining functions so that you can apply both of
    them to a list in one go:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 它允许你将两个组合函数捆绑在一起，这样你可以一次性将它们应用到列表中：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Flipping the combinator would make it work for right folds. This gives us the
    following cute implementation of the `average` function:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 翻转组合器可以使其适用于右折叠。这使我们得到了 `average` 函数的以下可爱实现：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Maybe we could write a rewrite rule to do this for us.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 或许我们可以写一条重写规则来为我们做这件事。
