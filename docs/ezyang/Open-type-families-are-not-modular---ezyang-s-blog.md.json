["```\nmodule A where\n    x :: Int\n\nmodule B where\n    import A\n    y = 0\n    z = x + y\n\n```", "```\nmodule A where\n    x = 1\n    y = 2\n\n```", "```\nmodule A where\n    type instance F Int\n    f :: F Bool\n\nmodule B where\n    import A\n    type instance F Bool = Int -> Bool\n    x = f 2\n\n```", "```\nmodule A where\n    type instance F Int = Int\n    type instance F Bool = Int\n    f = 42\n\n```", "```\nmodule A where\n    type instance F Int\n    type instance F Bool\n\n```", "```\nmodule A where\n    data T = T\n    type instance F T = Bool\n\nmodule B where\n    import A\n    type instance F T = Int -> Int\n\n```", "```\nmodule A where\n    data A = A\n    type instance F A y = Int\n\nmodule B where\n    data B = B\n    type instance F x B = Bool -> Bool\n\n```", "```\nmodule Data.Foo where\n    data Foo = Foo\n\nmodule MyApp where\n    import Data.Foo\n    fooString = show Foo -- XXX no instance for Show\n\n```", "```\nmodule MyApp where\n    import Data.Foo\n    instance Show Foo where -- orphan\n        show Foo = \"Foo\"\n    fooString = show Foo\n\n```", "```\n{-# LANGUAGE CPP #-}\nmodule MyApp where\n    import Data.Foo\n#if MIN_VERSION_foo(1,0,0)\n    instance Show Foo where -- orphan\n        show Foo = \"Foo\"\n#endif\n    fooString = show Foo\n\n```", "```\nmodule MyOtherApp where\n    import Data.Foo\n    instance Show Foo where ... -- orphan\n    otherFooString = show Foo\n\nmodule MyApp where\n    import Data.Foo\n    instance Show Foo where ... -- orphan\n    fooString = show Foo\n\nmodule Main where\n    import MyOtherApp\n    import MyApp\n    main = print (fooString ++ otherFooString ++ show Foo)\n\n```", "```\nmodule A where\n  type instance F Int = Int\n  f :: Typeable a => a -> F a\n  f x = case eqT of\n    Just Refl -> x :: Int\n    Nothing -> undefined\n\nmodule ASig where\n  f :: Typeable a => a -> F a\n\nmodule B where\n  import ASig\n  type instance F Int = Bool -> Bool\n  g :: Bool\n  g = f 0 True -- oops\n\n```"]