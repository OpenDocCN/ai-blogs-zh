- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:16'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:16'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Calculating Shanten in Mahjong : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算麻将的*shanten* ：ezyang 的博客
- en: 来源：[http://blog.ezyang.com/2014/04/calculating-shanten-in-mahjong/](http://blog.ezyang.com/2014/04/calculating-shanten-in-mahjong/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2014/04/calculating-shanten-in-mahjong/](http://blog.ezyang.com/2014/04/calculating-shanten-in-mahjong/)
- en: Move aside, poker! While the probabilities of various poker hands are well understood
    and tabulated, the Chinese game of chance [Mahjong](http://en.wikipedia.org/wiki/Mahjong)
    [1] enjoys a far more intricate structure of expected values and probabilities.
    [2] This is largely due in part to the much larger variety of tiles available
    (136 tiles, as opposed to the standard playing card deck size of 52), as well
    as the turn-by-turn game play, which means there is quite a lot of strategy involved
    with what is ostensibly a game of chance. In fact, the subject is so intricate,
    I’ve decided to write my PhD thesis on it. This blog post is a condensed version
    of one chapter of my thesis, considering the calculation of *shanten*, which we
    will define below. I’ll be using Japanese terms, since my favorite variant of
    mahjong is Riichi Mahjong; you can consult the [Wikipedia article](http://en.wikipedia.org/wiki/Japanese_Mahjong)
    on the subject if you need to translate.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 离开一边，扑克牌！虽然各种扑克牌手的概率已经被广泛理解和列出，但是中国的游戏[Mahjong](http://en.wikipedia.org/wiki/Mahjong)
    [1]拥有更为复杂的预期价值和概率结构。[2]这主要是由于可用的瓷砖种类更多（136张瓷砖，而不是标准扑克牌组的52张），以及逐轮游戏玩法，这意味着虽然本质上是一种游戏的机会，但涉及到了相当多的策略。事实上，这个主题如此复杂，以至于我决定写我的博士论文。本博客文章是我论文的一个章节的精简版本，考虑到*shanten*的计算，我们将在下面定义。我将使用日本术语，因为我最喜欢的麻将变体是日本麻将；您可以查阅[维基百科文章](http://en.wikipedia.org/wiki/Japanese_Mahjong)来翻译。
- en: Calculating Shanten
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 计算*shanten*
- en: 'The basic gameplay of Mahjong involves drawing a tile into a hand of thirteen
    tiles, and then discarding another tile. The goal is to form a hand of fourteen
    tiles (that is, after drawing, but before discarding a tile) which is a winning
    configuration. There are a number of different winning configurations, but most
    winning configurations share a similar pattern: the fourteen tiles must be grouped
    into four triples and a single pair. Triples are either three of the same tile,
    or three tiles in a sequence (there are three “suits” which can be used to form
    sequences); the pair is two of the same tiles. Here is an example:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 麻将的基本玩法包括将一张牌抓入手中的十三张牌，并且再弃掉另一张牌。目标是形成一个十四张牌的手牌（也就是在抓牌后，但弃牌前）这是一个获胜的配置。有许多不同的获胜配置，但大多数获胜配置都有一个类似的模式：十四张牌必须分为四个三张牌和一个对子。三张牌可以是相同的三张牌，或者是一个顺子中的三张牌（有三种“花色”可以用来形成顺子）；对子则是两张相同的牌。以下是一个例子：
- en: Represented numerically, this hand consists of the triples and pairs 123 55
    234 789 456.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 从数字上看，这手牌包括三张牌和对子 123 55 234 789 456。
- en: 'One interesting quantity that is useful to calculate given a mahjong hand is
    the *shanten* number, that is, the number of tiles away from winning you are.
    This can be used to give you the most crude heuristic of how to play: discard
    tiles that get you closer to tenpai. The most widely known shanten calculator
    is [this one on Tenhou’s website](http://tenhou.net/2/) [3]; unfortunately, the
    source code for this calculator is not available. There is [another StackOverflow
    question](http://stackoverflow.com/questions/4239028/how-do-i-calculate-the-shanten-number-in-mahjong)
    on the subject, but the “best” answer offers only a heuristic approach with no
    proof of correctness! Can we do better?'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个在麻将手牌中计算非常有用的有趣量——*shanten* 数字，即离胜利还有多少张牌。这可以用来给你提供一个最基本的启发式玩法：弃掉能让你更接近听牌的牌。最广为人知的*shanten*
    计算器是[天凤网站上的这个](http://tenhou.net/2/) [3]；不幸的是，这个计算器的源代码不可用。还有[另一个关于StackOverflow的问题](http://stackoverflow.com/questions/4239028/how-do-i-calculate-the-shanten-number-in-mahjong)，但“最佳”答案只提供了一个启发式方法，没有证明其正确性！我们能做得更好吗？
- en: 'Naïvely, the shanten number is a breadth first search on the permutations of
    a hand. When a winning hand is found, the algorithm terminates and indicates the
    depth the search had gotten to. Such an algorithm is obviously correct; unfortunately,
    with 136 tiles, one would have to traverse ![((136-13)\times 14)^n](img/1085e81084d0a63d130f108b3be5cd74.png
    "((136-13)\times 14)^n") hands (choices of new tiles times choices of discard)
    while searching for a winning hand that is n-shanten away. If you are four tiles
    away, you will have to traverse over six trillion hands. We can reduce this number
    by avoiding redundant work if we memoize the shanten associated with hands: however,
    the total number of possible hands is roughly ![136 \choose 13](img/85310b7d2c670be91b970281c8d0f2c3.png
    "136 \choose 13"), or 59 bits. Though we can fit (via a [combinatorial number
    system](http://en.wikipedia.org/wiki/Combinatorial_number_system)) a hand into
    a 64-bit integer, the resulting table is still far too large to hope to fit in
    memory.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 初级的话，向听数是在手牌排列的广度优先搜索。当找到一个获胜的手牌时，算法终止并指示搜索已达到的深度。这样的算法显然是正确的；不幸的是，对于136张牌，你必须遍历
    ![((136-13)\times 14)^n](img/1085e81084d0a63d130f108b3be5cd74.png "((136-13)\times
    14)^n") 个手牌（新牌的选择乘以弃牌的选择），同时寻找一个相差n向听的获胜手牌。如果你差四张牌，你将不得不遍历超过六万亿个手牌。如果我们记忆化与手牌相关的向听数，可以减少这个数字；然而，所有可能手牌的总数大约是
    ![136 \choose 13](img/85310b7d2c670be91b970281c8d0f2c3.png "136 \choose 13") 或者59位。尽管我们可以将一手牌通过[组合数系统](http://en.wikipedia.org/wiki/Combinatorial_number_system)嵌入到64位整数中，但结果表仍然太大，希望能够放入内存。
- en: The trick is to observe that shanten calculation for each of the suits is symmetric;
    thus, we can dynamic program over a much smaller space of the tiles 1 through
    9 for some generic suit, and then reuse these results when assembling the final
    calculation. ![9 \times 4 \choose 13](img/592925b40cd6daac7acba0e87c8019a7.png
    "9 \times 4 \choose 13") is still rather large, so we can take advantage of the
    fact that because there are four copies of each tile, an equivalent representation
    is a 9-vector of the numbers zero to four, with the constraint that the sum of
    these numbers is 13\. Even without the constraint, the count ![5^9](img/9d72d8e3d725f14d8241177dcce78cd2.png
    "5^9") is only two million, which is quite tractable. At a byte per entry, that’s
    2MB of memory; less than your browser is using to view this webpage. (In fact,
    we want the constraint to actually be that the sum is less than or equal to 13,
    since not all hands are single-suited, so the number of tiles in a hand is less.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 观察到每种花色的向听计算是对称的技巧；因此，我们可以在1到9号牌的更小空间上进行动态规划，然后在组装最终计算时重复使用这些结果。 ![9 \times
    4 \choose 13](img/592925b40cd6daac7acba0e87c8019a7.png "9 \times 4 \choose 13")
    仍然相当大，因此我们可以利用每种牌有四张副本的事实，一个等价的表示是一个9维向量，其中的数字是从零到四，有一个约束条件是这些数字的和为13。即使没有约束条件，计数
    ![5^9](img/9d72d8e3d725f14d8241177dcce78cd2.png "5^9") 也只有两百万，非常可行。每个条目一个字节，这是2MB的内存；比你的浏览器用来查看此网页的还少。（实际上，我们希望约束条件是总和小于或等于13，因为并非所有的手都是单一花色，所以手中的牌数会少一些。）
- en: 'The breadth-first search for solving a single suit proceeds as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 解决单一花色的广度优先搜索如下进行：
- en: Initialize a table A indexed by tile configuration (a 9-vector of 0..4).
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化一个由牌配置（一个0到4的9维向量）索引的表A。
- en: Initialize a todo queue Q of tile configurations.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化一个待办队列Q，其中包含牌配置。
- en: Initialize all winning configurations in table A with shanten zero (this can
    be done by enumeration), recording these configurations in Q.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将表A中所有获胜配置的向听数初始化为零（可以通过枚举完成），并将这些配置记录在Q中。
- en: While the todo queue Q is not empty, pop the front element, mark the shanten
    of all adjacent uninitialized nodes as one greater than that node, and push those
    nodes onto the todo queue.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当待办队列Q不为空时，弹出队列的前端元素，标记所有相邻未初始化节点的向听数为比该节点多一，然后将这些节点推入待办队列。
- en: With this information in hand, we can assemble the overall shanten of a hand.
    It suffices to try every distribution of triples and the pairs over the four types
    of tiles (also including null tiles), consulting the shanten of the requested
    shape, and return the minimum of all these configurations. There are ![4 \times
    {4 + 4 - 1 \choose 4}](img/1b56ff217fbe5d1f3c793d29b4f4c52b.png "4 \times {4 +
    4 - 1 \choose 4}") (by [stars and bars](http://en.wikipedia.org/wiki/Stars_and_bars_(combinatorics)))
    combinations, for a total of 140 configurations. Computing the shanten of each
    configuration is a constant time operation into the lookup table generated by
    the per-suit calculation. A true shanten calculator must also accomodate the rare
    other hands which do not follow this configuration, but these winning configurations
    are usually highly constrained, and quite easily to (separately) compute the shanten
    of.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有这些信息后，我们可以汇总手牌的总实时。只需尝试所有三张牌和四种类型的牌（包括空牌），并查看请求形状的实时，并返回所有这些配置中的最小值。根据[星和条](http://en.wikipedia.org/wiki/Stars_and_bars_(combinatorics))，有![4
    \times {4 + 4 - 1 \choose 4}](img/1b56ff217fbe5d1f3c793d29b4f4c52b.png "4 \times
    {4 + 4 - 1 \choose 4}")个组合，总计140个配置。计算每个配置的实时是一个常量时间操作，进入由每套计算生成的查找表。一个真正的实时计算器也必须适应那些不遵循此配置的罕见其他手牌，但这些获胜配置通常非常受限制，并且很容易（单独）计算实时。
- en: 'With a shanten calculator, there are a number of other quantities which can
    be calculated. *Uke-ire* refers to the number of possible draws which can reduce
    the shanten of your hand: one strives for high uke-ire because it means that probability
    that you will draw a tile which moves your hand closer to winning. Given a hand,
    it''s very easy to calculate its uke-ire: just look at all adjacent hands and
    count the number of hands which have lower shanten.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 带有一种实盘计算器，可以计算出许多其他的数量。*浮法* 是指可以减少您手上的实时的可能抽取的数量：人们努力追求高浮法，因为这意味着您有可能抽到一张可以接近于获胜的牌。给定一手牌，计算其浮法非常简单：只需查看所有相邻的手牌，并计算具有较低实时的手牌的数量。
- en: Further extensions
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 进一步的扩展
- en: 'Suppose that you are trying to design an AI which can play Mahjong. Would the
    above shanten calculator provide a good evaluation metric for your hand? Not really:
    it has a major drawback, in that it does not consider the fact that some tiles
    are simply unavailable (they were discarded). For example, if all four “nine stick”
    tiles are visible on the table, then no hand configuration containing a nine stick
    is actually reachable. Adjusting for this situation is actually quite difficult,
    for two reasons: first, we can no longer precompute a shanten table, since we
    need to adjust at runtime what the reachability metric is; second, the various
    suits are no longer symmetric, so we have to do three times as much work. (We
    can avoid an exponential blowup, however, since there is no inter-suit interaction.)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您正在尝试设计一个可以玩麻将的人工智能。上述实时计算器是否能为您的手提供良好的评估指标？实际上不行：它有一个主要缺点，即它并未考虑到某些牌根本不可用（它们已被丢弃）。例如，如果所有四张“九条”牌都在桌上可见，那么实际上不存在包含九条的手牌配置。调整这种情况实际上非常困难，有两个原因：首先，我们不能再预先计算实时表，因为我们需要在运行时调整可达性指标；其次，各种类型的牌不再对称，因此我们需要做三倍的工作。但我们可以避免指数级的膨胀，因为各套之间没有交互作用。
- en: 'Another downside of the shanten and uke-ire metrics is that they are not direct
    measures of “tile efficiency”: that is, they do not directly dictate a strategy
    for discards which minimizes the expected time before you get a winning hand.
    Consider, for example, a situation where you have the tiles 233, and only need
    to make another triple in order to win. You have two possible discards: you can
    discard a 2 or a 3\. In both cases, your shanten is zero, but discarding a 2,
    you can only win by drawing a 3, whereas discarding a 3, you can win by drawing
    a 1 or a 4\. Maximizing efficiency requires considering the lifetime ure-kire
    of your hands.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 实时和浮法指标的另一个缺点是它们不是“牌效率”的直接度量：也就是说，它们并不直接指导您在获胜之前最小化预期时间的丢牌策略。例如，假设您有233这样的牌，并且只需要再凑成一个三张牌就可以赢了。您有两种可能的丢牌方式：您可以丢弃一个2或者一个3。在两种情况下，您的实时都是零，但是如果丢弃一个2，您只能通过抽到一个3来赢，而如果丢弃一个3，您可以通过抽到一个1或者一个4来赢。最大化效率需要考虑您手牌的生命周期浮法。
- en: 'Even then, perfect tile efficiency is not enough to see victory: every winning
    hand is associated with a point-score, and so in many cases it may make sense
    to go for a lower-probability hand that has higher expected value. Our decomposition
    method completely falls apart here, as while the space of winning configurations
    can be partitioned, scoring has nonlocal effects, so the entire hand has to be
    considered as a whole. In such cases, one might try for a Monte Carlo approach,
    since the probability space is too difficult to directly characterize. However,
    in the Japanese Mahjong scoring system, there is yet another difficulty with this
    approach: the scoring system is *exponential*. Thus, we are in a situation where
    the majority of samples will be low scoring, but an exponentially few number of
    samples have exponential payoff. In such cases, it’s difficult to say if random
    sampling will actually give a good result, since it is likely to miscalculate
    the payoff, unless exponentially many samples are taken. (On the other hand, because
    these hands are so rare, an AI might do considerably well simply ignoring them.)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 即便如此，完美的牌效率并不足以取得胜利：每个获胜的手牌都与一定的得分关联，因此在许多情况下，选择一个低概率但预期价值更高的手牌可能更合理。在这里，我们的分解方法完全失效了，因为虽然可以将获胜配置的空间划分，但是计分具有非局部效应，因此整手牌必须作为一个整体来考虑。在这种情况下，可以尝试蒙特卡罗方法，因为直接表征概率空间太困难。然而，在日本麻将的计分系统中，这种方法还面临另一个困难：计分系统是*指数级的*。因此，我们面临这样一种情况：大多数样本的得分较低，但极少数样本具有指数级的回报。在这种情况下，很难说随机抽样是否会真正给出一个好结果，除非抽取指数多的样本。（另一方面，由于这些手牌如此罕见，一个AI可能简单地忽略它们而表现得相当好。）
- en: To summarize, Mahjong is a fascinating game, whose large state space makes it
    difficult to accurately characterize the probabilities involved. In my thesis,
    I attempt to tackle some of these questions; please [check it out](http://en.wikipedia.org/wiki/April_Fools'_Day)
    if you are interested in more.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，麻将是一款迷人的游戏，其庞大的状态空间使得准确表征涉及的概率变得困难。在我的论文中，我尝试解决其中的一些问题；如果你对此感兴趣，请[查看](http://en.wikipedia.org/wiki/April_Fools'_Day)。
- en: '* * *'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[1] No, I am not talking about the travesty that is mahjong solitaire.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] 不，我不是在谈论那些麻将接龙的荒谬事情。'
- en: '[2] To be clear, I am not saying that poker strategy is simple—betting strategy
    is probably one of the most interesting parts of the game—I am simply saying that
    the basic game is rather simple, from a probability perspective.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] 明确一点，我并不是说扑克策略简单——下注策略可能是游戏中最有趣的部分之一——我只是说从概率角度来看，基本游戏相对简单。'
- en: '[3] Tenhou is a popular Japanese online mahjong client. The input format for
    the Tenhou calculator is `123m123p123s123z`, where numbers before `m` indicate
    man tiles, `p` pin tiles, `s` sou tiles, and `z` honors (in order, they are: [east,
    south, west, north, white, green, red](http://tenhou.net/2/?q=1234567z)). Each
    entry indicates which tile you can discard to move closer to tenpai; the next
    list is of ure-kire (and the number of tiles which move the hand further).'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[3] 天凤是一个流行的日本在线麻将客户端。天凤计算器的输入格式是`123m123p123s123z`，其中`m`之前的数字表示万子，`p`表示筒子，`s`表示索子，`z`表示风牌（顺序依次为：[东、南、西、北、白、发、中](http://tenhou.net/2/?q=1234567z)）。每个条目指示你可以丢弃哪张牌来接近听牌；下一个列表是连切牌的数目（及使手牌进一步完善的牌数）。'
