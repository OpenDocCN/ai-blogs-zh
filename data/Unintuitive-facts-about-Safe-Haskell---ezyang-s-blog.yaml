- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-07-01 18:17:27'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-07-01 18:17:27
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Unintuitive facts about Safe Haskell : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于安全 Haskell 的不直观事实：ezyang's 博客
- en: 来源：[http://blog.ezyang.com/2012/09/common-misconceptions-about-safe-haskell/](http://blog.ezyang.com/2012/09/common-misconceptions-about-safe-haskell/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2012/09/common-misconceptions-about-safe-haskell/](http://blog.ezyang.com/2012/09/common-misconceptions-about-safe-haskell/)
- en: Unintuitive facts about Safe Haskell
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于安全 Haskell 的不直观事实
- en: '[Safe Haskell](http://www.haskell.org/ghc/docs/7.4.2/html/users_guide/safe-haskell.html)
    is a new language pragma for GHC which allows you to run untrusted code on top
    of a trusted code base. There are some common misconceptions about how Safe Haskell
    works in practice. In this post, I’d like to help correct some of these misunderstandings.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[安全 Haskell](http://www.haskell.org/ghc/docs/7.4.2/html/users_guide/safe-haskell.html)
    是 GHC 的一种新的语言扩展，允许你在受信任的代码库之上运行不受信任的代码。关于安全 Haskell 的工作方式，有一些常见的误解。在这篇文章中，我希望帮助纠正其中的一些误解。'
- en: '[`system ''rm -Rf /'' :: IO ExitCode`] is accepted by Safe Haskell'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`system ''rm -Rf /'' :: IO ExitCode`] 被安全 Haskell 所接受'
- en: Although an IO action here is certainly unsafe, it is not rejected by Safe Haskell
    per se, because the type of this expression clearly expresses the fact that the
    operation may have arbitrary side effects. Your obligation in the trusted code
    base is to not run untrusted code in the IO monad! If you need to allow limited
    input/output, you must define a restricted IO monad, which is described in the
    manual.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这里的 IO 动作肯定是不安全的，但 Safe Haskell 并不会因为这个表达式的类型明确表达了操作可能具有任意的副作用而拒绝它，你在受信任的代码库中的义务是不在
    IO Monad 中运行不受信任的代码！如果你需要允许有限的输入/输出，你必须定义一个受限制的 IO Monad，这在手册中有描述。
- en: Safe Haskell programs can hang
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安全 Haskell 程序可能会挂起
- en: Even with `killThread`, it is all to easy to permanently tie up a capability
    by creating a [non-allocating infinite loop](http://hackage.haskell.org/trac/ghc/ticket/367).
    This bug has been open for seven years now, but we consider this a major deficiency
    in Safe Haskell, and are looking for ways to prevent this from occurring. But
    as things are now, Safe Haskell programs need to be kept under check using operating
    system level measures, rather than just Haskell's thread management protocols.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 即使使用 `killThread`，也很容易通过创建一个 [非分配无限循环](http://hackage.haskell.org/trac/ghc/ticket/367)
    来永久占用一个能力。这个 bug 已经开放了七年了，但我们认为这是 Safe Haskell 的一个主要缺陷，并正在寻找防止这种情况发生的方法。但目前的情况是，安全
    Haskell 程序需要通过操作系统级别的措施来控制，而不仅仅是 Haskell 的线程管理协议。
- en: Users may mistrust `Trustworthy` modules
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用户可能不信任 `Trustworthy` 模块
- en: 'The `Trustworthy` keyword is used to mark modules which use unsafe language
    features and/or modules in a “safe” way. The safety of this is vouched for by
    the maintainer, who inserts this pragma into the top of the module file. Caveat
    emptor! After all, there is no reason that you should necessarily believe a maintainer
    who makes such a claim. So, separately, you can trust a package, via the `ghc-pkg`
    database or the `-trust` flag. But GHC also allows you to take the package maintainer
    at their word, and in fact does so by default; to make it distrustful, you have
    to pass `-fpackage-trust`. The upshot is this:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`Trustworthy` 关键字用于标记那些使用不安全语言特性和/或以“安全”方式使用的模块。这种安全性由维护者保证，其会将此语言扩展插入到模块文件的顶部。购买者请注意！毕竟，并没有理由相信一个维护者一定会这样宣称。因此，你可以通过
    `ghc-pkg` 数据库或 `-trust` 标志信任一个包。但 GHC 也允许你相信包的维护者的说法，事实上，默认情况下就是这样；要使其不可信，你必须传递
    `-fpackage-trust`。总之：'
- en: '| Module trusted? | (no flags) | `-fpackage-trust` |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 模块是否受信任？ | （无标志） | `-fpackage-trust` |'
- en: '| --- | --- | --- |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Package untrusted | Yes | No |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 包是否不受信任 | 是 | 否 |'
- en: '| Package trusted | Yes | Yes |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 包是否受信任 | 是 | 是 |'
- en: If you are serious about using Safe Haskell to run untrusted code, you should
    always run with `-fpackage-trust`, and carefully confer trusted status to packages
    in your database. If you’re just using Safe Haskell as a way of enforcing code
    style, the default are pretty good.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你认真使用安全 Haskell 来运行不受信任的代码，你应该始终使用 `-fpackage-trust`，并仔细将你的数据库中的包标记为受信任的状态。如果你只是把安全
    Haskell 当作一种强制代码风格的方式，那么默认设置是相当不错的。
- en: Explicit untrust is important for maintaining encapsulation
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显式不信任对于维护封装性是重要的
- en: Safe Haskell offers safety inference, which automatically determines if a module
    is safe by checking if it would compile with the `-XSafe` flag. Safe inferred
    modules can then be freely used by untrusted code. Now, suppose that this module
    (inferred safe) was actually `Data.HTML.Internal`, which exported constructors
    to the inner data type which allowed a user to violate internal invariants of
    the data structure (e.g. escaping). That doesn’t seem very safe!
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Safe Haskell 提供了安全推断，通过检查模块是否可以使用 `-XSafe` 标志进行编译来自动确定模块是否安全。推断为安全的模块可以自由地被不受信任的代码使用。现在，假设这个模块（推断为安全）实际上是
    `Data.HTML.Internal`，它导出了内部数据类型的构造器，允许用户违反数据结构的内部不变性（例如转义）。这看起来并不是很安全！
- en: 'The sense in which this is safe is subtle: the correctness of the trusted code
    base cannot rely on any invariants supplied by the untrusted code. For example,
    if the untrusted code defines its own buggy implementation of a binary tree, catching
    the bugginess of the untrusted code is out of scope for Safe Haskell’s mission.
    But if our TCB expects a properly escaped `HTML` value with no embedded JavaScript,
    the violation of encapsulation of this type could mean the untrusted code could
    inject XSS.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这种安全性的含义是微妙的：受信任代码库的正确性不能依赖于不受信任代码提供的任何不变量。例如，如果不受信任的代码定义了其自己有缺陷的二叉树实现，那么捕捉不受信任代码的错误不在
    Safe Haskell 使命的范围内。但是，如果我们的 TCB（Trusted Computing Base）期望一个经过适当转义的 `HTML` 值，且没有嵌入的
    JavaScript，那么违反此类型的封装性可能意味着不受信任的代码可以注入 XSS 攻击。
- en: David Terei and I have some ideas for making the expression of trust more flexible
    with regards to package boundaries, but we still haven't quite come to agreement
    on the right design. (Hopefully we will soon!)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: David Terei 和我对于在包边界方面使信任表达更加灵活有一些想法，但是我们对于正确的设计尚未达成一致意见。（希望我们能尽快做出决定！）
- en: Conclusion
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论
- en: 'Safe Haskell is at its heart a very simple idea, but there are some sharp edges,
    especially when Safe Haskell asks you to make distinctions that aren''t normally
    made in Haskell programs. Still, Safe Haskell is rather unique: while there certainly
    are widely used sandboxed programming languages (Java and JavaScript come to mind),
    Safe Haskell goes even further, and allows you to specify your own, custom security
    policies. Combine that with a massive ecosystem of libraries that play well with
    this feature, and you have a system that you really can’t find anywhere else in
    the programming languages universe.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Safe Haskell 本质上是一个非常简单的想法，但是有一些尖锐的边缘，特别是当 Safe Haskell 要求你进行 Haskell 程序中通常不会做的区分时。不过，Safe
    Haskell 相当独特：虽然确实存在广泛使用的沙盒编程语言（比如 Java 和 JavaScript），但 Safe Haskell 更进一步，允许你指定自己的自定义安全策略。结合一个与此功能良好兼容的大规模库生态系统，你将拥有一个在编程语言领域中真正独一无二的系统。
