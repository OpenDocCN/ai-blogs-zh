- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:18:20'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:18:20'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Nested Data Parallelism versus Creative Catamorphisms : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌套数据并行性对比创造性范畴论：ezyang的博客
- en: 来源：[http://blog.ezyang.com/2010/05/nd-vs-catamorphisms/](http://blog.ezyang.com/2010/05/nd-vs-catamorphisms/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/05/nd-vs-catamorphisms/](http://blog.ezyang.com/2010/05/nd-vs-catamorphisms/)
- en: Nested Data Parallelism versus Creative Catamorphisms
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 嵌套数据并行性对比创造性范畴论
- en: I got to watch (*unfortunately not in person*) Simon Peyton Jones' excellent
    talk (*no really, if you haven't seen it, you should carve out the hour necessary
    to watch it*) on [Data Parallel Haskell](http://www.youtube.com/watch?v=NWSZ4c9yqW8)
    ([slides](http://research.microsoft.com/en-us/um/people/simonpj/papers/ndp/NdpSlides.pdf)).
    The talk got me thinking about a [previous talk about parallelism](http://blog.ezyang.com/2010/04/creative-catamorphisms/)
    given by Guy Steele I had seen recently.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我得看了（*不幸的是不是亲自看到*）西蒙·佩顿·琼斯的出色演讲（*真的，如果你还没看过，应该腾出一个小时去看看*）关于[数据并行哈斯克尔](http://www.youtube.com/watch?v=NWSZ4c9yqW8)（[幻灯片](http://research.microsoft.com/en-us/um/people/simonpj/papers/ndp/NdpSlides.pdf)）。这个讲座让我想起了盖伊·斯蒂尔最近看过的有关[并行性](http://blog.ezyang.com/2010/04/creative-catamorphisms/)的前一次讲座。
- en: 'What''s the relationship between these two talks? At first I though, "Man,
    Guy Steele must be advocating a discipline for programmers, while Simon Peyton
    Jones'' is advocating a discipline for compilers." But this didn''t really seem
    to fit right: maybe you have a clever catamorphism for the problem, the overhead
    for fully parallelizing everything is prohibitive. As Steele notes, we need "hybrid
    sequential/parallel strategies," the most simple of which is "parallelize it until
    it''s manageable and run the fast sequential algorithm on it," ala flat data parallelism.
    Nor is nested data parallelism a silver bullet; while it has wider applicability,
    there are still domains it fits poorly on.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个讲座之间有什么关系？起初我以为，“嘿，盖伊·斯蒂尔一定在为程序员提倡一种纪律，而西蒙·佩顿·琼斯则在为编译器提倡一种纪律。” 但这似乎并不完全合适：也许你对这个问题有一个聪明的范畴论解决方案，全面并行化的开销是不可承受的。正如斯蒂尔所指出的，我们需要“混合顺序/并行策略”，其中最简单的是“将其并行化直到可管理，然后在其上运行快速的顺序算法”，就像平坦数据并行性一样。而嵌套数据并行性也不是万能药；虽然它具有更广泛的适用性，但仍然有一些领域并不适合它。
- en: 'I believe that Nested Data Parallelism will be a powerful and *practical* (well,
    at least once the Data Parallel Haskell team works out the kinks) tool in the
    quest for efficiently implementing catamorphic programs. In particular, it takes
    the huge win of chunking that characterized flat data parallel programs, and combines
    it with the powerful abstraction of nested parallel data. It promises to eliminate
    the drudgery of splitting a parallel data structure into even chunks to pass off
    to the separate processors. It does not resolve issues such as what to do when
    the input data doesn''t come in a parallel structure (you might notice that Data
    Parallel Haskell is primarily useful on numeric types: doubles, integers and words)
    and it still relies on the existence of a convenient reductive function for the
    parallel structure you''ve chosen.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信，嵌套数据并行性将是一个强大且*实用*（至少在数据并行哈斯克尔团队解决问题后）的工具，用于高效实现范畴性程序。特别是，它继承了平坦数据并行程序中的分块优势，并结合了嵌套并行数据的强大抽象。它承诺消除将并行数据结构分割为均匀块以传递给各个处理器的繁琐工作。它并没有解决诸如当输入数据不以并行结构提供时该如何处理等问题（你可能注意到数据并行哈斯克尔主要适用于数字类型：双精度数、整数和字）。它仍然依赖于适用于你选择的并行结构的方便的约化函数的存在。
