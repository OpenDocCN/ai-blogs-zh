- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:53'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:53'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Haskell: Not pure enough? : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Haskell：不够纯粹？：ezyang的博客
- en: 来源：[http://blog.ezyang.com/2011/05/haskell-not-pure-enough/](http://blog.ezyang.com/2011/05/haskell-not-pure-enough/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2011/05/haskell-not-pure-enough/](http://blog.ezyang.com/2011/05/haskell-not-pure-enough/)
- en: 'Haskell: Not pure enough?'
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Haskell：不够纯粹？
- en: 'It is well known that `unsafePerformIO` is an evil tool by which impure effects
    can make their way into otherwise pristine Haskell code. But is the rest of Haskell
    really that pure? Here are a few questions to ask:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 众所周知，`unsafePerformIO`是一个邪恶的工具，通过它，不纯的效果可以进入本来纯洁的Haskell代码。但是Haskell的其余部分真的那么纯粹吗？这里有一些问题需要问：
- en: 'What is the value of `maxBound :: Int`?'
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`maxBound :: Int`的值是多少？'
- en: 'What is the value of `\x y -> x / y == (3 / 7 :: Double)` with `3` and `7`
    passed in as arguments?'
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`(\x y -> x / y == (3 / 7 :: Double))`，传入`3`和`7`作为参数时的值是多少？'
- en: 'What is the value of `os :: String` from `System.Info`?'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`os :: String`的值来自`System.Info`吗？'
- en: 'What is the value of `foldr (+) 0 [1..100] :: Int`?'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`foldr (+) 0 [1..100] :: Int`的值是多少？'
- en: The answers to each of these questions are ill-defined—or you might say they’re
    well defined, but you need a little extra information to figure out what the actual
    result is.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些问题的每一个答案都是模糊不清的——或者你可以说它们是明确定义的，但你需要一些额外的信息来确定实际结果。
- en: The Haskell 98 Report guarantees that the value of `Int` is at least `-2^29`
    to `2^29 - 1`. But the precise value depends on what implementation of Haskell
    you’re using (does it need a bit for garbage collection purposes) and whether
    or not you’re on a 32-bit or 64-bit system.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Haskell 98报告保证`Int`的值至少是`-2^29`到`2^29 - 1`。但是确切的值取决于你使用的Haskell实现（是否需要用于垃圾回收的位）以及你是在32位还是64位系统上。
- en: Depending on whether or not the excess precision of your floating point registers
    is used to calculate the division, or if the IEEE standard is adhered to, this
    equality may or may not hold.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据浮点寄存器的过度精度是否用于计算除法，或者是否遵循IEEE标准，此等式可能成立也可能不成立。
- en: Depending on what operating system the program is run on this value will change.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 程序运行的操作系统不同，此值将会改变。
- en: Depending on the stack space allotted to this program at runtime, it may return
    a result or it may stack overflow.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 程序在运行时分配的栈空间不同，可能会返回结果，也可能会栈溢出。
- en: 'In some respects, these constructs break referential transparency in an interesting
    way: while their values are guaranteed to be consistent during a single execution
    of the program, they may vary between different compilations and runtime executions
    of our program.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些方面，这些构造以有趣的方式破坏了引用透明性：虽然它们的值在程序的单次执行期间保证一致，但它们可能在我们程序的不同编译和运行时执行之间有所变化。
- en: Is this kosher? And if it’s not, what are we supposed to say about the semantics
    of these Haskell programs?
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个合理吗？如果不合理，我们应该怎么说这些Haskell程序的语义？
- en: The topic came up on `#haskell`, and I and a number of participants had a lively
    discussion about the topic. I’ll try to distill a few of the viewpoints here.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在`#haskell`讨论了这个话题，我和一些参与者就此进行了热烈的讨论。我会尝试在这里总结一些观点。
- en: The *mathematical school* says that all of this is very unsatisfactory, and
    that their programming languages should adhere to some precise semantics over
    all compilations and runtime executions. People ought to use arbitrary-size integers,
    and if they need modular arithmetic specify explicitly how big the modulus is
    (`Int32`? `Int64`?) `os` is an abomination that should have been put in the `IO`
    sin bin. As tolkad puts it, “Without a standard you are lost, adrift in a sea
    of unspecified semantics. Hold fast to the rules of the specification lest you
    be consumed by ambiguity.” Limitations of the universe we live in are something
    of an embarrassment to the mathematician, but as long as the program crashes with
    a nice *stack overflow* they’re willing to live with a partial correctness result.
    An interesting subgroup is the *distributed systems school* which also care about
    the assumptions that are being made about the computing environment, but for a
    very practical reason. If multiple copies of your program are running on heterogeneous
    machines, you better not make any assumptions about pointer size on the wire.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*数学学派*认为所有这一切都非常不令人满意，他们的编程语言应该在所有编译和运行时执行中遵循一些精确的语义。人们应该使用任意大小的整数，如果需要模运算，要明确指定模数大小（`Int32`？
    `Int64`？）。`os`简直是该放在`IO`罪恶箱中的一个悲剧。正如tolkad所说：“没有标准，你将迷失在未指定语义的海洋中。坚守规范的规则，否则你将被模糊性所吞噬。”
    我们生活在的宇宙的局限性对数学家来说有些尴尬，但只要程序以一个漂亮的*栈溢出*崩溃，他们就愿意接受部分正确性的结果。一个有趣的子组是*分布式系统学派*，他们同样关心对计算环境所作的假设，但出于非常实际的原因。如果您的程序在异构机器上运行多个副本，则最好不要对传输中的指针大小做任何假设。'
- en: 'The *compile time school* says that the mathematical approach is untenable
    for real world programming: one should program with compilation in mind. They’re
    willing to put up with a little bit of uncertainty in their source code programs,
    but all of the ambiguity should be cleared up once the program is compiled. If
    they’re feeling particularly cavalier, they’ll write their program with several
    meanings in mind, depending on the compile time options. They’re willing to put
    up with stack overflows, which are runtime determined, but are also a little uncomfortable
    with it. It is certainly better than the situation with `os`, which could vary
    from runtime to runtime. The mathematicians make fun of them with examples like,
    “What about a dynamic linker or virtual machine, where some of the compilation
    is left off until runtime?”'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*编译时学派*认为数学方法在现实世界的编程中是不可行的：应该考虑编译编程。他们愿意在源代码程序中接受一些不确定性，但所有的歧义应该在程序编译后清除。如果他们感觉特别大胆，他们会根据编译时选项以多种含义编写程序。他们可以接受运行时确定的栈溢出，但对此也感到有些不舒服。这当然比`os`的情况要好，后者可能因运行时而异。数学家们用这样的例子取笑他们：“动态链接器或虚拟机怎么样，其中一些编译工作直到运行时才完成呢？”'
- en: The *run time school* says “Sod referential transparency across executions”
    and only care about internal consistency across a program run. Not only are they
    OK with stack overflows, they’re also OK with command line arguments setting global
    (pure!) variables, since those don’t change within the executions (they perhaps
    think `getArgs` should have had the signature `[String]`, not `IO [String]`),
    or variables that unsafely read in the contents of an external data file at program
    startup. They [write things in docs](http://hackage.haskell.org/packages/archive/hashable/1.1.1.0/doc/html/Data-Hashable.html)
    like “This integer need not remain consistent from one execution of an application
    to another execution of the same application.” Everyone else sort of shudders,
    but it’s a sort of guilty pleasure that most people have indulged in at some point
    or another.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*运行时学派*说：“对执行间的引用透明度无所谓”，只关心程序运行期间的内部一致性。他们不仅可以接受栈溢出，还可以接受命令行参数设置全局（纯粹！）变量，因为这些在执行期间不会改变（也许他们认为`getArgs`的签名应该是`[String]`而不是`IO
    [String]`），或者不安全地读取外部数据文件的内容在程序启动时。他们在文档中写道：“这个整数在应用程序的一次执行到另一次执行之间不需要保持一致。”其他人都有些发抖，但大多数人在某个时候都会沉迷于这种罪恶的快感。'
- en: So, which school are you a member of?
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，你属于哪个学派呢？
- en: '*Postscript.* Since Rob Harper has recently posted another [wonderfully iconoclastic
    blog post](http://existentialtype.wordpress.com/2011/05/01/of-course-ml-has-monads/),
    and because his ending remarks are tangentially related to the topic of this post
    (purity), I thought I couldn’t help but sneak in a few remarks. Rob Harper states:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*附言.* 由于Rob Harper最近发布了另一篇[非常叛逆的博客文章](http://existentialtype.wordpress.com/2011/05/01/of-course-ml-has-monads/)，而且因为他的结尾言论与本文主题（纯度）有些关联，我觉得我忍不住要偷偷加上几句话。Rob
    Harper说到：'
- en: So why don’t we do this by default? Because it’s not such a great idea. Yes,
    I know it sounds wonderful at first, but then you realize that it’s pretty horrible.
    Once you’re in the IO monad, you’re stuck there forever, and are reduced to Algol-style
    imperative programming. You cannot easily convert between functional and monadic
    style without a radical restructuring of code. And you inevitably need unsafePerformIO
    to get anything serious done. In practical terms, you are deprived of the useful
    concept of a benign effect, and that just stinks!
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 那么为什么我们不默认这样做呢？因为这不是一个好主意。是的，起初听起来很美好，但后来你意识到这其实很可怕。一旦你进入IO单子，你就永远被困在那里，且被降为Algol风格的命令式编程。你不能轻易地在函数式和单子式风格之间转换，而不进行根本性的代码重构。而且你不可避免地需要使用unsafePerformIO来完成任何重要的工作。从实际角度来看，你失去了一个有用的概念——良性效应，这简直糟透了！
- en: I think Harper overstates the inability to write functional-style imperative
    programs in Haskell (conversions from functional to monadic style, while definitely
    annoying in practice, are relatively formulaic.) But these practical concerns
    do influence the day-to-day work of programmers, and as we’ve seen here, purity
    comes in all sorts of shades of gray. There is design space both upwards and downwards
    of Haskell’s current situation, but I think to say that purity should be thrown
    out entirely is missing the point.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为Harper夸大了在Haskell中写函数式命令式程序的能力不足（从函数式到单子式的转换，在实践中确实很烦人，但相对来说是比较公式化的）。但这些实际上的关注确实影响了程序员的日常工作，正如我们在这里所看到的，纯度有各种各样的灰色阴影。在Haskell当前的情况上方和下方都有设计空间，但我认为认为纯度应该被完全放弃是错失了重点。
