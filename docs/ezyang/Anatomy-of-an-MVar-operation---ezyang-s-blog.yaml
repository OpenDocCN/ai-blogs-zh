- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-07-01 18:17:21'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-07-01 18:17:21
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Anatomy of an MVar operation : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`MVar` 操作解剖：ezyang 的博客'
- en: 来源：[http://blog.ezyang.com/2013/05/anatomy-of-an-mvar-operation/](http://blog.ezyang.com/2013/05/anatomy-of-an-mvar-operation/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2013/05/anatomy-of-an-mvar-operation/](http://blog.ezyang.com/2013/05/anatomy-of-an-mvar-operation/)
- en: Adam Belay (of [Dune](http://dune.scs.stanford.edu/) fame) was recently wondering
    why Haskell’s MVars are so slow. “Slow?” I thought, “aren’t Haskell’s MVars supposed
    to be really fast?” So I did some digging around how MVars worked, to see if I
    could explain.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Adam Belay（[Dune](http://dune.scs.stanford.edu/) 的知名人物）最近在思考为什么 Haskell 的 `MVar`
    如此缓慢。“缓慢？”我想，“Haskell 的 `MVar` 不是应该很快吗？” 所以我研究了一下 `MVar` 的工作原理，看看能否解释清楚。
- en: 'Let’s consider the operation of the function `takeMVar` in [Control.Concurrent.MVar](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Concurrent-MVar.html#v:takeMVar).
    This function is very simple, it unpacks `MVar` to get the underlying `MVar#`
    primitive value, and then calls the primop `takeMVar#`:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑在 [Control.Concurrent.MVar](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Concurrent-MVar.html#v:takeMVar)
    中函数 `takeMVar` 的操作。此函数非常简单，它解包 `MVar` 以获取基础的 `MVar#` 原始值，然后调用 primop `takeMVar#`：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[Primops](http://hackage.haskell.org/trac/ghc/wiki/Commentary/PrimOps) result
    in the invocation of `stg_takeMVarzh` in `PrimOps.cmm`, which is where the magic
    happens. For simplicity, we consider only the *multithreaded* case.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[Primops](http://hackage.haskell.org/trac/ghc/wiki/Commentary/PrimOps) 导致在
    `PrimOps.cmm` 中调用 `stg_takeMVarzh`，这是魔术发生的地方。为简单起见，我们只考虑*多线程*情况。'
- en: 'The first step is to **lock the closure**:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是**锁定闭包**：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Objects on the GHC heap have an *info table header* which indicates what kind
    of object they are, by pointing to the relevant info table for the object. These
    headers are *also* used for synchronization: since they are word-sized, they can
    be atomically swapped for other values. `lockClosure` is in fact a spin-lock on
    the info table header:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GHC 堆上的对象具有信息表头，指示它们是什么类型的对象，通过指向对象的相关信息表来实现。这些表头还用于同步：由于它们是字大小的，因此它们可以原子地与其他值交换。`lockClosure`
    实际上是信息表头上的自旋锁：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`lockClosure` is used for some other objects, namely thread state objects (`stg_TSO_info`,
    via `lockTSO`) and thread messages i.e. exceptions (`stg_MSG_THROWTO_info`, `stg_MSG_NULL_info`).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`lockClosure` 用于一些其他对象，即线程状态对象（`stg_TSO_info`，通过 `lockTSO`）和线程消息，即异常（`stg_MSG_THROWTO_info`，`stg_MSG_NULL_info`）。'
- en: 'The next step is to **apply a GC write barrier on the MVar**:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在 `MVar` 上**应用 GC 写屏障**：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As I’ve [written before](http://blog.ezyang.com/2013/01/the-ghc-scheduler/),
    as the MVar is a mutable object, it can be mutated to point to objects in generation
    0; thus, when a mutation happens, it has to be added to the root set via the mutable
    list. Since mutable is per capability, this boils down into a bunch of pointer
    modifications, and does not require any synchronizations. Note that we will need
    to add the MVar to the mutable list, *even* if we end up blocking on it, because
    the MVar is a retainer of the *thread* (TSO) which is blocked on it! (However,
    I suspect in some cases we can get away with not doing this.)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我之前[写过的](http://blog.ezyang.com/2013/01/the-ghc-scheduler/)，由于 `MVar` 是可变对象，可以变异以指向第
    0 代中的对象；因此，当发生变异时，必须通过可变列表将其添加到根集中。由于每个能力都有一个可变对象，这归结为一堆指针修改，并不需要任何同步。请注意，即使我们最终阻塞在其上，我们也需要将
    `MVar` 添加到可变列表中，因为 `MVar` 是阻塞在其上的 *线程*（TSO）的保留者！（然而，我怀疑在某些情况下，我们可以不这样做。）
- en: 'Next, we case split depending on whether or not the MVar is full or empty.
    If the MVar is empty, we need to **block the thread until the MVar is full**:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们根据 `MVar` 是否满或空进行分割。如果 `MVar` 为空，我们需要*阻塞线程，直到 `MVar` 为满*：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'A useful thing to know when decoding C-- primop code is that `StgTSO_block_info(...)`
    and its kin are how we spell field access on objects. C-- doesn’t know anything
    about C struct layout, and so these “functions” are actually macros generated
    by `utils/deriveConstants`. Blocking a thread consists of three steps:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 解码 C-- primop 代码时的一个有用提示是 `StgTSO_block_info(...)` 及其关联部分是我们如何访问对象字段的。C-- 对
    C 结构布局一无所知，因此这些“函数”实际上是由 `utils/deriveConstants` 生成的宏。阻塞线程包括三个步骤：
- en: We have to add the thread to the blocked queue attached to the MVar (that’s
    why blocking on an MVar mutates the MVar!) This involves performing a heap allocation
    for the linked list node as well as mutating the tail of the old linked list.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须将线程添加到附加到 MVar 的阻塞队列中（这就是为什么在 MVar 上阻塞会改变 MVar 的原因！）这包括为链表节点进行堆分配以及变更旧链表尾部。
- en: We have to mark the thread as blocked (the `StgTSO` modifications).
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须将线程标记为阻塞状态（`StgTSO` 的修改）。
- en: We need to setup a stack frame for the thread so that when the thread wakes
    up, it performs the correct action (the invocation to `stg_block_takemvar`). This
    invocation is also responsible for unlocking the closure. While the machinery
    here is pretty intricate, it’s not really in scope for this blog post.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要为线程设置一个栈帧，以便线程唤醒时执行正确的操作（即对 `stg_block_takemvar` 的调用）。这个调用还负责解锁闭包。虽然这里的机制非常复杂，但它并不是这篇博文的重点。
- en: If the MVar is full, then we can go ahead and **take the value from the MVar.**
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 MVar 是满的，则可以从 MVar 中**取出值**。
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'But that’s not all. If there are other blocked `putMVars` on the MVar (remember,
    when a thread attempts to put an MVar that is already full, it blocks until the
    MVar empties out), then we should immediately unblock one of these threads so
    that the MVar can always be left in a full state:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 但这还不是全部。如果有其他阻塞的 `putMVar` 在 MVar 上（记住，当线程尝试放置一个已满的 MVar 时，它会阻塞直到 MVar 清空），那么我们应立即解除其中一个线程的阻塞状态，以便
    MVar 始终保持满状态：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: There is one interesting thing about the code that checks for blocked threads,
    and that is the check for *indirectees* (`stg_IND_info`). Under what circumstances
    would a queue object be stubbed out with an indirection? As it turns out, this
    occurs when we *delete* an item from the linked list. This is quite nice, because
    on a singly-linked list, we don't have an easy way to delete items unless we also
    have a pointer to the previous item. With this scheme, we just overwrite out the
    current item with an indirection, to be cleaned up next GC. (This, by the way,
    is why we can't just chain up the TSOs directly, without the extra linked list
    nodes. [1])
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有一件有趣的事情与检查阻塞线程的代码有关，那就是对 *indirectees*（`stg_IND_info`）的检查。在什么情况下，队列对象会被间接替换为间接引用呢？事实证明，当我们从链表中
    *删除* 一个项时会发生这种情况。这非常好，因为在单链表中，除非我们也有指向前一项的指针，否则我们没有简单的方法来删除项。采用这种方案，我们只需用一个间接引用覆盖当前项，以便在下次垃圾回收时进行清理。（顺便说一句，这就是为什么我们不能仅仅直接链起
    TSO，而不需要额外的链表节点。[1]）
- en: 'When we find some other threads, we immediately run them, so that the MVar
    never becomes empty:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们找到其他线程时，立即运行它们，这样 MVar 就永远不会变为空：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'There is one detail here: `PerformPut` doesn’t actually run the thread, it
    just looks at the thread’s stack to figure out what it was *going* to put. Once
    the MVar is put, we then wake up the thread, so it can go on its merry way:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个细节：`PerformPut` 实际上并没有运行线程，它只是查看线程的堆栈以确定它打算 *执行* 什么。一旦 MVar 被放置，我们就唤醒线程，这样它就可以继续它的工作了。
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To sum up, when you `takeMVar`, you pay the costs of:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，当你执行 `takeMVar` 时，你需要付出以下成本：
- en: one spinlock,
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个自旋锁，
- en: on order of several dozen memory operations (write barriers, queue twiddling),
    and
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大约数十个内存操作（写障碍、队列操作），以及
- en: when the MVar is empty, a (small) heap allocation and stack write.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当 MVar 为空时，进行（小）堆分配和栈写入。
- en: 'Adam and I puzzled about this a bit, and then realized the reason why the number
    of cycles was so large: our numbers are for *roundtrips*, and even with such lightweight
    synchronization (and lack of syscalls), you still have to go through the scheduler
    when all is said and done, and that blows up the number of cycles.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 亚当和我对此有些困惑，然后意识到循环次数之所以如此之多的原因：我们的数字是关于 *往返* 的，即使在如此轻量级的同步（和缺乏系统调用）中，当所有事情都说完时，你仍然需要经过调度器，这会增加循环次数。
- en: '* * *'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[1] It wasn’t always this way, see:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] 曾经并非如此，请参见：'
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
