- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-07-01 18:17:21'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-07-01 18:17:21
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: '(Homotopy) Type Theory: Chapter One : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: （同伦）类型论：第一章：ezyang’s博客
- en: 来源：[http://blog.ezyang.com/2013/06/homotopy-type-theory-chapter-one/](http://blog.ezyang.com/2013/06/homotopy-type-theory-chapter-one/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2013/06/homotopy-type-theory-chapter-one/](http://blog.ezyang.com/2013/06/homotopy-type-theory-chapter-one/)
- en: 'In what is old news by now, the folks at the Institute for Advanced Study have
    released [Homotopy Type Theory: Univalent Foundations of Mathematics](http://homotopytypetheory.org/book/).
    There has been some (meta)commentary ([Dan Piponi](https://plus.google.com/107913314994758123748/posts/VzWAsojiifE),
    [Bob Harper](http://existentialtype.wordpress.com/2013/06/22/whats-the-big-deal-with-hott/),
    [Andrej Bauer](http://math.andrej.com/2013/06/20/the-hott-book/), [François G.
    Dorais](http://dorais.org/archives/1425), [Steve Awodey](http://homotopytypetheory.org/2013/06/20/the-hott-book/),
    [Carlo Angiuli](http://www.carloangiuli.com/blog/homotopy-type-theory-univalent-foundations-of-mathematics/),
    [Mike Shulman](http://golem.ph.utexas.edu/category/2013/06/the_hott_book.html),
    [John Baez](https://plus.google.com/117663015413546257905/posts/cm1sKge8qxX))
    on the Internet, though, of course, it takes time to read a math textbook, so
    don’t expect detailed technical commentary from non-authors for a while.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看来已经是老生常谈的事情了，智库的人们发布了《同伦类型论：数学的同构基础》。有一些（元）评论（[丹·皮波尼](https://plus.google.com/107913314994758123748/posts/VzWAsojiifE)，[鲍勃·哈珀](http://existentialtype.wordpress.com/2013/06/22/whats-the-big-deal-with-hott/)，[安德烈·鲍尔](http://math.andrej.com/2013/06/20/the-hott-book/)，[弗朗索瓦·G·多雷](http://dorais.org/archives/1425)，[史蒂夫·奥威迪](http://homotopytypetheory.org/2013/06/20/the-hott-book/)，[卡尔洛·安朱利](http://www.carloangiuli.com/blog/homotopy-type-theory-univalent-foundations-of-mathematics/)，[迈克·舒尔曼](http://golem.ph.utexas.edu/category/2013/06/the_hott_book.html)，[约翰·贝兹](https://plus.google.com/117663015413546257905/posts/cm1sKge8qxX)），尽管在互联网上进行数学教科书的阅读需要时间，所以不要指望非作者能够提供详细的技术评论一段时间。
- en: 'Of course, being a puny grad student, I was, of course, most interested in
    the book’s contribution of *yet another Martin-Löf intuitionistic type theory
    introduction*, e.g. chapter one. The classic introduction is, of course, the papers
    that Martin Löf wrote (nota bene: there were many iterations of this paper, so
    it’s a little hard to find the right one, though it seems Giovanni Sambin’s notes
    are the easiest to find), but an introduction of type theory for *homotopy type
    theory* has to make certain adjustments, and this makes for some novel presentation.
    In particular, the chapter’s discussion of *identity types* is considerably more
    detailed than I have seen elsewhere (this is not surprising, since identity is
    of central importance to homotopy type theory). There is also a considerable bit
    of pedantry/structure in the discussion of the types that make up the theory,
    reminiscent of the [PFPL](http://existentialtype.wordpress.com/2012/12/03/pfpl-is-out/)
    (though I believe that this particular chapter was mostly written by others).
    And, of course, there are many little variations in how the theory is actually
    put together, expounded upon in some detail in the chapter notes.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，作为一个渺小的研究生，我当然对书中“再次马丁·洛夫直觉性类型论介绍”贡献最感兴趣，例如第一章。经典的介绍当然是马丁·洛夫写的论文（请注意：这篇论文有许多版本，所以很难找到合适的版本，尽管看起来乔瓦尼·桑宾的笔记最容易找到），但是为了“同伦类型论”的类型论介绍必须做出某些调整，这导致了一些新颖的呈现。特别是，章节讨论的“同一性类型”比我在其他地方看到的要详细得多（这并不奇怪，因为同一性对同伦类型论至关重要）。在讨论构成该理论的类型时，也有相当多的学术细节/结构，让人想起了《PFPL》（尽管我相信这一特定章节大部分是由其他人撰写的）。当然，在理论如何实际组合和详细解释方面也有许多小的变化，在章节注释中也进行了详细阐述。
- en: 'In more detail:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 更详细地说：
- en: '**Definitional and propositional equality.** The chapter spends a little bit
    of time carefully distinguishing between definitional equality (a purely syntactic
    notion up to computation) and propositional equality (which involves evidence),
    which I appreciated. The difference between connectives which show up inside and
    outside the deductive system was a major point of confusion for me when I was
    originally learning logic.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**定义性和命题性相等性。** 章节花了一点时间仔细区分了定义性相等性（纯语法概念，通过计算）和命题性相等性（涉及证据），这一点我很赞赏。当我最初学习逻辑时，内部和外部推理系统中出现的连接词的差异是我困惑的主要点。'
- en: '**The general pattern of the introduction of a new kind of type.** The modern
    style for introducing logical connectives is to classify the rules into various
    kinds, such as introduction rules and elimination rules, and then hew to this
    regularity in the presentation. Often, readers are expected to “see it”, but this
    book makes a helpful remark laying out the style. I found a useful exercise was
    to take the rules and reorganize them so that, for example, all of the elimination
    rules are together and compare them.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**引入新类型的一般模式。** 引入逻辑连接词的现代风格是将规则分类为各种类型，例如引入规则和消除规则，然后在展示中坚持这种规律性。通常，读者被期望“看到它”，但这本书通过一个有用的备注阐述了这种风格。我发现一个有用的练习是将规则重新组织，例如将所有的消除规则放在一起并进行比较。'
- en: '**Recursion and induction.** [I’ve written about this subject before](http://blog.ezyang.com/2013/04/the-difference-between-recursion-induction/),
    arguing that recursion and induction aren’t the same thing, since induction needs
    to work over indexed types. This is true, but there is an important point I did
    not make: *induction is generalized recursion*. This is because when you specify
    your type family *P* to be the *constant type family* which ignores its index,
    the dependence is erased and you have an ordinary recursor. In fact, this is a
    [CPDT exercise](http://adam.chlipala.net/cpdt/html/InductiveTypes.html); I think
    it clarifies things to see this in both Coq and informal mathematics, as the informal
    presentation makes the dimension of generalization clearer.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**递归和归纳。** [我之前写过关于这个主题的文章](http://blog.ezyang.com/2013/04/the-difference-between-recursion-induction/)，主张递归和归纳并不是同一回事，因为归纳需要针对索引类型进行操作。这是正确的，但我没有提到一个重要的观点：*归纳是广义的递归*。这是因为当你将类型族
    *P* 指定为*常数类型族*，它忽略其索引时，依赖关系被抹去，你得到了一个普通的递归器。事实上，这是一个[CPDT练习](http://adam.chlipala.net/cpdt/html/InductiveTypes.html)；我认为在
    Coq 和非正式数学中看到这一点可以澄清事情的广义维度。'
- en: '**Identity types.** I won’t lie: I had a difficult time with this section,
    and I don’t think I fully understand why path induction works, even after a very
    long remark at the end of the section. (Additionally, while the notes point to
    some prior literature about the subject, I took a look at the papers and I did
    not see anything that resembled their presentation of path induction.) By default,
    Coq thinks the inductive principle for equality types should be what is referred
    to in this book as the indiscernability of identicals:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**恒同类型。** 我不会撒谎：我在这一部分遇到了一些困难，即使在这一部分的最后有一个非常长的注释，我仍然不完全理解路径归纳为什么起作用。（此外，尽管注释指向一些关于该主题的文献，我看了这些论文，但没有看到任何类似于他们对路径归纳的呈现。）默认情况下，Coq
    认为等同类型的归纳原则应该是这本书所说的相同者的不可辨认性：'
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '(As a tangent, the use of family *C* is confusingly overloaded; when discussing
    the generalization of the previous principlem the reader is required to imagine
    `C(x) -> C(y)  ===  C(x, y)`—the C’s of course being distinct.) Path induction
    asks for more:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: （顺带一提，家族 *C* 的使用有些混乱；当讨论前面原则的泛化时，读者需要想象 `C(x) -> C(y)  ===  C(x, y)` ——这些 C
    显然是不同的。）路径归纳要求更多：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is perhaps not too surprising, since this machinery is principally motivated
    by homotopy type theory. Additionally, the inductive principle follows the same
    pattern as the other inductive principles defined for the other types. The trouble
    is a frustrating discussion of why this inductive principle valid, even when you
    might expect, in a HoTT setting, that not all equality was proven using reflexivity.
    My understanding of the matter is that is has to do with the placement of the
    `forall (x : A)` quantifier. It is permissible to move one of the x''s to the
    top level (based path induction), but not *both*. (This is somewhat obscured by
    the reuse of variable names.) There is also a geometric intuition, which is that
    when both or one endpoints of the path are free (inner-quantification), then I
    can contract the path into nothingness. But I have a difficult time mapping this
    onto any sort of rigorous argument. Perhaps you can help me out.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '这也许并不太令人惊讶，因为这些机制主要受同伦类型理论的驱动。此外，归纳原则遵循与为其他类型定义的其他归纳原则相同的模式。问题在于对为什么这个归纳原则有效的沮丧讨论，即使在
    HoTT 设置中，你可能期望，并非所有的相等性都是通过自反性证明的。我对此的理解是与`forall (x : A)`量化器的放置有关。允许将其中一个 x 移动到顶层（基于路径归纳），但不能*两者都移动*。（这在变量名称的重用中有些模糊。）还有一种几何直觉，即当路径的两个端点都是自由的（内部量化）时，我可以将路径收缩为空。但我很难将这一点映射到任何严格的论证上。也许你能帮助我搞清楚。'
- en: 'As an aside, I have some general remarks about learning type theory from a
    functional programming background. I have noticed that it is not too hard to use
    Coq without knowing much type theory, and even easier to miss the point of why
    the type theory might be helpful. But in the end, it is really useful to understand
    what is going on, and so it’s well worth studying *why* dependent products and
    sums generalize the way they do. It also seems that people find the pi and sigma
    notation confusing: it helps if you realize that they are algebraic puns. Don’t
    skip the definition of the inductive principles.'
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 作为旁注，我对从函数式编程背景学习类型理论有一些一般性的评论。我注意到，即使不了解太多类型理论，使用 Coq 也不是太难，而且更容易错过类型理论可能有帮助的点。但最终，理解发生的事情真的很有用，因此研究为什么依赖积和和广义的依赖和一般化方式的原因是非常值得的。看起来人们对
    pi 和 sigma 符号感到困惑：如果意识到它们是代数双关语，会有所帮助。不要跳过归纳原则的定义。
- en: I apologize if any of this post has been inaccurate or misleadingly skewed.
    My overall impression is that this first chapter is a very crisp introduction
    to type theory, but that the segments on identity types may be a little difficult
    to understand. Now, onwards to chapter two!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果本帖有任何不准确或误导性的倾向，我深感抱歉。我总体上的印象是，这一章对类型理论是一个非常清晰的介绍，但是关于同一类型的部分可能有点难以理解。现在，继续看第二章吧！
