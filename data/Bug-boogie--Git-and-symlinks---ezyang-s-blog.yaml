- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:18:17'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:18:17'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Bug boogie: Git and symlinks : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Bug boogie: Git 和符号链接 : ezyang’s blog'
- en: 来源：[http://blog.ezyang.com/2010/06/bug-boogie-git-and-symlinks/](http://blog.ezyang.com/2010/06/bug-boogie-git-and-symlinks/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/06/bug-boogie-git-and-symlinks/](http://blog.ezyang.com/2010/06/bug-boogie-git-and-symlinks/)
- en: 'Git is very careful about your files: unless you tell it to be explicitly destructive,
    it will refuse to write over files that it doesn''t know about, instead giving
    an error like:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Git 对你的文件非常小心：除非你明确告诉它要进行破坏性操作，否则它将拒绝覆盖它不认识的文件，并显示如下错误：
- en: Untracked working tree file 'foobar' would be overwritten by merge.
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 未跟踪的工作树文件'foobar'将被合并覆盖。
- en: In my work with [Wizard](http://scripts.mit.edu/wizard), I frequently need to
    perform merges on working copies that have been, well, "less than well maintained",
    e.g. they untarred a new version of the the source tree on the old directory and
    forgot to add the newly added files. When Wizard goes in and tries to automatically
    upgrade them to the new version the proper way, this results in all sorts of untracked
    working tree file complaints, and then we have to go and manually check on the
    untracked files and remove them once they're fine.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的工作中，经常需要对[Wizard](http://scripts.mit.edu/wizard)上那些“维护不良”的工作副本执行合并操作，例如，在旧目录上解压了新版本的源代码树，却忘记添加新加入的文件。当Wizard尝试以正确方式自动升级它们到新版本时，这将导致各种未跟踪的工作树文件投诉，然后我们必须手动检查这些未跟踪的文件，并在它们正常后移除它们。
- en: 'There is a simple workaround for this: while we don''t want to add all untracked
    files to the Git repository, we could add just the files that would be clobbered.
    Git will then stop complaining about the files, and we will still have records
    of them in the history:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对此有一个简单的解决方法：虽然我们不想将所有未跟踪的文件添加到Git仓库中，但我们可以只添加那些可能会被覆盖的文件。Git 将停止对这些文件的投诉，并且我们仍然可以在历史记录中找到它们的记录：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Previously, the starred line of code read `if os.path.exists(f)`. Can you guess
    why this was buggy? Recall the difference betweeen `exists` and `lexists`; if
    the file in question is a symlink, `exists` will follow it, while `lexists` will
    not. So, if a file to be clobbered is a broken symlink, the old version of the
    code would not have removed it. In many case, you can''t distinguish between the
    cases: if the parent directory of the file that the symlink points to exists,
    I can create a file via the symlink, and other normal "file operations."'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，代码中的星号行为 `if os.path.exists(f)`。你能猜到这有什么错误吗？回想一下 `exists` 和 `lexists` 之间的区别；如果涉及的文件是符号链接，`exists`
    会跟随它，而 `lexists` 则不会。因此，如果将要被覆盖的文件是一个损坏的符号链接，旧版本的代码将不会将其删除。在许多情况下，你无法区分这些情况：如果文件符号链接指向的父目录存在，我可以通过符号链接创建一个文件，以及其他正常的“文件操作”。
- en: However, Git is very keenly aware of the difference between a symlink and a
    file and will complain accordingly if it would have clobbered a symlink. Good
    ole information preservation!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Git 非常清楚符号链接和普通文件之间的区别，并且如果它将会覆盖一个符号链接，它会相应地投诉。保留了这些好的老信息！
- en: '*Postscript.* Yesterday was my first day of work at Galois! It was so exciting
    that I couldn''t get my wits together to write a blog post about it. More to come.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*附言。* 昨天是我在Galois工作的第一天！如此令人兴奋，以至于我没能整理思绪写一篇博客。敬请期待更多。'
