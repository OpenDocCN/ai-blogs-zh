- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:18:17'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-07-01 18:18:17
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Punt the Prelude : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Punt the Prelude : ezyang’s 博客'
- en: 来源：[http://blog.ezyang.com/2010/05/punt-the-prelude/](http://blog.ezyang.com/2010/05/punt-the-prelude/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/05/punt-the-prelude/](http://blog.ezyang.com/2010/05/punt-the-prelude/)
- en: '*Conservation attention notice.* What definitions from the Haskell 98 Prelude
    tend to get hidden? I informally take a go over the Prelude and mention some candidates.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意保护注意事项。* Haskell 98 Prelude 中哪些定义容易被隐藏？我非正式地检查了 Prelude 并提到了一些候选项。'
- en: '`(.)` in the Prelude is function composition, that is, `(b -> c) -> (a -> b)
    -> a -> c`. But the denizens of #haskell know it can be much more than that: the
    function `a -> b` is really just the functor, so a more general type is `Functor
    f => (b -> c) -> f b -> f c`, i.e. fmap. Even more generally, `(.)` can indicate
    morphism composition, as it does in [Control.Category](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Category.html).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`(.)` 在 Prelude 中是函数组合，即 `(b -> c) -> (a -> b) -> a -> c`。但是 #haskell 的用户知道它可能远比这更多：函数
    `a -> b` 实际上只是函子，因此更一般化的类型是 `Functor f => (b -> c) -> f b -> f c`，即 fmap。更一般地说，`(.)`
    可以表示态射的组合，就像在 [Control.Category](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Category.html)
    中一样。'
- en: '`all`, `and`, `any`, `concat`, `concatMap`, `elem`, `foldl`, `foldl1`, `foldr`,
    `foldr1`, `mapM_`, `maximum`, `minimum`, `or`, `product`, `sequence_`. These are
    all functions that operate on lists, that easily generalize to the `Foldable`
    type class; just replace `[a]` with `Foldable t => t a`. They can be found in
    [Data.Foldable](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Foldable.html).'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`all`、`and`、`any`、`concat`、`concatMap`、`elem`、`foldl`、`foldl1`、`foldr`、`foldr1`、`mapM_`、`maximum`、`minimum`、`or`、`product`、`sequence_`。这些都是操作列表的函数，可以很容易地泛化为
    `Foldable` 类型类；只需用 `Foldable t => t a` 替换 `[a]`。它们可以在 [Data.Foldable](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Foldable.html)
    中找到。'
- en: '`mapM`, `sequence`. These functions generalize to the `Traversable` type class.
    They can be found in [Data.Traversable](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Traversable.html).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapM`、`sequence`。这些函数泛化为 `Traversable` 类型类。它们可以在 [Data.Traversable](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Traversable.html)
    中找到。'
- en: '*Any numeric function or type class.* Thurston, Thielemann and Johansson wrote
    [numeric-prelude](http://hackage.haskell.org/package/numeric-prelude-0.1.3.4),
    which dramatically reorganized the hierarchy of numeric classes and generally
    moved things much closer to their mathematical roots. While dubbed experimental,
    it''s seen airplay in more mathematics oriented Haskell modules such as Yorgey''s
    [species](http://hackage.haskell.org/package/species) package.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*任何数字函数或类型类。* 瑟斯顿（Thurston）、蒂勒曼（Thielemann）和约翰逊（Johansson）编写了 [numeric-prelude](http://hackage.haskell.org/package/numeric-prelude-0.1.3.4)，它显著重新组织了数字类的层次结构，并且通常更接近它们的数学根源。虽然被称为实验性的，但它已经在更多面向数学的
    Haskell 模块中得到应用，如约吉（Yorgey）的 [species](http://hackage.haskell.org/package/species)
    软件包。'
- en: '*Any list function.* Many data structures look and smell like lists, and support
    some set of the operations analogous to those on lists. Most modules rely on naming
    convention, and as a result, list-like constructs like vectors, streams, bytestrings
    and others ask you to import themselves qualified. However, there is [Data.ListLike](http://hackage.haskell.org/packages/archive/ListLike/latest/doc/html/Data-ListLike.html)
    which attempts to encode similarities between these. [Prelude.Listless](http://hackage.haskell.org/packages/archive/list-extras/0.3.0/doc/html/Prelude-Listless.html)
    offers a version of the Prelude minus list functions.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*任何列表函数。* 许多数据结构看起来和使用起来像列表，并支持一些类似于列表的操作。大多数模块依赖于命名约定，因此像向量、流、字节流等列表样的结构要求您通过限定导入来使用它们自己。不过，有
    [Data.ListLike](http://hackage.haskell.org/packages/archive/ListLike/latest/doc/html/Data-ListLike.html)，试图编码这些结构之间的相似之处。[Prelude.Listless](http://hackage.haskell.org/packages/archive/list-extras/0.3.0/doc/html/Prelude-Listless.html)
    提供了一个不包含列表函数的 Prelude 版本。'
- en: '`Monad`, `Functor`. It is widely believed that Monad should probably be an
    instance of `Applicative` (and the category theorists might also have you insert
    `Pointed` functors in the hierarchy too.) [The Other Prelude](http://www.haskell.org/haskellwiki/The_Other_Prelude)
    contains this other organization, although it is cumbersome to use in practice
    since the new class means most existing monad libraries are not usable.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`Monad`、`Functor`。普遍认为 Monad 可能应该是 `Applicative` 的一个实例（而且类别理论家们也许还要您在层次结构中插入
    `Pointed` 函数）。[The Other Prelude](http://www.haskell.org/haskellwiki/The_Other_Prelude)
    包含了这种另一种组织形式，尽管实际使用起来很笨拙，因为新的类意味着大多数现有的 Monad 库都无法使用。'
- en: '`repeat`, `until`. There is an admittedly oddball generalization for these
    two functions in [Control.Monad.HT](http://hackage.haskell.org/packages/archive/utility-ht/latest/doc/html/Control-Monad-HT.html).
    In particular, `repeat` generalizes the identity monad (explicit (un)wrapping
    necessary), and `until` generalizes the `(->) a` monad.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`repeat`, `until`。这两个函数在[Control.Monad.HT](http://hackage.haskell.org/packages/archive/utility-ht/latest/doc/html/Control-Monad-HT.html)中有一个确实奇怪的泛化。特别是，`repeat`泛化了identity
    monad（需要明确的（解）包装），而`until`泛化了`(->) a` monad。'
- en: '`map`. It''s `fmap` for lists.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`map`。这是列表的`fmap`。'
- en: '`zip`, `zipWith`, `zipWith3`, `unzip`. Conal''s [Data.Zip](http://hackage.haskell.org/packages/archive/TypeCompose/latest/doc/html/Data-Zip.html)
    generalize zipping into the `Zip` type class.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`zip`, `zipWith`, `zipWith3`, `unzip`。Conal的[Data.Zip](http://hackage.haskell.org/packages/archive/TypeCompose/latest/doc/html/Data-Zip.html)将zip操作泛化为`Zip`类型类。'
- en: '*IO.* By far you''ll see the most variation here, with a multitude of modules
    working on many different levels to give extra functionality. (Unfortunately,
    they''re not really composable...)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*IO.* 这里会看到最多的变化，有多个模块在多个不同层次上工作，提供额外的功能。（不幸的是，它们并不真正可组合...）'
- en: '[System.IO.Encoding](http://hackage.haskell.org/packages/archive/encoding/latest/doc/html/System-IO-Encoding.html)
    makes the IO functions encoding aware, and uses implicit parameters to allow for
    a "default encoding." Relatedly, [System.UTF8IO](http://hackage.haskell.org/packages/archive/utf8-prelude/latest/doc/html/System-UTF8IO.html)
    exports functions just for UTF-8.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[System.IO.Encoding](http://hackage.haskell.org/packages/archive/encoding/latest/doc/html/System-IO-Encoding.html)
    使IO函数支持编码，并使用隐式参数允许设置“默认编码”。相关地，[System.UTF8IO](http://hackage.haskell.org/packages/archive/utf8-prelude/latest/doc/html/System-UTF8IO.html)
    导出仅针对UTF-8的函数。'
- en: '[System.IO.Jail](http://hackage.haskell.org/packages/archive/jail/latest/doc/html/System-IO-Jail.html)
    lets you force input-output to only take place on whitelisted directories and/or
    handles.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[System.IO.Jail](http://hackage.haskell.org/packages/archive/jail/latest/doc/html/System-IO-Jail.html)
    允许您强制输入输出仅在白名单目录和/或句柄上进行。'
- en: '[System.IO.Strict](http://hackage.haskell.org/packages/archive/strict-io/latest/doc/html/System-IO-Strict.html)
    gives strict versions of IO functions, so you don''t have to worry about running
    out of file handles.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[System.IO.Strict](http://hackage.haskell.org/packages/archive/strict-io/latest/doc/html/System-IO-Strict.html)
    提供了IO函数的严格版本，因此您不必担心文件句柄用完的问题。'
- en: '[System.Path.IO](http://hackage.haskell.org/packages/archive/pathtype/latest/doc/html/System-Path-IO.html),
    while not quite IO per se, provides typesafe filename manipulation and IO functions
    to use those types accordingly.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[System.Path.IO](http://hackage.haskell.org/packages/archive/pathtype/latest/doc/html/System-Path-IO.html)，虽然不完全是IO本身，但提供了类型安全的文件名操作和相应的IO函数来使用这些类型。'
- en: '[System.IO.SaferFileHandles](http://hackage.haskell.org/packages/archive/safer-file-handles/latest/doc/html/System-IO-SaferFileHandles.html)
    allows handles to be used with monadic regions, and parametrizes handles on the
    IO mode they were opened with. [System.IO.ExplicitIOModes](http://hackage.haskell.org/packages/archive/explicit-iomodes/latest/doc/html/System-IO-ExplicitIOModes.html)
    just handles IOMode.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[System.IO.SaferFileHandles](http://hackage.haskell.org/packages/archive/safer-file-handles/latest/doc/html/System-IO-SaferFileHandles.html)
    允许在单子区域中使用句柄，并根据它们打开时的IO模式对句柄进行参数化。[System.IO.ExplicitIOModes](http://hackage.haskell.org/packages/archive/explicit-iomodes/latest/doc/html/System-IO-ExplicitIOModes.html)
    只处理IOMode。'
