- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:16:53'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:16:53'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'A short note about functional linear maps : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有关功能线性映射的简短笔记：ezyang的博客
- en: 来源：[http://blog.ezyang.com/2019/05/a-short-note-about-functional-linear-maps/](http://blog.ezyang.com/2019/05/a-short-note-about-functional-linear-maps/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2019/05/a-short-note-about-functional-linear-maps/](http://blog.ezyang.com/2019/05/a-short-note-about-functional-linear-maps/)
- en: Some notes collected from a close read of Conal Elliot's [Compiling to Categories](http://conal.net/papers/compiling-to-categories/compiling-to-categories.pdf)
    and [The Simple Essence of Automatic Differentiation](https://arxiv.org/pdf/1804.00746.pdf).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 从对Conal Elliot的[编译为范畴](http://conal.net/papers/compiling-to-categories/compiling-to-categories.pdf)和[自动微分的简单本质](https://arxiv.org/pdf/1804.00746.pdf)的仔细阅读中收集的一些笔记。
- en: 'A colleague of mine was trying to define a "tree structure" of tensors, with
    the hope of thereby generalizing the concept to also work with tensors that have
    "ragged dimensions." Let''s take a look:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 有位同事试图定义张量的“树结构”，希望从而将该概念推广到具有“不规则维度”的张量上。让我们来看看：
- en: 'Suppose we have a `(2, 3)` matrix:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个（2，3）矩阵：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'One way to think about this is that we have a "tree" of some sort, where the
    root of the tree branches to two subnodes, and then each subnode branches to three
    nodes:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 想一种方式来思考这个问题，我们有一种某种类型的“树”，其中树的根分支到两个子节点，然后每个子节点再分支到三个节点：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Suppose you wanted to define this data structure in Haskell. One obvious way
    of going about doing this is to just say that a matrix is just a bunch of nested
    lists, `[[Float]]`. This works, true, but it isn't very illuminating, and it is
    certainly not type safe. Type safety could be achieved with sized vectors, but
    we are still left wondering, "what does it mean?"
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想在Haskell中定义此数据结构。一个显而易见的方法是说矩阵只是一堆嵌套的列表，`[[Float]]`。这确实有效，但并不是很详细，并且肯定不是类型安全的。使用大小向量可以实现类型安全，但我们仍然想知道，“这意味着什么？”
- en: 'Often, inductive definitions fall out of how we *compose* things together,
    in the same way that the inductive data structure for a programming language tells
    us how we take smaller programs and put them together to form a larger program.
    With matrices, we can think of a pictorial way of composing them, by either attaching
    matrices together vertically or horizontally. That gives us this vocabulary for
    putting together matrices, which would let us (non-uniquely) represent every matrix
    ([Compiling to Categories, Section 8](http://conal.net/papers/compiling-to-categories/compiling-to-categories.pdf)):'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 常常，归纳定义源于我们如何*组合*事物，就像编程语言的归纳数据结构告诉我们如何将较小的程序组合起来形成更大的程序一样。对于矩阵，我们可以考虑一种图解方式将它们组合起来，无论是垂直附加还是水平附加。这为我们提供了将矩阵组合起来的词汇表，这使我们能够（非唯一地）表示每个矩阵（[编译为范畴，第8节](http://conal.net/papers/compiling-to-categories/compiling-to-categories.pdf)）：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'But what does it mean? Well, every matrix represents a linear map (if `A :
    (n, m)` is your matrix, the linear map is the function `R^m -> R^n`, defined to
    be `f(x) = A x`. We''ll call a linear map from a to b, `Linear a b`). So the question
    we ask now is, what does it mean to "paste" two matrices together? It''s a way
    of composing two linear maps together into a new linear map:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 但是这意味着什么呢？好吧，每个矩阵表示一个线性映射（如果`A：（n，m）`是您的矩阵，则线性映射是函数`R^m -> R^n`，定义为`f（x）= A
    x`。我们将从a到b的线性映射称为`Linear a b`）。所以我们现在要问的问题是，将两个矩阵“粘”在一起意味着什么？这是将两个线性映射组合成一个新线性映射的一种方法：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now we''re cooking! Notice that the pasting *shows up* in the type of the linear
    map: if we paste horizontally, that just means that the vectors this linear map
    takes in have to be pasted together (with the tuple constructor); similarly, if
    we paste vertically, we''ll produce output vectors that are the pasted results.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们开始了！请注意，粘贴在线性映射的类型中*显示出来*：如果我们水平粘贴，那只意味着这个线性映射接收的向量必须被粘在一起（使用元组构造函数）；同样地，如果我们垂直粘贴，我们将产生输出向量，这些向量是粘贴结果。
- en: 'Cool, so we can add some type indexes, and write Linear as a GADT to refine
    the indices when you apply the constructor:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒，我们可以添加一些类型索引，并将Linear写成一个GADT，以在应用构造函数时精细化索引：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Is this the end of the story? Not quite. There are many ways you can go about
    combining linear maps; for example, you could (literally) compose two linear maps
    together (in the same sense of function composition). It's true that you can paste
    together any matrix you like with the data type above; how do we decide what should
    and shouldn't go in our *language* of linear maps?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是故事的结局吗？还没有。有很多方法可以组合线性映射；例如，你可以（字面上）将两个线性映射组合在一起（与函数组合的意义相同）。确实，你可以用上述数据类型粘贴任何你喜欢的矩阵；我们如何决定什么应该放入我们的*线性映射语言*中，什么不应该？
- en: 'To this end, Conal Elliot calls on the language of *category theory* to adjudicate.
    A category should define identity and function composition:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，Conal Elliot借助*范畴论*的语言来裁决。一个范畴应该定义身份和函数组合：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We find that Horizontal and Vertical are the elimination and introduction operations
    of cocartesian and cartesian categories (respectively).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现水平和垂直是余笛卡尔和笛卡尔范畴的消除和引入操作（分别）。
- en: 'But this should we just slap Identity and Compose constructors to our data
    type? Linear map composition is a computationally interesting operation: if we
    just keep it around as syntax (rather than doing what is, morally, a matrix multiply),
    then it will be quite expensive to do operations on the final linear map. Where
    do representable functors come in? I''m not exactly sure how to explain this,
    and I''ve run out of time for this post; stay tuned for a follow up.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们应该只是在我们的数据类型中添加**Identity**和**Compose**构造函数吗？线性映射组合是一个计算上有趣的操作：如果我们只是保留它作为语法（而不是像道义上的矩阵乘法那样做），那么在最终线性映射上进行操作将会非常昂贵。可表示函子又在哪里？我不太确定如何解释这一点，而且我在这篇文章中已经没有时间了；请继续关注后续。
