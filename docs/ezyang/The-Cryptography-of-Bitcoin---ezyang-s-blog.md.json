["```\nCKey()\n{\n    pkey = EC_KEY_new_by_curve_name(NID_secp256k1);\n    if (pkey == NULL)\n        throw key_error(\"CKey::CKey() : EC_KEY_new_by_curve_name failed\");\n    fSet = false;\n}\n\n```", "```\nuint256 SignatureHash(CScript scriptCode, const CTransaction& txTo,\n                      unsigned int nIn, int nHashType)\n{\n    // ...\n    // Serialize and hash\n    CDataStream ss(SER_GETHASH);\n    ss.reserve(10000);\n    ss << txTmp << nHashType;\n    return Hash(ss.begin(), ss.end());\n}\n\n```", "```\ntemplate<typename T1>\ninline uint256 Hash(const T1 pbegin, const T1 pend)\n{\n    static unsigned char pblank[1];\n    uint256 hash1;\n    SHA256((pbegin == pend ? pblank : (unsigned char*)&pbegin[0]), (pend - pbegin) * sizeof(pbegin[0]), (unsigned char*)&hash1);\n    uint256 hash2;\n    SHA256((unsigned char*)&hash1, sizeof(hash1), (unsigned char*)&hash2);\n    return hash2;\n}\n\n```", "```\ninline uint160 Hash160(const std::vector<unsigned char>& vch)\n{\n    uint256 hash1;\n    SHA256(&vch[0], vch.size(), (unsigned char*)&hash1);\n    uint160 hash2;\n    RIPEMD160((unsigned char*)&hash1, sizeof(hash1), (unsigned char*)&hash2);\n    return hash2;\n}\n\n```"]