- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:18:09'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:18:09'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Session types, subtyping and dependent types : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 会话类型、子类型和依赖类型：ezyang 的博客
- en: 来源：[http://blog.ezyang.com/2010/09/session-types-subtyping-and-dependent-types/](http://blog.ezyang.com/2010/09/session-types-subtyping-and-dependent-types/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/09/session-types-subtyping-and-dependent-types/](http://blog.ezyang.com/2010/09/session-types-subtyping-and-dependent-types/)
- en: 'While I was studying session type encodings, I noticed something interesting:
    the fact that session types, in their desire to capture protocol control flow,
    find themselves implementing something strongly reminiscent of dependent types.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在我研究会话类型编码时，我注意到了一些有趣的事情：即会话类型在捕捉协议控制流程时，实际上正在实现某种强烈让人联想到依赖类型的东西。
- en: 'Any reasonable session type encoding requires the ability to denote choice:
    in Simon Gay’s paper this is the `T-Case` rule, in Neubauer and Thiemann’s work
    it is the `ALT` operator, in Pucella and Tov’s implementation it is the `:+:`
    type operator, with the `offer`, `sel1` and `sel2` functions. There is usually
    some note that a binary alternation scheme is—in terms of user interface—inferior
    to some name-based alternation between an arbitrary number of cases, but that
    the latter is much harder to implement.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 任何合理的会话类型编码都需要能够表示选择：在 Simon Gay 的论文中，这是 `T-Case` 规则，在 Neubauer 和 Thiemann 的工作中，这是
    `ALT` 运算符，在 Pucella 和 Tov 的实现中，这是 `:+:` 类型运算符，以及 `offer`、`sel1` 和 `sel2` 函数。通常会指出，二进制交替方案在用户界面上较之名称为基础的交替方案要差，但后者实现起来更为困难。
- en: 'What the authors of these papers were really asking for was support for something
    that smells like dependent types. This becomes far more obvious when you attempt
    to write a session type encoding for an existing protocol. Consider the following
    tidbit from Google’s SPDY:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这些论文的作者真正要求的是支持某种看起来像依赖类型的东西。当您尝试为现有协议编写会话类型编码时，这一点变得更加明显。考虑来自 Google 的 SPDY
    的以下小片段：
- en: Once a stream is created, it can be used to send arbitrary amounts of data.
    Generally this means that a series of data frames will be sent on the stream until
    a frame containing the FLAG_FIN flag is set. The FLAG_FIN can be set on a SYN_STREAM,
    SYN_REPLY, or a DATA frame. Once the FLAG_FIN has been sent, the stream is considered
    to be half-closed.
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一旦流创建，就可以用来发送任意数量的数据。通常这意味着将在流上发送一系列数据帧，直到设置了包含 FLAG_FIN 标志的帧为止。FLAG_FIN 可以在
    SYN_STREAM、SYN_REPLY 或 DATA 帧上设置。一旦发送了 FLAG_FIN，流就被视为半关闭。
- en: 'The format for a data frame is:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 数据帧的格式为：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Whereas `offer` is implemented by transmitting a single bit across the network,
    here, the critical bit that governs whether or not the stream will be closed is
    embedded deep inside the data. Accordingly, if I even want to *consider* writing
    a session type encoding, I have to use a data definition with an extra phantom
    type in it, and not the obvious one:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 而`offer`是通过网络传输单个比特来实现的，在这里，控制流是否关闭的关键比特深藏在数据之中。因此，如果我甚至想*考虑*编写会话类型编码，我必须使用带有额外幻影类型的数据定义，而不是显而易见的类型：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: I’ve had to promote `FlagFin` from a regular term into a type fitting into the
    `fin` hole, something that smells suspiciously of dependent types. Fortunately,
    the need for dependent types is averted by the fact that the session type will
    immediately do a case split on the type, accounting for both the case in which
    it is true and the case in which it is false. We don’t know at compile time what
    the value will actually be, but it turns out we don’t care! And if we are careful
    to only permit `fin` to be `TrueTy` when `FlagFin` is actually `True`, we don’t
    even need to have `FlagFin` as a field in the record.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我不得不将 `FlagFin` 从普通术语提升为适合于 `fin` 穴位的类型，这种做法明显具有依赖类型的味道。幸运的是，依赖类型的需求被事实上会话类型将立即在类型上进行案例分割所回避，考虑到它是真的情况和它是假的情况。我们在编译时不知道值实际上将是什么，但事实证明我们并不在乎！如果我们小心地只允许
    `fin` 在 `FlagFin` 实际上为 `True` 时才能作为记录中的字段，我们甚至不需要将 `FlagFin` 作为记录中的一个字段。
- en: This observation is what I believe people are alluding to when they say that
    you can go pretty far with type tricks without resorting to dependent types. Pushing
    compile-time known values into types is one obvious example (Peano integers, anyone?),
    but in this case we place compile-time unknown values into the types just by dealing
    with all possible cases!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当人们说你可以在不使用依赖类型的情况下玩弄类型技巧时，我相信他们在指的是这一点。将编译时已知的值推入类型是一个明显的例子（Peano 整数，有人？），但在这种情况下，我们通过处理所有可能的情况，将编译时未知的值推入类型！
- en: 'Alas, actually doing this in Haskell is pretty awkward. Consider some real-world
    algebraic data type, a simplified version of the SPDY protocol that only allows
    one stream at a time:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 啊呀，在 Haskell 中实际做这件事情相当麻烦。考虑一些现实世界中的代数数据类型，一个简化版本的 SPDY 协议，它只允许同时处理一条流：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Each constructor needs to be turned into a type, as do the `FlagFin`, but it
    turns out the other data doesn’t matter for the session typing. So we end up writing
    a data declaration for each constructor, and no good way of stitching them back
    together:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 每个构造函数都需要转换为一个类型，`FlagFin` 也一样，但事实证明其他数据对会话类型不重要。因此，我们最终为每个构造函数编写了一个数据声明，而将它们有效地串联起来的好方法并不存在：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The thread we are looking for here is subtyping, specifically the more exotic
    sum-type subtyping (as opposed to product-type subtyping, under the more usual
    name record subtyping). Another way of thinking about this is that our type now
    represents a finite set of possible terms that may inhabit a variable: as our
    program evolves, more and more terms may inhabit this variable, and we need to
    do case-splits to cut down the possibilities to a more manageable size.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里寻找的线索是子类型化，具体来说是更为奇特的和类型的子类型化（与产品类型的子类型化相对应，一般称为记录子类型化）。另一种思考方式是，我们的类型现在表示了可能出现在变量中的一组有限的可能项：随着程序的发展，越来越多的项可能出现在这个变量中，我们需要进行案例分割，以减少可能性，使其更易管理。
- en: Alas, I hear that subtyping gunks up inference quite a bit. And, alas, this
    is about as far as I have thought it through. Doubtless there is a paper that
    exists out there somewhere that I ought to read that would clear this up. What
    do you think?
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 啊呀，我听说子类型化会大大增加推断的复杂性。哎，这是我考虑到的尽头。毫无疑问，肯定有一篇论文存在于某处，我应该读一读，以澄清这一点。你觉得呢？
