["```\ndata Result\n   = OK Int\n   | Failure String\n\nshowResult :: Result -> String\nshowResult (OK result) = show result\nshowResult (Failure msg) = \"Failure: \" ++ msg\n\n```", "```\nfrom dataclasses import dataclass\n\n@dataclass(frozen=True)\nclass OK:\n    result: int\n\n@dataclass(frozen=True)\nclass Failure:\n    msg: str\n\n```", "```\nResult = Union[OK, Failure]\n\n```", "```\ndef assert_never(x: NoReturn) -> NoReturn:\n    raise AssertionError(\"Unhandled type: {}\".format(type(x).__name__))\n\ndef showResult(r: Result) -> str:\n    if isinstance(r, OK):\n        return str(r.result)\n    elif isinstance(r, Failure):\n        return \"Failure: \" + r.msg\n    else:\n        assert_never(r)\n\n```"]