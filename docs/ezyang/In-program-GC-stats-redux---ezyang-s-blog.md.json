["```\n-- | Global garbage collection and memory statistics.\ndata GCStats = GCStats\n    { bytes_allocated :: Int64 -- ^ Total number of bytes allocated\n    , num_gcs :: Int64 -- ^ Number of garbage collections performed\n    , max_bytes_used :: Int64 -- ^ Maximum number of live bytes seen so far\n    , num_byte_usage_samples :: Int64 -- ^ Number of byte usage samples taken\n    -- | Sum of all byte usage samples, can be used with\n    -- 'num_byte_usage_samples' to calculate averages with\n    -- arbitrary weighting (if you are sampling this record multiple\n    -- times).\n    , cumulative_bytes_used :: Int64\n    , bytes_copied :: Int64 -- ^ Number of bytes copied during GC\n    , current_bytes_used :: Int64 -- ^ Current number of live bytes\n    , current_bytes_slop :: Int64 -- ^ Current number of bytes lost to slop\n    , max_bytes_slop :: Int64 -- ^ Maximum number of bytes lost to slop at any one time so far\n    , peak_megabytes_allocated :: Int64 -- ^ Maximum number of megabytes allocated\n    -- | CPU time spent running mutator threads.  This does not include\n    -- any profiling overhead or initialization.\n    , mutator_cpu_seconds :: Double\n    -- | Wall clock time spent running mutator threads.  This does not\n    -- include initialization.\n    , mutator_wall_seconds :: Double\n    , gc_cpu_seconds :: Double -- ^ CPU time spent running GC\n    , gc_wall_seconds :: Double -- ^ Wall clock time spent running GC\n    -- | Number of bytes copied during GC, minus space held by mutable\n    -- lists held by the capabilities.  Can be used with\n    -- 'par_max_bytes_copied' to determine how well parallel GC utilized\n    -- all cores.\n    , par_avg_bytes_copied :: Int64\n    -- | Sum of number of bytes copied each GC by the most active GC\n    -- thread each GC.  The ratio of 'par_avg_bytes_copied' divided by\n    -- 'par_max_bytes_copied' approaches 1 for a maximally sequential\n    -- run and approaches the number of threads (set by the RTS flag\n    -- @-N@) for a maximally parallel run.\n    , par_max_bytes_copied :: Int64\n    } deriving (Show, Read)\n\n-- | Retrieves garbage collection and memory statistics as of the last\n-- garbage collection.  If you would like your statistics as recent as\n-- possible, first run a 'performGC' from \"System.Mem\".\ngetGCStats :: IO GCStats\n\n```"]