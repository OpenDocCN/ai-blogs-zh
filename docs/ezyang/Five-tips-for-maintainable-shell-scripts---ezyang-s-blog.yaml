- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:18:25'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:18:25'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Five tips for maintainable shell scripts : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '五个保持可维护 Shell 脚本的技巧 : ezyang’s 博客'
- en: 来源：[http://blog.ezyang.com/2010/03/five-tips-for-maintainable-shell-scripts/](http://blog.ezyang.com/2010/03/five-tips-for-maintainable-shell-scripts/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/03/five-tips-for-maintainable-shell-scripts/](http://blog.ezyang.com/2010/03/five-tips-for-maintainable-shell-scripts/)
- en: Five tips for maintainable shell scripts
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 五个保持可维护 Shell 脚本的技巧
- en: When I was seventeen, I wrote my [very first shell script](http://repo.or.cz/w/htmlpurifier-web.git/blob/136caa2d941e51e5a742df3b05fb3e596f778636:/releases/build.bat).
    It was a Windows batch file, bits and pieces very carefully cargo-culted from
    various code samples on the web. I had already had the *exquisite* pleasure of
    futzing with `pear.bat`, and the thought of scripting was not something I relished;
    "why not write the damn thing in a *real* programming language!" (The extra delicious
    bit was "a real programming language" was PHP. Hee.)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当我十七岁时，我写了我的[第一个 Shell 脚本](http://repo.or.cz/w/htmlpurifier-web.git/blob/136caa2d941e51e5a742df3b05fb3e596f778636:/releases/build.bat)。那是一个
    Windows 批处理文件，小心地从网络上各种代码示例中摘录的片段。我已经体验过与 `pear.bat` 交互的 *绝妙* 乐趣，脚本编写并不是我喜欢的事情；“为什么不用一个*真正的*编程语言来写这个该死的东西！”（额外美味的是，“真正的编程语言”是
    PHP。嘻。）
- en: 'Eventually I came around to an all-Unix environment, and with it I began to
    use bash extensively. And suddenly, shell scripting made a lot more sense: you''ve
    been writing the damn commands day in and day out, just write them to a script
    instead! There was, however, still the pesky little problem that shell scripts
    are forever; like it or not, they''ve become pieces of maintained code. Entire
    build infrastructures have been built on top of shell scripts. They breed like
    rabbits; you have to be careful about the little buggers.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最终我转向了完全的 Unix 环境，随之开始广泛使用 bash。突然间，Shell 脚本变得更加有意义：你一直在日复一日地输入命令，不如把它们写成脚本！然而，Shell
    脚本有个讨厌的小问题：它们是永远的；不管你喜不喜欢，它们已经成为维护代码的一部分。整个构建基础设施都建立在 Shell 脚本之上。它们像兔子一样繁殖；你必须小心这些小家伙。
- en: Here are five tips and tricks to keep in mind when tossing commands into a shell
    script that will make maintenance in the long-run much more pleasant!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有五个提示和技巧，当你将命令写入一个 Shell 脚本时，请记住，这些将使得长期维护变得更加愉快！
- en: 'Learn and love to use `set`. There is almost always no good reason not to use
    the `-e` flag, which causes your script to error out if any command returns with
    a nonzero exit code, and `-x` can save you hours of debugging by printing precisely
    what command the script is executing before executing it. With the two enabled,
    you get very simple "assertions" in your shell script:'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 学会并喜欢使用 `set`。几乎没有理由不使用 `-e` 标志，这会导致如果任何命令返回非零退出码，你的脚本会报错，并且 `-x` 可以通过在执行命令前打印出脚本正在执行的确切命令，帮你节省数小时的调试时间。启用这两个选项后，你在
    Shell 脚本中得到了非常简单的“断言”：
- en: '[PRE0]'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: although, if at all possible, you should write error messages to accompany them.
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尽管如此，如果可能的话，你应该编写错误消息来陪伴它们。
- en: 'Just because you don''t define subprocedures when you''re at your terminal
    (or do you? see `alias` and friends) and use reverse command history search with
    `C-r` doesn''t mean it''s acceptable to repeat commands over and over again your
    shell script. In particular, if you have a set of commands that *might* go into
    a separate script, but you feel funny about making a separate file, stuff them
    in a subprocedure like this:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就因为你在终端时不定义子过程（或者你有吗？看看 `alias` 和朋友们）并使用 `C-r` 进行反向命令历史搜索，这并不意味着在你的 Shell 脚本中重复命令是可以接受的。特别是，如果你有一组可能单独放入脚本中的命令，但又觉得单独建立文件有点奇怪，可以像这样将它们放在子过程中：
- en: '[PRE1]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In particular, argument passing acts exactly the same way it does in a real
    shell script, and generally you can treat the subcommand as if it were it's own
    script; standard input and output work the way you expect them to. The only differences
    is are that `exit` exits the whole script, so if you'd like to break out of a
    command use `return` instead.
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 特别是，参数传递的行为与真实的 Shell 脚本完全一样，通常你可以把子命令当作它自己的脚本来处理；标准输入和输出的工作方式也符合你的预期。唯一的区别是
    `exit` 会退出整个脚本，所以如果你想中断一个命令，应该使用 `return` 代替。
- en: Argument quoting in shell scripts is a strange and arcane domain of knowledge
    (although it doesn't have to be; [check out Waldman's notes on shell quoting](http://www.mpi-inf.mpg.de/~uwe/lehre/unixffb/quoting-guide.html)).
    The short version is you *always* want to wrap variables that will be interpolated
    with quotes, unless you actually want multiple arguments semantics. I have mixed
    feelings about whether or not literals should be quoted, and of late have fallen
    to the dismal habit of not quoting them.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Shell 脚本中的参数引用是一个奇怪而深奥的领域（虽然它不必如此；[查看沃尔德曼关于 shell 引用的笔记](http://www.mpi-inf.mpg.de/~uwe/lehre/unixffb/quoting-guide.html)）。简而言之，*总是*要用引号包裹将被插值的变量，除非你确实想要多个参数的语义。关于是否应该引用字面值，我的感觉参差不齐，最近我已经养成了不引用它们的恶习。
- en: 'Believe it or not, shell scripting has functional programming leanings. `xargs`,
    for example, is the quintessential "map" functionality. However, if the command
    you are pushing arguments to doesn''t take multiple arguments, you can use this
    trick:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 信不信由你，shell 脚本具有函数式编程的倾向。例如，`xargs` 就是典型的“map”功能。然而，如果你将参数传递给的命令不接受多个参数，你可以使用这个技巧：
- en: '[PRE2]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Shell scripting feels incredibly natural when speaking imperatively, and mostly
    remains this way when you impose control flow. However, it is absolutely a *terrible*
    language for any data processing (exhibit 1: sed and perl pipelines) and you should
    avoid doing too much data crunching in it. Creating utility scripts in more reasonable
    languages can go a long way to keeping your shell scripts pretty.'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Shell 脚本在命令式编程时感觉非常自然，并且在控制流程时大多保持这种方式。然而，对于任何数据处理来说，它绝对是一个*糟糕*的语言（例如：sed 和
    perl 管道），你应该避免在其中进行过多的数据处理。在更合理的语言中创建实用脚本可以有效地使你的 shell 脚本更加优雅。
