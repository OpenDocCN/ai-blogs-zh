- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:38'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-07-01 18:17:38
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'How to build DRM you can trust : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何构建可信的数字版权管理系统：ezyang’s 博客
- en: 来源：[http://blog.ezyang.com/2012/02/how-to-build-drm-you-can-trust/](http://blog.ezyang.com/2012/02/how-to-build-drm-you-can-trust/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2012/02/how-to-build-drm-you-can-trust/](http://blog.ezyang.com/2012/02/how-to-build-drm-you-can-trust/)
- en: '*Abstract.* [Proof-carrying code](http://en.wikipedia.org/wiki/Proof-carrying_code)
    can be used to implement a [digital-rights management scheme](http://en.wikipedia.org/wiki/Digital_rights_management),
    in the form of a proof-verifying CPU. We describe how this scheme would work and
    argue that DRM implemented this way is both desirable and superior to [trusted
    (“treacherous”) computing](http://en.wikipedia.org/wiki/Trusted_Computing) schemes.
    This scheme permits users to retain control over their own machines, while allowing
    for specific limitations on software capabilities. The ability to impose these
    limitations will become especially important when 3D printers and biosynthesis
    machines become ubiquitous. This essay assumes some technical knowledge, although
    no background in formal methods is required. (If you know how proof-carrying code
    works, go away; this essay is not for you.)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*摘要。* [携带证明的代码](http://en.wikipedia.org/wiki/Proof-carrying_code) 可以用来实现 [数字版权管理方案](http://en.wikipedia.org/wiki/Digital_rights_management)，采用验证证据的
    CPU 形式。我们描述了这种方案的工作原理，并认为以这种方式实施的 DRM 既可取又优于[可信（“背叛性”）计算](http://en.wikipedia.org/wiki/Trusted_Computing)方案。这种方案允许用户保留对自己机器的控制，同时允许对软件能力进行特定限制。当3D打印机和生物合成机普及时，强加这些限制的能力将变得尤为重要。本文假设读者有一定的技术知识，尽管不需要背景的形式化方法。（如果你知道携带证明的代码如何工作，请离开；这篇文章不适合你。）'
- en: ~ * ~
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: ~ * ~
- en: It is a truth universally acknowledged that digital-rights management schemes
    are universally harmful to users. Existing DRM schemes are annoying, counterproductive,
    buggy and fundamentally ineffective. As implemented, they are nearly indistinguishable
    from spyware.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 众所周知，数字版权管理方案对用户普遍有害。现有的 DRM 方案令人讨厌、适得其反、存在缺陷且基本无效。在实施过程中，它们几乎和间谍软件无异。
- en: I’d like to challenge this assumption.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我想挑战这种假设。
- en: I have no interest in defending the state of current DRM technology. But I do
    think there is a way to do it better. My goal is to convince you that proof-based
    digital-rights management *could* work; that it has a sound theoretical foundation,
    that it offers a useful subset of DRM-like functionality, and that it does so
    in a way that avoids many of the privacy, security and trust problems associated
    with extant trusted computing platforms. I’d like to describe what this system
    would look like, and what its implications would be (for example, it does offer
    some control, but it certainly does not solve the analog hole). Unfortunately,
    this system doesn’t exist yet; the technology underlying formal methods is still
    being actively researched and is not yet ready for industry.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我对当前数字版权管理技术的状态并不感兴趣。但我确信有更好的方法。我的目标是说服你，基于证明的数字版权管理*可能*是可行的；它有坚实的理论基础，提供了类似于数字版权管理的有用功能子集，并且它以一种避免了许多与现有可信计算平台相关的隐私、安全和信任问题的方式进行。我想描述一下这个系统会是什么样子，以及它的影响会是什么（例如，它确实提供了一些控制，但当然不能解决模拟洞的问题）。不幸的是，这个系统还不存在；形式化方法背后的技术仍在积极研究中，尚未准备好投入市场。
- en: Why do I feel compelled to speak up about this “ivory tower vaporware” now?
    We are currently in the midst of what [Cory Doctorow calls](http://lwn.net/Articles/473794/)
    “The War on General Purpose Computing”, with bills like SOPA/PIPA being considered
    by Congress, and technical standards like [UEFI](http://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface)
    being aggressively pushed by large software vendors. I feel that it is critical
    that we convince industries with a stake in digital rights management to invest
    in this formal methods research. The tools being pursued right now, namely, trusted
    ("treacherous") computing, may enable the effective enforcement of DRM for the
    first time in human history, but it will come at the cost of general purpose computing
    as we know it today.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我现在觉得有必要对这种“象牙塔虚构”的东西说话呢？我们目前正处于科里·多克托罗所称的“通用计算之战”中，国会正在考虑像SOPA/PIPA这样的法案，而大型软件供应商正在积极推动像[UEFI](http://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface)这样的技术标准。我觉得至关重要的是我们说服在数字版权管理中有利益的行业投资于这种形式化方法的研究。目前正在追求的工具，即可信（“背叛性的”）计算，可能会使数字版权管理首次在人类历史上有效实施，但这将以今天我们所知的通用计算为代价。
- en: How to build proof-based DRM
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何构建基于证明的数字版权管理
- en: Because we can’t describe the implications of a system without describing the
    system itself, the first thing to do is describe how proof-based digital rights
    management would be implemented. This description will also set the stage for
    a discussion of some of the issues surrounding such a system; primarily, whether
    or not this system is *possible* and whether or not it is *desirable*.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们无法在不描述系统本身的情况下描述系统的影响，所以首先要做的是描述如何实施基于证明的数字版权管理。这一描述还将为讨论围绕这样一个系统的一些问题设置舞台；主要是，这个系统是否*可能*，以及是否*可取*。
- en: 'Proof-based DRM consists of two components. The first component is a proof
    verifier, which takes a theorem and a proof of that theorem as inputs, and returns
    a yes/no answer on whether or not the proof is correct. (We’ll discuss in more
    detail what exactly a “theorem” and a “proof” is in this context soon.) The second
    component is a set of theorems, which will describe the desired behavior of software
    that runs on this hardware (the DRM policies). These two components are integrated
    into the hardware and collectively serve as the gatekeepers for the programs that
    will run on the CPU. Code that is to be loaded and run on this CPU must first
    pass through the proof verifier chip; if the proof is in order, the code the user
    provided may be directly executed, its adherence to some digital rights policy
    ensured by the force of logic. (Nota bene: in the rest of this essay, we will
    not consider the issues of trusting the underlying hardware; a deficiency of our
    essay, but it is a deep and thorny issue, that also affects CPUs in use today.)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 基于证明的数字版权管理（Proof-based DRM）由两个组件组成。第一个组件是证明验证器，它接受一个定理和该定理的证明作为输入，并返回一个是/否答案，即该证明是否正确。（我们将很快详细讨论“定理”和“证明”在这一背景下的确切含义。）第二个组件是一组定理，这些定理描述了运行在硬件上的软件的期望行为（DRM策略）。这两个组件集成到硬件中，共同作为运行在CPU上的程序的守门员。要加载和运行在这个CPU上的代码必须首先通过证明验证器芯片；如果证明无误，用户提供的代码可能会直接执行，其遵守某些数字版权策略由逻辑的力量确保。（须知：在本文的其余部分，我们将不考虑信任底层硬件的问题；这是我们文章的不足之处，但它是一个深刻且棘手的问题，也影响着当前使用的CPU。）
- en: 'The proof verifier is the core of this system. It can be thought of as a “little
    mathematician”: someone who reviews a proof in order to check that it is correct.
    He is furnished with a set of assumptions and a goal (the “theorem”), and a series
    of deductions from the assumptions to the goals (the “proof”). All the verifier
    needs to do is, for each goal, check that every step logically follows from the
    previous one. “P, and P implies Q. Therefore, Q!” Proof verifiers are relatively
    well studied, and there exist multiple implementations, among which include Coq,
    HOL Light, Isabelle and F*. Usually, these are written in software, but there
    is also ongoing research on the design of proof verifiers suitable for embedded
    devices.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 证明验证器是这一系统的核心。它可以被看作是一个“小数学家”：一个审查证明以检查其正确性的人。他配备一组假设和一个目标（“定理”），以及从假设到目标的一系列推导过程（“证明”）。验证器只需为每个目标检查每一步是否逻辑上从前一步推导出来。“P，并且P蕴含Q。因此，Q！”
    证明验证器相对来说研究比较充分，并且存在多个实现，其中包括Coq、HOL Light、Isabelle和F*。通常这些是以软件形式编写的，但也有关于适用于嵌入式设备的证明验证器设计的持续研究。
- en: 'Let’s delve into the operation of a proof verifier a little more. The first
    input of a proof verifier is the theorem which is to be proved. So the very first
    task placed upon the user of a proof verifier is to state the theorem in a way
    that a computer can understand. It’s certainly not reasonable to expect the proof
    verifier to understand a paragraph of English or some LaTeX equations! What we
    do is write down mathematical logic as a computer language, this is the language
    we write our theorems in. Take, as an example, the statement of [Fermat’s Last
    Theorem](http://en.wikipedia.org/wiki/Fermat%27s_Last_Theorem): no three positive
    integers *a*, *b*, and *c*, could satisfy ![a^n + b^n = c^n](img/49ea6019058643f07fe0e84006730440.png
    "a^n + b^n = c^n"), for any ![n > 2](img/46eaceb430e2b263a9860e834f5063e1.png
    "n > 2"). In Coq, this statement could be written as `forall (x y z:Z) (n:nat),
    x^(n+3) + y^(n+3) = z^(n+3) -> x <= 0 \/ y <= 0 \/ z <= 0`. Read out loud, it
    says “for all *x*, *y*, *z* which are integers (`Z`), and for all *n* which are
    natural numbers (`nat`), if it is the case that ![x^{n+3} + y^{n+3} = z^{n+3}](img/e44687308c44f494126ffe618b66082d.png
    "x^{n+3} + y^{n+3} = z^{n+3}"), then either *x*, *y* or *z* is less than or equal
    to zero.” While the “computer-friendly” version looks a little different from
    the informal version (we’ve taken the contrapositive of the statement to avoid
    negations, and we’ve used addition by three to express the fact that the exponent
    must be greater than two), they are fairly similar.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地探讨一下证明验证器的运行方式。证明验证器的第一个输入是待证明的定理。因此，用户在使用证明验证器时的第一个任务是以计算机可以理解的方式陈述定理。期望证明验证器能理解一段英文或某些LaTeX公式显然是不合理的！我们所做的是将数理逻辑写成计算机语言，这就是我们写定理的语言。例如，看看[Fermat's
    Last Theorem](http://en.wikipedia.org/wiki/Fermat%27s_Last_Theorem)的陈述：对于任何三个正整数
    *a*, *b*, 和 *c*，不存在整数 *n > 2* 使得 ![a^n + b^n = c^n](img/49ea6019058643f07fe0e84006730440.png
    "a^n + b^n = c^n")。在Coq中，这个陈述可以写成 `forall (x y z:Z) (n:nat), x^(n+3) + y^(n+3)
    = z^(n+3) -> x <= 0 \/ y <= 0 \/ z <= 0`。直白地说，它表示“对于所有整数 *x*, *y*, *z* （类型为 `Z`），以及所有自然数
    *n* （类型为 `nat`），如果 ![x^{n+3} + y^{n+3} = z^{n+3}](img/e44687308c44f494126ffe618b66082d.png
    "x^{n+3} + y^{n+3} = z^{n+3}") 成立，则 *x*, *y* 或 *z* 至少有一个小于或等于零。” 尽管“计算机友好”的版本看起来与非正式版本有所不同（我们取了原命题的逆否命题以避免否定，并使用加三来表达指数必须大于二的事实），但它们基本上是相似的。
- en: 'Unfortunately, saying in similarly precise language what it means for a program
    to be “memory-safe” (that is, it never dereferences an invalid pointer) is considerably
    more difficult. Transforming an informal statement into a formal one is something
    of an art, for which there is no “correct” answer. During this process, you must
    balance competing desires: the statement should be easy for a human to understand,
    but it should also be easy to prove in a computer. Even in the case of Fermat’s
    theorem, we’ve elided some details: what does it actually mean for something to
    be an integer or a natural number? What is exponentiation? For that matter, what
    is addition? What does it mean for two integers to be equal? Fortunately, there
    are conventional answers for these questions; even in the case of more complicated
    properties like “memory-safety”, there is a reasonable understanding of the general
    design principles behind writing a theorem like this down.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，用类似精确语言来表达程序“内存安全”的含义（即，它永远不会对无效指针进行解引用）要困难得多。将非正式的陈述转化为正式的陈述是一种艺术，没有“正确”的答案。在这个过程中，你必须权衡不同的需求：陈述应该易于人类理解，但也应该容易在计算机中证明。即使在费马定理的情况下，我们也省略了一些细节：什么是整数或自然数？什么是指数运算？又或者，什么是加法？两个整数相等意味着什么？幸运的是，这些问题有传统的答案；即使在更复杂的属性如“内存安全”的情况下，对于编写这类定理的一般设计原则也有合理的理解。
- en: For proof-based DRM, we need to scale up security properties like “memory-safety”
    to the properties one might need to enforce in a digital rights management scheme.
    How do we show that a program never leaks the contents of a hardware-based private
    key or prove that a program transmits within a limited set of radio frequencies
    set by the law? The possibilities multiply, as do the risks. As we move from the
    realm of well-defined concepts to more irregular, fuzzy ones, it becomes more
    difficult to tell if a formalization does what we want, or if it is merely a set
    of rules with a loophole. A criminal may abide by the letter of the law, but not
    the spirit. In a computer system, there is no judge which can make this assessment.
    So a reasonable question is whether or not there are any properties which we have
    some hope of formalizing. Fortunately, the answer is yes; we’ll return to this
    question in the next section, as it will influence what kinds of DRM we can hope
    to implement.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基于证明的数字版权管理（DRM），我们需要将“内存安全”等安全属性扩展到数字版权管理方案中可能需要强制执行的属性。如何展示程序永不泄漏基于硬件的私钥的内容，或者证明程序在法律规定的有限无线电频率集内传输？可能性增加，风险也增加。当我们从明确定义的概念领域移动到更不规则、模糊的领域时，很难确定一个形式化是否符合我们的要求，或者它仅仅是一个带有漏洞的规则集。罪犯可能奉行法律的文字，但不奉行精神。在计算机系统中，没有法官可以做出这种评估。因此，一个合理的问题是是否有任何我们希望形式化的属性。幸运的是，答案是肯定的；我们将在下一节回到这个问题，因为它将影响我们能够实现的DRM类型。
- en: 'The second input of a proof verifier is a proof. Now, we’ve claimed that a
    proof is a long list (actually, it is more like a tree, as the proof of one goal
    may require you to prove a few subgoals) of logical steps, each of which can easily
    be checked. Now, if you have ever attempted to read a real mathematics proof,
    you’ll know that checking if a proof is correct is never quite this simple. Mathematical
    proofs leave out steps. Like a writer, a mathematician optimizes his proof for
    his audience. If they have some relevant background knowledge, he will elide information
    in order to ensure the clarity of the higher-level structure of a proof. You see,
    the mathematician is not only interested in what is true, but why it is true.
    We cannot be so facile when it comes to proofs for computer consumption: as a
    dumb calculating machine, the computer requires every step of the proof to be
    explicitly spelled out. This is one of the primary challenges of mechanically
    checked proofs: a human may write out a three line proof for Euclid’s algorithm,
    but for the computer, you might end up writing a page. For more complicated theorems
    about computer programs, a verification project can easily get crushed by the
    sheer amount of code involved. Scaling up automated theorem proving technology
    is yet another area of active research, with current technology on the level of
    abstraction as assembly languages are for traditional programming.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 证明验证器的第二个输入是一个证明。现在，我们声称一个证明是一个长列表（实际上更像是一棵树，因为一个目标的证明可能需要你证明几个子目标）的逻辑步骤，每一步都可以轻松检查。现在，如果你曾尝试阅读真正的数学证明，你会知道检查证明是否正确永远不是这么简单的事情。数学证明会省略步骤。像作家一样，数学家会为他的观众优化他的证明。如果他们有相关的背景知识，他将省略信息以确保更高层次结构的清晰性。你看，数学家不仅对真理感兴趣，还对为什么是真理感兴趣。但当涉及到计算机的证明时，我们不能如此轻率：作为一个愚蠢的计算机，计算机需要每一步的证明都明确说明。这是机械化检验证明的主要挑战之一：一个人可能为欧几里得算法写出一个三行的证明，但对于计算机来说，你可能会写一页。对于涉及计算机程序的更复杂的定理，一个验证项目很容易被涉及的大量代码所淹没。扩展自动定理证明技术是另一个活跃研究领域，当前技术在抽象层面上与传统编程的汇编语言水平相当。
- en: 'However, once we are in possession of a verified, mechanized proof, we have
    something that a traditional mathematician does not: assurance that the proof
    is correct, and that the program has the property we demanded of it. (On the contrary,
    mathematical proofs published in papers can be, and sometimes are, wrong! Though,
    even more interesting, the theorem still ends up being true anyway.) This is a
    good situation to be in: by the principle of proof erasure, we’re allowed to ignore
    the elaborate proofs we constructed and execute the program directly. We can run
    the program straight on our hardware, without any untrusted DRM-enabled operating
    system running underneath. We’ll return to this question later, when we compare
    our scheme to existing “treacherous computing” schemes.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一旦我们拥有了经过验证的机械化证明，我们就拥有了传统数学家所没有的东西：确保证明是正确的，并且程序具有我们要求的属性。 （相反，发表在论文中的数学证明可能是错误的，有时确实是错误的！尽管更有趣的是，定理最终仍然是真实的。）这是一个很好的情况：根据证明抹除原则，我们可以忽略我们构建的复杂证明并直接执行程序。我们可以直接在我们的硬件上运行程序，而不需要在其下运行任何不受信任的启用了DRM的操作系统。稍后，当我们将我们的方案与现有的“叛逆计算”方案进行比较时，我们将回到这个问题。
- en: 'So what have we covered here? We’ve described how a proof verifier works by
    looking more closely at its two inputs: theorems and proofs, and touched over
    some of the active research areas involved with scaling this technology for the
    real world. In the next two sections, I’d like to go in more detail about two
    particular aspects of this system as they apply to digital rights management:
    the theorems associated with DRM, and the relationship between this scheme and
    existed “trusted computing” schemes.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们在这里讨论了什么？我们通过更仔细地观察证明验证器的两个输入：定理和证明，描述了它的工作原理，并涉及了一些与将这项技术应用于现实世界相关的活跃研究领域。在接下来的两节中，我想更详细地讨论这个系统的两个特定方面，即它们如何与数字版权管理相关联：与数字版权管理相关的定理，以及这种方案与现有的“可信计算”方案之间的关系。
- en: What policies are machine-checkable?
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么政策是机器可检查的？
- en: 'The MPAA would quite appreciate it there was a way to make it impossible to
    copy a digital video. But even the most sophisticated technological scheme cannot
    work around the fact that I can simply setup a video recorder trained on my screen
    as I watch the movie: this is the so-called “analog hole”, a fundamental limitation
    of any copy protection scheme. Proof-based DRM cannot be directly used to eliminate
    the copying of static materials, such as books, music or movies.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有一种方法可以使复制数字视频成为不可能，MPAA将非常欣赏。但即使是最复杂的技术方案也无法绕过这样一个事实：我可以简单地设置一个录像机，对准我观看电影时的屏幕：这就是所谓的“模拟洞”，是任何复制保护方案的基本限制。基于证明的数字版权管理不能直接用于消除静态材料（如书籍、音乐或电影）的复制。
- en: Does this mean that proof-based DRM has no useful applications? The new capability
    we have gained through this scheme is the ability to select what code will run
    on the hardware. Any legal ramifications are strictly side effects of this technological
    enforcement. Furthermore, since general purpose computing devices are ubiquitous,
    a proof-certifying CPU gains us nothing unless the hardware *itself* affords something
    extra. A proof-verifying CPU can be thought of as a specialized appliance like
    a toaster or a microwave, both of which are only interesting insofar as much as
    they perform non-computational tasks (such as toast bread or heat food).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这是否意味着基于证明的数字版权管理没有任何有用的应用？通过这种方案，我们获得的新能力是能够选择在硬件上运行哪些代码。任何法律后果都严格来说是这种技术实施的副作用。此外，由于通用计算设备随处可见，证明认证的CPU对我们来说没有任何好处，除非硬件*本身*提供了额外的东西。可以将证明验证的CPU看作是像烤面包机或微波炉这样的专用设备，它们只有在执行非计算任务（如烤面包或加热食物）时才有趣。
- en: 'But there are certainly many interesting hardware peripherals for which this
    would be useful. In fact, modern CPUs already have some of the specialized chips
    which are developing along these lines: the Trusted Platform Module, a specification
    for a cryptoprocessor that can be used to securely store cryptographic keys, is
    present in most modern laptops. Intel’s Trusted Execution Technology allows the
    specification of “curtained” regions of memory, which cannot necessarily be accessed
    by the operating system. The creation of these features has been driven by the
    trusted (“treacherous”) computing movement, and these are features that can be
    used both for good and for evil. In a proof-based DRM world, we can give users
    far more precise control over this secret data, as the user is permitted to write
    whatever code they want to manipulate it: they simply need to prove that this
    code won’t get leaked outside of the module. This is information-flow control
    analysis, which lets us track the flow of private data. (For secret data which
    has a low number of bits, such as secret keys, a lot of care needs to be taken
    to mitigate timing attacks, which can be used to slowly leak data in non-obvious
    ways.) This private data could even be proprietary code, in the case of using
    a proof-verifying CPU to assist in the distribution of software. This would be
    more flexible than current software distribution schemes, which are either “in
    the cloud” (software-as-a-service), or where a proprietary, all-in-one “application
    box” must be physically hosted by the customer.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 但是肯定有很多有趣的硬件外围设备可以派上用场。事实上，现代CPU已经具备了一些沿着这些方向发展的专用芯片：**可信平台模块**，一种用于安全存储加密密钥的加密处理器规范，已经存在于大多数现代笔记本电脑中。英特尔的可信执行技术允许指定“帷幕”内存区域，操作系统可能无法访问。这些功能的创建是由可信（“背叛”）计算运动推动的，这些功能可以被用于善恶两用。在基于证据的数字版权管理世界中，我们可以为用户提供更精确的控制，保护这些机密数据，用户只需证明这些代码不会泄漏到模块外部。这是信息流控制分析，允许我们追踪私密数据的流动。（对于比特数较低的秘密数据，例如秘密密钥，需要采取大量措施来缓解定时攻击，这些攻击可以以非明显的方式慢慢泄露数据。）这些私密数据甚至可以是专有代码，例如在使用验证证明CPU来辅助软件分发的情况下。这将比当前的软件分发方案更加灵活，当前的方案要么是“云端”（软件即服务），要么是必须由客户物理托管的专有全一体“应用盒子”。
- en: Another important application of proof-based DRM is for auditing; e.g. the guaranteed
    logging of certain events to external stores. The logging store may be some sort
    of write-only device, and we guarantee that all of the relevant events processed
    by our CPU are sent to this device by proving that, whenever the event associated
    with an auditing requirement is triggered, the associated logging call will also
    be called. This would be a great boon for electronic voting systems, a class of
    machines which are particularly plagued by unaccountability.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 基于证据的数字版权管理的另一个重要应用是审计；例如，对某些事件的保证记录到外部存储。记录存储可能是某种只写设备，并且我们通过证明，每当触发与审计要求相关的事件时，相关的记录调用也将被调用。这对电子投票系统将是一个巨大的福音，这类机器特别容易出现无法追责的问题。
- en: 'However, looking even further into the future, I think the most interesting
    hardware peripherals will not truly be peripherals. Rather, the relationship will
    be inverted: we will be looking at specialized machinery, which happens to need
    the power of a general purpose computer. We do not ride in cars and fly in planes:
    we ride in computers and fly in computers. But just as I would prefer my car not
    to be hackable, or become infected by a computer virus, I would prefer the computational
    power of a car computer to be limited. This is precisely what proof-based DRM
    does: it restricts the set of runnable programs. 3D printers and biosynthesis
    machines are other examples of “peripherals”, which I suspect governments around
    the world will have a large interest in regulating.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，更进一步展望未来，我认为最有趣的硬件外围设备将不会真正是外围设备。相反，关系将被颠倒：我们将看到需要通用计算机能力的专用机械。我们不是乘坐汽车和飞行机：我们是乘坐计算机和飞行计算机。但就像我希望我的汽车不会被黑客攻击或感染计算机病毒一样，我希望汽车计算机的计算能力受到限制。这正是基于证据的数字版权管理所做的：它限制可运行程序的集合。3D打印机和生物合成机器是其他“外围设备”的例子，我怀疑世界各国政府将对其进行大规模监管。
- en: 'Coming up with useful theorems that define the very nature of the device in
    question is a bit more challenging: how do you define the line between legitimate
    use, or an attempt to jam an aircraft radio, create a bioweapon or forge currency?
    How do you mathematically specify what it means to be “working car software”,
    as opposed “car software that will cause accidents”? The key insight here is that
    while it is impossible to completely encapsulate what it means to “be a radio”
    or “be a car”, we can create useful partial specifications which are practical.
    Rather than state “steering works properly”, we can state, “given an appropriate
    input by the wheel, within a N millisecond latency an appropriate mechanical output
    will be generated.” Rather than state “GPS works”, we can state, “during the operation
    of GPS, information recording the current location of the vehicle is not transmitted
    to the public Internet.”'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 提出定义涉及设备本质的有用定理更具挑战性：如何定义合法使用的界限，或者试图干扰飞机无线电、创建生物武器或伪造货币的企图？如何在数学上指定“正常工作的汽车软件”，而不是“会导致事故的汽车软件”？关键的洞察力在于，虽然完全概述“成为一台无线电”或“成为一辆汽车”的含义是不可能的，但我们可以创建实用的部分规范。我们可以声明“转向正常工作”，而是声明，“在轮子适当输入的情况下，N毫秒内会产生适当的机械输出。”我们可以声明“GPS正常工作”，而是声明，“在GPS操作期间，记录车辆当前位置信息不会传输到公共互联网。”
- en: 'It is also possible to modularize the specification, so that extremely complicated
    aspects of operation can be verified by an independent systems, and our proof
    checker only verifies that the independent system is invoked and acted upon. Here
    are two concrete examples:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以将规范模块化，以便独立系统可以验证操作的极其复杂的方面，并且我们的证明检查器仅验证独立系统是否被调用并执行。这里有两个具体例子：
- en: We can require the specific ranges of parameters, ranges which may be mandated
    by law. In the case of simple parameters, such as radio frequencies, what is permissible
    could be built into the specification; more complicated enforcement rules may
    rely on black box chips which can be invoked for a yes-no answer. It’s important
    to note that while the internal implementation of such a chip would not be visible
    to the user, it would have limited influence over the behavior of a program (only
    being called when our program code), nor would they have network access, to “phone
    home”. The specification may simply stipulate that these subroutines are invoked
    and their result (success or failure) handled appropriately.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以要求特定参数的特定范围，这些范围可能由法律规定。对于简单参数（如无线电频率），允许的内容可以建立在规范中；更复杂的执行规则可能依赖于黑匣子芯片，这些芯片可以被调用以进行是非答案。重要的是要注意，虽然这种芯片的内部实现对用户不可见，但它们对程序行为的影响有限（仅在我们的程序代码调用时），它们也没有网络访问能力来“回家”。规范可能只规定这些子程序被调用，并且它们的结果（成功或失败）得到适当处理。
- en: We can require the implementation of steganographic protocols for watermarking
    and anti-counterfeiting measures. These can rely on an identity that is unknown
    to the manufacturer of the device, but immutably initialized upon the first usage
    of the device and can aid law enforcement if the originating device is acquired
    by a proper search and seizure that does not impinge on fourth amendment rights.
    Verifying that a code adheres to such a protocol requires formalizing what it
    means for a steganographic protocol to be correct, and also demonstrating that
    no other input/output invocations interfere with stenographic output.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以要求实施隐写协议来进行水印和防伪措施。这些协议可以依赖于一个对设备制造商未知的身份，但在设备首次使用时不可变地初始化，并且如果原始设备被合法搜查和扣押，可以帮助执法机构，而不侵犯第四修正案权利。验证代码是否符合这样的协议需要明确隐写协议正确的定义，并且证明没有其他输入/输出调用干扰隐写输出。
- en: It should be clear that the ability to limit what code is run on a device has
    practical applications. Indeed, it should seem that proof-based DRM is very similar
    to the trusted (treacherous) computing platform. So, in the next section, I would
    like to directly describe the differences between these two schemes.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，限制设备上运行的代码的能力具有实际应用。确实，基于证明的数字版权管理（DRM）非常类似于可信（不可信）计算平台。因此，在下一节中，我想直接描述这两种方案之间的区别。
- en: Why is this better?
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 这样做为什么更好？
- en: What is the difference between proof-based DRM and current trusted (“treacherous”)
    computing schemes? Both operate by limiting the code that may be run directly
    on a piece of hardware.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 基于证明的数字版权管理与当前的可信（“背叛性”）计算方案有什么区别？两者都通过限制可以直接在硬件上运行的代码来运作。
- en: 'I think the easiest way to see the difference is to consider how each defines
    the set of permissible programs that may be run on a computer. In trusted computing,
    this set is defined to be the set of programs signed by a private key held by
    some corporation. The corporation has complete control over the set of programs
    that you are allowed to run. Want to load your own software? No can do: it hasn’t
    been signed.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为看到它们之间的区别最简单的方法是考虑它们如何定义可以在计算机上运行的允许程序集。在可信计算中，此集合定义为由某些公司持有的私钥签名的程序集。公司完全控制您被允许运行的程序集。想加载自己的软件吗？没门：它还没有被签名。
- en: In proof-based DRM, the set of allowed programs is larger. It will include the
    code that the corporation provides, but it will also include any other program
    that you or the open-source community could write, so long as it provides the
    appropriate proofs for the digital policies. This means, for example, that there
    is no reason to choke down proprietary software which may have rootkits installed,
    may spy on your usage habits, etc. The user *retains control*. The theorems are
    public knowledge, and available for anyone to inspect, analyze, and base their
    own software off of.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于证明的数字版权管理中，允许的程序集更大。它将包括公司提供的代码，但也将包括您或开源社区可以编写的任何其他程序，只要它们为数字策略提供适当的证明。这意味着，例如，没有理由接受可能安装了Rootkit、可能窥探您使用习惯等功能的专有软件。用户*保持控制权*。这些定理是公共知识，任何人都可以检查、分析，并基于它们编写自己的软件。
- en: 'What if the user isn’t able to, in practice, load his own code? Given the current
    difficulties in theorem proving, it is certainly a concern that what may happen
    in practice is that corporations will generate specifications that are overfitted
    to their proprietary code: that have such stringent parameters on the code’s operation
    that it would be effectively impossible for anyone to run anything else. Or, even
    more innocuously, the amount of effort involved with verifying software will put
    it out of reach for all but well-funded corporations. Unfortunately, this is a
    question that cannot be resolved at the moment: we have no data in this area.
    However, I have reason to be optimistic. One reason is that it has been extremely
    important for current formal methods work for specifications to be *simple*; a
    complicated specification is more likely to have bugs and is harder to prove properties
    about. Natural selection will take its course here, and if a company is tempted
    to slip in a “back door” to get their code in, this back door will also be exploitable
    by open source hackers. Another reason to be optimistic is that we may be able
    to develop correct-by-construction programming languages, languages which you
    write in, and when compiled, automatically provide you with the proof for the
    particular theorems you were looking for.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户在实践中不能加载自己的代码怎么办？鉴于当前定理证明的困难，可以肯定的是，实际上可能发生的情况是，公司会生成过度适应其专有代码的规范：这些规范对代码的操作有着严格的参数限制，使得其他人几乎无法运行其他任何代码。或者更无辜地说，验证软件所需的努力可能使其只能被资金充裕的公司使用。不幸的是，这是一个目前无法解决的问题：在这个领域我们没有数据。但我有理由乐观。其中一个原因是，当前形式化方法工作中，规范要求*简单*；复杂的规范更可能存在漏洞，更难以证明其属性。自然选择将在这里发挥作用，如果公司试图通过“后门”将其代码引入，这个后门也将被开源黑客利用。另一个乐观的理由是，我们可能能够开发出构建正确的编程语言，这些语言是你编写的，编译后会自动为你提供你所寻找的特定定理的证明。
- en: And of course, there is perhaps one last reason. Through the ages, we’ve seen
    that open source hackers are highly motivated. There is no reason to believe this
    will not be the case here.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，也许还有最后一个原因。经过历代证明，开源黑客们极具动力。我们没有理由认为这里会有什么不同。
- en: Conclusion
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论
- en: Of course, demonstrating that proof-based digital-rights management is “better”
    than the rather bad current alternatives doesn't mean that it is “good.” But,
    through the course of this essay, I’ve touched upon many the reasons why I think
    such a scheme could be valuable. It would provide further impetus in the development
    of proof-carrying code, a technology that is interesting in and of itself. It
    would provide a sound basis for limiting the functionality of general purpose
    computers, in circumstances where you really *don’t* want a general purpose computing
    device, without requiring rootkits or spyware. The ability to more precisely say
    what ways you would like your product be used gives producers more flexibility
    when negotiating in the market (for example, if I can ensure a video game will
    have limited distribution during its first month, I may be willing to sell it
    for less). And as general purpose computers gain the ability to influence reality
    in unprecedented ways, there will be a growing desire for this technology that
    provides this capability. I think that it is uncontroversial that many, powerful
    bodies will have an interest in controlling what can be run on certain computing
    devices. Cory Doctorow has said that “all attempts at controlling PCs will converge
    on rootkits”; it should be at least worth considering if there is *another way*.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，证明基于证明的数字版权管理比当前相当糟糕的替代方案“更好”，并不意味着它是“好的”。但是，通过本文，我触及了许多我认为这样一个方案可能有价值的原因。它将进一步推动证明载体代码的发展，这项技术本身就很有趣。它将为限制通用计算机功能提供坚实基础，在真正*不希望*通用计算设备时，而无需使用
    rootkit 或间谍软件。更精确地说明您希望产品如何使用的方式，使生产者在市场谈判中拥有更大的灵活性（例如，如果我可以确保视频游戏在首个月内分发有限，我可能愿意以更低的价格出售）。随着通用计算机获得影响现实方式的能力，对这种能提供此功能的技术将会越来越渴望。我认为，很多强大的实体将有兴趣控制某些计算设备上可以运行的内容是无争议的。Cory
    Doctorow曾说过“所有试图控制个人电脑的尝试都将聚焦于 rootkit”；如果有*另一种方式*，至少值得考虑一下。
