- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:18:23'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:18:23'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'More fun with Futamura projections : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多关于Futamura投影的乐趣：ezyang's博客
- en: 来源：[http://blog.ezyang.com/2010/03/more-fun-with-futamura-projections/](http://blog.ezyang.com/2010/03/more-fun-with-futamura-projections/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/03/more-fun-with-futamura-projections/](http://blog.ezyang.com/2010/03/more-fun-with-futamura-projections/)
- en: '*Code written by Anders Kaseorg.*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*Anders Kaseorg编写的代码。*'
- en: In [The Three Projections of Doctor Futamura](http://blog.sigfpe.com/2009/05/three-projections-of-doctor-futamura.html),
    Dan Piponi treats non-programmers to an explanation to the Futamura projections,
    a series of mind-bending applications of partial evaluation. Go over and read
    it if you haven't already; this post is intended as a spiritual successor to that
    one, in which we write some Haskell code.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在[Doctor Futamura的三个投影](http://blog.sigfpe.com/2009/05/three-projections-of-doctor-futamura.html)中，Dan
    Piponi向非程序员解释了Futamura投影，这是部分求值的一系列令人费解的应用。如果你还没有读过，请去看一看；这篇文章旨在成为那篇文章的精神继承者，在这篇文章中我们将编写一些Haskell代码。
- en: '*The pictorial type of a mint.* In the original post, Piponi drew out machines
    which took various coins, templates or other machines as inputs, and gave out
    coins or machines as outputs. Let''s rewrite the definition in something that
    looks a little bit more like a Haskell type.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*铸币的图像类型。* 在原始文章中，Piponi绘制出各种硬币、模板或其他机器作为输入，并输出硬币或机器。让我们用更像Haskell类型的东西来重新定义这个定义。'
- en: 'First, something simple: the very first machine that takes blank coins and
    mints new coins.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，来点简单的：第一个机器，它接收空白硬币并铸造新硬币。
- en: 'We''re now using an arrow to indicate an input-output relationship. In fact,
    this is just a function that takes blank coins as input, and outputs engraved
    coins. We can generalize this with the following type synonym:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们使用箭头来表示输入输出关系。事实上，这只是一个将空白硬币作为输入并输出镌刻硬币的函数。我们可以用以下类型同义词来概括这个概念：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'What about that let us input the description of the coin? Well, first we need
    a simple data type to represent this description:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们让我们输入硬币的描述是什么呢？好吧，首先我们需要一个简单的数据类型来表示这个描述：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '(Yeah, that data-type can''t really do anything interesting. We''re not actually
    going to be writing implementations for these machines.) From there, we have our
    next "type-ified'' picture of the interpreter:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: (是的，这种数据类型真的不能做任何有趣的事情。我们实际上不会为这些机器编写实现。) 从这里开始，我们有了我们下一个"类型化"的解释器的图片：
- en: 'Or, in code:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，在代码中表示为：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'From there, it''s not a far fetch to see what the compiler looks like:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 从那里开始，看看编译器是什么样子的也不是难事：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'I would like to remark that we could have fully written out this type, as such:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我想指出，我们完全可以像这样完全写出这个类型：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We've purposely kept the unnecessary parentheses, since Haskell seductively
    suggests that you can treat `a -> b -> c` as a 2-ary function, when we'd like
    to keep it distinct from `(a, b) -> c`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们故意保留了不必要的括号，因为Haskell诱人地表明你可以把`a -> b -> c`当作一个二元函数处理，而我们希望它与`(a, b) -> c`保持不同。
- en: 'And at last, we have the specializer:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有了专用程序：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We''ve named the variables in our Specializer type synonym suggestively, but
    program doesn''t just have to be Program: the whole point of the Futamura projections
    is that we can put different things there. The other interesting thing to note
    is that any given Specializer needs to be parametrized not just on the input and
    output, but the program it operates on. That means the concrete type that the
    Specializer assumes varies depending on what we actually let `program` be. It
    does *not* depend on the first argument of the specializer, which is forced by
    `program`, `input` and `output` to be `(program, input) -> output`.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经用富有启发性的方式命名了我们的Specializer类型同义词中的变量，但程序不仅仅是程序：Futamura投影的整个要点是我们可以在那里放置不同的东西。另一个有趣的事情是，任何给定的Specializer都需要在输入和输出之外还根据它操作的程序进行参数化。这意味着Specializer假设的具体类型因实际上让`program`变化而变化。它不依赖于Specializer的第一个参数，这是由`program`、`input`和`output`强制的`（program，input）->
    output`。
- en: Well, what are those concrete types? For this task, we can ask GHC.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这些具体类型是什么呢？对于这个任务，我们可以问问GHC。
- en: '*To the fourth projection, and beyond!* First, a few preliminaries. We''ve
    kept `input` and `output` fully general in our type synonyms, but we should actually
    fill them in with a concrete data type. Some more vacuous definitions:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*到第四个投影，以及更远的地方！* 首先，几个准备工作。我们保留了`input`和`output`在我们的类型同义词中完全一般化，但实际上我们应该用具体的数据类型来填充它们。还有一些更空洞的定义：'
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We don't actually care how we implement our program or our interpreter, thus
    the `undefined`; given our vacuous data definitions, there do exist valid instances
    of these, but they don't particularly increase insight.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实际上不关心如何实现我们的程序或解释器，因此 `undefined`；考虑到我们的虚无数据定义，确实存在这些的有效实例，但它们并不特别增加洞察力。
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We''ve treated the specializer a little differently: partial evaluation and
    partial application are very similar: in fact, to the outside user they do precisely
    the same thing, only partial evaluation ends up being faster because it is actually
    doing some work, rather than forming a closure, with the intermediate argument
    hanging around in limbo and not doing any useful work. However, we need to uncurry
    the curry, since Haskell functions are curried by default.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对待专用化器有点不同：部分求值和部分应用非常相似：事实上，对外部用户来说，它们确实做着完全相同的事情，只是部分求值最终更快，因为它实际上在做一些工作，而不是形成一个闭包，中间参数无所作为地挂在空中。然而，我们需要取消柯里化，因为
    Haskell 函数默认情况下是柯里化的。
- en: 'Now, the Futamura projections:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Futamura 投影：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Without the monomorphism restriction, `s` would have worked just as well, but
    we're going to give `s1` an explicit type shortly, and that would spoil the fun
    for the rest of the projections. (Actually, since we gave `s` an explicit type,
    the monomorphism restriction wouldn't apply.)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 没有单态限制，`s` 也可以正常工作，但我们将很快为 `s1` 给出一个显式类型，这将破坏其余投影的乐趣。（实际上，因为我们给 `s` 指定了显式类型，单态限制不适用。）
- en: 'So, what is the type of `s1`? It''s definitely not general: `i` and `p` are
    fully explicit, and Specializer doesn''t introduce any other polymorphic types.
    This should be pretty easy to tell, but we''ll ask GHC just in case:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，`s1` 的类型是什么？它绝对不是通用的：`i` 和 `p` 完全明确，并且专门化器不会引入任何其他多态类型。这应该很容易判断，但我们还是问问 GHC
    以防万一：
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Of course. It matches up with our variable names!
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当然。它与我们的变量名匹配！
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Time for the second Futamura projection:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候进行第二个 Futamura 投影了：
- en: '[PRE11]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Notice I''ve written `s2` this time around. That''s because `` s1 (s1, i)``
    doesn''t typecheck; if you do the unification you''ll see the concrete types don''t
    line up. So what''s the concrete type of `s2`? A little more head-scratching,
    and perhaps a quick glance at Piponi''s article will elucidate the answer:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这次我写了 `s2`。那是因为 `` s1 (s1, i)`` 无法通过类型检查；如果你进行统一，你会看到具体类型不匹配。那么 `s2` 的具体类型是什么？稍微多想一会儿，或许快速浏览一下
    Piponi 的文章就能阐明答案了。
- en: '[PRE12]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The third Futamura projection, the interpreter-to-compiler machine:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个 Futamura 投影，解释器到编译器机器：
- en: '[PRE13]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '(You should verify that `s2 (s2, s1)` and `s1 (s1, s2)` and any permutation
    thereof doesn''t typecheck.) We''ve also managed to lose any direct grounding
    with the concrete:: there''s no `p` or `i` to be seen. But `s2` and `s1` are definitely
    concrete types, as we''ve shown earlier, and GHC can do the unification for us:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: （你应该验证 `s2 (s2, s1)` 和 `s1 (s1, s2)` 以及任何其排列都不能通过类型检查。）我们也设法丢失了与具体性的直接基础：看不到
    `p` 或 `i`。但 `s2` 和 `s1` 明显是具体类型，正如我们之前展示的那样，而 GHC 可以为我们执行统一：
- en: '[PRE14]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In fact, it''s been so kind as to substitute some of the more gnarly types
    with the relevant type synonyms for our pleasure. If we add some more parentheses
    and take only the output:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，它已经很友好地用相关类型同义词替换了一些更加棘手的类型供我们使用。如果我们加入一些额外的括号并只获取输出：
- en: '[PRE15]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: And there's our interpreter-to-compiler machine!
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的解释器到编译器机器！
- en: '[PRE16]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: But why stop there?
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 但为什么停在这里呢？
- en: '[PRE17]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Or even there?
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 或者甚至在这里？
- en: '[PRE18]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: And we could go on and on, constructing the *nth* projection using the specializers
    we used for the *n-1* and *n-2* projections.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以继续，使用我们用于 *n-1* 和 *n-2* 投影的专用化器构造第 *n* 个投影。
- en: This might seem like a big bunch of type-wankery. I don't think it's just that.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来像一堆类型奇技淫巧。我认为不仅仅是这样。
- en: 'Implementors of partial evaluators care, because this represents a mechanism
    for composition of partial evaluators. `S2` and `S1` could be different kinds
    of specializers, with their own strengths and weaknesses. It also is a vivid demonstration
    of one philosophical challenge of the partial-evaluator writer: they need to write
    a single piece of code that can work on arbitrary *n* in *Sn*. Perhaps in practice
    it only needs to work well on low *n*, but the fact that it works at all is an
    impressive technical feat.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 部分求值器的实现者关心，因为这代表了部分求值器组合的机制。`S2` 和 `S1` 可能是不同类型的专用化器，各自具有其优势和劣势。这也是部分求值器编写者面临的哲学挑战的生动示范：他们需要编写一段可以在
    *Sn* 中任意 *n* 上工作的代码。也许在实践中，它只需要在低 *n* 上表现良好，但它确实能够工作是一个令人印象深刻的技术成就。
- en: 'For disciples of partial application, this is something of a parlor trick:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于部分应用的信徒来说，这有点像是一种客厅戏法：
- en: '[PRE19]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'But this is a useful parlor trick: somehow we''ve managed to make an arbitrarily
    variadic function! I''m sure this technique is being used somewhere in the wild,
    although as of writing I couldn''t find any examples of it (Text.Printf might,
    although it was tough to tell this apart from their typeclass trickery.)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 但这是一个有用的客厅戏法：我们设法使一个任意可变参数的函数！我相信这种技术在某些地方被野生使用，尽管在撰写本文时，我找不到任何实际的例子（Text.Printf
    可能有，尽管很难将其与它们的类型类技巧区分开来）。
