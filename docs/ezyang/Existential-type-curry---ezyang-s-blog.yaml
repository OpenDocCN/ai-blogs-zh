- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:18:08'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:18:08'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Existential type-curry : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存在类型 - 柯里的博客
- en: 来源：[http://blog.ezyang.com/2010/10/existential-type-curry/](http://blog.ezyang.com/2010/10/existential-type-curry/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/10/existential-type-curry/](http://blog.ezyang.com/2010/10/existential-type-curry/)
- en: This post is for those of you have always wondered why we have a `forall` keyword
    in Haskell but no `exists` keyword. Most of the existing tutorials on the web
    take a very *operational* viewpoint to what an existential type is, and show that
    placing the forall in the “right place” results in the correct behavior. I’m going
    to take a different approach and use the Curry-Howard isomorphism to explain the
    translation. Some of the logic examples are shamelessly stolen from Aaron Coble’s
    Logic and Proof lecture notes.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章是给那些一直想知道为什么 Haskell 中有 `forall` 关键字但没有 `exists` 关键字的人。大部分现有的网络教程都非常“操作性”，对存在类型是什么持有一种观点，并且展示将
    forall 放在“正确的位置”会得到正确的行为。我将采取一种不同的方法，利用柯里-霍华德同构来解释翻译。其中一些逻辑示例是从 Aaron Coble 的逻辑与证明讲座笔记中无耻地借鉴过来的。
- en: '* * *'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: First, a little logic brush up. (Feel free to skip.)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们稍微恢复一下逻辑知识。（如有需要可跳过。）
- en: At the very bottom of the hierarchy of logic systems lies propositional logic.
    Whenever you write a non-polymorphic function in Haskell, your function definition
    corresponds to a statement in propositional logic—this is the simply typed lambda
    calculus. You get some propositional symbols P, Q and R (corresponding to types)
    and some logical connectives ![\lnot \land \lor \to \iff](img/c380bfcdc8f79fb59dd7e295fc6aa750.png
    "\lnot \land \lor \to \iff"). In particular, ![\to](img/1f952113b29d6f88da1c519a628e22eb.png
    "\to") corresponds to the function arrow `->`, so you can read ![P \to Q](img/d6e028353b8bb34b03190d3b24b39b15.png
    "P \to Q") as the type `P -> Q`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑系统层次结构的最底层是命题逻辑。每当你在 Haskell 中编写一个非多态函数时，你的函数定义对应于命题逻辑中的一个陈述—这就是简单类型 λ 演算。你会得到一些命题符号
    P、Q 和 R（对应于类型），以及一些逻辑连接符 ![\lnot \land \lor \to \iff](img/c380bfcdc8f79fb59dd7e295fc6aa750.png
    "\lnot \land \lor \to \iff"). 特别地，![\to](img/1f952113b29d6f88da1c519a628e22eb.png
    "\to") 对应于函数箭头 `->`，因此你可以将 ![P \to Q](img/d6e028353b8bb34b03190d3b24b39b15.png
    "P \to Q") 理解为类型 `P -> Q`。
- en: 'The next step up is first-order predicate logic, which allows you to use the
    quantifiers ∀ and ∃ on variables ranging over individuals x, y and z (the predicates
    take individuals and return propositions). Logical formulas in this system start
    to look a lot like Haskell polymorphism, but it actually corresponds to dependent
    types: individuals are terms, not types.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个阶段是一阶谓词逻辑，允许你在个体 x、y 和 z 上使用全称量词 ∀ 和 存在量词 ∃（谓词接受个体并返回命题）。在这个系统中的逻辑公式开始看起来很像
    Haskell 的多态性，但实际上对应于依赖类型：个体是术语，而不是类型。
- en: For the purpose of this post, we’ll instead have x, y and z to range over propositions
    (types), except for two examples of first order logic to get some intuition for
    quantifiers. Then polymorphic function definitions are statements in what is called
    propositional second order logic.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将会让 x、y 和 z 范围在命题（类型）上（除了两个一阶逻辑的例子来获得一些量词的直觉）。然后多态函数的定义是所谓的命题二阶逻辑中的陈述。
- en: 'Propositional second order logic gives us a bit of rope, and we can do some
    fairly unintuitive things with it. Existential types are one such application.
    However, most Haskellers have a pretty good intuition for polymorphic functions
    like `id :: a -> a`, which actually have an ∀ quantifier at the very beginning,
    like `id :: forall a. a -> a` or ![\forall x. x \to x](img/9470d237627501505120918de386f1f0.png
    "\forall x. x \to x"). What I’d like to do next is make the connection between
    our intuitive sense of polymorphic functions and our intuitive sense of a universal
    quantifier.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '命题二阶逻辑给了我们一些自由度，我们可以用它做一些相当直观的事情。存在类型就是其中之一的应用。然而，大多数 Haskeller 对多态函数有一个相当好的直觉，比如
    `id :: a -> a`，它实际上在最开始有一个 ∀ 量词，像 `id :: forall a. a -> a` 或者 ![ \forall x. x
    \to x](img/9470d237627501505120918de386f1f0.png "\forall x. x \to x"). 接下来我想要做的是将我们对多态函数的直觉感受与我们对全称量词的直觉感受联系起来。'
- en: '* * *'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Consider the following English sentence: *All professors can teach and do research.*
    We can translate this into a statement in first-order logic (x ranging over individuals):'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下英语句子：*所有教授都能教书和进行研究。* 我们可以将其翻译为一阶逻辑中的陈述（x 范围在个体上）：
- en: The intuition for the trick of “narrowing” a universally quantified variable
    by placing it in an implication corresponds directly to the implicit dictionary
    passing that occurs when you use a type class (which also narrows a universally
    quantified variable).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: “缩小”普遍量化变量的技巧的直觉是直接对应于使用类型类时发生的隐式字典传递（这也会缩小普遍量化变量）。
- en: 'We can do similar translations for the existential quantifier. *Everybody loves
    somebody* and *there is somebody that everybody loves* correspond to, respectively:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以对存在量化器进行类似的转换。*每个人都爱着某人* 和 *有人是每个人都爱* 分别对应于：
- en: Take a moment to convince yourself that these are not the same statements, and
    figure out which direction implication goes.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 请花一些时间说服自己这些不是相同的陈述，并弄清楚蕴含的方向。
- en: We’ll now jump straight to the implication equivalences, which are the punchline,
    so to speak. Here, x ranges over propositions (i.e. types).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们直接跳到蕴含的等价关系，这是重点所在。在这里，x 范围涵盖命题（即类型）。
- en: 'Consider the first equivalence: intuitively, it states that we can simulate
    a function that takes an existential type by using `forall x. (A x -> B)`. This
    is precisely the existential data constructor:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑第一个等价关系：直觉上，它说明我们可以通过使用 `forall x. (A x -> B)` 模拟接受存在类型的函数。这正是存在数据构造函数：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: which has the type `forall a. (a -> OpaqueBox)`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 它的类型是 `forall a. (a -> OpaqueBox)`。
- en: 'The second proposition is a little trickier to grasp: in the right to left
    direction, it seems clear that if there exists an inference A(x) to B for *some*
    x, if I provide *all* x I will get B. However, from left to right, if I provide
    *all* A(x) to get B, one of those A(x) will have to have been used but I have
    no good way of figuring out which one.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个命题有点难以理解：从右到左的方向上，似乎很明显，如果存在一个推论 A(x) 到 B，那么如果我提供所有的 x，我会得到 B。然而，从左到右，如果我提供所有的
    A(x) 来得到 B，那么其中一个 A(x) 必须已经被使用，但我没有好方法找出是哪一个。
- en: We can rigorously prove this equivalence with [sequent calculus](http://en.wikipedia.org/wiki/Sequent_calculus).
    We can think of these as “deduction rules” much like modus ponens (if A then B,
    A; therefore, B). However, statements in the sequent calculus take the form ![\Gamma
    \vdash \Delta](img/41c9a8b158b37c96b893ca14dd5a9829.png "\Gamma \vdash \Delta"),
    where Γ is the set of propositions which conjunctively form the assumption, and
    Δ is the set of propositions which disjunctively form the result. (The ![\vdash](img/87972e942ecdb3b8855b7897e656b8ae.png
    "\vdash") is called a “turnstile” and indicates implication.)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过[序言演算](http://en.wikipedia.org/wiki/Sequent_calculus)严格证明这种等价性。我们可以将这些看作是“推理规则”，类似于假言推断（如果
    A 则 B，A；因此，B）。然而，序言演算中的陈述采用形式 ![Γ ⊢ Δ](img/41c9a8b158b37c96b893ca14dd5a9829.png
    "Γ ⊢ Δ")，其中 Γ 是共同形成假设的命题集合，Δ 是形成结果的命题集合的析取。（![⊢](img/87972e942ecdb3b8855b7897e656b8ae.png
    "⊢") 叫做“推导”，表示蕴含。）
- en: '![\forall L](img/6809ef3bd0f5701e76cd4c50b451d1bf.png "\forall L") and ![\exists
    R](img/3d5c389fbe652356b5ba7722f51c01a6.png "\exists R"), in particular, are quite
    interesting: ![\forall L](img/6809ef3bd0f5701e76cd4c50b451d1bf.png "\forall L")
    says I can make any assumed proposition “polymorphic” by picking some subterm
    and replacing all instances of it with a newly universally quantified variable
    (it’s a stronger assumption, so we’re weakening our entailment). We can indeed
    do this in Haskell (as one might transform `(Int -> Bool) -> Int -> Bool` into
    `(a -> b) -> a -> b`), so long as our proof doesn’t peek at the actual type to
    perform its computation. ![\exists R](img/3d5c389fbe652356b5ba7722f51c01a6.png
    "\exists R"), on the other hand, says that I can take any resulting proposition
    and “hide” my work by saying something weaker: instead of A[t], I merely say there
    exists some x for which A[x] is true. This corresponds nicely to the intuition
    of an existential type hiding representation. Another nice duality is that universal
    quantification hides information inside the proof, while existential quantification
    hides information outside of the proof.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是，![全称L](img/6809ef3bd0f5701e76cd4c50b451d1bf.png "\forall L") 和 ![存在R](img/3d5c389fbe652356b5ba7722f51c01a6.png
    "\exists R") 相当有趣：![全称L](img/6809ef3bd0f5701e76cd4c50b451d1bf.png "\forall L")
    表示我可以通过选择某个子项并用新的全称量化变量替换所有实例来使任意假设的命题“多态化”（这是一个更弱的假设，所以我们正在减弱我们的蕴涵）。我们确实可以在Haskell中做到这一点（就像将`(Int
    -> Bool) -> Int -> Bool`转换为`(a -> b) -> a -> b`），只要我们的证明不看实际的类型来执行其计算。![存在R](img/3d5c389fbe652356b5ba7722f51c01a6.png
    "\exists R") 则表示我可以通过说某些更弱的东西来“隐藏”我的工作，而不是A[t]，我只是说存在一些x使得A[x]为真。这与存在类型隐藏表示的直觉非常对应。另一个很好的对偶是，全称量化将信息隐藏在证明内部，而存在量化则将信息隐藏在证明外部。
- en: '![\forall R](img/6a07f69b8af9a7616c9adfd950e4037f.png "\forall R") and ![\exists
    L](img/a264cbefc81e75c375957260f5e83a78.png "\exists L") don’t do as much work,
    but they are a little tricky to use: any universal quantification on the right
    side of the turnstile can create/destroy a free variable, and any existential
    quantification on the left side can create/destroy a free variable. Note that
    ![\forall L](img/6809ef3bd0f5701e76cd4c50b451d1bf.png "\forall L") and ![\exists
    R](img/3d5c389fbe652356b5ba7722f51c01a6.png "\exists R") cannot be used this way;
    while they can use existing free variables, they can’t create or destroy them.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![全称R](img/6a07f69b8af9a7616c9adfd950e4037f.png "\forall R") 和 ![存在L](img/a264cbefc81e75c375957260f5e83a78.png
    "\exists L") 的作用不大，但使用起来有些棘手：转换符号右侧的任何全称量化可以创建/销毁自由变量，而在转换符号左侧的任何存在量化可以创建/销毁自由变量。注意，![全称L](img/6809ef3bd0f5701e76cd4c50b451d1bf.png
    "\forall L") 和 ![存在R](img/3d5c389fbe652356b5ba7722f51c01a6.png "\exists R") 不能以这种方式使用；虽然它们可以使用现有的自由变量，但不能创建或销毁它们。'
- en: Here is the proof in both directions of the equivalence. What we’re trying to
    prove lives on the bottom; tautologies are at the top.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是等价性的双向证明。我们试图证明的内容位于底部；顶部是重言式。
- en: 'The proofs are nicely symmetrical: one uses ∀L and ∃L, and the other ∀R and
    ∃R. The application of the →R “uncurries” each entailment. Furthermore, the fact
    that both proofs are constructive indicates that there is this equivalence is
    one that can be witnessed by a Haskell program! You can check out a [Coq version
    of the proof](http://codepad.org/vr1wO4O3) from kmc.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 证明非常对称：一个使用∀L和∃L，另一个使用∀R和∃R。→R的应用“非柯里化”了每个蕴涵。此外，两个证明都是构造性的表明了这种等价关系可以通过Haskell程序见证！你可以查看[kmc提供的Coq版本的证明](http://codepad.org/vr1wO4O3)。
- en: '* * *'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '*Postscript.* I picked the wrong equivalence initially, but I felt it would
    be a shame not to share it. Here is the proof for: ![\exists x\ (A[x] \to B) \vdash
    (\forall x\ A[x]) \to B  ](img/12c48057bf4bd661923e4936d67538ca.png "\exists x\
    (A[x] \to B) \vdash (\forall x\ A[x]) \to B  ").'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*后记。* 最初我选择了错误的等价性，但我觉得不分享它会很可惜。这是:![](img/12c48057bf4bd661923e4936d67538ca.png
    "\exists x\ (A[x] \to B) \vdash (\forall x\ A[x]) \to B") 的证明。'
- en: 'This is done entirely with intuitionistic logic: the other direction requires
    classical logic. This is left as an exercise for the reader, the [solution is
    here](http://hpaste.org/40584/x_ax__b__x_ax__b) by monochrom. There is also [a
    version from kmc in Coq](http://hpaste.org/40585/ezyangs_theorem) in both directions.
    This result has an interesting implication for existentials over functions: we
    can translate from an existential to a universal, but not back!'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是完全通过直觉逻辑完成的：另一方向需要经典逻辑。这留给读者作为练习，[解决方案在这里](http://hpaste.org/40584/x_ax__b__x_ax__b)，由
    monochrom 提供。同时也有 [Coq 中的 kmc 版本](http://hpaste.org/40585/ezyangs_theorem) 能够在两个方向上进行。这个结果对于存在于函数上的存在性有一个有趣的含义：我们可以从存在性转换到全称性，但反之则不行！
