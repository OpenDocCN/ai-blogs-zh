- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:44'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:44'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'A Year of Notebooking (Part 2) : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一年的笔记本（第二部分）：ezyang 的博客
- en: 来源：[http://blog.ezyang.com/2011/06/a-year-of-notebooking-part-2/](http://blog.ezyang.com/2011/06/a-year-of-notebooking-part-2/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2011/06/a-year-of-notebooking-part-2/](http://blog.ezyang.com/2011/06/a-year-of-notebooking-part-2/)
- en: This is notebook two.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这是笔记本的第二部分。
- en: 'Max Schäfer: Refactoring Java'
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Max Schäfer：重构 Java
- en: 'Most Java refactoring tools built into IDEs like Eclipse are little more than
    glorified text manipulation macros. There are no guarantees that the result of
    your refactoring will have the same behavior as the original: you can even refactor
    code that doesn’t even compile! To prevent this, most refactorings require heavy
    and hard-to-understand preconditions for refactoring. Max brings two ideas to
    the table:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数内置于诸如 Eclipse 之类的 IDE 中的 Java 重构工具只不过是经过美化的文本操作宏。不能保证重构的结果与原始行为相同：甚至可以重构不编译的代码！为了防止这种情况发生，大多数重构都需要复杂且难以理解的前提条件。Max
    提出了两个想法：
- en: Rather than attempt to write a complex pre-condition that may or may not accurately
    reflect safety concerns, we instead do the transformation, and then verify that
    the refactoring did not break anything. We can do this with a dependency-based
    description of the behavior program, which *overspecifies* the original semantics
    (otherwise, such analysis wouldn’t be tractable, as it’s undecidable.)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要试图编写一个复杂的前提条件，可能不能准确反映安全问题，我们相反地进行转换，然后验证重构没有破坏任何东西。我们可以用程序行为的依赖描述来做这件事，它*过度规范*了原始的语义（否则，这样的分析将是不可判定的）。
- en: Rather than attempt to write a monster refactoring that attempts to handle all
    possible cases, we decompose refactorings into microrefactorings on simpler versions
    of the source language. For example, moving a chunk of code into a method would
    involve closure conversion (control), lambda lifting (data), and then the actual
    outwards motion, which at this point is trivial. We can then resugar into the
    original source language. This allows us to abstract over corner cases.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要试图编写一个试图处理所有可能情况的庞大重构，我们将重构分解为源语言的简化版本上的微重构。例如，将一块代码移动到一个方法中将涉及到闭包转换（控制）、lambda
    提升（数据），然后是实际的外部移动，在这一点上已经是微不足道的。然后我们可以重新将其转换为原始的源语言。这使我们可以抽象处理边界情况。
- en: Modularity is a very powerful philosophy, and one that Hoopl takes too. (One
    might wonder if Hoopl might be useful for refactoring, one big problem I observe
    is that Hoopl’s representation is too low level, and really the point of a high-level
    language is that you don’t need complex dataflow analysis.)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 模块化是一种非常强大的理念，这也是 Hoopl 所采用的。 （有人可能会想知道 Hoopl 是否对重构有用，我观察到的一个大问题是 Hoopl 的表示太低级了，而一个高级语言的要点实际上是你不需要复杂的数据流分析。）
- en: There are some bad assumptions about this, however. It assumes we know the whole
    program, that it’s only written in one language (no XML manifest files), and it’s
    statically typed and class based. Of course, one fails these assumptions for all
    real programs, so if we actually want people to adopt this workflow, we need a
    story for them. Refactoring is a transition from sloppy to structured code. (I
    have scribbled at the bottom of the page *responsibility calculus*, but I have
    no idea what that means now.)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对此有一些错误的假设。它假设我们知道整个程序，它只用一种语言编写（没有 XML 清单文件），并且是静态类型和基于类的。当然，所有真实的程序都违反了这些假设，因此如果我们真的希望人们采用这种工作流程，我们需要一个适合他们的故事。重构是从松散到结构化代码的过渡。（我在页面底部涂鸦了*责任计算*，但现在我不知道这是什么意思。）
- en: Semantic overspecification reminds me of SLAM’s approach to iterative approximations
    of program behavior.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 语义过度规范让我想起了 SLAM 对程序行为迭代逼近的方法。
- en: 'Mike Dodds: Modular Reasoning for Deterministic Parallelism'
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Mike Dodds：确定性并行性的模块化推理
- en: A frequent problem with separation logics is that you need to introduce a new
    primitive for every sort of concurrency construct you may want to model, and so
    you end up with a bazillion different logics, each for your own model of concurrency.
    Mike presents a way of incrementally building up any sort of semantics you could
    possibly want, using “concurrent abstract predicates.” You use predicates to generate
    variables that satisfy various predicates, and then require these conditions for
    various other specifications of functions.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 分离逻辑的一个常见问题是，你需要为可能想要建模的每种并发构造引入一个新的原语，因此你最终会得到无数不同的逻辑，每个适合自己的并发模型。迈克提出了一种逐步构建任何你可能想要的语义的方法，使用“并发抽象谓词”。你可以使用谓词生成满足各种其他函数规范的变量。
- en: The majority of this particular talk was working through an odd concurrency
    construct called `wait/grant`, described in “Quasi-Static Scheduling for Safe
    Futures.” It’s a barrier that preserves “necessary” sequential dependencies. A
    bit of time was spent actually clarifying what this construct did, and why it
    was different from a buffered channel. Tony Hoare remarked that it resembled a
    “production line” in real-life, which was not very common in programming, though
    it happened to be quite natural for the problem the original paper authors were
    tackling (parallelizing sequential programs).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这次特别讲座的大部分时间都花在了一个名为`wait/grant`的奇怪并发构造上，描述在《安全未来的准静态调度》中。这是一个保持“必要”顺序依赖性的屏障。一些时间实际上用来澄清这个构造的作用，以及它与缓冲通道的区别。托尼·霍尔评论说，这种构造类似于现实生活中的“生产线”，虽然在编程中并不常见，但对于原始论文作者所处理的问题（并行化顺序程序）来说却是相当自然的。
- en: My notes invite me to “implement this in Haskell”, and also have a remark about
    “tree shaped bit vector propagation”, which is apparently the optimized version.
    There are also a bunch of code snippets but I’m sure I can find those in the slides.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我的笔记鼓励我“在Haskell中实现这一点”，并且还有关于“树形位向量传播”的备注，显然这是优化过的版本。还有一堆代码片段，但我肯定可以在幻灯片中找到这些内容。
- en: 'Tomas Petricek: Joinads'
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 托马斯·佩特里切克：Joinads
- en: 'Joinads for F# are a system for pattern matching on computations (as opposed
    to just values). How is this any different from monads? Joinads support extra
    operations: `merge :: m a -> m b -> m (a, b)` and `choose :: [m (Maybe (m a))]
    -> m a`, which can implement special scheduling properties. This can be useful
    for futures (Manticore), events (FRP) or the join calculus (joins execute when
    a channel contains value: it’s cheap and cheerful multiplexing.) It turns out
    you get a Joinad for free from commutative monads, which might say something about
    what kind of syntax extensions would be useful for those monads.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 'F#的Joinads是一种用于对计算进行模式匹配的系统（与仅对值进行模式匹配不同）。这与单子有何不同？Joinads支持额外的操作：`merge ::
    m a -> m b -> m (a, b)`和`choose :: [m (Maybe (m a))] -> m a`，可以实现特殊的调度属性。这对于未来（Manticore）、事件（FRP）或联接演算（当通道包含值时执行联接：它是廉价而快乐的复用）可能很有用。事实证明，你可以从交换单子中免费获得一个Joinad，这可能说明了对这些单子有用的语法扩展类型。'
- en: I wasn’t particularly impressed by this talk, for whatever reason. I guess my
    reason was I didn’t feel any deep theoretical reason why Joinads might be a particularly
    interesting theoretical construct to study, nor did it seem that that they were
    in any sense minimal. Also, in Haskell, we implement multiplexing by just forking
    off extra green threads, which is a much nicer model, in my opinion.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 无论出于何种原因，我对这次讲座并不特别感兴趣。我想我的理由是我并没有感受到为什么Joinads可能是一个特别有趣的理论构造要研究，也没有看到它们在任何意义上是最小的。此外，在Haskell中，我们通过fork额外的绿色线程来实现复用，这在我看来是一个更好的模型。
- en: Computing with Real Numbers
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 计算实数
- en: Dan Piponi has written on this topic before, but this talk really helped put
    things in perspective for me.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 丹·皮波尼之前已经写过这个主题，但这次讲座确实帮助我从更广阔的视角看待了这些问题。
- en: 'There are many types of numbers for which we can easily compute with: the field
    of two elements (booleans), integers (well, discounting overflow), and rationals
    (pairs of integers). But real numbers pose some difficulties. They are the metric
    closure of rational numbers Q, i.e. everything that can be a limit of a Cauchy
    sequence of Q. This is reminiscent of a decimal expansion.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以轻松地处理许多类型的数字：二元域（布尔值）、整数（当然，不考虑溢出），以及有理数（整数对）。但是实数带来了一些困难。它们是有理数集合Q的度量闭包，即所有可以作为Q的柯西序列极限的东西。这让人想起了十进制展开。
- en: We now want to consider functions over reals. How do we know if something is
    computable? We might try saying it is a relation from strings of digits to strings
    of digits, where any finite prefix of `F(p)` can be uniformly computed from some
    finite prefix of sufficient length of `p`. But this is clearly insufficient for
    something like 0.3333, where we need to read infinitely many digits to see whether
    or not this is truly one third. (I remark that infinity is a bit like oracles
    in Turing Machine land.)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Instead, we say that a sequence of rationals `q_i` (with `i` ranging over naturals)
    represents a real number `x` if `|x - q_i| < 2^-i` for all `i`. (the base doesn’t
    really matter). Let `p(q) = x`, then `f` is computable if there exists an `F`
    such that `p(F(prefix)) = f(p(prefix)`. With this definition, it turns out that
    addition, multiplication, division, trigonometric functions, exponentiation and
    logarithms are computable.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: 'An interesting restriction of function is that of continuity, familiar from
    any treatment in a Calculus textbook: a function `f : R -> R` is continuous if
    for all `x` in the domain of `f`, and for all `ε > 0`, there exists a `δ > 0`
    that for all `y` in the domain of f, `|x - y| < δ` implies `|f(x) - f(y)| < ε`.
    It has been proposed that every computable function is continuous: thus, computability
    stems from our ability to approximate things, which we can’t do for discontinuous
    functions (which side of the discontinuity are we on?) We can further restrict
    functions to `C(R,R)`, which are the set of continuous functions which can also
    be approximated by infinite sequences (e.g. polynomials.)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the monotone intermediate value thoerem, which states that if `f`
    is monotone, [PRE0], there exists some x such that `f(x) = 0`. Can we compute
    this number? Bisection doesn’t work, since determining if a number is less than
    or greater than another is in general incomputable. (The general intermediate
    value theorem is not computable, since we could get infinitely close to the origin
    line.) We can use trisection instead. Compute `f(0.3)` and `f(0.7)`, and concurrently
    perform the following comparisons:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: If `f(0.3) < 0`, the new range is `[0.3, 1]`
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If `f(0.3) > 0`, the new range is `[0, 0.3]`
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If `f(0.7) < 0`, the new range is `[0.7, 1]`
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If `f(0.7) > 0`, the new range is `[0, 0.7]`
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You’ll have to do a little work to get a formal proof of correctness, but it’s
    easy to see why this intuitively might work: comparisons take infinite time only
    if the number is close to the point of comparison, but then our other comparison
    is guaranteed to succeed, since it is some non-infinitesimal distance away. (I
    have a little margin note: can we use this to do cryptography?)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'It turns out there are various schools on the computability of real numbers.
    The perspective I have just described is the Polish School. However, the Russian
    School says that uncomputable points don’t exist: the code fragment is the real
    number. Thus, effective analysis is not classical analysis. There is a correspondence
    between constructive and classical mathematics. Something about Banach spaces
    (linear operator has to be bounded), so differentiation is not computable in general,
    though integration is! (This is quite different from the symbolic evaluation world.)
    For further reading, see *Computable Analysis*, Springer, 2000.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 结果证明实数的可计算性有各种学派。我刚才描述的观点是波兰学派。然而，俄罗斯学派认为不可计算的点不存在：代码片段就是实数。因此，有效分析不是经典分析。构造数学与经典数学之间存在对应关系。关于巴拿赫空间（线性算子必须是有界的），因此一般情况下微分不可计算，尽管积分是可计算的！（这与符号评估世界非常不同。）欲了解更多，请参阅《可计算分析》，Springer，2000。
- en: 'Martin Escardó: Selection Functions Everywhere'
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 马丁·埃斯卡尔多：处处选择函数
- en: 'I didn’t understand this talk. I don’t understand most of Martin’s work, really.
    But I have a bunch of quotes:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我没听懂这个讲座。实际上，我对马丁的大部分工作都不太理解。但我有一堆引用：
- en: “I don’t know why it’s called the continuation monad; there is no control, this
    talk is completely out of control.”
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “我不知道为什么它被称为延续单子；没有控制，这个讲座完全失控了。”
- en: “I’m not going to explain what this means, but I’m going to explain how this
    works.”
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “我不打算解释这意味着什么，但我将解释这是如何运作的。”
- en: “[Incomprehensible statement.] Which is not too deep.”
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “[无法理解的陈述]。这并不太深奥。”
- en: “And the reason is, uh, probably in the next slide.”
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “原因是，嗯，可能在下一张幻灯片里。”
- en: '“Every game is of length 2: you have the first move, and then all the others.”'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “每场比赛都是长度为2的：你有第一步，然后所有其他的。”
- en: “You’ll get to use the monoidal monad structure to calculate these two people.”
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “你将可以使用单调单子结构来计算这两个人。”
- en: 'Selection functions select individuals with the “highest” truth value. Max-value
    theorem, min-value theorem and universal-value theorem (Drinker’s paradox) are
    all uncomputable. Selection functions are a two stage process. `K A -> A` is double
    negation elimination, `J A -> A` is Peirce’s law. Bekic’s lemma gives a fixpoint.
    Bar recursion and do induction on `p` (continuous function) with p as a tree.
    We can calculate the optimal strategy. System T plus an equation for J-shift is
    strongly normalizing. We can encode the axiom of countable choice (but it’s not
    choice anymore!). Dependent choice: (AC classical choice, Tychonoff theory, etc.
    See that paper.) Why is J a monad?'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 选择函数选择具有“最高”真值的个体。最大值定理、最小值定理和全局值定理（饮酒者悖论）都是不可计算的。选择函数是一个两阶段过程。`K A -> A`是双重否定消除，`J
    A -> A`是皮尔斯定律。贝基奇引理给出一个不动点。条形递归和对`p`（连续函数）的归纳（以树形式）进行递归。我们可以计算最优策略。T系统加上J-shift方程是强正则化的。我们可以编码可数选择公理（但这不再是选择了！）。依赖选择：（AC经典选择，Tychonoff理论等。参见那篇文章。）为什么J是一个单子？
- en: 'Sir Roger Penrose: Twistor Theory'
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 罗杰·彭罗斯爵士：纺锤体理论
- en: 'Penrose... doesn’t give very comprehensible talks. Well, he explained the Riemann
    sphere (a stereographic projection) quite well, but then things got very smooshy.
    Some quotes: “And that’s all you have to do in mathematics: imagine it.” “Small
    does not apply to distance.” “So my best way to do that is draw it like a sausage.”
    “I don’t think I should explain this picture.” “First I’ll confuse you more.”
    “It can be done in cricket, and we hope it can be done in Twistor theory too.”
    There was an interesting aside about Cohomology: a precise nonlocal measure about
    the degree of impossibility; I think I perked up when I saw the Escher picture.
    Not even the physicists think Twistor Theory reflects reality. It’s a mathematical
    plaything.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 彭罗斯……的讲话并不是很易懂。嗯，他解释了黎曼球面（一种立体投影）得相当不错，但接下来的事情变得非常模糊。一些引用：“这就是数学中你所必须做的：去想象它。”“小不适用于距离。”“所以我最好的方法是把它画成香肠。”“我不认为我应该解释这幅图。”“首先我会让你更加困惑。”“这可以在板球中完成，我们希望在纺锤体理论中也能做到。”关于余同调有一个有趣的旁白：一个关于不可能性程度的精确的非局部度量；我看到艾舍尔的图片时我觉得很振奋。甚至物理学家们都认为纺锤体理论并不反映现实。这只是一个数学玩物。
- en: On a completely unrelated note, that night RAG blind date was going on.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 没有关联的话题，那晚上RAG的相亲活动正在进行。
- en: 'Conor McBride: The Kleisli Arrows of Outrageous Fortune'
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 康纳·麦克布赖德：命运的Kleisli箭头
- en: '“Consider the following program, which is, alas, Poor!” With a slide of code
    containing variables `b` and `c`: “b or not b, that is the question! ... or to
    take arms against a c of troubles.” “The world’s most successful dependently typed
    language: Haskell.” Wave hello to Simon Peyton-Jones in the room.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: “考虑以下程序，哎呀，可怜！”代码幻灯片包含变量 `b` 和 `c`：“有 b 还是没有 b，这是一个问题！...或者为了抵抗一堆麻烦。”“世界上最成功的依赖类型语言：Haskell。”向房间里的
    Simon Peyton-Jones 挥手。
- en: 'I’ve been meaning to write a blog post about this talk, and maybe still will,
    although the talk is no longer as fresh in my mind. Conor describes the technical
    machinery necessary to simulate dependent types even when you can’t obviously
    push values into the types. Programs should instead be strategy trees, which cover
    all possible responses (even though reality will select one.) We don’t need dependent
    types: we can use parametrized monads to encode the pre and post conditions of
    Hoare logic. (Resulting in a predictable world.) These are the so called “braces
    of upwards mobility” (upwards mobility referring to values becoming types.) This
    talk made me wonder if the Strathclyde Haskell Extension would be a good platform
    for session types, which suffer tremendously from the lack of true dependent types.
    (It also made me wonder about *efficient* type-level computation.)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我一直想写一篇关于这次演讲的博客文章，或许还会写，尽管这次演讲在我脑海中已不再那么新鲜。Conor 描述了模拟依赖类型所需的技术机制，即使不能显然地将值推入类型中。程序应该是策略树，涵盖所有可能的响应（尽管现实会选择其中一种）。我们不需要依赖类型：我们可以使用参数化的单子来编码
    Hoare 逻辑的前后条件。（导致一个可预测的世界。）这些被称为“向上流动的大括号”（向上流动指的是值变成类型）。这次演讲让我想知道 Strathclyde
    Haskell 扩展是否是会话类型的良好平台，这些类型因缺乏真正的依赖类型而受到极大的影响。（它还让我想到了*高效*的类型级计算。）
- en: 'The devil is ∀ (see the horns), e.g. a universal quantifier in the wrong place
    (I thought maybe you could view them as skolem variables). Terms hold evidence
    on types. (Typical Conor to make a joke about that.) Kleisli Arrow is the Hoare
    Triple (think about the programmable semicolon), and with bind you don’t get to
    choose what state you end up in (there’s an existential.) However, we can use
    an alternative bind which forces the demon to give us the value: Atkey parametrized
    monads. We also need to make sure that our naive free monad doesn’t blow up our
    runtime. This is not very coherent, and cleaning up this story was what I needed
    to do before making a real post.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 魔鬼是 ∀（看看那对角）例如，一个错误的全称量词（我以为你可以将它们视为斯克勒姆变量）。术语在类型上持有证据。（典型的 Conor 会开个关于这个的玩笑。）Kleisli
    箭头是 Hoare 三元组（考虑可编程的分号），并且用 bind 不会让您选择结束状态（那里有个存在量）。然而，我们可以使用强制魔鬼给我们值的替代 bind：Atkey
    参数化单子。我们还需要确保我们天真的自由单子不会在运行时出问题。这并不是很一致，整理这个故事是我在发布真正的文章之前需要做的事情。
- en: Conor’s main message was that data are witness to the proofs! “I’m in the witness
    protection program.” If we have some piece of data, we have discharged some proof
    obligations. (But I wonder, what about polymorphism?)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Conor 的主要信息是数据是证明的见证！“我在见证保护计划中。”如果我们有一些数据，我们就履行了一些证明义务。（但我想知道，多态性呢？）
- en: Petri nets for concurrency
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 并发的 Petri 网
- en: We want performance nondeterminism, so we use petrinets to encode the nondeterminism
    contracts, and then we push a flow through the graph to figure out what kind of
    performance we need. Scheduling and placement is easy to handle, because they
    are just modifications on the petri net. But I wasn’t so sure if this approach
    would work, because petri nets can get pretty bit and you may not get the performance
    you need to do interesting analysis.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要性能的非确定性，所以我们使用 Petri 网来编码非确定性契约，然后通过图表来推动流量，以确定我们需要什么样的性能。调度和放置很容易处理，因为它们只是
    Petri 网上的修改。但我不确定这种方法是否有效，因为 Petri 网可能会变得相当复杂，而且您可能无法获得所需的性能以进行有趣的分析。
- en: 'Grant Passmore: Strategy in Computer Algebra'
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Grant Passmore：计算代数中的策略
- en: Automated reasoning problems are undecidable, and user-guided. Computer algebra
    problems are unfeasible, but the algorithms tend to be black box, secret sauce
    solutions (e.g. Mathematica) with all sorts of tirkcs like Groebner Bases, Quantifier
    Elimination, SAT for nonlinear complex arithmetic (Hilbert’s Weak Nullstellensatz)
    and reduction to rewriting.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 自动推理问题是不可判定的，并且是用户引导的。计算代数问题是不可行的，但算法往往是黑盒子、秘密酱的解决方案（例如 Mathematica），具有各种像 Groebner
    基、量词消除、非线性复杂算术的 SAT（希尔伯特的弱零点定理）和简化到重写的技巧。
- en: 'Grant wants to put the choice back in computer algebra. There are many choice
    points: quadratic preprocessing, choice of pairs, growth of basis, forward simplification.
    He gives a comparison of ATP and GB. With LCF, functional parameters are key.
    Bag of tricks is OK, but the proof procedure is a strategy.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 格兰特希望将选择权交还给计算机代数。有许多选择点：二次预处理，成对选择，基础增长，前向简化。他对ATP和GB进行了比较。在LCF中，功能参数是关键。套路可以，但证明过程是一种策略。
- en: What about an algorithm can be changed while preserving correctness?
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 算法中有什么可以改变而保持正确性？
- en: What arbitrary choices are my algorithm making?
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我的算法正在做出什么任意选择？
- en: '(Margin note: can we understand fusion by understanding the mutable state it
    creates?)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: （页边注：我们是否可以通过理解它创建的可变状态来理解融合？）
- en: (Untitled Software Engineering talk)
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: （未命名的软件工程讲座）
- en: 'A persistent problem with formal methods is they operate in a domain of assumptions
    and requirements, and there is no way to tell if these assumptions or requirements
    are right! It’s a rather philosophical question: can we have “recognized assurance
    deficits”: a known unknown? These are potential sources of counter-evidence. What
    are the worst implications of not knowing? What claims have you made? (It would
    be interesting to see what elements of philosophy are relevant here.) Sometimes
    safety arguments are just assertions “because I say so”: there is epistemic uncertainty.
    The talk giver argues we should swap probabilistic integrity arguments with qualitative
    confidence arguments: it’s a question of safety versus confidence. We should explicitly
    acknowledge assurance deficits, and stop taking too much on trust.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 形式方法的一个持久问题是它们在假设和要求的领域中运作，而无法确定这些假设或要求是否正确！这是一个相当哲学的问题：我们是否可以有“已知的认证缺陷”：一个已知的未知？这些是潜在的反证据来源。不知道有什么最坏的影响？你提出了什么主张？（看看哲学的哪些元素在这里是相关的会很有趣。）有时安全论据只是断言“因为我这么说”：这是认识论不确定性。演讲者认为我们应该用定性的信心论据来交换概率完整性论据：这是安全与信心的问题。我们应该明确承认认证缺陷，并停止太过信任。
- en: 'I ask the question: is there incentive for this debate to happen? (Engineers
    want to look good.) Giving it to evaluators is certainly worse, since they are
    not in a proper position to assess the system. He didn’t have an answer, but said,
    “Not doing so is unacceptable.”'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我提出了这样一个问题：是否有动机进行这场辩论？（工程师们想要表现得很好。）把它交给评估者显然更糟，因为他们没有适当的位置来评估系统。他没有回答，但说道，“不这样做是不能接受的。”
- en: I somewhat amusedly note that near the end he pushed some technical software
    for handling this, ostensibly a product of his own research program. I remain
    unsure about a technical solution to this particular problem.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我有点惊讶地注意到，在接近结束时，他推动了一些处理这个问题的技术软件，显然是他自己研究计划的产物。我对解决这个特定问题的技术解决方案仍然不确定。
- en: Approximating Markov Chains
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 近似马尔可夫链
- en: 'Labeled Markov processes encode continuous state spaces, and for the longest
    time, we’ve noted that bisimulation works for discrete state spaces, but not continuous
    ones. We view the final state as a probability distribution, and we press buttons
    on our machine (labels) to change the distribution: each label is a stochastic
    kernel (a generalized binary relation.) Of course, reasoning about continuous
    state spaces is important: they cover things like Brownian motion, performance,
    probabilistic process algebras with recursion, hybrid control systems (flight
    management systems), as well complex discrete phenomena such as population growth
    and stock prices.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 标记马尔可夫过程编码连续状态空间，长期以来，我们注意到双仿真适用于离散状态空间，但不适用于连续状态空间。我们将最终状态视为概率分布，并在我们的机器上按下按钮（标签）以更改分布：每个标签是一个随机核（广义二元关系）。当然，推理关于连续状态空间是重要的：它们涵盖像布朗运动、性能、带递归的概率过程代数、混合控制系统（飞行管理系统）等复杂的离散现象，例如人口增长和股票价格。
- en: 'I didn’t understand most of the technical details, but the main point was that
    co-bisimulation was the correct way to do this: it is only a coincidence that
    bisimulation works for discrete systems. The projective limit is exactly the smallest
    bisimilar process. Also some material on metric spaces. This certainly seems like
    a field where we’re just importing well-known results from esoteric fields of
    mathematics.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我并没有理解大部分技术细节，但主要观点是共仿真是正确的方法：这只是巧合，双仿真适用于离散系统。投影极限恰好是最小的双仿真过程。还有一些关于度量空间的材料。这显然是一个我们仅仅从数学的小众领域导入众所周知结果的领域。
- en: Financial Cryptography
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 金融密码学
- en: Unbeknown to Americans, whose financial system is still stuck on magnetic stripe
    readers, bank cards in Europe have moved on to EMV, in which a mini-processor
    is embedded in your chip, which can do true challenge-response authentication.
    This talk looks at how we might bootstrap a P2P transaction system that bypasses
    banks, using the existing EMV hardware.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: 'How might we do this? We can use a device called the CAP, which has a small
    display that when given a pin gives an authentication code (two factor.) We associate
    transactions with CAP code, so the merchant has agreed to receive money. But you
    still need collaboration from the banks to do this. (This is the SDA method.)
    So we get rid of the bank all-together and use Diffie-Hellman (DDA). The cards
    are simply convenient existing infrastructure to get name authentication. There
    are some technical details, since we can only sign 32-bits at a time, and we usually
    need a bit more than that. (Margin note: “the threat model was privacy advocates.”)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: 'The talk was short, so afterwards we had a discussion why this scheme wouldn’t
    actually work. My objection was that it banks would simply make it illegal to
    use their bank cards in this way. There was a discussion whether or not they could
    technically enforce this: Marcus Kuhn used passports as an example, where you
    can’t read passports if you don’t have Internet access, since the passport itself
    has an embedded monotonic clock that refuses to give information to the scanner
    if the scanner software is not up to date. How does the passport know what the
    latest version is? Its clock gets updated when it sees a new scanner.) Passport
    security technology is pretty interesting! They invented a block cipher over the
    alphabet for this purpose.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Verifying the validity of QBF
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'SAT is exponential, and when you add quantifiers to the mix, you get “another”
    exponential, but this time in the certificate. How do you verify that a universally
    quantified formula is in fact true? The certificate in this case is extension
    variables and witnesses: we provide concrete implementations for all existentially
    quantified variables, which can then be substituted in to give a traditional SAT
    problem. So once we have a certificate, what was a PSPACE problem is now “just”
    a NP problem.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '(Technical note: We want to eliminate hypotheses in topological order (using
    Refl, Gen and Exists). Get the quantifiers in the right order, witnesses depend
    on existential variables, extension variables depend on it.)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: The talk described how he hooked into the internals of Squolem to get actually
    get these certificates. It turned out that de Bruijn was faster than name carrying
    (which is different from typical QBF invalidity checking.) He even found a bug
    in the non-LCF style validator (due to a lack of a cyclic check.)
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'Applications: model checking (bounded and unbounded), PSPACE problems. (Margin
    note: "comparison of BDD and QBF?")'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: This concludes notebook two.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
