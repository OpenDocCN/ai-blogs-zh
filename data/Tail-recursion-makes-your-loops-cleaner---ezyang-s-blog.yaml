- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:46'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:46'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Tail recursion makes your loops cleaner : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 尾递归使您的循环更清晰：ezyang 的博客
- en: 来源：[http://blog.ezyang.com/2011/05/tail-recursion-makes-your-loops-cleaner/](http://blog.ezyang.com/2011/05/tail-recursion-makes-your-loops-cleaner/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2011/05/tail-recursion-makes-your-loops-cleaner/](http://blog.ezyang.com/2011/05/tail-recursion-makes-your-loops-cleaner/)
- en: Tail recursion makes your loops cleaner
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尾递归使您的循环更清晰
- en: Recursion is one of those things that functional programming languages shine
    at—but it seems a bit disappointing that in many cases, you have to convert your
    beautiful recursive function back into iterative form. After all, iteration is
    what imperative languages do best, right?
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 递归是函数式编程语言擅长的事情之一，但让人有点失望的是，在许多情况下，您必须将美丽的递归函数转换回迭代形式。毕竟，迭代是命令式语言最擅长的，对吧？
- en: 'Actually, explicitly tail-recursive functions in functional programming languages
    can be fairly beautiful: in fact, in the cases of complicated loops, they can
    be even prettier than their imperative counterparts. Take this midpoint line-drawing
    algorithm as an example:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，在函数式编程语言中，显式尾递归函数可以非常美丽：事实上，在复杂循环的情况下，它们甚至可以比它们的命令式对应物更漂亮。以这个中点画线算法为例：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'There are three loop variables: `x`, `y` and `k`, and depending on various
    conditions, some of them get updated in different ways. `x` is a bog-standard
    loop variable; ye old C-style `for` loop could handle it just fine. But `y` and
    `k` are updated differently depending on some loop conditions. But since they’re
    parameters to the `go` helper function, it’s always clear what the frequently
    changing variables are. You lose that nice structure in the imperative translation:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 有三个循环变量：`x`、`y` 和 `k`，根据不同的条件，其中一些变量以不同的方式更新。`x` 是一个标准的循环变量；老式的 C 风格的 `for`
    循环可以很好地处理它。但是 `y` 和 `k` 根据一些循环条件以不同的方式更新。但由于它们是 `go` 辅助函数的参数，总是清楚地知道哪些经常变化的变量。在命令式翻译中，您会失去这种良好的结构：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: I’ve also managed to introduce a bug in the process...
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这个过程中还设法引入了一个错误...
