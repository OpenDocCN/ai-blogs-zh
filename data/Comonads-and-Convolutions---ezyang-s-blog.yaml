- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:18:26'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:18:26'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Comonads and Convolutions : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Comonads and Convolutions : ezyang’s blog'
- en: 来源：[http://blog.ezyang.com/2010/02/comonads-and-convolutions/](http://blog.ezyang.com/2010/02/comonads-and-convolutions/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/02/comonads-and-convolutions/](http://blog.ezyang.com/2010/02/comonads-and-convolutions/)
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: That scary `Control.Comonad` import from `category-extras` is going to be the
    subject of today's post. We're going to look at one possible implementation of
    comonads for non-empty lists that model causal time-invariant systems, systems
    whose outputs depend only on inputs that are in the past. We will see that computation
    in these systems follows a comonadic structure and that one instance of this structure
    strongly enforces causality and weakly enforces time-invariance.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 `category-extras` 的那个可怕的 `Control.Comonad` 导入将成为今天文章的主题。我们将看看一个可能的非空列表的余单子实现，它模拟因果时不变系统，这些系统的输出仅依赖于过去的输入。我们将看到这些系统中的计算遵循余单子结构，并且该结构的一个实例强烈强制执行因果性和弱化时不变性。
- en: Our causal lists are simply a `newtype` of list with the added restriction that
    they are non-empty; `causal` is a "smart constructor" that enforces this restriction.
    We use `GeneralizedNewtypeDeriving` to get the `Functor` instance for free.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的因果列表简单来说就是一个带有额外约束的 `newtype` 列表，即它们不为空；`causal` 是一个“智能构造器”，用来强制执行这个约束。我们使用
    `GeneralizedNewtypeDeriving` 来自动获得 `Functor` 实例。
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Background.* (If you''re already familiar with signal processing, feel free
    to skip this section.) One such system models point-to-point communication of
    voltage samples across an imperfect wire channel. In an ideal world, we would
    very much like to be able to pretend that any voltage I put into this channel
    would instantly perfectly transmit this voltage to the other end of the channel.
    In practice, we''ll see any number of imperfections, including time to rise and
    fall, a [delay](http://en.wikipedia.org/wiki/Propagation_delay), [ringing](http://en.wikipedia.org/wiki/Ringing_(signal))
    and [noise](http://en.wikipedia.org/wiki/Noise). Noise is a party pooper, so we''re
    going to ignore it for the purposes of this post.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*背景.*（如果您已经熟悉信号处理，请随意跳过此部分。）这样的系统模拟了跨不完美电线通道的电压样本的点对点通信。在理想世界中，我们非常希望能够假装我将任何电压输入到这个通道中，它将立即完美地将这个电压传输到通道的另一端。实际上，我们会看到各种不完美，包括上升和下降的时间，延迟，振铃和噪声。噪声是个扫兴的东西，所以在本文中我们将忽略它。'
- en: 'To a first approximation, we can impose the following important conditions
    on our system:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 初步的近似条件可以对我们的系统施加以下重要的条件：
- en: '*Causality.* Our wire can''t peek into the future and transmit some voltage
    before it has even gotten it.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*因果性.* 我们的电线不能窥视未来并在甚至获得电压之前传输一些电压。'
- en: '*Time-invariance.* Any signal will get the same response whether or not it
    gets sent now or later.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*时不变性.* 任何信号，无论现在发送还是延后发送，都会得到相同的响应。'
- en: '*Linearity.* A simple and useful approximation for wires, which states this
    mathematical property: if an input `x1` results in an output `y1`, and an input
    `x2` results in an output `y2`, then the input `Ax1 + Bx2` results in the output
    `Ay1 + By2`. This also means we get *superposition*, which is an important technique
    that we''ll use soon.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*线性.* 对于电线来说是一个简单且有用的近似，它陈述了这个数学属性：如果输入 `x1` 得到输出 `y1`，输入 `x2` 得到输出 `y2`，那么输入
    `Ax1 + Bx2` 将得到输出 `Ay1 + By2`。这也意味着我们得到了*叠加*，这是一个我们很快会使用的重要技术。'
- en: When you see a linear time-invariant system, it means that we get to use a favorite
    mathematical tool, the convolution.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当你看到一个线性时不变系统时，这意味着我们可以使用一个喜欢的数学工具，即卷积。
- en: '*Discrete convolutions.* The overall structure of the discretized computation
    that a channel performs is `[Voltage] -> [Voltage]`; that is, we put in a sequence
    of input voltage samples, and get out another sequence of output voltage samples.
    On the other hand, the discrete convolution is the function calculated by (with
    variables suggestively named):'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*离散卷积.* 通道执行的离散化计算的总体结构是 `[Voltage] -> [Voltage]`；也就是说，我们输入一系列输入电压样本，得到另一系列输出电压样本。另一方面，离散卷积是由以下函数计算的（变量名称具有启发性）：'
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: It's not quite obvious why the convolution is the mathematical abstraction we're
    looking for here, so we'll sketch a brief derivation.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这里并不完全明显为什么卷积是我们在这里寻找的数学抽象，因此我们将简要推导一下。
- en: 'One special case of our computation is when the input corresponds to `[1, 0,
    0, 0 ...]`, called the *unit sample*. In fact, due to linearity and time-invariance,
    the output that our system gives when posed with the unit sample, the unit sample
    response, *precisely* specifies the behavior of a system for all inputs: any possible
    input sequence could be composed of any number of delayed and scaled unit samples,
    and linearity says we can sum all of the results together to get a result.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们计算的一个特殊情况是当输入对应于`[1, 0, 0, 0 ...]`，称为*单位样本*。实际上，由于线性性和时不变性，当我们的系统给定单位样本时，单位样本响应*精确地*指定了系统对所有输入的行为：任何可能的输入序列都可以由延迟和缩放的单位样本组成，并且线性性质告诉我们可以将所有结果加在一起得到一个结果。
- en: 'A list is actually a function `ℕ → a`, and we can extend the domain to be over
    integers if we propose the convention `f[n] = 0` for `n < 0`. Suppose that `f[n]`
    represents our input samples varying over time, `δ[n]` represents a unit sample
    (`δ[0] = 1`, `δ[n] = 0` for all other `n`; you''ll commonly see `δ[n-t]`, which
    is a unit sample at time `t`), and `u[n]` represents our unit sample response.
    Then, we decompose `f[n]` into a series of unit samples:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，一个列表实际上是一个函数`ℕ → a`，如果我们假设约定`f[n] = 0`对于`n < 0`。假设`f[n]`代表我们随时间变化的输入样本，`δ[n]`代表一个单位样本（`δ[0]
    = 1`，对所有其他`n`，`δ[n] = 0`；你通常会看到`δ[n-t]`，这是时间`t`的单位样本），而`u[n]`代表我们的单位样本响应。然后，我们将`f[n]`分解为一系列单位样本：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'and the use linearity to retrieve our response `g[n]`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用线性性质来检索我们的响应`g[n]`：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: which looks just like the discrete convolution, just without the -∞ bound. Remember
    that we defined `f[m] = 0` for `m < 0`, so the two are actually equivalent.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来就像离散卷积，只是没有-∞的边界。请记住，我们定义了对于`m < 0`，`f[m] = 0`，因此这两者实际上是等价的。
- en: 'I''d like to linger on that final mathematical definition for a moment, before
    writing out the equivalent Haskell. We originally stated that the input-response
    computation had the type `[Voltage] -> [Voltage]`; however, in our math, we''ve
    actually defined a relation `[Voltage] -> Voltage`, a channel specific function
    that takes all of the inputs up to time `n`, i.e. `f[0]..f[n]`, and returns a
    single output `g[n]`. I''ve written the following definition in a suggestive curried
    form to reflect this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在写出等价的Haskell之前，我想再谈一下最后的数学定义。我们最初声明输入-响应计算的类型是`[Voltage] -> [Voltage]`；然而，在我们的数学中，我们实际上定义了一个关系`[Voltage]
    -> Voltage`，一个特定通道的函数，它接受直到时间`n`的所有输入，即`f[0]..f[n]`，并返回单个输出`g[n]`。我用一种具有暗示性的柯里化形式写了以下定义，以反映这一点：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The unit sample response may be a finite or infinite list, for reasons of efficiency
    a finite list is recommended:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 单位样本响应可以是有限或无限列表，出于效率考虑，建议使用有限列表：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Comonads.* By now, it should be clear where we''ve been working towards: we
    have `ltiChannel usr :: Causal Voltage -> Voltage` and we want: `Causal Voltage
    -> Causal Voltage`. This is precisely the form of computation that the comonad
    induces! For your convenience, here is the definition of the `Copointed` and `Comonad`
    type classes:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*共函子*。现在，我们应该清楚我们一直在努力达成的目标：我们有`ltiChannel usr :: Causal Voltage -> Voltage`，而我们想要：`Causal
    Voltage -> Causal Voltage`。这正是共函子引起的计算形式！为了方便起见，这里是`Copointed`和`Comonad`类型类的定义：'
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `Copointed` instance is straight-forward, but demonstrates why the `Causal`
    must contain a *non-empty* list:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`Copointed`实例非常直接，但说明了为什么`Causal`必须包含*非空*列表：'
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `Comonad` instance can be defined using either `duplicate` or `extend`;
    both have default implementations defined in terms of each other. Deriving these
    default implementations is left as an exercise to the reader; we''ll define both
    here:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`Comonad`实例可以使用`duplicate`或`extend`定义；两者在彼此的默认实现中已定义。推导这些默认实现留给读者作为练习；我们将在这里定义两者：'
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The intent of the code is somewhat obscured by the unwrapping and wrapping
    of `Causal`; for a pure list the instance would look like this:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的意图有些被`Causal`的解包和封装所遮蔽；对于一个纯列表，实例看起来像这样：
- en: '[PRE10]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The function `duplicate` really gets to the heart of what this comonad instance
    does: we take our input list and transform it into a list of histories, each one
    one step further than the last. The `tail` tags along to drop the first value
    of `inits` which is an empty list. `duplicate` builds up `w (w a)`, and then the
    user-supplied function tears it back down to `w b` (if you think of monads, the
    lifted user function builds up `m (m b)`, and then `join` tears it back down to
    `m b`.)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `duplicate` 真正深入了解到这个共单子实例所做的事情：我们将输入列表转换为历史记录列表，每一步都比上一步进一步。`tail` 跟随以丢弃
    `inits` 的第一个值，这是一个空列表。`duplicate` 构建起 `w (w a)`，然后用户提供的函数将其拆解为 `w b`（如果你考虑到单子，提升的用户函数会构建起
    `m (m b)`，然后 `join` 将其拆解为 `m b`。）
- en: 'One quick test to make sure it works:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一个快速测试来确保它工作：
- en: '[PRE11]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'and sure enough, the `result` is:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 而事实上，`result` 是：
- en: '[PRE12]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`=>>` is a flipped `extend`, and the comonadic equivalent of the monadic `>>=`.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`=>>` 是一个翻转的 `extend`，是单子 `>>=` 的共单子等效物。'
- en: '*Enforced invariants.* Structuring our computation in this form (as opposed
    to writing the darn convolution out explicitly) gives us some interesting enforced
    invariants in our code. Our channels need not be linear; I could have squared
    all of the inputs before convolving them with the unit sample response, and that
    certainly would not be linear. However, any channel we write *must* be causal
    and and will usually be time-invariant: it must be causal because we never pass
    any values from the future to the user function, and it is weakly time invariant
    because we don''t explicitly let the user know how far along the are the input
    stream they are. In practice with our implementation, they could divine this information
    using `length`; we could get stronger guarantees employing a combinator that reverses
    the list and then appends `repeat 0`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*强制不变性。* 我们以这种形式结构化我们的计算（而不是明确地写出该死的卷积）在我们的代码中产生了一些有趣的强制不变性。我们的通道不必是线性的；我可以在与单位样本响应卷积之前对所有输入进行平方处理，这显然不是线性的。然而，我们写的任何通道
    *必须* 是因果的，并且通常是时不变的：它必须是因果的，因为我们从未将任何未来的值传递给用户函数，并且它是弱时不变的，因为我们不显式地让用户知道输入流的进度。在我们的实现中，他们可以通过
    `length` 推测这些信息；我们可以使用一个将列表反转并附加 `repeat 0` 的组合器获得更强的保证：'
- en: '[PRE13]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`u` in this case must be finite, and if it is infinite can be truncated at
    some point to specify how precise our computation should be.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`u` 必须是有限的，如果它是无限的，可以在某个点截断它，以指定我们的计算应该多精确。
- en: '*Open question.* The unit sample response has been expressed in our sample
    code as `[Voltage]`, but it really is `Causal Voltage`. Unfortunately, the comonad
    doesn''t seem to specify mechanisms for combining comonadic values the same way
    the list monad automatically combines the results of computations for each of
    the values of a list. I''m kind of curious how something like that might work.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*未解之谜。* 单位样本响应在我们的示例代码中被表达为 `[Voltage]`，但它实际上是 `因果电压`。不幸的是，共单子似乎没有指定结合共单子值的机制，就像列表单子自动结合列表每个值的计算结果一样。我有点好奇类似于这样的东西可能如何工作。'
