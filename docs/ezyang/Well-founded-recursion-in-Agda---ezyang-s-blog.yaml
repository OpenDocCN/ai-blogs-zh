- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:18:16'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:18:16'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Well-founded recursion in Agda : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Agda 中的良好递归：ezyang’s 博客
- en: 来源：[http://blog.ezyang.com/2010/06/well-founded-recursion-in-agda/](http://blog.ezyang.com/2010/06/well-founded-recursion-in-agda/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/06/well-founded-recursion-in-agda/](http://blog.ezyang.com/2010/06/well-founded-recursion-in-agda/)
- en: Last Tuesday, Eric Mertens gave the Galois tech talk [Introducing Well-Founded
    Recursion](http://www.galois.com/blog/2010/06/11/tech-talk-introducing-well-founded-recursion/).
    I have to admit, most of this went over my head the first time I heard it. Here
    are some notes that I ended up writing for myself as I stepped through the code
    again. I suggest reading the [slides](http://code.galois.com/talk/2010/10-06-mertens.pdf)
    first to get a feel for the presentation. These notes are oriented towards a Haskell
    programmer who feels comfortable with the type system, but not Curry-Howard comfortable
    with the type system.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 上周二，Eric Mertens 在 Galois 的技术讲座上发表了 [Introducing Well-Founded Recursion](http://www.galois.com/blog/2010/06/11/tech-talk-introducing-well-founded-recursion/)。我得承认，第一次听到时大部分内容都超出了我的理解范围。以下是我重新阅读代码时写下的一些笔记。建议先阅读
    [slides](http://code.galois.com/talk/2010/10-06-mertens.pdf) 以对演示有所了解。这些笔记是针对一个对类型系统感到舒适但不完全理解柯里-霍华德同构的
    Haskell 程序员。
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Agda is a proof assistant based on intuitionistic type theory; that is, the
    Curry-Howard isomorphism. The *Curry-Howard isomorphism* states that things that
    look like types and data can also be treated as propositions and proofs, and one
    of the keys to understanding well-founded recursion in Agda is to freely interchange
    between the two, because we will use the type system as a way of making propositions
    about our code, which Agda will use when checking it. We’ll try to present both
    perspectives of the types and propositions.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Agda 是基于直觉主义类型论的证明辅助工具；也就是说，柯里-霍华德同构定理。*柯里-霍华德同构*表明看起来像类型和数据的东西也可以视为命题和证明，并且在理解
    Agda 中的良好递归的关键之一是自由地在这两者之间交换，因为我们将使用类型系统来对我们的代码进行命题，而 Agda 在检查时会使用这些命题。我们将尝试呈现类型和命题的两种视角。
- en: 'Types : Data :: Propositions : Proofs'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 'Types : Data :: Propositions : Proofs'
- en: 'Agda needs to be convinced that your proof works: in particular, Agda wants
    to know if you''ve covered all the cases (exhaustive pattern matching, totality)
    and if you aren''t going to procrastinate on the answer (termination). Agda is
    very clever when it comes to case checking: if it knows that a case couldn''t
    be fulfilled in practice, because its type represents a falsehood, it will not
    ask you to fill it out. However, the termination checker frequently needs help,
    which is where well-founded recursion comes in.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Agda 需要确信你的证明是有效的：特别是，Agda 想知道你是否涵盖了所有情况（穷举模式匹配，完全性），并且你是否会推迟回答（终止性）。在情况检查方面，Agda
    非常聪明：如果它知道某种情况在实践中无法实现，因为其类型代表一个虚假，它不会要求你填写该情况。然而，在终止性检查方面经常需要帮助，这就是良好递归的用武之地。
- en: '*Warmups.*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*热身。*'
- en: 'Our first data type today is top: the type inhabited by precisely one value,
    unit. This is () in Haskell. Data inhabits a type the way a proof exists for a
    proposition; you can think of a type as a “house” in which there reside any number
    of inhabitants, the data types. Frequently infinitely many. You’ll see Set pop
    a lot: rigorously, it''s the type of “small” types, with Set₁ being larger, Set₂
    larger still, and so forth...'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 今天我们的第一个数据类型是 top：仅有一个值 unit 的类型，即 () 在 Haskell 中。数据居住在类型中，就像命题存在于命题中的证明一样；你可以把类型想象成“房子”，里面居住着任意数量的居民，即数据类型。经常会看到
    Set 弹出：严格来说，它是“小”类型的类型，Set₁ 更大，Set₂ 更大，依此类推……
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Bottom is the type inhabited by nothing at all. If no proof exists for the proposition,
    it is false! In the same way, the top proposition is vacuously true, since we
    said so! At the value level, this is undefined or error “foobar” in Haskell; at
    the type level, it's be called Void, though no one actually uses that in real
    code. In Agda, these are one and the same.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Bottom 是一种根本没有任何东西的类型。如果没有命题的证明存在，那么它是假的！同样，在值级别上，这是 Haskell 中的未定义或错误“foobar”；在类型级别上，它被称为
    Void，尽管在实际代码中没有人真正使用它。在 Agda 中，它们是同一种东西。
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We pulled in natural numbers from Data.Nat, but here''s what a minimal definition
    would look like:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从 Data.Nat 中引入了自然数，但这里是最小定义的样子：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It is worth dwelling that Agda numeric constants such as 0 or 2 are syntax sugar
    for zero and suc (suc zero). They also may show up in types, since Agda is dependently
    typed. (In Haskell, you’d have to push the definition of natural numbers into
    the type system; here we can write a normal data definition and then lift them
    up automatically. [Power to the working class!](http://strictlypositive.org/winging-jpgs/))
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，Agda 中的数值常量如 0 或 2 是零和 suc (suc zero) 的语法糖。它们也可能出现在类型中，因为 Agda 是依赖类型的。
    （在 Haskell 中，你必须将自然数的定义推入类型系统；在这里，我们可以写一个正常的数据定义，然后自动提升它们。[力量给工人阶级！](http://strictlypositive.org/winging-jpgs/)）
- en: 'This function does something very strange:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数做了一些非常奇怪的事情：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In fact, it is equivalent to this expanded version:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，它等价于这个扩展版本：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: So the resulting type is not A → A → Set, but rather, it is something *whose*
    type is A, something else *whose* type is A, and as a result something whose type
    is Set. In Haskell terms, this is not a type function of kind `* → *`; this is
    more like an illegal `* -> (a -> a -> *)`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，结果类型不是 A → A → Set，而是某些 *其* 类型为 A 的东西，另一些 *其* 类型也是 A 的东西，结果是某些其类型为 Set 的东西。在
    Haskell 的术语中，这不是类型函数的类型 `* → *`；这更像是一个非法的 `* -> (a -> a -> *)`。
- en: 'Here is an example of a simple relation: less-than for natural numbers.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个简单关系的例子：自然数的小于关系。
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Not so simple Agda syntax:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Agda 语法并不那么简单：
- en: 'The (m : ℕ) indicates that _<_ is parametrized by m, making m, a value of type
    ℕ, available throughout our data constructors. Parametrization means it is also
    required to be the first argument of _<_; at this point, you should check all
    of the type signatures of the constructors and see that they really are of form
    m<_'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '(m : ℕ) 表示 _<_ 是由 m 参数化的，使得 m，一个类型为 ℕ 的值，在我们的数据构造函数中可用。参数化意味着它也是 _<_ 的第一个参数；此时，您应该检查所有构造函数的类型签名，确保它们确实是形式为
    m<_ 的。'
- en: 'The {n : ℕ} indicates an “implicit” parameter, which means when we go to invoke
    <-step, we don''t need to pass it; Agda will automatically figure it out from
    a later argument, in this case, m < n.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '{n : ℕ} 表示一个“隐含”参数，这意味着当我们调用 <-step 时，我们不需要传递它；Agda 将自动从后面的参数中找到它，在这种情况下是 m
    < n。'
- en: 'Remember that “for all x : A, y : B”, is the same as providing a total function
    f(x : A) : B. So there''s a convenient shorthand ∀ x → which is equivalent to
    (x : _) → (the underscore means any type is ok.)'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '记住，“对于所有 x : A，y : B”，等同于提供一个全函数 f(x : A) : B。因此有一个便捷的缩写 ∀ x →，等同于 (x : _)
    →（下划线表示任何类型都可以）。'
- en: 'With the syntax out of the way, the mathematical intent of this expression
    should be clear: for any number, we automatically get a proof m<m+1; and with
    m<n → m<n+1, we can inductively get the rest of the proofs. If you squint, you
    can also see what is meant in terms of data: <-base is a nullary constructor,
    whereas <-step is a recursive constructor.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 语法已经解释清楚了，这个表达式的数学意图应该是清楚的：对于任意的数，我们自动得到证明 m<m+1；并且有了 m<n → m<n+1，我们可以归纳地得到其余的证明。如果你眯起眼睛看，你也可以理解数据的含义：<-base
    是一个零元构造子，而 <-step 是一个递归构造子。
- en: 'Let''s prove that 3 < 5\. We start off with <-base : 3 < 4 (how did we know
    we should start there and not with 4 < 5? Notice that m, our parameter, is 3:
    this is a hint that all of our types will be parametrized by 3.) Apply step once:
    3 < suc 4 = 3 < 5, QED.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们证明 3 < 5。我们从 <-base 开始：3 < 4（我们怎么知道我们应该从这里开始，而不是从 4 < 5 开始？注意到 m，我们的参数，是
    3：这是一个提示，我们所有的类型都将被参数化为 3。）应用一次 step：3 < suc 4 = 3 < 5，证毕。
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Recall that true propositions are inhabited by data types, whereas false propositions
    are not. How can we invert them? In logic, we could say, “Suppose that the proposition
    was the case; derive a contradiction.” In types, we use the empty function: the
    function that has no domain, and thus while existing happily, can’t take any inputs.
    A function has no domain only if it’s input type is not inhabited, so the only
    way we can avoid having to give a contradiction is to... not let them ask the
    question in the first place!'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，真命题由数据类型居住，而假命题则不然。我们如何反转它们呢？在逻辑中，我们可以说，“假设命题成立；推导出矛盾。”在类型理论中，我们使用空函数：这是一个没有定义域的函数，因此虽然存在，却不能接受任何输入。一个函数只有在其输入类型不居住时才没有定义域，所以我们能够避免给出矛盾的唯一方法是……一开始就不让它们提出这个问题！
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '() denotes falsity, in this case () : 5 < 0, which clearly can never be true,
    since <-base doesn’t pattern match against it (suc m != 0). A point worth mentioning
    is that Agda requires your programs to be complete, but doesn''t ask you to pattern
    match against absurdities.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: （）表示假，比如（）：5 < 0，这显然永远不可能成立，因为<-base不匹配它（suc m != 0）。值得一提的是，Agda要求你的程序是完备的，但不要求你对荒谬情况进行模式匹配。
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Well-foundedness.*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*良好基础性。*'
- en: We introduce a little Agda notation; modules let us parametrize over some variable
    over an extended block then just the constructors of a ‘data’ declaration. Members
    of a module can be accessed ala WF.Well-founded A (rest of the arguments). This
    is quite convenient and idiomatic, though not strictly necessary; we could have
    just parametrized all of the members accordingly. We also happen to be parametrizing
    over a type.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们引入一些Agda符号；模块让我们能够在扩展块上对某个变量进行参数化，然后只需‘data’声明的构造函数。模块的成员可以像WF.Well-founded
    A（其余参数）那样访问。这非常方便和惯用，虽然不是绝对必要；我们也可以只根据成员参数化。我们还碰巧在一个类型上进行参数化。
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Logically, what it means for an element to be accessible is that for all y such
    that y < x, y is accessible. From a data and logic view, it states if you want
    me to give you Acc x, the data/proof you want, you'll have to give me a proof
    that for all y, if you give me a proof that y < x, I can determine Acc y. Now
    that we're trying to prove properties about our types and functions, treating
    our data types as strictly data is making less and less sense.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 从逻辑上讲，一个元素被认为是可访问的意思是对于所有y，如y < x，y是可访问的。从数据和逻辑的角度看，它陈述如果你想让我给你Acc x，你想要的数据/证明，你必须给我一个证明，对于所有y，如果你给我一个证明y
    < x，我可以确定Acc y。现在我们正试图证明关于我们类型和函数的属性，严格将我们的数据类型视为纯粹数据的做法变得越来越不合理。
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The entire type A is well-founded if all elements in it are accessible. Alternatively,
    the entire type A is well-founded if, given an element in it, I can produce an
    accessibility proof for that element. Note that its type is Set; this a type,
    the proposition I want to prove!
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它内部的所有元素都是可访问的，整个类型A就是良好基础的。或者，如果给定它内部的一个元素，我能为该元素产生一个可访问性证明，整个类型A也是良好基础的。请注意，它的类型是Set；这是我想要证明的命题！
- en: '[PRE12]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Proof for well-foundedness on naturals related by less-than.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 关于自然数的良好基础性证明。
- en: '[PRE13]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Base case, (e.g. x=5, y=4). This, conveniently enough, triggers the well-founded
    structural recursion on ℕ by checking if y is well-founded now.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 基本情况，（例如 x=5，y=4）。方便的是，这触发了对ℕ上的良好基于结构的递归，通过检查现在是否良好基于y。
- en: '[PRE14]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The structural recursion here is on _<_; we are peeling back the layers of <-step
    until y<x = <-base, as might be the case for 3<4 (but not 3<6). We're essentially
    appealing to a weaker proof that is still sufficient to prove what we're interested
    in. Notice that we are also recursing on x; actually, whatever we know about x,
    we knew from y<x (less information content!), so we indicate that with a dot.
    Eventually, x will be small enough that y is not much smaller than x (<-base).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的结构递归是在_<_上进行的；我们在剥离<-step的层级，直到y<x = <-base，就像3<4的情况一样（但不是3<6）。我们基本上是在诉诸一个较弱的证明，它仍然足以证明我们感兴趣的内容。注意，我们也在x上递归；实际上，无论我们了解x的多少，我们都是从y<x中了解的（信息内容较少！），所以我们用一个点来指示这一点。最终，x会足够小，以至于y不会比x小得多（<-base）。
- en: 'Where do we deal with zero? Consider aux zero : ∀ y -> y < zero → WF.Acc _<_
    y. This is the empty function, since y < zero = ⊥ (no ℕ is less than zero!) In
    fact, this is how we get away with not writing cases for yx (the upper triangle):
    it''s equivalent to y≮x which are all bottom, and give us empty functions for
    free.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在哪里处理零？考虑aux zero：∀ y -> y < zero → WF.Acc _<_ y。这是一个空函数，因为y < zero = ⊥（没有自然数小于零！）事实上，这就是我们摆脱不编写yx（上三角形）情况的方式：它等同于y≮x，这些都是底部，免费提供给我们空函数。
- en: In fact, there is a double-structural recursion going on here, one x, and one
    on y<x. The structural recursion on x is on just aux, but once we conclude <-base,
    we do a different structural recursion on y with <-ℕ-wf. This fills out the bottom
    right triangle on the xy-plane split by y=x-1; the upper left triangle is not
    interesting, since it's just a barren wasteland of bottom.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，在这里有一个双结构递归，一个是x，另一个是y<x。对x的结构递归只是在aux上，但一旦我们得出<-base，我们就对y进行不同的结构递归，使用<-ℕ-wf。这填补了由y=x-1分割的xy平面的右下三角形；上左三角形不太有趣，因为它只是废土的荒原。
- en: 'Standard mathematical trick: if you can reduce your problem into another that
    you''ve already solved, you solved your problem!'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 标准数学技巧：如果你能将问题简化为你已经解决过的另一个问题，你就解决了你的问题！
- en: '[PRE15]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The types have to look right, so we unwrap our old proof g and wrap it into
    a new lambda, pushing the reduction via f into our proof (i.e. WF.acc data constructor).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 类型必须正确，因此我们将旧证明g解包并包装成一个新的lambda，通过f推动到我们的证明中（即WF.acc数据构造器）。
- en: '[PRE16]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Here, we finally use our machinery to prove that lists, compared with their
    lengths, are well-founded.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们最终使用我们的机制证明列表与它们的长度相比是良基的。
- en: '[PRE17]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: A little bit of scaffolding code that does not actually “change” the proof,
    but changes the propositions. We’ll need this for the PartitionLemma.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一点点支架代码实际上并没有“改变”证明，而是改变了命题。我们需要这个分区引理。
- en: '[PRE18]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Show that partitioning a list doesn't increase its size.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 显示分区列表不会增加其大小。
- en: '[PRE19]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: For all predicates and lists, each partition's length is less than or equal
    to the original length of the list. proj₁ and proj₂ are Haskell fst and snd.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有谓词和列表，每个分区的长度都小于或等于列表的原始长度。proj₁和proj₂是Haskell中的fst和snd。
- en: '[PRE20]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Though we've expressed our proposition in terms of ≼, we still use the original
    < constructor. <-base actually means equality, in this context!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们用≼表达了我们的命题，但我们仍然使用原始的<构造器。<-base实际上意味着在这个上下文中是相等的！
- en: '[PRE21]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: And finally, Quicksort.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，快速排序。
- en: '[PRE22]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Open the presents (proofs).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 打开礼物（证明）。
- en: '[PRE23]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'From the partition lemma, we get small ≼ xs and big ≼ xs. By making length
    well-founded, we are now able to “glue” together the layer of indirection: x ∷
    xs originally was strictly smallers and structurally recursive, and the partition
    lemma lets us say to the termination checker that small, big and xs are essentially
    the same.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 根据分区引理，我们得到了小于或等于xs和大于或等于xs的小结。通过使长度良基化，我们现在能够“粘合”间接性的层：x ∷ xs最初严格较小且结构递归，而分区引理让我们能够告诉终止检查器小、大和xs本质上是相同的。
- en: '[PRE24]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
