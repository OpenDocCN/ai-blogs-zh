- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:18:11'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:18:11'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'What high school Algebra quizzes and NP-complete problems have in common :
    ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**高中代数测验和NP完全问题的共同点**：ezyang''s博客'
- en: 来源：[http://blog.ezyang.com/2010/08/what-high-school-algebra-quizzes-and-np-complete-problems-have-in-common/](http://blog.ezyang.com/2010/08/what-high-school-algebra-quizzes-and-np-complete-problems-have-in-common/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/08/what-high-school-algebra-quizzes-and-np-complete-problems-have-in-common/](http://blog.ezyang.com/2010/08/what-high-school-algebra-quizzes-and-np-complete-problems-have-in-common/)
- en: '*What I did for my summer internship at Galois*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*我在Galois暑期实习中的经历*'
- en: '*World of algebra quizzes.* As a high schooler, I was using concepts from computer
    science long before I even knew what computer science was. I can recall taking
    a math quiz—calculators banned—facing a difficult task: the multiplication of
    large numbers. I was (and still am) very sloppy when it came to pencil-and-paper
    arithmetic—if I didn’t check my answers, I would invariably lose points because
    of “stupid mistakes.” Fortunately, I knew the following trick: if I summed together
    the digits of my factors (re-summing if the result was ten or more), the product
    of these two numbers should match the sum of the digits of the result. If not,
    I knew I had the wrong answer. It wasn’t until much later that I discovered that
    this was a very rudimentary form of the checksum.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*代数测验的世界*。作为一个高中生，我早在了解计算机科学之前就在使用计算机科学的概念。我记得参加数学测验——禁用计算器——面对一个困难的任务：大数的乘法。当涉及到铅笔和纸的算术时，我非常马虎——如果我不检查答案，我肯定会因为“愚蠢的错误”而失分。幸运的是，我知道以下的窍门：如果我将我的因数的数字相加（如果结果是十或更多，重新相加），这两个数的乘积应该与结果的数字之和相匹配。如果不匹配，我就知道我的答案是错的。直到后来我才发现这是校验和的一个非常基础的形式。'
- en: 'In fact, most of the tricks I rediscovered were motivated by a simple academic
    need: Was my answer correct or not? Indeed, while I didn’t know it at the time,
    this question would become the *fundamental basis* for my internship at Galois
    this summer.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我重新发现的大部分技巧都是出于简单的学术需要：我的答案是否正确？事实上，虽然当时我不知道，但这个问题成为了我今年夏天在Galois实习的*基本基础*。
- en: At about the time I started learning algebra, I began to notice that my tricks
    for checking arithmetic had become insufficient. If a teacher asked me to calculate
    the expanded form of the polynomial `(x + 2)(x - 3)(x - 5)`, I had to carry out
    multiple arithmetic steps before I arrived at an answer. Checking each step was
    tedious and prone to error—I knew too well that I would probably be blind to errors
    in the work I had just written. I wanted a different way to check that my answer
    was correct.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 大约在我开始学习代数的时候，我开始注意到我的检查算术的技巧变得不够用了。如果老师让我计算多项式`(x + 2)(x - 3)(x - 5)`的展开式，我必须执行多步算术运算才能得到答案。检查每一步都很麻烦且容易出错——我深知我可能会对自己刚写的工作中的错误视而不见。我想要一种不同的方式来确保我的答案是正确的。
- en: 'Eventually, I realized that all I had to do was pick a value of `x` and substitute
    it into the original question and the answer `x³ - 6x² - x + 30`. If the values
    matched, I would be fairly confident in my answer. I also realized that if I picked
    a number like `x = -2`, I wouldn’t even have to calculate the value of the original
    problem: the answer was obviously zero! I had “invented” unit testing, and at
    the hand of this technique, many symbolic expressions bent to my pencil. (I independently
    learned about unit testing as a teething programmer, but since a PHP programmer
    never codes very much math, I never made the connection.)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，我意识到我所要做的只是选择一个`x`的值，并将其代入原问题和答案`x³ - 6x² - x + 30`中。如果数值匹配，我会对我的答案相当有信心。我还意识到，如果我选择一个像`x
    = -2`这样的数，我甚至都不需要计算原始问题的值：答案显然是零！我“发明了”单元测试，并且借助这种技术，许多符号表达式都屈服于我的铅笔。（我作为一个刚入门的程序员独立学习了单元测试，但由于PHP程序员从不编写太多数学代码，我从未意识到这一点。）
- en: '* * *'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '*World of practical software testing.* Here, we pass from the world of algebra
    quizzes to the world of software testing. The expressions being tested are more
    complicated than `x³ - 6x² - x + 30`, but most people still adopt the strategy
    of the high school me: they hand pick a few inputs to test that will give them
    reasonable confidence that their new implementation is correct. How does one know
    that the output of the program is the correct one? For many simple programs, the
    functionality being tested is simple enough that the tester mentally “knows” what
    the correct result is, and write it down manually—akin to picking inputs like
    `x = -2` that are particularly easy for a human to infer the answer to. For more
    complex programs, a tester may use a reference implementation to figure out what
    the expected behavior is supposed to be.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*实际软件测试的世界。* 在这里，我们从代数测验的世界过渡到软件测试的世界。被测试的表达式比`x³ - 6x² - x + 30`更复杂，但大多数人仍然采用类似于高中时期的策略：他们手动挑选几个测试输入，以便能够合理地相信他们的新实现是正确的。如何知道程序的输出是正确的？对于许多简单的程序，被测试的功能足够简单，以至于测试人员能够心理上“知道”正确的结果，并手动记录下来——类似于挑选像`x
    = -2`这样特别容易让人类推断答案的输入。对于更复杂的程序，测试人员可能会使用参考实现来确定预期的行为应该是什么样子的。'
- en: 'Testing like this can only show the presence of bugs, not the absence of them.
    But, as many software companies have discovered, this is good enough! If the programmer
    misses an important test case and a bug report comes in, he fixes the bug and
    adds a regression test to deal with that buggy input. So, as pragmatists, we have
    settled for this state of affairs: manual case-by-case testing (which hopefully
    is automated). *The state of the art of conventional software testing is fundamentally
    the same as how a high-schooler checks his answers on an algebra quiz.* Anything
    better lies beyond the dragons of theoretical computer science research.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 测试如此只能显示bug的存在，而不能证明它们不存在。但是，正如许多软件公司发现的那样，这已经足够好了！如果程序员错过了一个重要的测试用例并且出现了bug报告，他会修复bug并添加一个回归测试来处理那个有bug的输入。因此，作为实用主义者，我们已经接受了这种状态：手动逐案测试（希望是自动化的）。*传统软件测试技术的现状基本上与高中生在代数测验中检查答案的方式是一样的。*比这更好的东西超越了理论计算机科学研究的障碍。
- en: '*Aside.* As anyone who has written automated tests before can attest, automated
    tests are characterized by two primary chores: getting your code to be automatically
    testable in the first place (much easier if it’s arithmetic than if it’s a kernel
    driver) and coming up with interesting situations to test your code in. For the
    latter, it turns out that while humans can come up with decent edge-cases, they’re
    really *bad* at coming up with random test-cases. Thus, some extremely practical
    high-tech testing techniques involve having a computer generate random inputs.
    [Fuzz testing](http://en.wikipedia.org/wiki/Fuzz_testing) and [QuickCheck](http://en.wikipedia.org/wiki/QuickCheck)
    style testing are both characterized by this methodology, though fuzz testing
    prides itself in nonsensical inputs, while QuickCheck tries hard to generate sensible
    inputs.'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*旁白。* 任何写过自动化测试的人都可以证明，自动化测试有两个主要任务：首先让你的代码能够自动测试（如果是算术比起内核驱动要容易得多），其次是想出一些有趣的情况来测试你的代码。对于后者来说，事实证明，虽然人类可以提出不错的边缘情况，但在提出随机测试用例方面他们真的非常糟糕。因此，一些极端实用的高科技测试技术包括让计算机生成随机输入。[模糊测试](http://en.wikipedia.org/wiki/Fuzz_testing)和[QuickCheck](http://en.wikipedia.org/wiki/QuickCheck)风格的测试都以此方法为特征，尽管模糊测试以无意义的输入为荣，而QuickCheck则努力生成有意义的输入。'
- en: '* * *'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '*World of theoretical computer science.* The teacher grading your algebra quiz
    doesn’t do something so simple as pick a few random numbers, substitute them into
    your answer, and see if she gets the right answer. Instead, she compares your
    answer (the program itself) against the one she has in the answer key (a reference
    implementation), and marks you correct if she is able to judge that the answers
    are the same. If you phrase your answer in terms of Fermat’s last theorem, she’ll
    mark you off for being cheeky.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*理论计算机科学的世界。* 批改你的代数测验的老师并没有像简单地选择几个随机数字，将它们代入你的答案中，看她是否得到正确答案那样简单。相反，她会将你的答案（程序本身）与答案卷上的标准答案（参考实现）进行比较，如果她能够判断答案相同，就会给你打分。如果你用费马最后定理来表达你的答案，她会因为你太过鲁莽而给你打分。'
- en: 'The reference implementation may be wrong (bug in the answer key), but in this
    case it’s our best metric for whether or not a program is “correct.” Since we’ve
    wandered into the land of theoretical computer science, we might ask this question
    to the [Literal Genie](http://tvtropes.org/pmwiki/pmwiki.php/Main/LiteralGenie):
    *Is it possible, in general, to determine if two programs are equivalent?* The
    Literal Genie responds, “No!” The question is undecidable: there is no algorithm
    that can answer this question for all inputs. If you could determine if two programs
    were equivalent, you could solve the halting problem (the canonical example of
    an unsolvable problem): just check if a program was equivalent to an infinitely
    looping one.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 参考实现可能是错误的（答案键中的错误），但在这种情况下，它是我们判断程序是否“正确”的最佳标准。既然我们已经进入理论计算机科学的领域，我们可能会向[字面意思的精灵](http://tvtropes.org/pmwiki/pmwiki.php/Main/LiteralGenie)问这个问题：*通常能否确定两个程序是否等价？*
    字面意思的精灵回答：“不！”这个问题是不可判定的：没有算法能够对所有输入回答这个问题。如果你能确定两个程序是否等价，你就能解决停机问题（无法解决问题的典型示例）：只需检查程序是否等价于一个无限循环的程序。
- en: While the working theoretician may tame uncountably huge infinities on a regular
    basis, for a working programmer, the quantities handled on a regular basis are
    very much finite—the size of their machine integer, the amount of memory on their
    system, the amount of time a program is allowed to run. When you deal with infinity,
    all sorts of strange results appear. For example, [Rice’s theorem](http://en.wikipedia.org/wiki/Rice's_theorem)
    states that figuring out whether or not a program has *any* non-trivial property
    (that is, there exists some program that has the property and some program that
    doesn’t) is undecidable! If we impose some reasonable constraints, such as “the
    program terminates in polynomial time for all inputs”, the answer to this question
    is yes! But can we do so in a way that is better than testing that the programs
    do the same thing on every input?
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管工作中的理论家可能经常驯服无法计数的巨大无限，但对于工作中的程序员来说，处理的数量仍然非常有限——他们机器整数的大小、系统内存的数量、程序允许运行的时间。当你处理无限时，会出现各种奇怪的结果。例如，[赖斯定理](http://en.wikipedia.org/wiki/Rice's_theorem)声明，确定一个程序是否具有*任何*非平凡属性（即存在某些具有该属性的程序和某些没有该属性的程序）是不可判定的！如果我们加入一些合理的约束，比如“程序对所有输入都在多项式时间内终止”，那么这个问题的答案就是肯定的！但我们能否以比测试程序在每个输入上做相同事情更好的方式来做到这一点？
- en: '* * *'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '*World of more practical computer science.* We’ve relinquished enough theoretical
    purity to make our question interesting again for software engineers, but it is
    still very difficult for the programmer to prove to himself that the algorithm
    is equivalent to his reference implementation. In contrast, it''s easy for a user
    to show that the algorithm is wrong: all they have to do is give the programmer
    an input for which his implementation and the reference implementation disagree.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*更实际的计算机科学世界。* 我们已经放弃了足够的理论纯度，使得我们的问题对软件工程师再次变得有趣，但程序员要证明算法与其参考实现等效仍然非常困难。相比之下，用户很容易证明算法错误：他们只需给程序员一个输入，使得他的实现与参考实现不一致。'
- en: 'Computer scientists have a name for this situation: problems for which you
    can verify their solutions (in this case, more of an anti-solution: a counter-example)
    in polynomial time are NP. Even if both programs run in constant time, as a combinational
    logic circuit might (to simulate such a circuit, we only need to propagate the
    inputs through as many gates as they are in the circuit: there is no dependence
    on the input), it still takes exponential time to brute-force an equivalence check.
    Every time we *add* another bit to the input, we *double* the amount of possible
    inputs to check.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机科学家为这种情况起了一个名字：NP问题，即可以在多项式时间内验证其解（在这种情况下，更像是反解：一个反例）。即使两个程序都在恒定时间内运行，如组合逻辑电路可能会（为了模拟这样一个电路，我们只需通过与电路中的门数量相同的门传播输入：没有依赖于输入），用来暴力检查等价性仍需指数时间。每次*增加*一个输入位，都会*加倍*需要检查的可能输入量。
- en: 'In fact, the question of circuit non-equivalence is NP-complete. We’ve been
    talking about program equivalence, but we can also talk about *problem* equivalence,
    for which you can translate one problem (graph coloring) into another one (traveling
    salesman). In the seventies, computer scientists spent a lot of time proving that
    a lot of problems that required “brute force” were actually all the same problem.
    Stephen Cook introduced the idea that there were problems that were NP-complete:
    problems in NP for which we could translate all other problems in NP into. The
    most famous example of an NP-complete problem is SAT, in which given a logical
    formula with boolean variables, you ask whether or not there is a satisfying assignment
    of variables, variables that will cause this formula to be true.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，电路非等效性的问题是NP完全的。我们一直在讨论程序等效性，但我们也可以讨论*问题*等效性，例如你可以将一个问题（图着色）转化为另一个问题（旅行推销员问题）。在70年代，计算机科学家花了大量时间证明需要“蛮力”的许多问题实际上都是同一个问题。斯蒂芬·库克引入了一个概念，即存在NP完全问题：NP中的问题可以转化为其中的所有其他问题。最著名的NP完全问题的例子是SAT，即给定一个带有布尔变量的逻辑公式，你询问是否存在变量的满足赋值，这些变量将导致该公式为真。
- en: 'To show that circuit non-equivalence is NP-complete, we need to show that it
    is in NP (which we’ve done already) and show that we can translate some other
    NP-complete problem into this problem. This is quite easy to do with SAT: write
    a program that takes the boolean variables of SAT as inputs and outputs the result
    of the logical formula and then see if it’s equivalent to a program that always
    returns `false`.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 证明电路非等效性是NP完全的，我们需要展示它属于NP（我们已经完成了），并且展示我们可以将某些其他NP完全问题转化为这个问题。使用SAT进行这个过程非常容易：编写一个程序，将SAT的布尔变量作为输入，并输出逻辑公式的结果，然后查看它是否等同于一个总是返回`false`的程序。
- en: 'The other direction is only slightly less trivial, but important practically
    speaking: if we can reduce our problem into an instance of SAT, I can chuck it
    a highly optimized SAT solver. A satisfiability problem is isomorphic to a logic
    circuit that outputs a single bit. We can translate a circuit equivalence problem
    into SAT by combining the circuits into what is called a “miter”: we combine the
    inputs of the two original logic circuits into a single set that feeds into both
    circuits, and then test the corresponding output bits between the two circuits
    for equality (XOR), ORing the entire result together. The resulting circuit outputs
    0 if the outputs were the same between the two circuits (all of the XORs returned
    0), and outputs 1 if there is a mismatch.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个方向稍微不那么微不足道，但从实际角度来看很重要：如果我们可以将我们的问题简化为SAT的一个实例，我可以向它投入一个高度优化的SAT求解器。可满足性问题同构于输出单个比特的逻辑电路。我们可以通过将电路合并成所谓的“miter”来将电路等效性问题转化为SAT：我们将两个原始逻辑电路的输入组合成一个单一的集合，将其输入到两个电路中，然后测试两个电路之间对应的输出位是否相等（XOR），将整个结果进行OR运算。如果输出位在两个电路之间相同（所有的XOR返回0），则生成电路输出0，如果存在不匹配，则输出1。
- en: '“Great,” you may be thinking, “but I’m a programmer, not a hardware designer.
    Most of my programs can’t be expressed just in terms of logic gates!” That is
    true: to encode state, you also need latches, and input/output needs to be simulated
    with special input and output “ports”. However, there are many important problems
    that are purely combinational: the shining example of which is cryptography, which
    protects your money, employs a lot of complicated math and is ruthlessly optimized.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: “很好”，你可能会想，“但我是程序员，不是硬件设计师。我的大多数程序不能仅用逻辑门来表达！” 这是正确的：要编码状态，你还需要锁存器，并且输入/输出需要通过特殊的输入和输出“端口”进行模拟。然而，有许多重要的问题纯粹是组合的：其中一个闪亮的例子是密码学，它保护你的钱，采用了大量复杂的数学并进行了无情的优化。
- en: 'But there still is one standing complaint: even if my programs are just logic
    circuits, I wouldn’t want to write them in terms of ANDs, ORs and NOTs. That just
    seems painful!'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 但仍然有一个持续的抱怨：即使我的程序只是逻辑电路，我也不想用AND、OR和NOT来编写它们。那看起来太痛苦了！
- en: '* * *'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Enter [Cryptol](http://www.galois.com/technology/communications_security/cryptol),
    the project that I am working on at Galois. Cryptol bills itself as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 进入[Cryptol](http://www.galois.com/technology/communications_security/cryptol)，这是我在Galois公司工作的项目。Cryptol自称如下：
- en: Cryptol is a language for writing specifications for cryptographic algorithms.
    It is also a tool set for producing high-assurance, efficient implementations
    in VHDL, C, and Haskell. The Cryptol tools include the ability to equivalence
    check the reference specification against an implementation, whether or not it
    was compiled from the specifications.
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Cryptol是用于编写密码算法规范的语言。它还是一个工具集，用于在VHDL、C和Haskell中生成高可靠性、高效的实现。Cryptol工具包括对比参考规范与实现的等效性检查，无论实现是否从规范编译而来。
- en: But what really makes it notable, in my humble intern opinion, is the fact that
    it can take programs written in programming languages like C, VHDL or Cryptol
    and convert them into logic circuits, or, as we call them, “formal models”, which
    you can chuck at a SAT solver which will do something more sensible than brute-force
    all possible inputs. At one point, I thought to myself, “It’s a wonder that Cryptol
    even works at all!” But it does, and remarkably well for its problem domain of
    cryptographic algorithms. The state of the art in conventional software testing
    is manually written tests that can only show the presence of bugs in an implementation;
    *the state of the art in Cryptol is a fully automatic test that gives assurance
    that an implementation has no bugs.* (Of course, Cryptol could be buggy, but such
    is the life of high assurance.)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 但是在我这个菜鸟实习生的谦虚观点中，真正使它显著的是，它可以将用C、VHDL或Cryptol等编程语言编写的程序转换为逻辑电路，或者我们所称的“形式模型”，然后你可以将其投放到一个SAT求解器中，后者会比暴力尝试所有可能的输入更明智地处理。有一次，我心想，“Cryptol居然能工作真是个奇迹！”但它确实能在其密码算法问题域内非常成功地工作。传统软件测试的最新技术是手工编写的测试，只能显示实现中存在的缺陷；*Cryptol的最新技术是完全自动化的测试，可以保证实现没有缺陷*。（当然，Cryptol也可能有bug，但这是高可靠性的生活方式。）
- en: '* * *'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'SAT solvers are perhaps one of the most under-utilized high-tech tools that
    a programmer has at their fingertips. An industrial strength SAT solver can solve
    most NP-complete problems in time for lunch, and there are many, many problems
    in NP with wide-ranging practical applications. However, the usual roadblocks
    to using a SAT solver include:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: SAT求解器可能是程序员手边最被低估的高科技工具之一。一个工业级别的SAT求解器可以在午餐时间内解决大多数NP完全问题，而NP类问题具有广泛的实际应用。然而，使用SAT求解器的常见障碍包括：
- en: No easy way to translate your problem into SAT and then run it on one of the
    highly optimized solvers, which are frequently poorly documented, library-unfriendly
    projects in academia,
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有简单的方法将你的问题转化为SAT问题，然后在高度优化的求解器之一上运行，这些求解器通常在学术界文档化不足且不友好。
- en: Generating friendly error messages when your SAT solver passes or fails (depending
    on what is an “error”), and
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你的SAT求解器通过或失败时（取决于什么是“错误”），生成友好的错误消息。
- en: Convincing your team that, no really, you want a SAT solver (instead of building
    [your own, probably not-as-efficient implementation](http://algebraicthunk.net/~dburrows/blog/entry/package-management-sudoku/).)
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 说服你的团队，真的，你需要一个SAT求解器（而不是构建[你自己的，可能不那么高效的实现](http://algebraicthunk.net/~dburrows/blog/entry/package-management-sudoku/)）。
- en: 'My primary project was addressing issue one, in Haskell, by building a set
    of bindings for [ABC, a System for Sequential Synthesis and Verification](http://www.eecs.berkeley.edu/~alanmi/abc/)
    called `abcBridge`. One might observe that Haskell already has a number of SAT
    solving libraries: ABC is notable because it employs an alternative formulation
    of SAT in the form of And-Inverter Graphs (NAND gates are capable of simulating
    all boolean logic) as well as some novel technology for handling AIGs such as
    fraiging, which is a high-level strategy that looks for functionally equivalent
    subsets of your circuits.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我的主要项目是通过构建名为[ABC，一个用于顺序合成和验证的系统](http://www.eecs.berkeley.edu/~alanmi/abc/)的绑定集来解决Haskell中的第一个问题，称为`abcBridge`。有人可能会观察到Haskell已经有了一些SAT求解库：ABC之所以引人注目，是因为它采用了一种SAT的替代表述形式，即与非图（NAND门能模拟所有布尔逻辑），以及一些处理AIG的新技术，比如fraiging，这是一种高级策略，用于寻找电路中功能等效的子集。
- en: 'The project itself has been a lot of fun: since I was building this library
    from scratch, I had a lot of flexibility with API decisions, but at the same time
    got my hands into the Cryptol codebase, which I needed to integrate my bindings
    with. With any luck, we’ll be releasing the code as open source at the end of
    my internship. But I’m going to miss a lot more than my project when my internship
    ends in two weeks. I hope to follow up with a non-technical post about my internship.
    Stay tuned!'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 项目本身非常有趣：由于我是从零开始构建这个库，所以在 API 决策上有很大的灵活性，但同时也深入了 Cryptol 代码库，需要将我的绑定与其集成。希望有幸能在实习结束时将代码作为开源发布。但当我的实习在两周后结束时，我会错过更多不仅仅是我的项目。我希望能跟进一篇关于我的实习的非技术性文章。请继续关注！
- en: '*Post factum.* Hey, this is my hundredth post. Sweet!'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*事后诸事.* 嘿，这是我的第一百篇文章。甜蜜！'
