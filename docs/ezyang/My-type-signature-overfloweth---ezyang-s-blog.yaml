- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:18:10'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:18:10'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'My type signature overfloweth : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'My type signature overfloweth : ezyang’s blog'
- en: 来源：[http://blog.ezyang.com/2010/09/my-type-signature-overfloweth/](http://blog.ezyang.com/2010/09/my-type-signature-overfloweth/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/09/my-type-signature-overfloweth/](http://blog.ezyang.com/2010/09/my-type-signature-overfloweth/)
- en: I’ve recently started researching the use of *session types* for practical coding,
    a thought that has been in the back of my mind ever since I was part of a team
    that built a networked collaborative text editor and spent a lot of time closely
    vetting the server and the client to ensure that they had implemented the correct
    protocols. The essence of such protocols is often relatively simple, but can quickly
    become complicated in the presence of error flow (for example, resynchronizing
    after a disconnection). Error conditions also happen to be difficult to automatically
    test! Thus, static types seem like an attractive way of tackling this task.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我最近开始研究使用 *会话类型* 进行实际编码，这个想法从我曾参与构建网络协同文本编辑器团队开始，我就一直在思考。当时我花了大量时间仔细审查服务器和客户端，以确保它们实现了正确的协议。这些协议的本质通常相对简单，但在错误流（例如断开连接后的重新同步）存在的情况下很快变得复杂起来。错误条件也很难进行自动化测试！因此，静态类型似乎是解决这一任务的一种吸引人的方式。
- en: 'There are three implementations of session types in Haskell: [sessions](http://hackage.haskell.org/package/sessions),
    [full-sessions](http://hackage.haskell.org/package/full-sessions) and [simple-sessions](http://hackage.haskell.org/package/simple-sessions).
    If you were feeling particularly naive, you might try going to the [Haddock page](http://hackage.haskell.org/packages/archive/sessions/2008.7.18/doc/html/Control-Concurrent-Session.html)
    to get a feel for what the API looks like. Before you continue reading, please
    inspect that page.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Haskell 中有三种会话类型的实现：[sessions](http://hackage.haskell.org/package/sessions)，[full-sessions](http://hackage.haskell.org/package/full-sessions)
    和 [simple-sessions](http://hackage.haskell.org/package/simple-sessions)。如果你感到特别天真，你可能会尝试访问
    [Haddock 页面](http://hackage.haskell.org/packages/archive/sessions/2008.7.18/doc/html/Control-Concurrent-Session.html)
    来了解 API 的外观。在继续阅读之前，请检查那个页面。
- en: '* * *'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Done gouging your eyes out? Let’s proceed.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 眼睛剜出来了吗？我们继续吧。
- en: 'In an interview in *Coders at Work*, Simon Peyton Jones mentioned that one
    of the notable benefits of types is that it gives a concise, crisp description
    of what a function might do. That API is anything from concise and crisp, and
    it’s certainly not something that I could figure out just by looking at the corresponding
    function definition. Accordingly, one of the key selling points of current encodings
    of session types is that they do not break type inference: we give up on our user
    understanding what the gaggle of typeclasses means, and only expect to transfer
    one bit of information, “Do the protocols match?”'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在《Coders at Work》的采访中，Simon Peyton Jones 提到类型的一个显著好处是它提供了函数可能做什么的简明、清晰描述。但那个
    API 根本不是简明和清晰的，我仅仅通过查看相应的函数定义就无法理解它。因此，当前会话类型编码的一个关键卖点是它们不会破坏类型推断：我们放弃用户理解一堆类型类代表的含义，只期待传输一个信息位，“协议是否匹配？”
- en: 'This is not a problem that is fundamental to session types: any functionality
    that makes extensive use typeclasses can easily fall prey to these long type signatures.
    I have two (rather half-baked) thoughts on how this complexity might be rendered
    more nicely to the user, although not eliminated:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题并不是会话类型的根本问题：任何大量使用类型类的功能都很容易陷入这些冗长的类型签名中。对于如何更好地向用户展示这种复杂性，我有两个（相当未完成的）想法，尽管并不能完全消除：
- en: 'A favorite pastime of type system hackers is a type-level encoding of naturals,
    using Peano numbers `Z` and `S a`, attached to something like `Vector (S (S Z))`.
    Vector is a type constructor of kind `* -> *`. However, since there is only one
    primitive kind in Haskell, we could actually pass any type to Vector, say `Vector
    Int`, which would be a nonsensical. One way to prevent this from occurring is
    to declare our Peano numbers instances of a typeclass `Nat`, and then declare
    `Nat a => Vector a`. But, since `a` is used precisely once in any such a statement,
    wouldn’t it be great if instead we could write `Vector :: Nat -> *`? If you need
    to specify type equality, you could imagine some sort of type pattern matching
    `concat :: Vector a -> Vector b -> Vector c with c ~ a :+: b`. [Collapsing types
    and kinds](http://byorgey.wordpress.com/2010/08/05/typed-type-level-programming-in-haskell-part-iv-collapsing-types-and-kinds/)
    is an interesting step in this direction.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '类型系统黑客的一种喜爱的消遣是使用Peano数（`Z`和`S a`）对自然数进行类型级编码，附加到类似于`Vector (S (S Z))`的东西。Vector是一个类型构造器，类型为`*
    -> *`。然而，由于Haskell中只有一个原始种类，我们实际上可以将任何类型传递给Vector，比如说`Vector Int`，这将是荒谬的。防止这种情况发生的一种方法是声明我们的Peano数是类型类`Nat`的实例，然后声明`Nat
    a => Vector a`。但是，由于在任何这样的语句中`a`只使用一次，如果我们能够写成`Vector :: Nat -> *`，那不是更好吗？如果需要指定类型相等性，可以想象某种类型模式匹配`concat
    :: Vector a -> Vector b -> Vector c with c ~ a :+: b`。[类型和种类的折叠](http://byorgey.wordpress.com/2010/08/05/typed-type-level-programming-in-haskell-part-iv-collapsing-types-and-kinds/)是朝这个方向迈出的有趣一步。'
- en: When mathematicians present proofs, they might explicitly specify “for all F
    such that F is a field...”, but more frequently, they’ll say something like, “in
    the following proof, assume the following variable naming conventions.” With this,
    they get to avoid having to repeatedly explicitly redeclare what all of their
    variable names mean. An analogous system for type variables would go a long way
    towards reducing long type signatures.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当数学家提出证明时，他们可能会明确地指定“对于所有的F，使得F是一个字段……”，但更频繁地，他们会说类似于“在以下证明中，假设以下变量命名约定。” 这样一来，他们就避免了反复显式地重新声明所有变量名的含义。对于类型变量的类似系统将大大减少长类型签名的需求。
- en: But actually, that has nothing to do with what I’m currently looking at.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 但实际上，这与我当前正在研究的内容无关。
- en: '* * *'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Here’s what I am looking at: session types suffer from another type signature
    explosion phenomenon: any function in the protocol contains, in its type, a complete
    specification of the entire protocol continuing from that point in time. As [Neubauer
    and Thiemann admit (PDF)](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.70.7370&rep=rep1&type=pdf),
    the “session type corresponding to full SMTP is quite unreadable.” The two lines
    of inquiry I am pursuing are as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在看的是：会话类型还受到另一种类型签名爆炸现象的困扰：协议中的任何函数在其类型中包含从该时刻起整个协议的完整规范。正如[Neubauer and Thiemann承认（PDF）](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.70.7370&rep=rep1&type=pdf)，“对完整SMTP的会话类型相当难以阅读。”
    我正在追求的两条研究路线如下：
- en: Can building exception support into session types (currently an open problem)
    allow for much simpler session types by allowing most cases to elide the session
    types corresponding to error cases?
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否可以通过在会话类型中构建异常支持（目前是一个未解决的问题），允许通过省略与错误情况对应的会话类型来实现更简单的会话类型？
- en: Can we use `type` to permit a single global specification of the protocol, which
    individual functions then simply refer to? Do we need something a little more
    powerful?
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否可以使用`type`来允许协议的单一全局规范，然后个别函数简单地引用它？我们需要更强大的一些东西吗？
- en: At this point, I’ve just been doing thinking and paper reading, but I hope to
    start hacking on code soon. I’d love to hear your thoughts though.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我只是在进行思考和阅读论文，但我希望很快开始编写代码。不过我很乐意听听你的想法。
