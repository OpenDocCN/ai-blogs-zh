- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-07-01 18:17:29'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-07-01 18:17:29
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Polymorphic variants in Ur/Web : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ur/Web中的多态变体：ezyang的博客
- en: 来源：[http://blog.ezyang.com/2012/07/polymorphic-variants-in-urweb/](http://blog.ezyang.com/2012/07/polymorphic-variants-in-urweb/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2012/07/polymorphic-variants-in-urweb/](http://blog.ezyang.com/2012/07/polymorphic-variants-in-urweb/)
- en: This document explains how **polymorphic variants** in [Ur/Web](http://www.impredicative.com/ur/)
    work. It was written because the [official tutorial](http://www.impredicative.com/ur/tutorial/)
    has no mention of them, the manual only devotes a paragraph to the topic, and
    there are some useful tricks for dealing with them that I picked up while wrangling
    with them in [Logitext](http://logitext.mit.edu/main).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本文解释了[Ur/Web](http://www.impredicative.com/ur/)中**多态变体**的工作原理。编写本文的原因是官方教程没有提及它们，手册只在该主题上留下了一段话，而我在[Logitext](http://logitext.mit.edu/main)中使用它们时学到了一些有用的技巧。
- en: What are polymorphic variants?
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是多态变体？
- en: 'Polymorphic variants may be [familiar to OCaml users](http://caml.inria.fr/pub/docs/manual-ocaml/manual006.html):
    they permit you to use the tags of variants in multiple types, and not just in
    the original algebraic data type a constructor was defined in. Instead having
    to keep names unique:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于OCaml用户来说，多态变体可能会很熟悉：它们允许您在多种类型中使用变体的标签，而不仅仅是在原始代数数据类型中定义构造函数时需要保持名称唯一：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can just reuse them:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以简单地重用它们：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is extremely convenient if you have a lot of constructors which you want
    to share between multiple logical types. Unfortunately, they have a number of
    [nasty](http://t-a-w.blogspot.com/2006/05/variant-types-in-ocaml-suck.html) [effects](https://ocaml.janestreet.com/?q=node/99),
    largely stemming from the fact that they introduce subtyping to the language.
    In Ur, this inherent subtyping is modulated by the same row types that power Ur’s
    record system, so handling polymorphic variants is quite like handling records,
    and both are based off of Ur/Web’s type-level records.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有很多构造函数想要在多个逻辑类型之间共享，则这非常方便。不幸的是，它们有许多[讨厌的](http://t-a-w.blogspot.com/2006/05/variant-types-in-ocaml-suck.html)
    [影响](https://ocaml.janestreet.com/?q=node/99)，这主要源于它们向语言引入了子类型化。在Ur中，这种固有的子类型化通过与Ur记录系统驱动相同的行类型进行调节，因此处理多态变体非常类似于处理记录，并且两者都基于Ur/Web的类型级记录。
- en: How do I make a polymorphic variant?
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何创建多态变体？
- en: 'To make a polymorphic variant type, instead of applying the `$` operator, instead
    apply the `variant` to a type-level record. So:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建多态变体类型，不要应用`$`运算符，而是将`variant`应用于类型级记录。因此：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'generates a record with two fields, `A` containing an `int` and `B` containing
    a `bool`, whereas:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个具有两个字段的记录，`A`包含一个`int`，`B`包含一个`bool`，而：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: generates a variant with two constructors, `A` containing just an `int`, or
    `B` containing just a `bool`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个具有两个构造函数的变体，`A`仅包含一个`int`，或者`B`仅包含一个`bool`。
- en: 'To make a polymorphic variant value, use the `make` function, which requires
    a label (indicating the constructor) and the value:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建多态变体值，请使用`make`函数，该函数需要一个标签（指示构造函数）和值：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Technically, during the construction of a polymorphic variant, you also need
    to know what the full set of constructors this value will be used with are. Normally
    Ur/Web will infer this for you, but this is an important restriction which will
    affect code that operates on variants. The full signature of `make` is this:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，在构建多态变体时，您还需要知道此值将与哪些完整集合的构造函数一起使用。通常Ur/Web会为您推断出这一点，但这是一个重要的限制，将影响对变体进行操作的代码。`make`的完整签名如下：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The function of `nm` and `t` should be self-evident, and `ts` is the type-level
    record for the rest of the values in the variant, concatenated with `[nm = t]`
    to produce a type-level record which is guaranteed to contain `nm`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`nm`和`t`的功能应该是不言自明的，而`ts`是类型级记录，用于包含变体中其余值的拼接，附加`[nm = t]`以生成一个保证包含`nm`的类型级记录。
- en: How do I destruct a polymorphic variant?
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何解构多态变量？
- en: 'Use the `match` function, which takes a variant and a record of functions which
    indicate how to process each possible constructor of the variant:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`match`函数，该函数接受一个变量和一个函数记录，指示如何处理该变量的每个可能构造函数：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Indeed, the variant and the record use the *same* type-level record, though
    the types of the record are a little different, as seen in the type of match:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，变体和记录使用*相同*类型级记录，尽管记录的类型有些不同，如在匹配类型中所见：
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: What other operations can I perform on variants?
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我可以对变体执行哪些其他操作？
- en: '`make` and `match` are the only primitives you need: everything else can derived.
    However, the [meta](http://hg.impredicative.com/meta/) library has a `Variant`
    module which contains of useful derived functions for operating with variants.
    For example, this pair of functions:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`make`和`match`是您唯一需要的基本操作：其他所有操作都可以派生出来。但是，[meta](http://hg.impredicative.com/meta/)库中有一个`Variant`模块，其中包含用于处理变体的多个有用的派生函数。例如，这对函数：'
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Allow you to use variants as labels, to project and edit values from homogeneously
    typed records. The signatures are not too difficult to read: `r` is the type-level
    record which defines the variant, `t` is the type of the homogeneous record, `folder
    r` is a folder for the record (which usually will get inferred), `$(mapU t r)`
    is the type of a homogeneous record (we didn’t write `$r` because that would be
    a record containing only unit) and `variant (mapU {} r)` is the variant serving
    as a “label”. Here are some example uses of some of the simpler functions in this
    library:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 允许您将变体用作标签，以从同类型记录中投影和编辑值。签名并不难阅读：`r`是定义变体的类型级记录，`t`是同类型记录的类型，`folder r`是记录的折叠器（通常会被推断出），`$(mapU
    t r)`是同类型记录的类型（我们没有写`$r`，因为那将是仅包含单元的记录），而`variant (mapU {} r)`是充当“标签”的变体。以下是这个库中一些简单函数的一些示例用法：
- en: '[PRE9]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: What does destrR do?
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`destrR`做什么？'
- en: 'This function has a somewhat formidable type:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数的类型有点令人生畏：
- en: '[PRE10]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'But really, it’s just a more general `match`. `match` can easily be implemented
    in terms of `destrR`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 但实际上，它只是一个更一般的`match`。`match`可以很容易地用`destrR`实现：
- en: '[PRE11]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`destrR` affords more flexibility when the record is not quite a function,
    but a record containing a function, or a type class, or even if the variant is
    the function and the record the data.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当记录不完全是函数，而是包含函数、类型类甚至是当变体是函数而记录是数据时，`destrR`提供了更多的灵活性。
- en: Is there a more concise way to match over multiple constructors?
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 是否有更简洁的方法来匹配多个构造函数？
- en: 'Polymorphic variants frequently have a lot of constructors, all of which look
    basically the same:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 多态变体经常有很多构造函数，它们看起来基本相同：
- en: '[PRE12]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Filling out records to `match` against quickly gets old, especially if the
    functionality for any two constructors with the same type of data is the same:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 快速填充以与`match`匹配的记录很快变得老套，特别是对于任何两个具有相同类型数据的构造函数而言：
- en: '[PRE13]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Adam Chlipala and I developed a nice method for reducing this boilerplate by
    abusing *local type classes*, which allow us to lean of Ur/Web’s inference engine
    to automatically fill in the function to handle an element of a particular type.
    Here is that recursive traversal again, using our new method:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Adam Chlipala和我开发了一种不错的方法，通过滥用*局部类型类*来减少这种样板代码，这允许我们依赖Ur/Web的推理引擎自动填写处理特定类型元素的函数。这里是使用我们的新方法进行的递归遍历：
- en: '[PRE14]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: For every “type” in the variant, you write a `declareCase` which takes that
    type and reduces it to the desired return type. (You also get, as the first constructor,
    a constructor function to create the original constructor; e.g. `declareCase (fn
    f x => f x)` is the identity transformation. Then you run `typeCase` and watch
    the magic happen. There are more detailed usage instructions in [variant.urs](http://hg.impredicative.com/meta/file/f55f66c6fdee/variant.urs).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个变体中的“类型”，您需要编写一个`declareCase`函数，它接受该类型并将其转换为所需的返回类型。（作为第一个构造函数，您还会得到一个构造函数，用于创建原始构造函数；例如，`declareCase
    (fn f x => f x)` 就是恒等变换。然后您运行`typeCase`，并观察魔法发生。更详细的使用说明请参阅[variant.urs](http://hg.impredicative.com/meta/file/f55f66c6fdee/variant.urs)。）
- en: How do I make the type of my variant bigger?
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我该如何扩展我的变体类型？
- en: 'When writing metaprograms that create variant types, a common problem is that
    the variant you just created is too narrow: that is, the `ts` in `variant ts`
    doesn’t have enough entries in it. This is especially a problem when `ts` is the
    record you are folding over. Consider a simple example where we would like to
    write this function, which generates a record of constructors for each constructor
    of the variant:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写创建变体类型的元程序时，一个常见的问题是您刚刚创建的变体太窄了：也就是说，在`variant ts`中的`ts`中的条目不足。当`ts`是您正在折叠的记录时，特别是这种情况尤为常见。考虑一个简单的例子，我们想要编写这个函数，它为变体的每个构造函数生成一个构造函数的记录：
- en: '[PRE15]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Ur/Web is not clever enough to figure out the naive approach:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Ur/Web并不聪明到足以理解这种天真的方法：
- en: '[PRE16]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: because it has no idea that `nm` is a member of the type-level record `ts` (Ur/Web
    doesn’t directly have an encoding of field inclusion.)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因为它并不知道 `nm` 是类型级记录 `ts` 的成员（Ur/Web 并不直接具有字段包含的编码方式）。
- en: 'The way to fix this problem is to use a trick that shows up again and again
    in variant metaprograms: make the accumulator polymorphic in the fields that are
    already processed. It is the same trick that is employed in value level programs,
    when you reverse a list by `foldr` by observing that you want to make the accumulator
    a function:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 修复此问题的方法是使用一种在变体元程序中反复出现的技巧：使累加器在已处理的字段中多态化。这与值级程序中使用的技巧相同，当通过 `foldr` 反转列表时，可以观察到您希望将累加器作为一个函数：
- en: '[PRE17]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`accum` is the type of the accumulator, and we can see it has a new type argument
    `s :: {Type}`. This argument is concatenated with the fields that are to be processed
    `r` and the current field `nm` in order to provide the full set of fields `ts`.
    During a fold over a record like `[A = int, B = bool, C = string]`, we see:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`accum` 是累加器的类型，并且我们可以看到它具有新的类型参数 `s :: {Type}`。此参数与要处理的字段 `r` 和当前字段 `nm` 进行连接，以提供完整的字段集
    `ts`。在对类似 `[A = int, B = bool, C = string]` 的记录进行折叠时，我们可以看到：'
- en: '[PRE18]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`r` builds up fields as usual in a fold, but `s` builds up its fields in reverse,
    because, like list reverse, `s` is not determined until we’ve folded over the
    entire structure, and now evaluate the pile of type functions outside-in. Thus,
    it’s easy to see `k [[nm = v] ++ s]` will always have the correct type.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`r` 按照通常的折叠方式构建字段，但 `s` 则反向构建其字段，因为类似于列表反转，只有在整个结构折叠后，`s` 才能确定，并且现在在外部逐层评估类型函数的堆栈。因此，很容易看出
    `k [[nm = v] ++ s]` 总是具有正确的类型。'
- en: Conclusion
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论
- en: Polymorphic variants in Ur/Web are quite useful, and avoid many of the problems
    associated with unrestricted subtyping. Logitext wasn’t originally intending on
    using polymorphic variants, but we adopted them when they were found to be the
    most reliable method by which we could quickly implement JSON serialization via
    metaprogramming, and we’ve come to appreciate their metaprogrammability in a variety
    of other contexts too. Probably their biggest downside over traditional algebraic
    data types is the lack of recursion, but that too can be simulated by manually
    implementing the mu operator using Ur/Web’s module system. I hope this tutorial
    has given you enough meat to use polymorphic variants on your own, and maybe do
    a little metaprogramming with them too.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Ur/Web 中的多态变体非常有用，并且避免了与无限制子类型化相关的许多问题。Logitext 最初并不打算使用多态变体，但当发现它们是通过元编程快速实现
    JSON 序列化的最可靠方法时，我们采用了它们，并且我们也开始欣赏它们在各种其他情境中的元编程能力。与传统代数数据类型相比，它们可能最大的缺点是缺乏递归，但这也可以通过在
    Ur/Web 的模块系统中手动实现 mu 操作符来模拟。我希望本教程已经为您提供了足够的知识，以便自己使用多态变体，并且也可以通过它们进行一些元编程。
