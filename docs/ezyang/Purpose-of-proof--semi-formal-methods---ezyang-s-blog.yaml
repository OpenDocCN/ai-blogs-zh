- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-07-01 18:18:05'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-07-01 18:18:05
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Purpose of proof: semi-formal methods : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 证明的目的：半形式方法：ezyang 的博客
- en: 来源：[http://blog.ezyang.com/2010/10/purpose-of-proof-sem-formal-methods/](http://blog.ezyang.com/2010/10/purpose-of-proof-sem-formal-methods/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/10/purpose-of-proof-sem-formal-methods/](http://blog.ezyang.com/2010/10/purpose-of-proof-sem-formal-methods/)
- en: In which the author muses that “semi-formal methods” (that is, non computer-assisted
    proof writing) should take a more active role in allowing software engineers to
    communicate with one another.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 作者沉思“半形式方法”（即非计算机辅助的证明写作）应该在允许软件工程师相互沟通方面发挥更积极的作用。
- en: '* * *'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[C++0x](http://en.wikipedia.org/wiki/C%2B%2B0x) has a lot of new, whiz-bang
    features in it, one of which is the atomic operations library. This library has
    advanced features that enable compiler writers and concurrency library authors
    to take advantage of a relaxed memory model, resulting in blazingly fast concurrent
    code.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[C++0x](http://zh.wikipedia.org/wiki/C%2B%2B0x) 中有很多新的、很牛的特性，其中之一是原子操作库。这个库具有先进的功能，使编译器编写者和并发库作者能够利用宽松的内存模型，从而获得极快的并发代码。'
- en: It’s also ridiculously bitchy to get right.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要做好这件事也是相当棘手的。
- en: 'The [Mathematizing C++ Concurrency](http://www.cl.cam.ac.uk/~pes20/cpp/) project
    at Cambridge is an example of what happens when you throw formal methods at an
    exceedingly tricky specification: you find bugs. Lots of them, ranging from slight
    clarifications to substantive changes. As of [a talk Mark Batty gave on Monday](http://talks.cam.ac.uk/talk/index/26712)
    there are still open problems: for example, the sequential memory model isn’t
    *actually* sequential in all cases. You can consult the [Pre-Rapperswil paper
    §4](http://www.cl.cam.ac.uk/~pes20/cpp/test.pdf) for more details.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[Mathematizing C++ Concurrency](http://www.cl.cam.ac.uk/~pes20/cpp/) 项目在剑桥大学是一个典型例子，当你面对一个极其棘手的规范时，采用形式化方法会发现许多漏洞。从细微的澄清到实质性的更改，各种问题都有。截至[Mark
    Batty 在周一的演讲](http://talks.cam.ac.uk/talk/index/26712)时，仍然存在一些未解决的问题：例如，顺序内存模型并不在所有情况下*真正*是顺序的。您可以查阅[预-雷珀斯维尔论文第4节](http://www.cl.cam.ac.uk/~pes20/cpp/test.pdf)了解更多细节。'
- en: 'Which brings me to a piercing question:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这让我想到一个深刻的问题：
- en: When software engineers want to convince one another that their software is
    correct, what do they do?
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当软件工程师想要说服彼此他们的软件是正确的，他们会怎么做呢？
- en: This particular question is not about proving software “correct”—skeptics rightly
    point out that in many cases the concept of “correctness” is ill-defined. Instead,
    I am asking about communication, along the lines of “I have just written an exceptionally
    tricky piece of code, and I would now like to convince my coworker that I did
    it properly.” How do we do this?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特定问题并不是证明软件“正确”的问题 — 怀疑者们正确地指出，在很多情况下，“正确性”的概念并不明确。相反，我想问的是关于沟通的问题，类似于“我刚刚写了一段异常棘手的代码，现在我想说服我的同事我写得正确。”我们应该怎么做呢？
- en: '*We don’t.*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们不这么做。*'
- en: Certainly there are times when the expense of explaining some particular piece
    of code is not useful. Maybe the vast majority of code we write is like this.
    And certainly we have mechanisms for “code review.” But the mostly widely practiced
    form of code review revolves around the patch and frequently is only productive
    when the original programmer is still around and still remembers how the code
    works. Having a reviewer read an *entire* program has been determined to be a
    frustrating and inordinately difficult thing to do—so instead, we focus on style
    and local structure and hope no one writes immaculate evil code. Security researchers
    may review code and look for patterns of use that developers tend to “get wrong”
    and zero in on them. We do have holistic standards, but they tend towards “it
    seems to work,” or, if we’re lucky, "it doesn’t break any automated regression
    tests.”
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，有时解释某段特定代码的成本并不高效。也许我们写的大多数代码都是这样。而且我们确实有“代码审查”的机制。但是大多数情况下，代码审查的形式围绕着补丁展开，通常只有在原始程序员仍在并且仍记得代码工作原理时才能够有效。让审阅者读完整个程序已被证明是一件令人沮丧和难以办到的事情
    — 因此，我们专注于风格和局部结构，并希望没有人写出无懈可击的邪恶代码。安全研究人员可能会审查代码，并寻找开发人员往往“弄错”的使用模式，并针对它们进行分析。我们确实有全面的标准，但它们往往倾向于“似乎工作正常”，或者，如果我们幸运的话，“它没有破坏任何自动回归测试”。
- en: What we have is a critical communication failure.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们面临的是一次严重的沟通失败。
- en: '* * *'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'One place to draw inspiration from is that of proof in mathematics. The proof
    has proven to be an useful tool at communicating mathematical ideas from one person
    to another, with a certain of rigor to avoid ambiguity and confusion, but not
    computer-level formality: unlike computer science, mathematicians have only recently
    begun to formalize proofs for computer consumption. Writing and reading proofs
    is tough business, but it is the key tool by which knowledge is passed down.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 数学中证明的一个灵感来源之一。证明已经证明是一个有用的工具，用于将数学思想从一个人传达到另一个人，具有一定的严谨性，以避免歧义和混淆，但不是计算机级别的形式：与计算机科学不同，数学家们最近才开始为计算机消耗形式化证明。编写和阅读证明是一项艰难的任务，但这是传递知识的关键工具。
- en: 'Is a program a proof? In short, yes. But it is a proof of the *wrong thing*:
    that is, it precisely specifies what the program will do, but subsequently fails
    to say anything beyond that (like correctness or performance or any number of
    other intangible qualities.) And furthermore, it is targeted at the computer,
    not another person. It is one of the reasons why “the specification of the language
    is the compiler itself” is such a highly unsatisfying answer.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 程序是证明吗？简而言之，是的。但它证明了*错误的东西*：也就是说，它精确地指定了程序将要做的事情，但随后没有提供任何超出此范围的内容（如正确性或性能或任何其他无形的特性）。而且，它是针对计算机而不是另一个人的。这就是为什么“语言的规范是编译器本身”是一个非常令人不满意的答案之一的原因。
- en: 'Even worse, at some point in time you may have had in your head a mental model
    of how some dark magic worked, having meticulously worked it out and convinced
    yourself that it worked. And then you wrote `// Black magic: don''t touch unless
    you understand all of this!` And then you moved on and the knowledge was lost
    forever, to be rediscovered by some intrepid soul who arduously reread your code
    and reconstructed your proof. Give them a bone! And if you haven’t *even* convinced
    yourself that the code for your critical section will do the right thing, *shame
    on you!* (If your code is simple, it should have been a simple proof. If your
    code is complicated, you probably got it wrong.)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 更糟糕的是，在某个时候，您可能会在脑海中对某些黑魔法的工作原理有一个精确的心理模型，经过精心计算并说服自己它是有效的。然后您写下了`// 黑魔法：除非您完全理解所有这些内容，请勿触摸！`然后您离开了，知识永远丢失了，直到某个勇敢的灵魂艰难地重新阅读您的代码并重建您的证明。给他们一个提示！如果您甚至没有说服自己代码的关键部分将做正确的事情，那真是可耻！（如果您的代码很简单，应该有一个简单的证明。如果您的代码很复杂，您可能弄错了。）
- en: '* * *'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'You might argue that this is just the age-old adage “we need more documentation!”
    But there is a difference: proofs play a fundamentally different role than just
    documentation. Like programs, they must also be maintained, but their maintenance
    is not another chore to be done, inessential to the working of your program—rather,
    it should be considered a critical design exercise for assuring you and your colleagues
    of that your new feature is theoretically sound. It is stated that good comments
    say “Why” not “What.” I want to demand rigor now.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会认为这只是古老的格言“我们需要更多的文档！”但有一个区别：证明发挥的作用与仅仅是文档完全不同。与程序类似，它们也必须进行维护，但它们的维护不是另一个不必要的工作，与您的程序工作无关——相反，它应该被视为一项关键的设计练习，以确保您和您的同事新功能在理论上是合理的。有人说好的评论是“为什么”，而不是“什么”。我现在要求严格了。
- en: Rigor does not mean that a proof needs to be in “Greek letters” (that is, written
    in formal notation)—after all, such language is frequently off putting to those
    who have not seen it before. But it’s often a good idea, because formal language
    can capture ideas much more precisely and succinctly than English can.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 严谨并不意味着证明必须用“希腊字母”（即用正式符号写成）——毕竟，对于以前没有看到过这种语言的人来说，这种语言经常会让人望而却步。但这通常是一个好主意，因为形式化语言可以比英语更精确和简洁地捕捉思想。
- en: 'Because programs frequently evolve in their scope and requirements (unlike
    mathematical proofs), we need unusually good abstractions to make sure we can
    adjust our proofs. Our proofs about higher level protocols should be able to ignore
    the low level details of any operation. Instead, they should rely on whatever
    higher level representation each operation has (whether its pre and post-conditions,
    denotational semantics, predicative semantics, etc). We shouldn’t assume our abstractions
    work either (nor should we throw up our hands and say “all abstractions are leaky”):
    we should *prove* that they have the properties we think they should have (and
    also say what properties they don’t have too). Of course, they might end up being
    the *wrong* properties, as is often the case in evolutionary software, but often,
    proof can smoke these misconceptions out.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 因为程序的范围和需求经常发生变化（与数学证明不同），我们需要非常好的抽象来确保我们可以调整我们的证明。我们对高级协议的证明应该能够忽略任何操作的低级细节。相反，它们应该依赖于每个操作所具有的更高级别表示（无论是前置条件和后置条件、表意语义、陈述性语义等）。我们也不应假设我们的抽象是有效的（也不应该举手投降并说“所有抽象都是有漏洞的”）：我们应该*证明*它们具有我们认为它们应该具有的属性（并且也说出它们不具备的属性）。当然，它们最终可能会变成*错误的*属性，就像在演化软件中经常发生的情况一样，但是证明通常可以揭示这些误解。
