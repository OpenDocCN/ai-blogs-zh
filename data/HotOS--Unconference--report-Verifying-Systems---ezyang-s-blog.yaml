- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:21'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:21'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: <!--
- en: 'HotOS “Unconference” report:Verifying Systems : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HotOS“非会议”报告：验证系统：ezyang的博客
- en: 来源：[http://blog.ezyang.com/2013/05/hotos-unconference-reportverifying-systems/](http://blog.ezyang.com/2013/05/hotos-unconference-reportverifying-systems/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2013/05/hotos-unconference-reportverifying-systems/](http://blog.ezyang.com/2013/05/hotos-unconference-reportverifying-systems/)
- en: '[Ariel Rabkin](http://www.eecs.berkeley.edu/~asrabkin/) has some code he''d
    like to verify, and at this year’s HotOS he appealed to participants of one “unconference”
    (informal breakout sessions to discuss various topics) to help him figure out
    what was really going on as far as formal verification went.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[Ariel Rabkin](http://www.eecs.berkeley.edu/~asrabkin/)有一些他想要验证的代码，今年的HotOS上，他呼吁与会者帮助他弄清楚形式验证的真正进展。'
- en: 'He had three questions: "What can we verify? What is impossible to verify?
    How can we tell that the verification is correct?" They seemed like impossibly
    large questions, so we drilled in a little bit, and found that Ariel had the very
    understandable question, "Say I have some C++ code implementing a subtle network
    protocol, and I''d like to prove that the protocol doesn''t deadlock; how do I
    do that?"'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 他提出了三个问题："我们能验证什么？什么是不可能验证的？我们如何确定验证是正确的？" 这些问题似乎是不可能回答的大问题，所以我们深入挖掘了一下，发现阿里尔提出了一个非常理解的问题："假设我有一些实现微妙网络协议的C++代码，我想证明协议不会死锁；我该如何做？"
- en: I wish the formal verification community had a good answer to a question like
    this, but unfortunately we don't. The largest verification projects include things
    like verified kernels, which are written in fully specified subsets of C; which
    assume the translation performed by the compiler is correct, formalize C in a
    theorem prover, and then verify there. This is the "principled approach". It's
    just not feasible to take C or C++ in its entirety and try to formalize it; it's
    too complicated and too ill-specified. The easiest thing to do is formalize a
    small fragment of your algorithm and then make a hand-wavy argument that your
    implementation is adequate.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望形式验证社区能对这样的问题有一个好的回答，但不幸的是我们没有。最大的验证项目包括诸如验证内核之类的东西，这些内核是用完全指定的C子集编写的；假设编译器执行的翻译是正确的，在定理证明器中形式化C，然后进行验证。这是“原则性方法”。但是，将C或C++完全形式化并试图验证是不可行的；它太复杂，而且太不明确。最简单的方法是形式化算法的一个小片段，然后用一个手挥舞的论据证明你的实现是足够的。
- en: '[Martin Abadi](http://users.soe.ucsc.edu/~abadi/home.html) remarked that before
    you embark on a verification project, you have to figure out where you''ll get
    the most bang for your buck. Most of the time, a formalization won''t get you
    "full correctness"; the "electrons may be faulty", as the case may be. But even
    a flawed verification forces you to state your assumptions explicitly, which is
    a good thing.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[Martin Abadi](http://users.soe.ucsc.edu/~abadi/home.html)指出，在开始验证项目之前，你必须弄清楚哪里可以得到最大的回报。大多数情况下，形式化不能给你带来“完全正确性”；"电子可能是有故障的"，如情况可能。但即使是有缺陷的验证也会迫使你明确陈述你的假设，这是件好事。'
- en: 'We then circled around to the subject of, well, what can be verified. Until
    the 90s, the formal verification community limited itself to only complete and
    sound analyses—and failed. The relaxation of this restriction lead to a renaissance
    of formal verification work. We talked about who was using formal verification,
    and the usual suspects showed up: safety critical software, cache coherence protocols
    (but one participant remarked that this was only a flash in the pan, as far as
    applications goes—he asserted that these companies are likely not going to use
    these methods any longer in the future), etc. Safety critical software is also
    likely to use coprocessors (since hardware failure is a very real issue), but
    [Gernot Heiser](http://www.cse.unsw.edu.au/~gernot/) noted that these folks are
    trying to get away from physical separation: it is expensive in terms of expense,
    weight and energy. Luckily, the costs of verification, as he recounted, are within
    a factor of two of normal industrial assurance, and half the cost of military
    assurance (though, he cautioned that this was for a specific project, and for
    a specific size of code.) He also remarked that as far as changes to code requiring
    changes to the proofs, the changes in the proofs seemed to be linear in the complexity
    (conceptual or implementation-wise) of the change, which is a good sign!'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们转到了可以验证的主题。直到90年代，形式验证社区仅限于完整和可靠的分析，但失败了。放松这一限制导致形式验证工作的复兴。我们讨论了谁在使用形式验证，通常的嫌疑人出现了：安全关键软件，缓存一致性协议（但有参与者指出，这只是短暂现象，他断言这些公司未来可能不再使用这些方法），等等。由于硬件故障是一个非常真实的问题，安全关键软件还可能使用协处理器，但[Gernot
    Heiser](http://www.cse.unsw.edu.au/~gernot/)指出这些人正在试图摆脱物理分离，因为这在费用、重量和能源方面都很昂贵。幸运的是，正如他回顾的那样，验证的成本在正常工业保证的两倍以内，且是军事保证的一半（尽管他警告说这是针对特定项目和特定代码规模的情况）。他还提到，关于对代码的更改需要更改证明的情况，证明的更改似乎与更改的复杂性（概念上或实施上）成线性关系，这是一个好兆头！
- en: Well, supposing that you decide that you actually want to verify your software,
    how do you go about doing it? Unfortunately, it takes a completely different set
    of skills to build verified software versus normal software. Everyone agreed,
    "Yes, you need to hire a formal methods guy" if you're going to make any progress.
    But that's just not enough. The formal methods guy has to talk to the systems
    guy. Heiser recounted a very good experience hiring a formal methods person who
    was able to communicate with the other systems researchers working on the project;
    without this line of communication, he said, the project likely would have failed.
    And he mentioned another project, which had three times as much funding, but didn't
    accomplish nearly as much their team had. (Names not mentioned to protect the
    guilty.)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，假设你决定确实想要验证你的软件，那么你该如何去做呢？不幸的是，构建验证软件与普通软件需要完全不同的技能集。大家都同意，“是的，如果要取得进展，你需要雇佣一个形式方法的专家”。但这还远远不够。形式方法的专家必须与系统研究人员交流。Heiser回顾了一次非常好的经验，雇佣了一个能够与项目中其他系统研究人员沟通的形式方法人员；他说，如果没有这种沟通渠道，项目很可能会失败。他还提到了另一个项目，资金是他们的三倍，但成绩却远远不如他们的团队。（出于保护相关人士的目的，姓名未透露。）
- en: In the end, it seemed that we didn’t manage to give Ari a quite satisfactory
    answer. As one participant said, “You’ll probably learn the most by just sitting
    down and trying to formalize the thing you are interested in.” This is probably
    true, though I fear most will be scared off by the realization of how much work
    it actually takes to formalize software.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，看起来我们并未能给Ari一个令人满意的答案。正如一位参与者所说，“你可能最终只能通过坐下来尝试正式化你感兴趣的事物来学到最多。”这可能是真的，尽管我担心大多数人会被实际需要多少工作量来正式化软件所吓到。
- en: '* * *'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Hey guys, I’m [liveblogging HotOS at my research Tumblr](http://ezyang.tumblr.com).
    The posts there are likely to be more fragmented than this, but if people are
    interested in any particular topics I can inflate them into full posts.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 嘿伙计们，我正在[我的研究Tumblr上实时博客HotOS](http://ezyang.tumblr.com)。那里的帖子可能比这更为分散，但如果人们对任何特定主题感兴趣，我可以将它们扩展为完整的帖子。
