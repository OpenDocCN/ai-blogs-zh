- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:18:00'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:18:00'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Generalization and vagueness in specifications : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规范中的泛化和模糊性：ezyang’s博客
- en: 来源：[http://blog.ezyang.com/2010/12/generalization-and-vagueness-in-specifications/](http://blog.ezyang.com/2010/12/generalization-and-vagueness-in-specifications/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/12/generalization-and-vagueness-in-specifications/](http://blog.ezyang.com/2010/12/generalization-and-vagueness-in-specifications/)
- en: '*What semantics has to say about specifications*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*语义对规范的看法*'
- en: Conventional wisdom is that premature generalization is bad (architecture astronauts)
    and vague specifications are appropriate for top-down engineering but not bottom-up.
    Can we say something a little more precise about this?
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 普遍认为，过早泛化是不好的（架构宇航员），模糊的规范适合自上而下的工程，但不适合自下而上。我们能对此说得更具体一些吗？
- en: 'Semantics are formal specifications of programming languages. They are perhaps
    some of the most well-studied forms of specifications, because computer scientists
    love tinkering with the tools they use. They also love having lots of semantics
    to pick from: the more the merrier. We have small-step and big-step operational
    semantics; we have axiomatic semantics and denotational semantics; we have game
    semantics, algebraic semantics and concurrency semantics. Describing the programs
    we actually write is difficult business, and it helps to have as many different
    explanations as possible.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 语义是编程语言的形式规范。它们可能是最被深入研究的规范形式之一，因为计算机科学家喜欢调整他们使用的工具。他们也喜欢有很多语义可供选择：越多越好。我们有小步和大步操作语义；我们有公理语义和指称语义；我们有游戏语义、代数语义和并发语义。描述我们实际编写的程序是一项困难的工作，拥有尽可能多的不同解释是有帮助的。
- en: In my experience, it’s rather rare to see software have multiple specifications,
    each of them treated equally. Duplication makes it difficult to evolve the specification
    as more information becomes available and requirements change (as if it wasn’t
    hard enough already!) Two authoritative sources can conflict with each other.
    One version of the spec may dictate how precisely one part of the system is to
    be implemented, where the other leaves it open (up to some external behavior).
    What perhaps is more common is a single, authoritative specification, and then
    a constellation of informative references that you might actually refer to on
    a day-to-day basis.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我的经验，软件很少有多个规范，每个规范都被同等对待。重复使得在更多信息可用和需求变化时，难以演变规范（好像本来就不够难！）两个权威来源可能相互冲突。规范的一个版本可能要求系统的某一部分实施得非常精确，而另一个则保持开放（直到某种外部行为）。更常见的可能是单一的、权威的规范，然后是一系列信息参考，你在日常工作中可能真正会参考的。
- en: Of course, this happens in the programming language semantics world all the
    time. On the subject of conflicts and differing specificity, here are two examples
    from denotational semantics (Scott semantics) and game semantics.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这种情况在编程语言语义世界中经常发生。关于冲突和不同的具体性问题，这里有两个例子来自指称语义（斯科特语义）和游戏语义。
- en: '*Too general?* Here, the specification allows for some extra behavior (parallel
    or in PCF) that is impossible to implement in the obvious way (sequentially).
    This problem puzzled researchers for some time: if the specification is too relaxed,
    do you add the feature that the specification suggests (PCF+por), or do you attempt
    to modify the semantics so that this extra behavior is ruled out (logical relations)?
    Generality can be good, but it frequently comes at the cost of extra implementation
    complexity. In the case of parallel or, however, this implementation complexity
    is a threaded runtime system, which is useful for unrelated reasons.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*太泛了吗？* 这里，规范允许一些额外的行为（并行或在PCF中），这是无法以显而易见的方式实现的。这个问题困扰研究人员一段时间：如果规范太松散，你是添加规范建议的特性（PCF+por），还是尝试修改语义，使得这种额外行为被排除（逻辑关系）？泛化可能有好处，但通常以增加实现复杂性为代价。然而，在并行或的情况下，这种实现复杂性是一个线程化运行时系统，出于无关的原因也是有用的。'
- en: '*Too vague?* Here, the specification fails to capture a difference in behavior
    (seq and pseq are (Scott) semantically equivalent) that happens to be important
    operationally speaking (control of evaluation order). Game semantics neatly resolves
    this issue: we can distinguish between ``x `pseq` y`` and ``y `pseq` x`` because
    in the corresponding conversation, the expression asks for the value of x first
    in the former example, and the value of y first in the latter. However, vague
    specifications give more latitude to the compiler for optimizations.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*太模糊了吗？* 在这里，规范未能捕捉到行为上的差异（seq 和 pseq 在语义上等同（Scott）），而这恰好在操作上是重要的（控制评估顺序）。游戏语义巧妙地解决了这个问题：我们可以区分``x
    `pseq` y``和``y `pseq` x``，因为在相应的对话中，前者的表达式首先询问x的值，后者首先询问y的值。然而，模糊的规范为编译器的优化提供了更多的自由度。'
- en: 'Much like the mantra “the right language for the job”, I suspect there is a
    similar truth in “the right style of specification for the job.” But even further
    than that, I claim that looking at the same domain from different perspectives
    deepens your understanding of the domain itself. When using semantics, one includes
    some details and excludes others: as programmers we do this all the time—it’s
    critical for working on a system of any sort of complexity. When building semantics,
    the differences between our semantics give vital hints about the abstraction boundaries
    and potential inconsistencies in our original goals.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 像“适合工作的正确语言”这样的口头禅一样，我怀疑在“适合工作的正确规范风格”方面也有类似的真理。但更甚的是，我主张从不同的视角审视同一领域会加深你对领域本身的理解。在使用语义学时，我们包含某些细节并排除其他细节：作为程序员，我们时常这样做——这对于处理任何复杂系统至关重要。在构建语义时，我们语义之间的差异提供了关于抽象边界和我们原始目标潜在不一致性的重要线索。
- en: 'There is one notable downside to a lot of different paradigms for thinking
    about computation: you have to learn all of them! Axiomatic semantics recall the
    symbolic manipulation you might remember from High School maths: mechanical and
    not very interesting. Denotational semantics requires a bit of explaining before
    you can get the right intuition for it. Game semantics as “conversations” seems
    rather intuitive (to me) but there are a number of important details that are
    best resolved with some formality. Of course, we can always fall back to speaking
    operationally, but it is an approach that doesn’t scale for large systems (“read
    the source”).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 有一点需要注意，许多不同的计算思维范式存在一个明显的缺点：你必须学会它们全部！公理语义回忆起你可能记得的高中数学中的符号操作：机械而不是非常有趣。指称语义要求先解释一下，然后才能得到正确的直觉。游戏语义作为“对话”似乎相当直观（对我来说），但是有一些重要的细节最好通过某种形式来解决。当然，我们总是可以回到操作性的讨论，但这种方法在大型系统中不具可扩展性（“阅读源代码”）。
