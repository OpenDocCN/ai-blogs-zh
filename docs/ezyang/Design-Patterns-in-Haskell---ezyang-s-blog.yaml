- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:18:20'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:18:20'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Design Patterns in Haskell : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Haskell中的设计模式：ezyang’s博客
- en: 来源：[http://blog.ezyang.com/2010/05/design-patterns-in-haskel/](http://blog.ezyang.com/2010/05/design-patterns-in-haskel/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/05/design-patterns-in-haskel/](http://blog.ezyang.com/2010/05/design-patterns-in-haskel/)
- en: '*Attention Conservation Notice.* A listing of how Gang of Four design patterns
    might be equivalently implemented in Haskell. A phrasebook for object-oriented
    programmers dealing with functional programming concepts.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：保存注意事项*。列出了如何在函数式编程语言中等效实现四人帮设计模式的清单。这是面向对象程序员处理函数式编程概念的短语手册。'
- en: In their introduction to seminal work *Design Patterns*, the Gang of Four say,
    "The choice of programming language is important because it influences one's point
    of view. Our patterns assume Smalltalk/C++-level language features, and that choice
    determines what can and cannot be implemented easily. If we assumed procedural
    languages, we might have included design patterns called 'Inheritance,' 'Encapsulation,'
    and 'Polymorphism.'"
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在其对经典作品*设计模式*的介绍中，四人帮说：“编程语言的选择很重要，因为它影响一个人的视角。我们的模式假设具有Smalltalk/C++级别的语言特性，而这种选择决定了什么可以轻松实现，什么不可以。如果我们假设过程式语言，我们可能会包括名为‘继承’、‘封装’和‘多态性’的设计模式。”
- en: What is easy and what is hard to implement in a functional programming language?
    I decided to revisit all 23 original Gang of Four design patterns under that lense.
    My hope is that these results will be useful to Object Oriented Programmers seeking
    to learn the ways of Functional Programming.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数式编程语言中，什么容易实现，什么难以实现？我决定重新审视所有23个原始的四人帮设计模式，从这个角度出发。我希望这些结果对希望学习函数式编程的面向对象程序员有所帮助。
- en: '[Strategy](http://en.wikipedia.org/wiki/Strategy_pattern). *First class functions
    and lambdas.* Any extra data that might be placed as class members is traditionally
    implemented using closures (which stash the data in a lambda function''s environment)
    or currying (which create implicit closures for function''s arguments). Strategies
    are also powerful because they are polymorphic; type synonyms for function types
    can play a similar role. Java has recognized anonymous functions as a good idea,
    and have added facilities for anonymous classes, which are frequently used in
    this capacity.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[策略](http://zh.wikipedia.org/wiki/策略模式)。*一级函数和lambda*。任何可能放置为类成员的额外数据通常使用闭包（将数据存储在lambda函数的环境中）或柯里化（为函数的参数创建隐式闭包）来实现。策略也非常强大，因为它们是多态的；函数类型的类型同义词可以发挥类似的作用。Java已经认识到匿名函数是一个好主意，并且添加了匿名类的功能，这在这方面经常被使用。'
- en: '[Factory Method](http://en.wikipedia.org/wiki/Factory_method_pattern) and [Template
    Method](http://en.wikipedia.org/wiki/Template_method_pattern). *Higher-order functions.*
    Instead of making a subclass, just pass the the function you''d like to vary the
    behavior of with the function.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[工厂方法](http://zh.wikipedia.org/wiki/工厂方法模式)和[模板方法](http://zh.wikipedia.org/wiki/模板方法模式)。*高阶函数*。不要创建子类，只需传递想要变化行为的函数。'
- en: '[Abstract Factory](http://en.wikipedia.org/wiki/Abstract_factory_pattern),
    [Builder](http://en.wikipedia.org/wiki/Builder_pattern) and [Bridge](http://en.wikipedia.org/wiki/Bridge_pattern).
    *Type classes* and *smart constructors.* Type classes are capable of defining
    functions which creating instances of themselves; all a function needs to do to
    take advantage of this is to commit itself to returning some value of type `TypeClass
    a => a` and using only (constructor et alia) functions that the type class exposes.
    If you''re not just constructing values but manipulating them with the general
    type class interface, you have a Bridge. Smart constructors are functions built
    on top of the basic data constructor that can do "more", whether this is invariant
    checking, encapsulation or an easier API, this can correspond to more advanced
    methods that a factory provides.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[抽象工厂](http://zh.wikipedia.org/wiki/抽象工厂模式)，[建造者](http://zh.wikipedia.org/wiki/建造者模式)和[桥接](http://zh.wikipedia.org/wiki/桥接模式)。*类型类*和*智能构造函数*。类型类能够定义创建其实例的函数；一个函数只需承诺返回某种类型的值
    `TypeClass a => a`，并且仅使用类型类公开的（构造函数等）函数，就能利用这一特性。如果你不仅仅是构造值，而是通过通用类型类接口操纵它们，你就拥有了一个桥接。智能构造函数是在基本数据构造函数之上构建的函数，可以做“更多”事情，无论是不变性检查、封装还是更简单的API，这对应于工厂提供的更高级方法。'
- en: '[Adapter](http://en.wikipedia.org/wiki/Adapter_pattern), [Decorator](http://en.wikipedia.org/wiki/Decorator_pattern)
    and [Chain of Responsibility](http://en.wikipedia.org/wiki/Chain-of-responsibility_pattern).
    *Composition* and *lifting.* Function composition can be used to form a pipeline
    of data between functions; a foreign function can be sandwiched between two functions
    that convert to and from the type the function expects, or a function can be composed
    with another to make it do more things. If the signature stays the same, one or
    more of the functions was *endomorphic.* If the functions have side effect, it
    may be Kleisli arrow composition (more plainly spoken as monadic function composition.)
    Multiple functions can handle the same input using the Reader monad.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[适配器模式](http://en.wikipedia.org/wiki/Adapter_pattern)，[装饰者模式](http://en.wikipedia.org/wiki/Decorator_pattern)和[责任链模式](http://en.wikipedia.org/wiki/Chain-of-responsibility_pattern)。*组合*和*提升*。函数组合可用于形成函数之间的数据管道；外部函数可以夹在期望的类型转换函数之间，或者一个函数可以与另一个函数组合以使其执行更多操作。如果签名保持不变，则一个或多个函数是*端态的*。如果函数具有副作用，则可能是Kleisli箭头组合（更通俗地称为单子函数组合）。多个函数可以使用Reader单子处理相同的输入。'
- en: '[Visitor](http://en.wikipedia.org/wiki/Visitor_pattern). *Equational functions.*
    Frequently *foldable.* Many functional languages favor grouping the same operation
    on different data constructors together, in a mathematical equational style. This
    means similar behaviors are grouped together. Traditional grouping of behavior
    by "class" is implemented with *type classes.* Visitors typically collapse the
    data structures they operate on into smaller values, this is seen in the fold
    family of functions.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[访问者模式](http://en.wikipedia.org/wiki/Visitor_pattern)。*等式函数*。经常是*可折叠*的。许多函数式语言喜欢以数学等式风格将相同操作在不同数据构造器上分组，这意味着类似的行为被聚集在一起。传统的按“类”分组行为是通过*类型类*来实现的。访问者通常将它们操作的数据结构折叠成更小的值，这在折叠函数族中可以看到。'
- en: '[Interpreter](http://en.wikipedia.org/wiki/Interpreter_pattern). *Functions*.
    Frequently circumvented with an *embedded domain specific language.* Algebraic
    data types make light-weight abstract syntax trees easy to formulate. Just as
    Visitor is often used with Interpeter, you''ll probably write your interpreting
    functions with pattern matching. Even better, don''t come up with another data
    type; just use functions and infix operators to say what you mean. Closely related
    to...'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[解释器模式](http://en.wikipedia.org/wiki/Interpreter_pattern)。*函数*。经常通过*嵌入式领域特定语言*绕过。代数数据类型使得轻量级抽象语法树易于构造。正如访问者经常与解释器一起使用，你可能会用模式匹配编写你的解释函数。更好的做法是，不要再想出另一种数据类型；只需使用函数和中缀操作符来表达你的意图。与此密切相关的是...'
- en: '[Command](http://en.wikipedia.org/wiki/Command_pattern). *Monads.* See also
    *algebraic data types*, frequently *generalized (GADT)*. A pure language will
    not run your `IO` until `main` touches it, so you can freely pass values of type
    `IO a` without fear of actually causing the side-effect, though these functions
    are difficult to serialize (a common motivation behind Command). Parametrization
    of the action to perform is once again achieved through higher-order functions.
    GADTs are a little more bulky, but can be seen in places like the [Prompt monad
    (PDF)](http://themonadreader.files.wordpress.com/2010/01/issue15.pdf), where a
    GADT is used to represent actions that another function interprets into the `IO`
    monad; the type gives a statically enforced guarantee of what operations in this
    data type are allowed to do.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[命令模式](http://en.wikipedia.org/wiki/Command_pattern)。*单子*。另见*代数数据类型*，经常是*广义代数数据类型（GADT）*。纯语言不会运行你的`IO`，直到`main`触及它，因此你可以自由地传递类型为`IO
    a`的值，而不必担心实际引起副作用，尽管这些函数难以序列化（命令背后的常见动机）。通过高阶函数再次实现对要执行的操作的参数化。GADT有点臃肿，但可以在像[Prompt
    monad (PDF)](http://themonadreader.files.wordpress.com/2010/01/issue15.pdf)这样的地方看到，其中GADT用于表示另一个函数将其解释为`IO`单子的操作；类型给出了静态强制执行的保证，这种数据类型中允许做什么操作。'
- en: '[Composite](http://en.wikipedia.org/wiki/Composite_pattern). Recursive *algebraic
    data types.* Especially prominent since there''s no built-in inheritance.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[组合模式](http://en.wikipedia.org/wiki/Composite_pattern)。递归*代数数据类型*。特别突出，因为没有内置继承。'
- en: '[Iterator](http://en.wikipedia.org/wiki/Iterator_pattern). *Lazy lists.* Iterators
    expose an element-by-element access of a data structure without exposing it''s
    external structure; the list is the API for this sort of access and laziness means
    we don''t compute the entirety of the stream until it is necessary. When IO is
    involved, you might use a real iterator.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[迭代器模式](http://en.wikipedia.org/wiki/Iterator_pattern)。*惰性列表。* 迭代器公开了对数据结构逐个元素访问的接口，而不暴露其外部结构；列表是这种访问的API，惰性意味着在需要时我们不会计算整个流。涉及IO时，你可能会使用真正的迭代器。'
- en: '[Prototype](http://en.wikipedia.org/wiki/Prototype_pattern). *Immutability.*
    Modification copies by default.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[原型模式](http://en.wikipedia.org/wiki/Prototype_pattern)。*不可变性。* 修改默认复制。'
- en: '[Flyweight](http://en.wikipedia.org/wiki/Flyweight_pattern). *Memoising* and
    *constant applicative forms (CAF).* Instead of calculating the result of an expression,
    create a data structure that contains all of the results for all possible input
    values (or perhaps, just the maximum memo). Because it is lazy, the result is
    not computed until it is needed; because it is a legitimate data structure, the
    same result is returned on successive computations. CAFs describe expressions
    that can be lifted into the top-level of a program and whose result can be shared
    by all other code that references it.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[享元模式](http://en.wikipedia.org/wiki/Flyweight_pattern)。*记忆化* 和 *常量适用表达形式（CAF）。*
    而不是计算表达式的结果，创建一个包含所有可能输入值的结果的数据结构（或者，只是最大的记忆）。因为它是惰性的，结果在需要时才计算；因为它是一个合法的数据结构，所以在后续计算中返回相同的结果。CAF描述的表达式可以提升到程序的顶层，并且其结果可以被所有引用它的其他代码共享。'
- en: '[State](http://en.wikipedia.org/wiki/State_pattern) and [Memento](http://en.wikipedia.org/wiki/Memento_pattern).
    Unnecessary; state has an explicit representation and thus can always be arbitrarily
    modified, and it can include functions, which can be changed to change behavior.
    State as a function (rather than an object or an enumeration), if you will. The
    encapsulation provided by Memento is achieved by hiding the appropriate constructors
    or destructors. You can easily automatically manage past and future states in
    an appropriate monad such as the Undo monad.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[状态模式](http://en.wikipedia.org/wiki/State_pattern) 和 [备忘录模式](http://en.wikipedia.org/wiki/Memento_pattern)。不必要；状态具有显式表示，因此可以随意修改，它可以包括函数，可以更改以改变行为。状态作为函数（而不是对象或枚举），如果你愿意。备忘录提供的封装是通过隐藏适当的构造函数或析构函数实现的。你可以在适当的单子（例如Undo单子）中轻松自动管理过去和未来状态。'
- en: '[Singleton](http://en.wikipedia.org/wiki/Singleton_pattern). Unnecessary; there
    is no global state except in a monad, and the monad''s type can enforce that only
    one instance of a record is present; functions exist in a global namespace and
    are always accessible.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[单例模式](http://en.wikipedia.org/wiki/Singleton_pattern)。不必要；除了在单子中的全局状态之外，还可以通过单子的类型来强制只存在一个记录实例；函数存在于全局命名空间并且总是可访问的。'
- en: '[Facade](http://en.wikipedia.org/wiki/Facade_pattern). *Functions.* Generally
    less prevalent, since function programming focuses on input-output, which makes
    the straight-forward version use of a function very short. High generality can
    require more user friendly interfaces, typically implemented with, well, more
    functions.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[外观模式](http://en.wikipedia.org/wiki/Facade_pattern)。*函数。* 一般来说不太普遍，因为函数式编程侧重于输入输出，使得直接使用函数的版本非常简短。高泛化度可能需要更用户友好的接口，通常通过更多的函数实现。'
- en: '[Observer](http://en.wikipedia.org/wiki/Observer_pattern). One of many concurrency
    mechanisms, such as channels, asynchronous exceptions and mutable variables. See
    also *functional reactive programming.*'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[观察者模式](http://en.wikipedia.org/wiki/Observer_pattern)。诸如通道、异步异常和可变变量等许多并发机制之一。参见*函数式反应式编程*。'
- en: '[Proxy](http://en.wikipedia.org/wiki/Proxy_pattern). *Wrapped data types,*
    *laziness* and *garbage collector.* See also ref monadic types (IORef, STRef),
    which give more traditional pointer semantics. Laziness means structures are always
    created on demand, garbage collection means smart references are not necessary.
    You can also wrap a data type and only publish accessors that enforce extra restrictions.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[代理模式](http://en.wikipedia.org/wiki/Proxy_pattern)。*包装数据类型，* *惰性* 和 *垃圾回收器。*
    参见参考单子类型（IORef，STRef），它们提供更传统的指针语义。惰性意味着结构总是按需创建的，垃圾回收意味着智能引用是不必要的。你还可以包装一个数据类型，并且只发布强制执行额外限制的访问器。'
- en: '[Mediator](http://en.wikipedia.org/wiki/Mediator_pattern). *Monad stacks*.
    While it''s not useful to talk about interactions between objects, due to a preference
    for stateless code, monad stacks are frequently used to provide a unified interface
    for code that performs operations in a complex environment.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[中介者模式](http://en.wikipedia.org/wiki/Mediator_pattern)。 *单子堆栈*。虽然讨论对象之间的交互并不实用，因为更偏好无状态代码，但单子堆栈经常用于为在复杂环境中执行操作的代码提供统一接口。'
- en: Comments and suggestions appreciated; I'll be keeping this post up-to-date.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎评论和建议；我将会保持这篇文章的更新。
