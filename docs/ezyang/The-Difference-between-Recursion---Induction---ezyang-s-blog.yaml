- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:21'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:21'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'The Difference between Recursion & Induction : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 递归与归纳的区别：ezyang的博客
- en: 来源：[http://blog.ezyang.com/2013/04/the-difference-between-recursion-induction/](http://blog.ezyang.com/2013/04/the-difference-between-recursion-induction/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2013/04/the-difference-between-recursion-induction/](http://blog.ezyang.com/2013/04/the-difference-between-recursion-induction/)
- en: 'Recursion and induction are closely related. When you were first taught recursion
    in an introductory computer science class, you were probably told to use induction
    to prove that your recursive algorithm was correct. (For the purposes of this
    post, let us exclude hairy recursive functions like the one in the [Collatz conjecture](http://en.wikipedia.org/wiki/Collatz_conjecture)
    which do not obviously terminate.) Induction suspiciously resembles recursion:
    the similarity comes from the fact that the inductive hypothesis looks a bit like
    the result of a “recursive call” to the theorem you are proving. If an ordinary
    recursive computation returns plain old values, you might wonder if an “induction
    computation” returns proof terms (which, by the Curry-Howard correspondence, could
    be thought of as a value).'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 递归和归纳密切相关。当你在初级计算机科学课程中首次学习递归时，你可能被告知使用归纳来证明你的递归算法是正确的。（为了本文的目的，让我们排除像[Collatz猜想](http://en.wikipedia.org/wiki/Collatz_conjecture)中那样不明显终止的复杂递归函数。）归纳看起来非常像递归：这种相似性来自于归纳假设看起来有点像你正在证明的定理的“递归调用”的结果。如果一个普通的递归计算返回普通的值，你可能会想知道一个“归纳计算”是否返回证明项（根据柯里-霍华德对应，可以将其视为一个值）。
- en: 'As it turns out, however, when you look at recursion and induction categorically,
    they are not equivalent! Intuitively, the difference lies in the fact that when
    you are performing induction, the data type you are performing induction over
    (e.g. the numbers) appears at the *type* level, not the term level. In the words
    of a category theorist, both recursion and induction have associated initial algebras,
    but the carrier sets and endofunctors are different. In this blog post, I hope
    to elucidate precisely what the difference between recursion and induction is.
    Unfortunately, I need to assume *some* familiarity with initial algebras: if you
    don’t know what the relationship between a fold and an initial algebra is, check
    out this [derivation of lists in initial algebra form](http://blog.ezyang.com/2012/10/duality-for-haskellers/).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，事实证明，当你从范畴论的角度来看递归和归纳时，它们并不等价！直观地说，区别在于当你进行归纳时，你进行归纳的数据类型（例如数字）出现在*类型*级别，而不是术语级别。用范畴论者的话来说，递归和归纳都有关联的初等代数，但载体集和endo函子是不同的。在这篇博文中，我希望精确阐明递归和归纳之间的区别。不幸的是，我需要假设读者*某些*对初等代数的了解：如果你不知道折叠和初等代数之间的关系，请查看这篇[列表在初等代数形式中的导出](http://blog.ezyang.com/2012/10/duality-for-haskellers/)。
- en: 'When dealing with generalized abstract nonsense, the most important first step
    is to use a concrete example! So let us go with the simplest nontrivial data type
    one can gin up: the natural numbers (our examples are written in both Coq and
    Haskell, when possible):'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 处理广义抽象无意义时，最重要的第一步是使用具体示例！因此，让我们选择最简单的非平凡数据类型之一：自然数（我们的示例在可能的情况下以Coq和Haskell编写）：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Natural numbers are a pretty good example: even the [Wikipedia article on F-algebras](http://en.wikipedia.org/wiki/F-algebra)
    uses them. To recap, an F-algebra (or sometimes simply “algebra”) has three components:
    an (endo)functor `f`, a type `a` and a reduction function `f a -> a`. For simple
    recursion over natural numbers, we need to define a functor `NatF` which “generates”
    the natural numbers; then our type `a` is `Nat` and the reduction function is
    type `NatF Nat -> Nat`. The functor is defined as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 自然数是一个很好的例子：即使是[F-代数的维基百科文章](http://en.wikipedia.org/wiki/F-algebra)也使用它们。简言之，一个F-代数（有时简称为“代数”）有三个组成部分：一个（endo）函子`f`，一个类型`a`和一个减少函数`f
    a -> a`。对于自然数的简单递归，我们需要定义一个生成自然数的函子`NatF`；然后我们的类型`a`是`Nat`，减少函数是类型`NatF Nat ->
    Nat`。该函子定义如下：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Essentially, take the original definition but replace any recursive occurrence
    of the type with a polymorphic variable. As an exercise, show that `NatF Nat ->
    Nat` exists: it is the (co)product of `() -> Nat` and `Nat -> Nat`. The initiality
    of this algebra implies that any function of type `NatF x -> x` (for some arbitrary
    type `x`) can be used in a fold `Nat -> x`: this fold is the homomorphism from
    the initial algebra (`NatF Nat -> Nat`) to another algebra (`NatF x -> x`). The
    take-away point is that the initial algebra of natural numbers consists of an
    endofunctor over **sets**.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，取原始定义，但用多态变量替换任何类型的递归出现。作为练习，展示`NatF Nat -> Nat`是存在的：它是`() -> Nat`和`Nat
    -> Nat`的（共）积。这个代数的初始性意味着对于任意类型`x`的`NatF x -> x`的函数可以在`Nat -> x`的折叠中使用：这个折叠是从初始代数(`NatF
    Nat -> Nat`)到另一个代数(`NatF x -> x`)的同态。关键是自然数的初始代数包括了一个关于**集合**的自函子。
- en: 'Let’s look at the F-algebra for induction now. As a first try, let’s try to
    use the same F-algebra and see if an appropriate homomorphism exists with the
    “type of induction”. (We can’t write this in Haskell, so now the examples will
    be Coq only.) Suppose we are trying to prove some proposition `P : nat -> Prop`
    holds for all natural numbers; then the type of the final proof term must be `forall
    n : nat, P n`. We can now write out the morphism of the algebra: `NatF (forall
    n : nat, P n) -> forall n : nat, P n`. But this “inductive principle” is both
    nonsense and not true:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '现在让我们来看看归纳的F-代数。作为第一次尝试，让我们尝试使用相同的F-代数，并看看是否存在与“归纳类型”相适应的适当同态（这里我们只能用Coq编写，而不能用Haskell）。假设我们试图证明某个命题`P
    : nat -> Prop`对所有自然数都成立；那么最终证明项的类型必须是`forall n : nat, P n`。现在我们可以写出代数的态射：`NatF
    (forall n : nat, P n) -> forall n : nat, P n`。但这个“归纳原理”既是无意义的，也不是真的：'
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '(Side note: you might say that this proof fails because I’ve provided a predicate
    which is false over all natural numbers. But induction still “works” even when
    the predicate you’re trying to prove is false: you should fail when trying to
    provide the base case or inductive hypothesis!)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: （旁注：你可能会说这个证明失败了，因为我提供了一个在所有自然数上都为假的谓词。但归纳仍然“有效”，即使你试图证明的谓词是假的：你应该在尝试提供基础情况或归纳假设时失败！）
- en: 'We step back and now wonder, “So, what’s the right algebra?” It should be pretty
    clear that our endofunctor is wrong. Fortunately, we can get a clue for what the
    right endofunctor might be by inspecting the type the induction principle for
    natural numbers:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们退后一步，现在想知道，“那么，正确的代数是什么？”很明显，我们的自函子是错误的。幸运的是，我们可以通过检查自然数归纳原理的类型来得出正确自函子的线索：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`P 0` is the type of the base case, and `forall n : nat, P n -> P (S n)` is
    the type of the inductive case. In much the same way that we defined `NatF nat
    -> nat` for natural numbers, which was the combination of `zero : unit -> nat`
    and `succ : nat -> nat`, we need to define a single function which combines the
    base case and the inductive case. This seems tough: the result types are not the
    same. But dependent types come to the rescue: the type we are looking for is:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`P 0`是基础情况的类型，`forall n : nat, P n -> P (S n)`是归纳情况的类型。就像我们为自然数定义了`NatF nat
    -> nat`一样，它是`zero : unit -> nat`和`succ : nat -> nat`的组合，我们需要定义一个单一的函数，它结合了基础情况和归纳情况。这似乎很困难：结果类型并不相同。但依赖类型来拯救：我们正在寻找的类型是：'
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can read this type as follows: I will give you a proof object of type `P
    n` for any `n`. If `n` is 0, I will give you this proof object with no further
    help (`True -> P 0`). However, if `n` is `S n''`, I will require you to furnish
    me with `P n''` (`P n'' -> P (S n'')`).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以这样阅读这个类型：我将为任意的`n`给你一个类型为`P n`的证明对象。如果`n`是0，我将为你提供这个证明对象而不需要进一步的帮助（`True
    -> P 0`）。然而，如果`n`是`S n'`，我将要求你提供`P n'`（`P n' -> P (S n')`）。
- en: 'We’re getting close. If this is the morphism of an initial algebra, then the
    functor `IndF` must be:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们快要接近了。如果这是一个初始代数的态射，那么函子`IndF`必须是：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'What category is this a functor over? Unfortunately, neither this post nor
    my brain has the space to give a rigorous treatment, but roughly the category
    can be thought of as nat-indexed propositions. Objects of this category are of
    the form `forall n : nat, P n`, morphisms of the category are of the form `forall
    n : nat, P n -> P'' n`. [1] As an exercise, show that identity and composition
    exist and obey the appropriate laws.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '这个函子是什么类别上的？不幸的是，这篇文章和我的大脑都没有足够的空间来进行严格的处理，但大致上可以将该类别视为自然数索引的命题。这个类别的对象形式为`forall
    n : nat, P n`，类别的态射形式为`forall n : nat, P n -> P'' n`。[1] 作为练习，展示恒等和复合存在，并遵守适当的法则。'
- en: 'Something amazing is about to happen. We have defined our functor, and we are
    now in search of the initial algebra. As was the case for natural numbers, the
    initial algebra is defined by the least fixed point over the functor:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 即将发生一些惊人的事情。我们已经定义了我们的函子，并且现在正在寻找初始代数。就像对自然数的情况一样，初始代数由函子的最小不动点定义：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: But this is just `True`!
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 但这只是 `True`！
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Drawing out our diagram:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制我们的图表：
- en: The algebras of our category (downward arrows) correspond to inductive arguments.
    Because our morphisms take the form of `forall n, P n -> P' n`, one cannot trivially
    conclude `forall n, P' n` simply given `forall n, P n`; however, the presence
    of the initial algebra means that `True -> forall n, P n` whenever we have an
    algebra `forall n, IndF n -> P n`. Stunning! (As a side note, Lambek’s lemma states
    that `Mu P` is isomorphic to `P (Mu P)`, so the initial algebra is in fact *really
    really* trivial.)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们范畴的代数（向下箭头）对应于归纳论证。因为我们的态射形式为 `forall n, P n -> P' n`，所以不能仅仅从 `forall n, P
    n` 得出 `forall n, P' n`；然而，初始代数的存在意味着当我们有一个代数 `forall n, IndF n -> P n` 时，`True
    -> forall n, P n`。令人惊叹！（顺便提一下，Lambek引理表明 `Mu P` 同构于 `P (Mu P)`，因此初始代数实际上是*非常非常*平凡的。）
- en: 'In conclusion:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 总结：
- en: '**Recursion** over the natural numbers involves F-algebras with the functor
    `unit + X` over the category of **Sets**. The least fixed point of this functor
    is the natural numbers, and the morphism induced by the initial algebra corresponds
    to a *fold*.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自然数递归**涉及到与函子 `unit + X` 对应的 F-代数，这些代数定义在**集合**范畴上。这个函子的最小不动点是自然数，而由初始代数诱导的态射对应于*折叠*。'
- en: '**Induction** over the natural numbers involves F-algebras with the functor
    `fun n => match n with 0 => True | S n'' => P n''` over the category of nat-indexed
    propositions. The least fixed point of this functor is `True`, and the morphism
    induced by the initial algebra *establishes the truth of the proposition being
    inductively proven*.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自然数归纳**涉及到与函子 `fun n => match n with 0 => True | S n'' => P n''` 对应的 F-代数，这些代数定义在自然数索引命题的范畴上。这个函子的最小不动点是
    `True`，而由初始代数诱导的态射*确立了归纳证明命题的真实性*。'
- en: 'So, the next time someone tells asks you what the difference between induction
    and recursion is, tell them: *Induction is just the unique homomorphism induced
    by an initial algebra over indexed propositions, what’s the problem?*'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，下次有人问你归纳和递归的区别是什么，告诉他们：*归纳只是由索引命题上的初始代数诱导的唯一同态，有什么问题吗？*
- en: '* * *'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Acknowledgements go to Conor McBride, who explained this shindig to me over
    ICFP. I promised to blog about it, but forgot, and ended up having to rederive
    it all over again.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 特别感谢 Conor McBride，在ICFP会议上向我解释了这个问题。我答应要写博客，但是忘记了，最终不得不重新推导一遍。
- en: '[1] Another plausible formulation of morphisms goes `(forall n : nat, P n)
    -> (forall n : nat, P'' n)`. However, morphisms in this category are too *strong*:
    they require you to go and prove the result for all *n*... which you would do
    with induction, which misses the point. Plus, this category is a subcategory of
    the ordinary category of propositions.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] 关于态射的另一个合理表述是 `(forall n : nat, P n) -> (forall n : nat, P'' n)`。然而，在这个范畴中的态射太过*强大*：它们要求你对所有的*n*去证明结果…
    这需要归纳，但这种方式并不是重点。此外，这个范畴是命题的普通范畴的子范畴。'
