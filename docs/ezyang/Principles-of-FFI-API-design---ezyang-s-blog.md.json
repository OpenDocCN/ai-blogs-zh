["```\n    newtype MyMonad a = MyMonad { unMyMonad :: ReaderT Env IO a }\n      deriving (MonadReader Env, Monad, Functor)\n\n    ```", "```\n    newtype OpaqueStruct = OpaqueStruct { unOpaqueStruct :: ForeignPtr (Ptr CStruct) }\n\n    ```", "```\n    withMVar (unOpaqueStruct o) $ \\o_ ->\n      withForeignPtr o_ $ \\p ->\n        -- peek â€™n poke the piggy, erm, pointer\n\n    ```", "```\n    newtype LockedMonad i a = LockedMonad { unLockedMonad :: ReaderT Env IO a }\n      deriving (MonadReader Env, Monad, Functor)\n    runLockedMonad :: (forall i. LockedMonad i a) -> IO a\n    runLockedMonad m = runReaderT (unLockedMonad m) =<< newEnv\n    data LockedData i a = LockedData a\n\n    ```"]