- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:03'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-07-01 18:17:03
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Designing the Backpack signature ecosystem : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计 Backpack 签名生态系统：ezyang 的博客
- en: 来源：[http://blog.ezyang.com/2017/03/designing-the-backpack-signature-ecosystem/](http://blog.ezyang.com/2017/03/designing-the-backpack-signature-ecosystem/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2017/03/designing-the-backpack-signature-ecosystem/](http://blog.ezyang.com/2017/03/designing-the-backpack-signature-ecosystem/)
- en: Suppose you are a library writer interested in using Backpack. Backpack says
    that you can replace a direct dependency on a function, type or package with one
    or more *signatures*. You typecheck against a signature and your end user picks
    how they want to eventually implement the signature.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您是一个希望使用 Backpack 的库编写者。Backpack 表示您可以用一个或多个*签名*替换对函数、类型或包的直接依赖。您对签名进行类型检查，而最终用户选择他们希望最终如何实现该签名。
- en: 'Sounds good right? But there''s a dirty little secret: to get all of this goodness,
    you have to *write* a signature--you know, a type signature for each function
    and type that you want to use in your library. And we all know how much Haskellers
    [hate writing signatures](https://ghc.haskell.org/trac/ghc/ticket/1409). But Backpack
    has a solution to this: rather than repeatedly rewrite signatures for all your
    packages, a conscientious user can put a signature in a package for reuse in other
    packages.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来不错对吧？但有一个小小的秘密：要享受所有这些好处，您必须*编写*一个签名——您知道的，一个用于每个要在您的库中使用的函数和类型的类型签名。我们都知道
    Haskell 程序员有多么讨厌编写签名（https://ghc.haskell.org/trac/ghc/ticket/1409）。但是 Backpack
    有一个解决方案：用户可以在一个包中放置一个签名，以便在其他包中重复使用。
- en: 'For the longest time, I thought that this was "enough", and it would be a simple
    matter of sitting down and writing some tutorials for how to write a signature
    package. But as I sat down and started writing signature packages myself, I discovered
    that there was more than one way to set things up. In the post, I want to walk
    through two different possible designs for a collection of signature packages.
    They fall out of the following considerations:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最长时间以来，我以为这已经是“足够”了，只需坐下来写写一些有关如何编写签名包的教程就行了。但是当我坐下来亲自编写签名包时，我发现设置事物的方法不止一种。在本文中，我想讨论一下签名包集合的两种可能设计。这些设计基于以下考虑：
- en: How many signature packages for, e.g., `bytestring`, should there be? There
    could be exactly one, or perhaps a separate *package* for each API revision?
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，对于 `bytestring`，应该有多少个签名包？可能恰好是一个，或者可能是每个 API 修订版的一个单独*包*？
- en: Should it be possible to post a new version of a signature package? Under what
    circumstances should this be allowed?
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否应该发布签名包的新版本？在什么情况下应该允许这样做？
- en: For developers of a library, a larger signature is more convenient, since it
    gives you more functionality to work with. For a client, however, a smaller signature
    is better, because it reduces the implementation burden. Should signature packages
    be setup to encourage big or small signatures by default?
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于一个库的开发者来说，一个更大的签名更方便，因为它提供了更多功能供您使用。然而，对于客户来说，一个更小的签名更好，因为它减少了实现的负担。签名包应该默认鼓励大签名还是小签名呢？
- en: A signature package per release
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 每个发布版本的签名包
- en: Intuitively, every release of a package is also associated with a "signature"
    specifying what functions that release supports. One could conclude, then, that
    there should be a signature package per release, each package describing the interface
    of each version of the package in question. (Or, one could reasonably argue that
    GHC should be able to automatically infer the signature from a package. This is
    not so easy to do, for reasons beyond the scope of this post.)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 直觉上，每个包的发布版本也与指定该版本支持的函数的“签名”相关联。因此，可以得出结论，应该有一个签名包每个发布版本，每个包描述了相关问题版本的接口。（或者，可以合理地认为
    GHC 应该能够自动从包中推断出签名。由于本文篇幅所限，这并不容易实现。）
- en: 'However, we have to be careful how we perform releases of each of these signatures.
    One obvious but problematic thing to do is this: given `bytestring-0.10.8.1`,
    also release a `bytestring-sig-0.10.8.1`. The problem is that in today''s Haskell
    ecosystem, it is strongly assumed that only *one* version of a package is ever
    selected. Thus, if I have one package that requires `bytestring-sig == 0.10.8.1`,
    and another package that requires `bytestring-sig == 0.10.8.2`, this will fail
    if we try to dependency solve for both packages at the same time. We could make
    this scheme work by teaching Cabal and Stack how to link against multiple versions
    of a signature package, but at the moment, it''s not practical.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们必须谨慎地进行每个签名的发布。一个明显但有问题的做法是这样的：给定 `bytestring-0.10.8.1`，同时发布一个 `bytestring-sig-0.10.8.1`。问题在于，在今天的
    Haskell 生态系统中，强烈假设一个包的版本只能选择*一个*。因此，如果我有一个需要 `bytestring-sig == 0.10.8.1` 的包，另一个需要
    `bytestring-sig == 0.10.8.2` 的包，在尝试同时解决这两个包的依赖时将会失败。我们可以通过教会 Cabal 和 Stack 如何链接多个版本的签名包来使这个方案可行，但目前还不实际。
- en: An easy way to work around the "multiple versions" problem is to literally create
    a new package for every version of bytestring. The syntax for package names is
    a bit irritating (alphanumeric characters plus hyphens only, and no bare numbers
    between a hyphen), but you could imagine releasing `bytestring-v1008`, `bytestring-v1009`,
    etc., one for each version of the API that is available. Once a signature package
    is released, it should never be updated, except perhaps to fix a mistranscription
    of a signature.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 解决“多版本”问题的简单方法是为每个 `bytestring` 版本创建一个全新的包。包名的语法有些烦人（只能使用字母数字字符和连字符，并且连字符之间不能直接是数字），但可以想象，会发布
    `bytestring-v1008`、`bytestring-v1009` 等，每个版本的 API 都会有一个新的发布。一旦发布了签名包，除了修复签名错误外，就不应再更新。
- en: 'Under semantic versioning, packages which share the same major version are
    supposed to only add functionality, not take it away. Thus, these successive signature
    packages can also be built on one another: for example `bytestring-v1009` can
    be implemented by inheriting all of the functions from `bytestring-v1008`, and
    only adding the new functions that were added in 0.10.9.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 根据语义化版本控制，具有相同主版本的包应仅添加功能，而不是删除功能。因此，这些连续的签名包也可以相互构建：例如，`bytestring-v1009` 可以通过继承
    `bytestring-v1008` 中的所有函数并仅添加在 0.10.9 版本中添加的新函数来实现。
- en: A signature package per major release series
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 每个主要发布系列一个签名包。
- en: 'There is something very horrible about the above scheme: we''re going to have
    *a lot* of signature packages: one per version of a package! How awful would it
    be to have in the Hackage index `bytestring-v900`, `bytestring-v901`, `bytestring-v902`,
    `bytestring-v1000`, `bytestring-v1002`, `bytestring-v1004`, `bytestring-v1006`
    and `bytestring-v1008` as package choices? (With perhaps more if there exist patch
    releases that accidentally changed the API.) Thus, it is extremely tempting to
    try to find ways to reduce the number of signature packages we need to publish.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 上述方案有一个非常可怕的问题：我们将会有*大量*签名包：每个包的每个版本都有一个！如果在 Hackage 索引中有 `bytestring-v900`、`bytestring-v901`、`bytestring-v902`、`bytestring-v1000`、`bytestring-v1002`、`bytestring-v1004`、`bytestring-v1006`
    和 `bytestring-v1008` 作为包选项会有多么糟糕！（如果存在意外更改了 API 的补丁发布，可能会更多。）因此，极度希望找到减少需要发布的签名包数量的方法。
- en: 'Here is one such scheme which requires a signature package only for major releases;
    e.g., for `bytestring`, we would only have `bytestring-v9` and `bytestring-v10`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种仅针对主要发布版本需要签名包的方案，例如对于 `bytestring`，我们只会有 `bytestring-v9` 和 `bytestring-v10`：
- en: 'The latest version of `bytestring-v9` should correspond to the "biggest" API
    supported by the 0.9 series. Thus, `bytestring-v9`, every minor version release
    of `bytestring`, there is a new release of `bytestring-v9`: e.g., when `bytestring-0.9.1.0`
    is released, we release `bytestring-v9-1.0`. Each of the releases increases the
    functionality recorded in the signature, but is not permitted to make any other
    changes.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bytestring-v9` 的最新版本应该对应于 0.9 系列支持的“最大” API。因此，对于 `bytestring` 的每个次要版本发布，都会有一个新的
    `bytestring-v9` 的发布：例如，当发布 `bytestring-0.9.1.0` 时，我们会发布 `bytestring-v9-1.0`。每个发布都会增加签名中记录的功能，但不允许做其他更改。'
- en: When depending on the signature package, we instead provide a version bound
    specifying the minimum functionality of the signature required to build our package;
    e.g., `bytestring-v9 >= 1.0`. (Upper bounds are not necessary, as it assumed that
    a signature package never breaks backwards compatibility.)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在依赖签名包时，我们将提供一个版本范围，指定构建我们包所需的签名的最小功能；例如，`bytestring-v9 >= 1.0`。（不需要上限，因为假设签名包永远不会破坏向后兼容性。）
- en: 'There is one major difficulty: suppose that two unrelated packages both specify
    a version bound on `bytestring-v9`. In this case, the ultimate version of the
    signature package we pick will be one that is compatible with both ranges; in
    practice, the *latest* version of the signature. This is bad for two reasons:
    first, it means that we''ll always end up requiring the client to implement the
    full glory of `bytestring-v9`, even if we are compatible with an earlier version
    in the release series. Second, it means that whenever `bytestring-v9` is updated,
    we may bring more entities into scope: and if that introduces ambiguity, it will
    cause previously compiling code to stop compiling.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 存在一个主要困难：假设两个无关的软件包都对`bytestring-v9`指定了版本范围。在这种情况下，我们选择的签名包的最终版本将是与两个范围都兼容的版本；实际上，是*最新*版本的签名包。这有两个坏处：首先，这意味着我们将始终要求客户端实现完整的`bytestring-v9`，即使我们与发行系列中的早期版本兼容。其次，这意味着每当更新`bytestring-v9`时，我们可能会引入更多实体：如果这引入了歧义，将导致以前编译的代码停止编译。
- en: 'Fortunately, there is a solution for this problem: use *signature thinning*
    to reduce the required entities to precisely the set of entities you need. For
    example, suppose that `bytestring-v9-0.0` has the following signature:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，对于这个问题有一个解决方案：使用*签名减少*来减少所需实体，精确到你需要的实体集合。例如，假设`bytestring-v9-0.0`具有以下签名：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As a user, we only needed `ByteString` and `empty`. Then we write in our local
    `ByteString` signature:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 作为用户，我们只需要`ByteString`和`empty`。然后我们在我们的本地`ByteString`签名中写入：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: and now *no matter* what new functions get added to `bytestring-v9-0.0`, this
    signature will only ever require `ByteString` and `empty`. (Another way of thinking
    about signature thinning is that it is a way to *centralize* explicit import lists.)
    Notice that this scheme does *not* work if you don't have a separate package per
    major release series, since thinning can't save you from a backwards incompatible
    change to the types of one of the functions you depend on.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在*不管*`bytestring-v9-0.0`添加了什么新功能，这个签名将始终只需要`ByteString`和`empty`。（关于签名减少的另一种思考方式是，它是一种*集中*显式导入列表的方法。）请注意，如果没有每个主要发行系列单独的软件包，这种方案是*不*起作用的，因为签名减少无法防止您依赖的函数类型发生向后不兼容的更改。
- en: These signature thinning headers can be automatically computed; I've [written
    a tool (ghc-usage)](https://hackage.haskell.org/package/ghc-usage) which does
    precisely this. Indeed, signature thinning is useful even in the first design,
    where they can be used to reduce the requirements of a package; however, with
    a signature package per major release, they are *mandatory*; if you don't use
    them, your code might break.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这些签名减少的头部可以自动计算；我已经[编写了一个工具（ghc-usage）](https://hackage.haskell.org/package/ghc-usage)，可以精确执行此操作。实际上，即使在第一种设计中，签名减少也是有用的，因为它们可以用来减少包的要求；然而，对于每个主要发行版的签名包来说，它们是*强制的*；如果你不使用它们，你的代码可能会出现问题。
- en: Conclusion
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论
- en: So, what design should we adopt? I think the first scheme (a signature package
    per release) is more theoretically pure, but I am very afraid of the "too many
    packages" problem. Additionally, I do think it's a good idea to thin signatures
    as much as possible (it's not good to ask for things you're not going to use!)
    which means the signature thinning requirement may not be so bad. Others I have
    talked to think the first scheme is just obviously the right thing to do.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们应该采用什么设计？我认为第一种方案（每个发行版一个签名包）在理论上更纯粹，但我非常担心“太多包”问题。此外，我确实认为尽可能减少签名是一个好主意（要求你不打算使用的东西并不好！），这意味着签名减少的要求可能并不那么糟糕。我与其他人讨论过，他们认为第一种方案显然是正确的做法。
- en: Which scheme do you like better? Do you have your own proposal? I'd love to
    hear what you think. (Also, if you'd like to bikeshed the naming convention for
    signature packages, I'm also all ears.)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你更喜欢哪种方案？你有自己的建议吗？我很想听听你的想法。（另外，如果你想要就签名包的命名惯例进行讨论，我也非常乐意听取意见。）
- en: Appendix
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 附录
- en: After publishing this post, the comments of several folks made me realize that
    I hadn't motivated *why* you would want to say something about the API of bytestring-0.10.8;
    don't you just want a signature of strings? So, to address this comment, I want
    to describe the line of reasoning that lead me down this path.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在发布这篇文章后，一些人的评论让我意识到，我没有解释*为什么*你会想要讨论bytestring-0.10.8的API；难道你只想要一个字符串的签名吗？因此，为了回应这个评论，我想描述一下引导我走上这条路的推理过程。
- en: 'I started off with a simple goal: write a signature for strings that had the
    following properties:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我从一个简单的目标开始：编写一个字符串签名，具有以下特性：
- en: Be reasonably complete; i.e., contain all of the functions that someone who
    wanted to do "string" things might want, but
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要足够完整；即，包含所有想要进行“字符串”操作的函数，但是
- en: Be reasonably universal; i.e., only support functions that would be supported
    by all the major string implementations (e.g., String, strict/lazy Text, strict/lazy
    Word8/Char8 ByteString and Foundation strings.)
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要足够通用；即，只支持所有主要字符串实现都支持的函数（例如，String、严格/惰性Text、严格/惰性Word8/Char8 ByteString和Foundation字符串）。
- en: It turned out that I needed to drop quite a number of functions to achieve universality;
    for example, transpose, foldl1, foldl1', mapAccumL/R, scanl, replicate, unfoldr,
    group, groupBy, inits, tails are not implemented in Foundation; foldr', foldr1',
    scanl1, scanr, scanr1, unfoldN, spanEnd, breakEnd, splitOn, isInfixOf are not
    implemented by the lazy types.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 结果表明，为了实现通用性，我需要放弃相当多的函数；例如，Foundation中没有实现transpose、foldl1、foldl1'、mapAccumL/R、scanl、replicate、unfoldr、group、groupBy、inits、tails；惰性类型中没有实现foldr'、foldr1'、scanl1、scanr、scanr1、unfoldN、spanEnd、breakEnd、splitOn、isInfixOf。
- en: This got me thinking that I could provide bigger signatures, if I didn't require
    the signature to support *all* of the possible implementations; you might have
    a signature that lets you switch between only the *strict* variants of string
    types, or even a signature that just lets you swap between Word8 and Char8 ByteStrings.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这让我想到，如果我不要求签名支持*所有*可能的实现，我可以提供更大的签名；你可以有一个签名，允许你仅在严格变体之间切换字符串类型，甚至一个只允许在Word8和Char8
    ByteStrings之间切换的签名。
- en: 'But, of course, there are combinatorially many different ways one could put
    signatures together and it would be horrible to have to write (and name) a new
    signature package for each. So what is the *minimal* unit of signature that one
    could write? And there is an obvious answer in this case: the API of a specific
    module (say, `Data.ByteString`) in a specific version of the package. Enter the
    discussion above.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，有组合方式组合签名，每种方式都需要编写（和命名）一个新的签名包，这样做是可怕的。那么，一个人可以编写的*最小*签名单位是什么？在这种情况下，有一个明显的答案：特定版本包中特定模块（比如，`Data.ByteString`）的API。参见上文讨论。
- en: Appendix 2
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 附录2
- en: 'Above, I wrote:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，我写道：
- en: 'But, of course, there are combinatorially many different ways one could put
    signatures together and it would be horrible to have to write (and name) a new
    signature package for each. So what is the *minimal* unit of signature that one
    could write? And there is an obvious answer in this case: the API of a specific
    module (say, `Data.ByteString`) in a specific version of the package.'
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当然，有组合方式组合签名，每种方式都需要编写（和命名）一个新的签名包，这样做是可怕的。那么，一个人可以编写的*最小*签名单位是什么？在这种情况下，有一个明显的答案：特定版本包中特定模块（比如，`Data.ByteString`）的API。
- en: 'I think there is an alternative conclusion to draw from this: someone should
    write a signature containing every single possible function that all choices of
    modules could support, and then have end-users responsible for paring these signatures
    down to the actual sets they use. So, everyone is responsible for writing big
    export lists saying what they use, but you don''t have to keep publishing new
    packages for different combinations of methods.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为从这里可以得出另一个结论：有人应该编写一个包含所有模块选择可能支持的每一个函数的签名，然后让最终用户负责将这些签名缩减到他们实际使用的集合。因此，每个人都要负责编写大的导出列表，说明他们使用了什么，但你不必为不同方法组合发布新包。
- en: I'm pursuing this approach for now!
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我目前正在追求这种方法！
