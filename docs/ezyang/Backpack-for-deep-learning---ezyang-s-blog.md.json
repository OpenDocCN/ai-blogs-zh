["```\nunit torch-indef where\n  signature Tensor where\n    import Data.Int\n    data Tensor\n    data AccReal\n    instance Show AccReal\n    instance Num AccReal\n    read1dFile :: FilePath -> Int64 -> IO Tensor\n    dot :: Tensor -> Tensor -> IO AccReal\n    sumall :: Tensor -> IO AccReal\n  module App where\n    import Tensor\n    app = do\n        x <- read1dFile \"x\" 10\n        y <- read1dFile \"y\" 10\n        d <- dot x y\n        s <- sumall x\n        print (d + s)\n        return ()\n\n```", "```\nimport Foreign\nimport Foreign.C.Types\nimport Foreign.C.String\nimport Foreign.ForeignPtr\n\nforeign import ccall \"THTensorMath.h THFloatTensor_dot\"\n    c_THFloatTensor_dot :: (Ptr CTHFloatTensor) -> (Ptr CTHFloatTensor) -> IO CDouble\n\ntype Tensor = FloatTensor\ntype AccReal = Double\n\ndot :: Tensor -> Tensor -> IO AccReal\ndot (FT f) (FT g) = withForeignPtr f $ \\x ->\n                    withForeignPtr g $ \\y -> do\n                    d <- c_THFloatTensor_dot x y\n                    return (realToFrac d)\n\n```"]