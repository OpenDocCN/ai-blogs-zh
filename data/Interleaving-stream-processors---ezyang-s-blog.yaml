- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:56'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:56'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Interleaving stream processors : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[交错流处理器](http://blog.ezyang.com/2011/03/interleaving-stream-processor/)：ezyang
    的博客'
- en: 来源：[http://blog.ezyang.com/2011/03/interleaving-stream-processor/](http://blog.ezyang.com/2011/03/interleaving-stream-processor/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2011/03/interleaving-stream-processor/](http://blog.ezyang.com/2011/03/interleaving-stream-processor/)
- en: '*Ghost in the state machine*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*状态机中的幽灵*'
- en: 'A long time ago (circa 2007-2008), I wrote perhaps the single most complicated
    piece of code in HTML Purifier—one of those real monsters that you don’t think
    anyone else could ever understand and that you are really grateful you have a
    comprehensive test suite for. The idea was this: I had a state machine that modified
    a stream of tokens (since this was a stream of HTML tags and text, the state machine
    maintained information such as the current nesting stack), and I wanted to allow
    users to add extra functionality on top of this stream processor (the very first
    processor inserted paragraph tags when double-newlines were encountered) in a
    modular way.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 大约在 2007-2008 年间，我写了 HTML Purifier 中可能是最复杂的一段代码——那种你觉得别人根本无法理解的真正怪兽，而且你非常感激自己有全面的测试套件来验证它。我的想法是这样的：我有一个状态机，用来修改一个标记流（因为这是一系列
    HTML 标签和文本的流，状态机维护了诸如当前嵌套堆栈之类的信息），我想以模块化的方式允许用户在这个流处理器的基础上添加额外的功能（第一个处理器在遇到双换行时插入段落标签）。
- en: The simplest thing I could have done was abstract out the basic state machine,
    created a separate processor for every transformation I wanted to make, and run
    them one pass after another. But for whatever reason, this idea never occurred
    to me, and I didn’t want to take the performance hit of having to iterate over
    the list of tokens multiple times (premature optimization, much?) Instead, I decided
    to add hooks for various points in the original state machine, which plugins could
    hook into to do their own stream transformations.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我本可以做的最简单的事情是抽象出基本状态机，为我想做的每一种转换创建一个单独的处理器，然后依次运行它们。但出于某种原因，我从未想过这个主意，并且我不想要为了避免多次迭代标记列表而降低性能（过早的优化，对吧？）相反，我决定在原始状态机的各个关键点添加挂钩，插件可以连接到这些挂钩上来执行它们自己的流转换。
- en: 'Even before I had more than one “injector”, as they are called, I had decided
    that I would have to do something sensible when one injector created a token that
    another injector could process. Suppose you ran injector A, and then injector
    B. Any tokens that injector A created would be picked up by injector B, but not
    vice versa. This seemed to me a completely arbitrary decision: could I make it
    so that order didn''t matter? The way I implemented this was have the managing
    state machine figure out what new tokens any given injector had created, and then
    pass them to all the other injectors (being careful not to pass the token back
    to the originating injector.) Getting this right was tricky; I originally stored
    the ranges of “already seen” tokens separately from the token stream itself, but
    as other injectors made changes it was extremely easy for these ranges to get
    out of sync, so I ended up storing the information in the token themselves. Another
    difficulty is preventing A from creating a token which B converts into another
    token which A converts to B etc; so this skip information would have to be preserved
    over tokens. (It seems possible that this excluded some possible beneficial interactions
    between two injectors, but I decided termination was more important.)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至在我拥有超过一个“注入器”（它们就是这样称呼的）之前，我已经决定当一个注入器创建了另一个注入器能够处理的标记时，我必须做些明智的事情。假设你运行注入器
    A，然后是注入器 B。注入器 A 创建的任何标记都将被注入器 B 捕获，但反之则不然。这对我来说似乎是一个完全随意的决定：我能不能做到顺序无关紧要？我实现这个功能的方式是让管理状态机找出任何给定注入器创建的新标记，并将它们传递给所有其他注入器（小心不要将标记传回到原始注入器）。搞清楚这一点很棘手；最初我将“已见过”的标记范围单独存储在标记流之外，但随着其他注入器的修改，这些范围极易失步，所以最终我决定将信息存储在标记本身。另一个困难是防止
    A 创建一个由 B 转换为另一个由 A 转换为 B 等的标记；因此这种跳过信息必须在标记之间保持不变。（看起来可能会排除某些注入器之间潜在的有益互动，但我决定终止更为重要。）
- en: 'Extra features also increased complexity. One particular feature needed the
    ability to rewind back to an earlier part of the stream and reprocess all of those
    tokens; since most other injectors wouldn’t be expecting to go back in time, I
    decided that it would be simplest if other injectors were all suspended if a rewind
    occurred. I doubt there are any sort of formal semantics for what the system as
    a whole is supposed to do, but it seems to work in practice. After all, complexity
    isn’t created in one day: it evolves over time.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 额外的功能也增加了复杂性。 一个特定的功能需要能够倒回到流的早期部分并重新处理所有这些令牌；由于大多数其他注入器不会期望回到过去，我决定，如果发生倒带，其他注入器都将被暂停会是最简单的。
    我怀疑整个系统应该做什么样的正式语义，但实际上似乎能工作。 毕竟，复杂性不是一天创造的：它随时间演变。
- en: 'There are several endings to this story. One ending was that I was amused and
    delighted to see that the problem of clients making changes, which then are recursively
    propagated to other clients, which can make other changes, is a fairly common
    occurrence in distributed systems. If you compress this into algorithmic form,
    you get (gasp) research papers like Lerner, Grove and Chamber’s *Composing Dataflow
    Analyses and Transformations*, which I discovered when brushing against Hoopl
    (note: I am not belittling their work: dataflow analysis for programming languages
    is a lot more complicated than hierarchy analysis for HTML, and they allow for
    a change made by A to affect a change B makes that can affect A again: they cut
    the knot by ensuring that their analysis eventually terminates by bounding the
    information lattice—probably something to talk about in another post).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这个故事有几个结局。 其中一个结局是，我很高兴和惊讶地看到，客户端进行更改然后递归传播到其他客户端，然后可以进行其他更改，这在分布式系统中是一个相当常见的现象。
    如果你将其压缩成算法形式，你会得到（倒吸一口凉气）像Lerner、Grove和Chamber的研究论文*Composing Dataflow Analyses
    and Transformations*，当我在与Hoopl打交道时发现的（注：我并不轻视他们的工作：编程语言的数据流分析比HTML的层次分析复杂得多，并且它们允许A所做的更改影响B所做的更改，反过来也可以影响A：他们通过确保他们的分析最终通过限制信息格子来终止来切断这个结，可能是另一个帖子讨论的内容）。
- en: 'Another ending is that, fascinatingly enough, this complex system actually
    was the basis for the first [external contribution](http://htmlpurifier.org/phorum/read.php?5,2519,2519)
    to HTML Purifier. This contributor had the following to say about the system:
    “I have to say, I''m impressed with the design I see in HTML Purifier; this has
    been pretty easy to jump into and understand, once I got pointed to the right
    spot.” The evolution of systems with complex internal state is, apparently, quite
    well understood by practicing programmers, and I see [experienced developers tackling
    this subsystem](http://stackoverflow.com/questions/2638640/html-purifier-removing-an-element-conditionally-based-on-its-attributes),
    usually with success. From an experience standpoint, I don’t find this too surprising—years
    after I originally wrote the code, it doesn’t take me too long to recall what
    was going on. But I do wonder if this is just the byproduct of many long hacking
    sessions on systems with lots of state.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个结局是，令人着迷的是，这个复杂的系统实际上成为HTML净化器的第一个[外部贡献](http://htmlpurifier.org/phorum/read.php?5,2519,2519)的基础。
    这位贡献者对该系统有以下评价：“我必须说，我对HTML净化器中看到的设计印象深刻；一旦我指向正确的地方，这就变得相当容易理解了。” 显然，有经验的程序员对具有复杂内部状态的系统的演变非常了解，我看到通常会有[经验丰富的开发人员处理这个子系统](http://stackoverflow.com/questions/2638640/html-purifier-removing-an-element-conditionally-based-on-its-attributes)，通常会取得成功。
    从经验的角度来看，我并不觉得这太令人惊讶——多年前我写的代码后来我记起来并不需要花太多时间。 但我确实想知道这是否只是许多长时间黑客会议的副产品，有很多状态的系统。
- en: The final ending is a what-if, the “What if the older Edward came back and decided
    to rewrite the system.” It seems strange, but I probably wouldn’t have the patience
    to do it over again. Or I might have recognized the impending complexity and avoided
    it. But probably the thing that has driven me the most crazy over the years, and
    which is a technical problem in its own right, is despite the stream-based representation,
    everything HTML Purifier processes is loaded up in memory, and we don't take advantage
    of streams of token at all. Annoying!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的结局是一个假设，“假设老爱德华回来并决定重写系统。” 这看起来很奇怪，但我可能没有耐心再做一遍。 或者我可能已经意识到即将到来的复杂性并避免了它。
    但多年来让我最疯狂的事情，也是一个技术问题，尽管基于流的表示，HTML净化器处理的一切都加载到内存中，我们根本没有利用令牌流。 令人讨厌！
