- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-07-01 18:17:53'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-07-01 18:17:53
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'The Haskell Heap : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Haskell 堆：ezyang 的博客
- en: 来源：[http://blog.ezyang.com/2011/04/the-haskell-heap/](http://blog.ezyang.com/2011/04/the-haskell-heap/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2011/04/the-haskell-heap/](http://blog.ezyang.com/2011/04/the-haskell-heap/)
- en: The Haskell Heap
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Haskell 堆
- en: The Haskell heap is a rather strange place. It’s not like the heap of a traditional,
    strictly evaluated language...
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Haskell 堆是一个相当奇怪的地方。它不像传统、严格求值语言的堆...
- en: '...which contains a lot of junk! (Plain old data.)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '...里面装了很多垃圾！（普通的旧数据。）'
- en: 'In the Haskell heap, every item is wrapped up nicely in a box: the Haskell
    heap is a heap of *presents* (thunks).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Haskell 堆中，每个项目都被精美地包裹在一个盒子里：Haskell 堆是一个*礼物*（thunk）的堆。
- en: When you actually want what’s inside the present, you *open it up* (evaluate
    it).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当你实际上想要礼物里面的东西时，你*打开它*（评估它）。
- en: 'Presents tend to have names, and sometimes when you open a present, you get
    a *gift card* (data constructor). Gift cards have two traits: they have a name
    (the `Just` gift card or the `Right` gift card), and they tell you where the rest
    of your presents are. There might be more than one (the tuple gift card), if you’re
    a lucky duck!'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 礼物通常有名字，有时候你打开一个礼物时会得到一个*礼品卡*（数据构造器）。礼品卡有两个特点：它们有一个名字（`Just` 礼品卡或 `Right` 礼品卡），并告诉你其他礼物在哪里。可能会有多个（元组礼品卡），如果你很幸运！
- en: But just as gift cards can lie around unused (that’s how the gift card companies
    make money!), you don’t have to redeem those presents.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 但是就像礼品卡可以闲置在一旁一样（这就是礼品卡公司赚钱的方式！），你不必兑现那些礼物。
- en: Presents on the Haskell heap are rather mischievous. Some presents explode when
    you open them, others are haunted by ghosts that open other presents when disturbed.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Haskell 堆上的礼物相当调皮。有些礼物在你打开它们时会爆炸，而其他一些则被幽灵所缠绕，当被打扰时会打开其他的礼物。
- en: Understanding what happens when you open a present is key to understanding the
    time and space behavior of Haskell programs.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 理解当你打开一个礼物时发生的情况对于理解 Haskell 程序的时间和空间行为至关重要。
- en: In this series, Edward makes a foray into the webcomic world in order to illustrate
    the key operational concepts of evaluation in a lazily evaluated language. I hope
    you enjoy it!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个系列中，Edward 进入了网络漫画世界，以展示惰性评估语言的关键操作概念。希望你喜欢！
- en: 'Next time: [Evaluation on the Haskell Heap](http://blog.ezyang.com/2011/04/evaluation-on-the-haskell-heap/)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 下一次：[在 Haskell 堆上的评估](http://blog.ezyang.com/2011/04/evaluation-on-the-haskell-heap/)
- en: '*Technical notes.* Technically speaking, this series should be “The GHC Heap.”
    However, I’ll try to avoid as many GHC-isms as possible, and simply offer a metaphor
    for operationally reasoning about any kind of lazy language. Originally, the series
    was titled “Bomberman Teaches Lazy Evaluation,” but while I’ve preserved the bomb
    metaphor for thunks that error or don’t terminate, I like the present metaphor
    better: it in particular captures several critical aspects of laziness: it captures
    the evaluated/non-evaluated distinction and the fact that once a present is opened,
    it’s opened for everyone. The use of the term “boxed” is a little suggestive:
    indeed, boxed or *lifted* values in GHC are precisely the ones that can be nonterminating,
    whereas unboxed values are more akin to what you’d see in C’s heap. However, languages
    like Java also use the term boxed to refer to primitive values that look like
    objects. For clarity’s sake, we won’t be using the term boxed from now on (indeed,
    we won’t mention unboxed types).'
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*技术说明。* 从技术上讲，这个系列应该叫做“GHC 堆”。然而，我会尽量避免尽可能多的 GHC 专有名词，简单地提供一个关于任何一种惰性语言运算推理的隐喻。最初，这个系列的标题是“Bomberman
    教你懒惰求值”，但是虽然我保留了用于表示延迟计算错误或不终止的 thunk 的炸弹隐喻，我更喜欢礼物隐喻：它特别捕捉到惰性的几个关键方面：它捕捉到了已评估/未评估的区别，以及一旦礼物被打开，就对所有人都打开了。术语“装箱”的使用有点暗示：确实，GHC
    中的装箱值或*提升*值正是那些可能不终止的值，而非装箱值则更类似于 C 堆中所见的内容。然而，像 Java 这样的语言也使用“装箱”一词来指代看起来像对象的基本值。为了清晰起见，我们从现在开始不会再使用“装箱”一词（实际上，我们不会提及非装箱类型）。'
- en: This work is licensed under a [Creative Commons Attribution-ShareAlike 3.0 Unported
    License](http://creativecommons.org/licenses/by-sa/3.0/).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本作品根据[知识共享署名-相同方式共享 3.0 未本地化许可证](http://creativecommons.org/licenses/by-sa/3.0/)许可发布。
