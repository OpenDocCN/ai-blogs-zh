- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-07-01 18:17:54'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-07-01 18:17:54
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Hoopl guided tour: Base system : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hoopl导览：基础系统：ezyang的博客
- en: 来源：[http://blog.ezyang.com/2011/04/hoopl-guided-tour-base-system/](http://blog.ezyang.com/2011/04/hoopl-guided-tour-base-system/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2011/04/hoopl-guided-tour-base-system/](http://blog.ezyang.com/2011/04/hoopl-guided-tour-base-system/)
- en: '[Hoopl](http://hackage.haskell.org/package/hoopl) is a higher-order optimization
    library. We think it’s pretty cool! This series of blog post is meant to give
    a tutorial-like introduction to this library, supplementing [the papers](http://research.microsoft.com/en-us/um/people/simonpj/papers/c--/)
    and the source code. I hope this series will also have something for people who
    aren’t interested in writing optimization passes with Hoopl, but are interested
    in the design of higher-order APIs in Haskell. By the end of this tutorial, you
    will be able to understand references in code to names such as `analyzeAndRewriteFwd`
    and `DataflowLattice`, and make decode such type signatures as:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[Hoopl](http://hackage.haskell.org/package/hoopl) 是一个高阶优化库。我们觉得它非常酷！这系列博文旨在向您介绍这个库，作为对[Hoopl相关论文](http://research.microsoft.com/en-us/um/people/simonpj/papers/c--/)和源代码的教程式补充。我希望这个系列对那些不想使用Hoopl编写优化传递的人也有所帮助，但对Haskell中高阶API设计感兴趣的人也有所帮助。通过本教程的学习，您将能够理解代码中对`analyzeAndRewriteFwd`和`DataflowLattice`等名称的引用，并能够解读诸如以下的类型签名：'
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We assume basic familiarity with functional programming and compiler technology,
    but I will give asides to introduce appropriate basic concepts.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设您对函数式编程和编译技术有基本的了解，但我会在适当的地方介绍适当的基本概念。
- en: '*Aside: Introduction.* People already familiar with the subject being discussed
    can feel free to skip sections that are formatted like this.'
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*旁白：介绍。* 对于已经熟悉正在讨论的主题的人来说，可以自由跳过像这样格式化的部分。'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: We will be giving a guided tour of the `testing` subdirectory of Hoopl, which
    contains a sample client. (You can grab a copy by cloning the Git repository `git
    clone git://ghc.cs.tufts.edu/hoopl/hoopl.git`). You can get your bearings by checking
    out the `README` file. The first set of files we’ll be checking out is the “Base
    System” which defines the data types for the *abstract syntax tree* and the Hoopl-fied
    *intermediate representation.*
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将导览Hoopl的`testing`子目录，其中包含一个示例客户端。（你可以通过克隆Git仓库`git clone git://ghc.cs.tufts.edu/hoopl/hoopl.git`获取一份副本）。你可以通过查看`README`文件来了解基础情况。我们首先将查看“Base
    System”，该系统定义了*抽象语法树*和Hoopl化的*中间表示*的数据类型。
- en: 'The abstract syntax is about as standard as it gets (`Ast.hs`):'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 抽象语法与标准一样（`Ast.hs`）：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We have a language of named procedures, which consist of basic blocks. We support
    unconditional branches `Branch`, conditional branches `Cond`, function calls `Call`
    (the `[Var]` is the variables to store the return values, the `String` is the
    name of the function, the `[Expr]` are the arguments, and the `Lbl` is where to
    jump to when the function call is done), and function returns `Return` (multiple
    return is supported, thus `[Expr]` rather than `Expr`).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一种命名的过程语言，它由基本块组成。我们支持无条件分支`Branch`，条件分支`Cond`，函数调用`Call`（`[Var]`是存储返回值的变量，`String`是函数名，`[Expr]`是参数，`Lbl`是函数调用完成后跳转的位置），以及函数返回`Return`（支持多返回值，因此使用`[Expr]`而不是`Expr`）。
- en: We don’t have any higher-level flow control constructs (the language's idea
    of control flow is a lot of gotos—don’t worry, this will work in our favor), so
    we might expect it to be very easy to map this “high-level assembly language”
    to machine code fairly easily, and this is indeed the case (very notably, however,
    this language doesn't require you to think about register allocation, but *how*
    we use variables will very noticeably impact register allocation). A real-world
    example of high-level assembly languages includes C--.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有任何高级流控制结构（这种语言的控制流思想就是大量的goto语句——不用担心，这对我们有利），所以我们可能会期望将这种“高级汇编语言”相对容易地映射到机器代码中，事实上确实如此（但需要注意的是，这种语言不需要考虑寄存器分配，但我们如何使用变量将明显影响寄存器分配）。高级汇编语言的真实世界例子包括C--。
- en: 'Here is a simple example of some code that might be written in this language:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个可能在这种语言中编写的代码的简单示例：
- en: '*Aside: Basic blocks.* Completely explaining what an abstract syntax tree (AST)
    is a bit beyond the scope of this post, but you if you know how to write a [Scheme
    interpreter in Haskell](http://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours/Parsing)
    you already know most of the idea for the *expressions* component of the language:
    things like binary operators and variables (e.g. `a + b`). We then extend this
    calculator with low-level imperative features in the obvious way. If you’ve done
    any imperative programming, most of these features are also familiar (branches,
    function calls, variable assignments): the single new concept is that of the [basic
    block](http://en.wikipedia.org/wiki/Basic_block). A basic block is an atomic unit
    of flow control: if I’ve entered a basic block, I know that I will emerge out
    the other end, no ifs, ands or buts. This means that there will be no nonlocal
    transfer of control from inside the block (e.g. no exceptions), and there will
    be no code that can jump to a point *inside* this block (e.g. no goto). Any control
    flow occurs at the end of the basic block, where we may unconditionally jump to
    another block, or make a function call, etc. Real programs won''t be written this
    way, but we easily convert them into this form, and we will want this style of
    representation because it will make it easier to do dataflow analysis. As such,
    our example abstract syntax tree doesn’t really resemble an imperative language
    you would program in, but it is easily something you might target during code
    generation, so the example abstract-syntax tree is setup in this manner.'
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*旁白：基本块。* 完全解释什么是抽象语法树（AST）略有超出本文的范围，但如果你知道如何在 Haskell 中编写 [Scheme 解释器](http://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours/Parsing)，你已经了解了语言的
    *表达式* 组件的大部分内容：例如二元运算符和变量（例如 `a + b`）。然后，我们以明显的方式扩展这个计算器，加入低级别的命令式特性。如果你已经做过任何命令式编程，大多数这些特性也是熟悉的（分支、函数调用、变量赋值）：唯一的新概念是
    [基本块](http://en.wikipedia.org/wiki/Basic_block)。基本块是流程控制的原子单位：如果我进入了一个基本块，我知道我会从另一端出来，不管怎样。这意味着在这个块的内部不会有非本地的控制转移（例如异常），也不会有能够跳到这个块
    *内部* 的代码（例如 goto）。任何控制流发生在基本块的末尾，我们可能无条件地跳转到另一个块，或者进行函数调用等操作。真实的程序不会以这种方式编写，但我们可以轻松地将它们转换成这种形式，并且我们希望采用这种表示方式，因为它将更容易进行数据流分析。因此，我们的示例抽象语法树实际上并不像你会编程的命令式语言，但它很容易成为代码生成的目标，所以示例抽象语法树以这种方式设置。'
- en: 'Hoopl is abstract over the underlying representation, but unfortunately, we
    can’t use this AST as it stands; Hoopl has its own graph representation. We wouldn’t
    want to use our representation anyway: we’ve represented the control flow graph
    as a list of blocks `[Block]`. If I wanted to pull out the block for some particular
    label; I’d have to iterate over the entire list. Rather than invent our own more
    efficient representation for blocks (something like a map of labels to blocks),
    Hoopl gives us a representation `Graph n e x` (it is, after all, going to have
    to operate on this representation). The `n` stands for “node”, you supply the
    data structure that makes up the nodes of the graph, while Hoopl manages the graph
    itself. The `e` and the `x` parameters will be used to store information about
    what the shape of the node is, and don’t represent any particular data.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Hoopl 是对底层表示的抽象，但不幸的是，我们不能直接使用这个AST；Hoopl 有自己的图表示。无论如何，我们也不想使用我们自己的表示方式：我们已经将控制流图表示为块列表
    `[Block]`。如果我想取出某个特定标签的块，我必须遍历整个列表。与其发明自己更高效的块表示（类似于标签到块的映射），不如使用 Hoopl 给我们提供的表示
    `Graph n e x`（毕竟它将要在这个表示上操作）。`n` 代表“节点”，你提供构成图节点的数据结构，而 Hoopl 管理图本身。`e` 和 `x`
    参数将用于存储关于节点形状的信息，不代表任何特定数据。
- en: 'Here is our intermediate representation (`IR.hs`):'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们的中间表示（`IR.hs`）：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The notable differences are:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 显著的差异是：
- en: '`Proc` has `Graph Insn C C` as its body, rather than `[Block]`. Also, because
    `Graph` has no conception of a “first” block, we have to explicitly say what the
    entry is with `entry`.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Proc` 的主体是 `Graph Insn C C`，而不是 `[Block]`。此外，由于 `Graph` 没有“第一个”块的概念，我们必须用
    `entry` 明确指出入口点是什么。'
- en: Instead of using `String` as `Lbl`, we’ve switched to a Hoopl provided `Label`
    data type.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不再使用 `String` 作为 `Lbl`，而是切换到了 Hoopl 提供的 `Label` 数据类型。
- en: '`Insn`, `Control` and `Label` have all been squashed into a single `Insn` generalized
    abstract data type (GADT) that handles all of them.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Insn`、`Control` 和 `Label` 都被合并为一个 `Insn` 广义抽象数据类型（GADT），它处理所有这些情况。'
- en: Importantly, however, we’ve maintained the information about what *shape* the
    node is via the `e` and `x` parameters. `e` stands for entry, `x` stands for exit,
    `O` stands for open, and `C` stands for closed. Every instruction has a shape,
    which you can imagine to be a series of pipes, which you are connecting together.
    Pipes with the shape `C O` (closed at the entrance, open at the exit) start the
    block, pipes with the shape `O C` (open at the entrance, closed at the exit) end
    the block, and you can have any number of `O O` pipes in-between. We can see that
    `Insn C O` corresponds to our old data type `Ast.Lbl`, `Insn O O` corresponds
    to `Ast.Insn`, and `Insn O C` corresponds to `Ast.Control`. When we put nodes
    together, we get graphs, which also can be variously open or closed.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，重要的是，我们通过`e`和`x`参数保留了关于节点是什么*形状*的信息。`e`代表进入，`x`代表退出，`O`代表开放，`C`代表关闭。每个指令都有一个形状，你可以想象成一系列的管道，它们是相互连接的。形状为`C
    O`（进入时关闭，退出时开放）的管道开始了这个块，形状为`O C`（进入时开放，退出时关闭）的管道结束了这个块，而在中间可以有任意数量的`O O`管道。我们可以看到`Insn
    C O`对应于我们旧的数据类型`Ast.Lbl`，`Insn O O`对应于`Ast.Insn`，而`Insn O C`对应于`Ast.Control`。当我们把节点放在一起时，我们得到了图，它也可以是各种开放或关闭的。
- en: '*Aside: Generalized Abstract Data Types.* [GADTs](http://en.wikibooks.org/wiki/Haskell/GADT)
    are an indispensable swiss army knife for type-level programming. In this aside,
    we briefly describe some tricks (ala subtyping) that can be used with `Insn e
    x` we gave above.'
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*另外：广义抽象数据类型.* [GADTs](http://en.wikibooks.org/wiki/Haskell/GADT) 是类型级编程中不可或缺的瑞士军刀。在这个另外的部分中，我们简要描述了一些可以与我们上面提到的`Insn
    e x`一起使用的技巧（类似子类型化）。'
- en: ''
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The first “trick” is that you can ignore the phantom type variable entirely,
    and use `Insn` like an ordinary data type:'
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 第一个“技巧”是你可以完全忽略幻象类型变量，并且像使用普通数据类型`Insn`一样使用它：
- en: ''
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE3]'
- en: ''
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I can pass this function a `Label` and it will return me `True`, or I can pass
    it a `Branch` and it will return me `False`. Pattern-matching on the GADT does
    not result in type refinement that I care about in this particular example, because
    there is no type variable `e` or `x` in the fields of any of the constructors
    or the return type of the function.
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我可以把一个`Label`传给这个函数，它将返回`True`，或者我可以传一个`Branch`给它，它将返回`False`。在这个特定的例子中，对 GADT
    进行模式匹配不会导致我关心的类型细化，因为在任何构造函数或函数返回类型中都没有类型变量`e`或`x`。
- en: ''
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Of course, I could have written this function in such a way that it would be
    *impossible* to pass something that is not a Label to it:'
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当然，我可以以一种不可能将不是`Label`的东西传递给它的方式编写这个函数：
- en: ''
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE4]'
- en: ''
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If you try making a call `assertLabel (Branch undefined)`, you’ll get this
    nice type error from GHC:'
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你尝试调用`assertLabel (Branch undefined)`，你将会从 GHC 得到这个很好的类型错误：
- en: ''
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE5]'
- en: ''
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Let’s unpack this: any constructor `Branch` will result in a value of type
    `Insn O C`. However, the type signature of our function states `Insn C O`, and
    `C ≠ O`. The type error is quite straight-forward, and exactly enough to tell
    us what’s gone wrong!'
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 让我们来解析一下：任何构造函数`Branch`都将得到一个类型为`Insn O C`的值。然而，我们函数的类型签名却声明了`Insn C O`，而且`C
    ≠ O`。这个类型错误非常直接明了，足以告诉我们出了什么问题！
- en: ''
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Similarly, I can write a different function:'
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 同样地，我可以编写一个不同的函数：
- en: ''
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE6]'
- en: ''
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'There’s no type-level way to distinguish between `Assign` and `Store`, but
    I don’t have to provide pattern matches against anything else in the data type:
    `Insn O O` means I only need to handle constructors that fit this shape.'
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在类型级别上没有办法区分`Assign`和`Store`，但是我不必对数据类型中的任何其他内容进行模式匹配：`Insn O O`意味着我只需要处理符合这种形状的构造函数。
- en: ''
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'I can even partially specify what the allowed shapes are:'
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我甚至可以部分指定允许的形状是什么：
- en: ''
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE7]'
- en: ''
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'For this function, I would need to provide pattern matches against the instructions
    and the control operators, but *not* a pattern match for `IR.Label`. This is *not*
    something I could have done easily with the original AST: I would have needed
    to create a sum type `Ast.InsnOrControl`.'
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 对于这个函数，我需要对指令和控制操作进行模式匹配，但是*不*需要针对`IR.Label`进行模式匹配。这并不是我在原始 AST 中容易做到的事情：我本来需要创建一个和类型`Ast.InsnOrControl`对应的求和类型。
- en: ''
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Quick question.* If I have a function that takes `Insn e x` as an argument,
    and I’d like to pass this value to a function that only takes `Insn C x`, what
    do I have to do? What about the other way around?'
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*快速问题.* 如果我有一个以`Insn e x`作为参数的函数，并且我想把这个值传给一个只接受`Insn C x`的函数，我该怎么做？另一种情况呢？'
- en: ''
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Exercise.* Suppose you were designing a `Graph` representation for Hoopl,
    but you couldn’t use GADTs. What would the difference between a representation
    `Graph IR.Insn` (where `IR.Insn` is just like our `IR` GADT, but without the phantom
    types) and a representation `Graph Ast.Label Ast.Insn Ast.Control`?'
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*练习.* 假设你正在为 Hoopl 设计一个 `Graph` 表示，但不能使用 GADTs。`Graph IR.Insn`（其中 `IR.Insn`
    就像我们的 `IR` GADT，但没有幻象类型）和 `Graph Ast.Label Ast.Insn Ast.Control` 之间的表示有什么区别？'
- en: 'The last file we’ll look at today is a bit of plumbing, for converting abstract
    syntax trees into the intermediate representation, `Ast2ir.hs`. Since there’s
    some name overloading going on, we use `A.` to prefix data types from `Ast` and
    `I.` to prefix data types from `IR`. The main function is `astToIR`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们今天将看的最后一个文件是一些管道工作，用于将抽象语法树转换为中间表示，`Ast2ir.hs`。由于存在一些名称重载，我们使用 `A.` 作为前缀来区分来自
    `Ast` 的数据类型和 `I.` 来自 `IR` 的数据类型。主要函数是 `astToIR`：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The code is monadic because as we convert Strings into Labels (which are internally
    arbitrary, unique integers), we need to keep track of what labels we’ve already
    assigned so that same string turns into the same label. The monad itself is an
    ordinary state monad transformer on top of a “fresh labels” monad. (There’s actually
    another monad in the stack; see `IR.M` for more details, but it’s not used at
    this stage so we ignore it.)
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 代码是单子的，因为当我们将字符串转换为标签（在内部是任意的唯一整数）时，我们需要跟踪我们已经分配的标签。单子本身是一个普通的状态单子变换器，位于“新标签”单子之上。（实际上，堆栈中还有另一个单子；请参阅
    `IR.M` 获取更多细节，但在这个阶段它没有被使用，所以我们忽略它。）
- en: '`getEntry` looks at the first block in the body of the procedure and uses that
    to determine the entry point:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`getEntry` 查看过程主体中的第一个块，并使用它确定入口点：'
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`labelFor` is a monadic function that gets us a fresh label if we’ve never
    seen the string `Lbl` name before, or the existing one if we already have seen
    it.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`labelFor` 是一个单子函数，如果我们之前没有见过字符串 `Lbl`，它会给我们一个新的标签，否则会返回已存在的标签。'
- en: '`toBody` uses some more interesting Hoopl functions:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`toBody` 使用了一些更有趣的 Hoopl 函数：'
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The Hoopl provided functions here are `|*><*|` and `emptyClosedGraph`. Note
    that Hoopl graphs don’t have to be connected (that is, they can contain multiple
    basic blocks), thus `|*><*|` is a kind of graph concatenation operator that connects
    two closed graphs together (`Graph n e C -> Graph n C x -> Graph n e x`), that
    *might* be connected via an indirect control operator (we have no way of knowing
    this except at runtime, though—thus those arrows are drawn in red). It’s a bit
    of an unwieldy operator, because Hoopl wants to encourage you to use `<*>` as
    far as possible.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Hoopl 提供的函数包括 `|*><*|` 和 `emptyClosedGraph`。请注意，Hoopl 图不必连接（即它们可以包含多个基本块），因此
    `|*><*|` 是一种图连接运算符，将两个封闭的图连接在一起（`Graph n e C -> Graph n C x -> Graph n e x`），可能通过间接控制操作符连接在一起（我们除了在运行时无法知道这一点外，还用红色箭头画出）。这是一个有些笨拙的运算符，因为
    Hoopl 希望尽可能使用 `<*>`。
- en: '`toBlock` gives an example of `<*>`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`toBlock` 给出了 `<*>` 的一个例子：'
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We work our way from the bottom up. What are the types of `mkFirst f''`, `mkMiddle
    ms''`, and `mkLast l''`? They’re all `(Graph I.Insn e x)`, but `f''` is `C O`,
    `ms''` is `O O`, and `l''` is `O C`. We build up partial graphs, which are not
    closed on both sides, and then join them together using `<*>`, which requires
    join point between both graphs to be open: `Graph n e O -> Graph n O x -> Graph
    n e x`. `mkFirst` and `mkMiddles` and `mkLast` are functions provided by Hoopl
    that lift `I.Insn e x` into `(Graph I.Insn e x)` (or, in the case of `mkMiddles`,
    `[I.Insn O O]`).'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从底部向上工作。`mkFirst f'`、`mkMiddle ms'` 和 `mkLast l'` 的类型是什么？它们都是 `(Graph I.Insn
    e x)`，但 `f'` 是 `C O`，`ms'` 是 `O O`，`l'` 是 `O C`。我们建立部分图形，这些图形两侧未封闭，然后使用 `<*>`
    将它们连接在一起：`Graph n e O -> Graph n O x -> Graph n e x`。`mkFirst`、`mkMiddles` 和 `mkLast`
    是由 Hoopl 提供的函数，将 `I.Insn e x` 提升为 `(Graph I.Insn e x)`（或者在 `mkMiddles` 的情况下是 `[I.Insn
    O O]`）。
- en: 'And finally, `toFirst`, `toMid` and `toLast` actually perform the translation:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`toFirst`、`toMid` 和 `toLast` 实际上执行了翻译：
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Notice that we’re careful to specify the return shapes, so that we can use `mkFirst`,
    `mkMiddles` and `mkLast`. The most interesting thing that happens is we have to
    convert `Lbl` strings into `Label`; otherwise, the code is trivial.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们仔细指定返回形状，以便可以使用 `mkFirst`、`mkMiddles` 和 `mkLast`。最有趣的事情是，我们必须将 `Lbl` 字符串转换为
    `Label`；否则，代码就是琐碎的。
- en: That wraps it up for data representation, next time we’ll look at analysis of
    dataflow facts in Hoopl.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 数据表示到此结束，下次我们将看看 Hoopl 中的数据流事实分析。
