- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:38'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:38'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Bugs and Battleships : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bugs and Battleships：ezyang 的博客
- en: 来源：[http://blog.ezyang.com/2011/12/bugs-and-battleships/](http://blog.ezyang.com/2011/12/bugs-and-battleships/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2011/12/bugs-and-battleships/](http://blog.ezyang.com/2011/12/bugs-and-battleships/)
- en: 'Do you remember your first computer program? When you had finished writing
    it, what was the first thing you did? You did the simplest possible test: you
    ran it.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你还记得你的第一个计算机程序吗？当你完成编写它时，你做的第一件事是什么？你进行了最简单的可能测试：你运行了它。
- en: 'As programs increase in size, so do the amount of possible tests. It’s worth
    considering which tests we actually end up running: imagine the children’s game
    Battleship, where the ocean is the space of all possible program executions, the
    battleships are the bugs that you are looking for, and each individual missile
    you fire is a test you run (white if the test passes, red if the test fails.)
    You don’t have infinite missiles, so you have to decide where you are going to
    send them.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 随着程序规模的增加，可能测试的数量也在增加。值得考虑的是我们实际运行了哪些测试：想象一下儿童游戏“战舰”，其中海洋是所有可能程序执行的空间，战舰是你要寻找的
    bug，每一颗发射的导弹就是你运行的一个测试（如果测试通过则为白色，失败则为红色）。你没有无限的导弹，所以你必须决定将它们发送到哪里。
- en: 'In the case of “your first computer program,” the answer seems pretty obvious:
    there’s only one way to run the program, only a few cases to test.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 关于“你的第一个计算机程序”的情况，答案似乎很明显：只有一种方式来运行程序，只有少数几种测试情况。
- en: But this fantasy is quickly blown away by an encounter with real software. Even
    if your program has no inputs, hardware, operating system, development environment,
    and other environmental factors immediately increase the space of tests. Add explicit
    inputs and nondeterminism to the application, and you’re looking at the difference
    between a swimming pool and an ocean.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 但这种幻想很快就会被真实软件的遭遇所打破。即使你的程序没有输入，硬件、操作系统、开发环境和其他环境因素也会立即增加测试空间。添加显式输入和不确定性到应用程序中，你会看到一个游泳池和海洋之间的差异。
- en: How do we decide what to test? What is our strategy—where do we send more missiles,
    where do we send less? Different testing strategies result in different distributions
    of tests on the space of all possible executions. Even though we may not be *thinking*
    about the distribution of test cases when we write up tests or run the whole system
    in an integration test, different test strategies result in different coverage.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何决定测试什么？我们的策略是什么——我们在哪里发送更多导弹，哪里发送更少？不同的测试策略导致在所有可能执行的空间上的不同测试分布。即使我们在编写测试或在整个系统中运行集成测试时可能没有*考虑*测试用例的分布，不同的测试策略也会导致不同的覆盖范围。
- en: For example, you might decide not to do any tests, and rely on your users to
    give you bug reports. The result is that you will end up with high coverage in
    *frequently used areas* of your application, and much less coverage in the rarely
    used areas. In some sense, this is an optimal strategy when you have a large user
    base willing to tolerate failure—though anyone who has run into bugs using software
    in unusual circumstances might disagree!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可能决定不进行任何测试，并依赖用户向你报告 bug。结果是，你的应用程序在*经常使用的区域*具有较高的覆盖率，在很少使用的区域覆盖率较低。在某种意义上，当你有一个愿意容忍失败的大用户群体时，这是一种最优策略——尽管任何在不寻常情况下使用软件时遇到
    bug 的人可能会持不同意见！
- en: There is a different idea behind regression testing, where you add an automatic
    test for any bug that occurred in the past. Instead of focusing coverage on frequently
    used area, a regression test suite will end up concentrated on “tricky” areas
    of the application, the areas where the most bugs have been found in the past.
    The hypothesis behind this strategy is that regions of code that historically
    had bugs are more likely to have bugs in the future.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于回归测试有不同的想法，即你为过去发生过的任何 bug 添加一个自动测试。与将覆盖面集中在经常使用的区域不同，回归测试套件最终会集中在应用程序的“棘手”区域，即过去发现大多数
    bug 的区域。这种策略背后的假设是，历史上有 bug 的代码区域未来更可能有 bug。
- en: You might even have some a priori hypotheses about where bugs in applications
    occur; maybe you think that boundary cases in the application are most likely
    to have bugs. Then you might reasonable focus your testing efforts on those areas
    on the outset.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至可能对应用程序中的 bug 发生位置有一些先验假设；也许你认为应用程序中的边界情况最有可能出 bug。那么你可能会合理地把测试工作集中在这些区域上。
- en: 'Other testing strategies might focus specifically on the distribution of tests.
    This is especially important when you are concerned about *worst-case* behavior
    (e.g. security vulnerabilities) as opposed to average-case behavior (ordinary
    bugs.) Fuzz testing, for example, involves randomly spattering the test space
    without any regard to such things as usage frequency: the result is that you get
    a lot more distribution on areas that are rarely used and don’t have many discovered
    bugs.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 其他测试策略可能专注于测试的分布。当您关注*最坏情况*行为（例如安全漏洞）而不是平均情况行为（普通错误）时，这一点尤为重要。例如，模糊测试涉及随机在测试空间中泼洒，而不考虑使用频率等因素：结果是您在很少使用和没有发现许多错误的区域上获得了更多的分布。
- en: You might notice, however, that while fuzz testing changes the distribution
    of tests, it doesn’t give any *guarantees.* In order to guarantee that there aren’t
    any bugs, you’d have to test every single input, which in modern software engineering
    practice is impossible. Actually, there is a very neat piece of technology called
    the *model checker*, designed specifically with all manner of tricks for speed
    to do this kind of exhaustive testing. For limited state spaces, anyway—there
    are also more recent research projects (e.g. Alloy) which perform this exhaustive
    testing, but only up to a certain depth.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，您可能会注意到，虽然模糊测试改变了测试的分布，但它并不提供任何*保证*。为了保证没有任何错误，您必须测试每一个输入，而在现代软件工程实践中，这是不可能的。实际上，有一种非常巧妙的技术叫做*模型检查器*，专门设计了各种技巧以加速进行这种详尽的测试。对于有限的状态空间来说，无论如何都是如此——还有更近期的研究项目（例如Alloy），可以执行这种详尽的测试，但仅限于一定的深度。
- en: Model checkers are “dumb” in some sense, in that they don’t really understand
    what the program is trying to do. Another approach we might take is to take advantage
    of the fact that we know how our program works, in order to pick a few, very carefully
    designed test inputs, which “generalize” to cover the entire test space. (We’ll
    make this more precise shortly.)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 模型检查器在某种意义上是“愚笨的”，因为它们并不真正理解程序试图做什么。我们可以采取的另一种方法是利用我们知道的程序工作方式的事实，以选择一些非常谨慎设计的测试输入，这些输入“泛化”以覆盖整个测试空间。（我们很快会更加精确地阐明这一点。）
- en: 'The diagram above is a bit misleading, however: test-cases rarely generalize
    that readily. One might even say that the ability to generalize behavior of specific
    tests to the behavior of the program is precisely what distinguishes a good program
    from a bad one. A bad program is filled with many, many different cases, all of
    which must be tested individually in order to achieve assurance. A good program
    is economical in its cases, it tries to be as complex as the problem it tries
    to solve, and no more.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，上面的图表有点误导：测试用例很少能够如此轻松地泛化。甚至可以说，将特定测试的行为泛化到程序行为的能力，正是区分好程序与坏程序的关键。坏程序充满了许多不同的情况，所有这些情况都必须单独测试才能确保。
- en: What does it mean to say that a test-case generalizes? My personal belief is
    that chunks of the test input space which are said to be equivalent to each other
    correspond to a single case, part of a larger mathematical proof, which can be
    argued in a self-contained fashion. When you decompose a complicated program into
    parts in order to explain what it does, each of those parts should correspond
    to an equivalence partition of the program.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 说一个测试用例泛化是什么意思？我个人的信念是，被称为相互等效的测试输入空间块对应于程序的单个案例，是更大数学证明的一部分，可以独立进行论证。当您将一个复杂的程序分解为部分以解释其功能时，这些部分应该对应于程序的等效划分。
- en: The corollary of this belief is that *good programs are easy to prove correct.*
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这种信念的推论是，*好程序易于证明正确*。
- en: This is a long way from “running the program to see if it works.” But I do think
    this is a necessary transition for any software engineer interested in making
    correct and reliable software (regardless of whether or not they use any of the
    academic tools like model checkers and theorem provers which take advantage of
    this way of thinking.) At the end of the day, you will still need to write tests.
    But if you understand the underlying theory behind the distributions of tests
    you are constructing, you will be much more effective.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这比“运行程序看看是否正常”要复杂得多。但我认为，无论软件工程师是否使用像模型检查器和定理证明器这样的学术工具，对于想要制作正确可靠软件的人来说，这种过渡是必要的。无论如何，最终你仍然需要编写测试用例。但如果你理解构建测试用例背后的分布理论，你将会更加有效。
- en: '*Postscript.* The relationship between type checking and testing is frequently
    misunderstood. I think this diagram sums up the relationship well:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*附言.* 类型检查与测试之间的关系经常被误解。我认为这张图表很好地总结了它们之间的关系：'
- en: Types eliminate certain regions of bugs and fail to affect others. The idea
    behind dependent types is to increase these borders until they cover all of the
    space, but the benefits are very tangible even if you only manage to manage a
    subset of the test space.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 类型可以消除某些bug区域，但对其他区域无效。依赖类型的理念是增加这些边界，直至覆盖所有空间，即使你只能管理测试空间的子集，其好处也是非常明显的。
- en: This work is licensed under a [Creative Commons Attribution-ShareAlike 3.0 Unported
    License](http://creativecommons.org/licenses/by-sa/3.0/).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这项工作根据[知识共享署名-相同方式共享 3.0 未本地化版本许可协议](http://creativecommons.org/licenses/by-sa/3.0/)进行许可。
