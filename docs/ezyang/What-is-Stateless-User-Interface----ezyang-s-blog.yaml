- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-07-01 18:17:06'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-07-01 18:17:06
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'What is Stateless User Interface? : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是无状态用户界面？：ezyang的博客
- en: 来源：[http://blog.ezyang.com/2015/11/what-is-stateless-user-interface/](http://blog.ezyang.com/2015/11/what-is-stateless-user-interface/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2015/11/what-is-stateless-user-interface/](http://blog.ezyang.com/2015/11/what-is-stateless-user-interface/)
- en: The essence of stateless user interface is that actions you take with a program
    should not depend on implicit state. Stateless interfaces are easier to understand,
    because an invocation of a command with some arguments will *always* do the same
    thing, whereas in a stateful interface, the command may do some different than
    it did yesterday, because that implicit state has changed and is influencing the
    meaning of your program.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 无状态用户界面的本质是，您对程序所采取的操作不应取决于隐含状态。无状态界面更容易理解，因为对某些参数执行命令将*始终*执行相同的操作，而在有状态界面中，命令可能与昨天不同，因为隐含状态已更改并影响程序的含义。
- en: 'This philosophy is something any Haskeller should intuitively grasp... but
    Cabal and cabal-install today fail this ideal. Here are some examples of statefulness
    in Cabal today:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这种哲学是任何Haskeller都应该直观理解的……但是今天的Cabal和cabal-install未能达到这一理想。以下是Cabal中现今状态性的一些例子：
- en: Running `cabal install`, the built packages are installed into a "package database",
    which makes them available for use by GHC.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`cabal install`时，构建的软件包被安装到“包数据库”中，使它们可以被GHC使用。
- en: Running `cabal install`, the choice of what packages and versions to install
    depends on the state of the local package database (the current solver attempts
    to reuse already installed software) and the state of the remote package repository
    (which says what packages and versions are available.)
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`cabal install`时，要安装哪些包以及版本的选择取决于本地包数据库的状态（当前解算器试图重用已安装的软件）和远程包存储库的状态（指定了可用的包和版本）。
- en: Running `./Setup configure` saves a `LocalBuildInfo` to `dist/setup-config`,
    which influences further `Setup` commands (`build`, `register`, etc.)
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`./Setup configure`会将`LocalBuildInfo`保存到`dist/setup-config`，这会影响进一步的`Setup`命令（`build`、`register`等）。
- en: 'Each of these instances of state imposes complexity on users: how many times
    do you think you have (1) blown away your local package database because it was
    irreversibly wedged, (2) had your project stop building because the dependency
    solver started picking too new version of packages, or (3) had Cabal ask you to
    reconfigure because some feature wasn''t enabled?'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这些状态实例都给用户带来了复杂性：你认为有多少次（1）因为本地包数据库无法逆转而重建了它，（2）因为依赖解算器开始选择了过新版本的包而使项目停止构建，或者（3）因为一些功能未启用而要求重新配置Cabal？
- en: 'State has cost, but it is not here for no reason:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 状态是有成本的，但并非没有理由：
- en: The package database exists because we don't want to have to rebuild all of
    our packages from scratch every time we want to build something (indeed, this
    is the whole point of a package manager);
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包数据库的存在是因为我们不希望每次想要构建某些东西时都必须从头开始重建我们所有的包（实际上，这就是包管理器的全部意义）。
- en: The solver depends on the local package database because users are impatient
    and want to avoid building new versions packages before they can build their software;
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解算器依赖于本地包数据库，因为用户不耐烦，希望在构建他们的软件之前避免构建新版本的包；
- en: The solver depends on the remote package repository because developers and users
    are impatient and want to get new releases to users as quickly possible;
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解算器依赖于远程包存储库，因为开发人员和用户都不耐烦，希望尽快将新版本发布给用户；
- en: The configure caches its information because a user doesn't want to wait to
    reconfigure the package every time they try to build a package they're working
    on.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置会缓存其信息，因为用户不希望每次尝试构建他们正在工作的软件包时都要重新配置该软件包。
- en: In the face of what is seemingly an inherently stateful problem domain, can
    stateless user interface prevail? Of course it can.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 面对看似固有的状态性问题领域，无状态用户界面能够取得成功吗？当然可以。
- en: Sometimes the state is merely being used as a *cache*. If a cache is blown away,
    everything should still work, just more slowly. The package database (reason 1)
    and configuration cache (reason 4) both fall under this banner, but the critical
    mistake today's Cabal makes is that if you delete this information, things do
    *not* "just work". There must be sufficient information to rebuild the cache;
    e.g., the configuration cache should be supplemented with the actual input to
    the configure step. (Sometimes, separation of concerns means you simply cannot
    achieve this. What is `ghc` to do if you ask it to use the not-in-cache lens package?)
    Furthermore, the behavior of a system should not vary depending on whether or
    not the cached data is present or not; e.g., the solver (reason 2) should not
    make different (semantically meaningful) decisions based on what is cached or
    not.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有时状态仅仅被用作*缓存*。如果缓存被清除，一切应该仍然可以正常工作，只是速度会慢一些。包数据库（原因 1）和配置缓存（原因 4）都属于这一类别，但今天的
    Cabal 犯的关键错误是，如果删除这些信息，事情*并不*会“自动解决”。必须有足够的信息来重建缓存；例如，配置缓存应该补充实际输入到配置步骤的内容。（有时，关注点的分离意味着你根本无法做到这一点。如果你要求
    ghc 使用不在缓存中的 lens 包，ghc 会怎么做？）此外，系统的行为不应因缓存数据的存在与否而变化；例如，求解器（原因 2）不应基于缓存的有无做出不同（语义上有意义的）决策。
- en: 'Otherwise, it must be possible to explicitly manage the state in question:
    if the state is a remote package repository (reason 3), there must be a way to
    pin against some state. (There''s a tool that does this and it''s called Stack.)
    While sometimes necessary, explicit state complicates interface and makes it harder
    to describe what the system can do. Preferably, this state should be kept as small
    and as centralized as possible.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，必须能够显式管理相关的状态：如果状态是远程包仓库（原因 3），必须有一种方式来针对某个状态进行固定。（有一个工具可以做到这一点，它叫做 Stack。）虽然有时是必需的，显式状态会使接口复杂化，并且更难描述系统可以做什么。最好将这种状态保持得尽可能小和集中。
- en: I don't think anything I've said here is particularly subtle. But it is something
    that you need to specifically think about; otherwise, you will be seduced by the
    snare of stateful interface. But if you refuse the siren call and put on the hair
    shirt, your users will thank you much more for it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我不认为我在这里说的任何事情特别微妙。但这确实是你需要专门考虑的事情；否则，你将会被有状态接口的陷阱所诱惑。但如果你拒绝这种诱惑，穿上苦衣，你的用户将更为感激你。
- en: '*Acknowledgments.* These thoughts are not my own: I have to give thanks to
    Johan Tibell, Duncan Coutts, and Simon Marlow, for discussions which communicated
    this understanding to me. Any mistakes in this article are my own. This is not
    a call to action: the Cabal developers recognize and are trying to fix this, see
    this [hackathon wiki page](https://github.com/haskell/cabal/wiki/Hackathon2015)
    for some mutterings on the subject. But I''ve not seen this philosophy written
    out explicitly anywhere on the Internet, and so I write it here for you.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*致谢.* 这些想法不是我自己的：我要感谢 Johan Tibell、Duncan Coutts 和 Simon Marlow，因为他们的讨论让我理解了这一点。本文中的任何错误都是我自己的。这不是号召行动：Cabal
    的开发者们意识到了这一点，并正在尝试修复，详见这个[hackathon wiki page](https://github.com/haskell/cabal/wiki/Hackathon2015)。但我在互联网上并没有看到这种哲学明确写出来的地方，因此我在这里为你写下它。'
