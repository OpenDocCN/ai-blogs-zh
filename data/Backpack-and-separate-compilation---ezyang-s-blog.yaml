- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:05'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:05'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Backpack and separate compilation : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Backpack 和独立编译：ezyang 的博客
- en: 来源：[http://blog.ezyang.com/2016/09/backpack-and-separate-compilation/](http://blog.ezyang.com/2016/09/backpack-and-separate-compilation/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2016/09/backpack-and-separate-compilation/](http://blog.ezyang.com/2016/09/backpack-and-separate-compilation/)
- en: Backpack and separate compilation
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Backpack 和独立编译
- en: 'When building a module system which supports parametrizing code over multiple
    implementations (i.e., functors), you run into an important implementation question:
    how do you *compile* said parametric code? In existing language implementations
    are three major schools of thought:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建一个支持在多个实现之间参数化代码（即functors）的模块系统时，你会遇到一个重要的实现问题：如何*编译*这些参数化的代码？在现有的语言实现中，有三种主要的思路：
- en: 'The **separate compilation** school says that you should compile your functors
    independently of their implementations. This school values compilation time over
    performance: once a functor is built, you can freely swap out implementations
    of its parameters without needing to rebuild the functor, leading to fast compile
    times. Pre-Flambda OCaml works this way. The downside is that it''s not possible
    to optimize the functor body based on implementation knowledge (unless, perhaps,
    you have a just-in-time compiler handy).'
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**独立编译**学派认为，你应该独立编译你的functors，而不管它们的具体实现。这个学派更重视编译时间而非性能：一旦一个functor被构建，你可以自由地替换其参数的实现，而无需重新构建functor，从而实现快速的编译时间。Pre-Flambda
    的 OCaml 就是这种方式。缺点是，无法基于实现的知识对functor主体进行优化（除非你可能有一个即时编译器可用）。'
- en: The **specialize at use** school says, well, you can get performance by inlining
    functors at their use-sites, where the implementations are known. If the functor
    body is not too large, you can transparently get good performance benefits without
    needing to change the architecture of your compiler in major ways. [Post-FLambda
    OCaml](https://blogs.janestreet.com/flambda/) and C++ templates in [the Borland
    model](https://gcc.gnu.org/onlinedocs/gcc/Template-Instantiation.html) both work
    this way. The downside is that the code must be re-optimized at each use site,
    and there may end up being substantial duplication of code (this can be reduced
    at link time)
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用时专门化**学派说，你可以通过在已知实现的使用点内联functors来获得性能提升。如果functor主体不太大，你可以在不需要大幅度改变编译器架构的情况下透明地获得良好的性能效益。[Post-FLambda
    OCaml](https://blogs.janestreet.com/flambda/) 和 C++ 模板在[Borland 模型](https://gcc.gnu.org/onlinedocs/gcc/Template-Instantiation.html)中都是这样工作的。缺点是，代码必须在每个使用点重新优化，并且可能会存在大量的代码重复（这可以在链接时减少）。'
- en: 'The **repository of specializations** school says that it''s dumb to keep recompiling
    the instantiations: instead, the compiled code for each instantiation should be
    cached somewhere globally; the next time the same instance is needed, it should
    be reused. C++ templates in the Cfront model and Backpack work this way.'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**专门化仓库**学派认为，不断重新编译实例化是愚蠢的：相反，每个实例化的编译代码应该被缓存到某个全局位置；下次需要相同实例时，应该重用它。C++ 中的模板在
    Cfront 模型和 Backpack 中都是这样工作的。'
- en: 'The repository perspective sounds nice, until you realize that it requires
    major architectural changes to the way your compiler works: most compilers *don''t*
    try to write intermediate results into some shared cache, and adding support for
    this can be quite complex and error-prone.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库视角听起来不错，直到你意识到这需要对编译器的工作方式进行重大的架构更改：大多数编译器*不*尝试将中间结果写入某些共享缓存中，而添加对此的支持可能会非常复杂且容易出错。
- en: Backpack sidesteps the issue by offloading the work of caching instantiations
    to the package manager, which *does* know how to cache intermediate products.
    The trade off is that Backpack is not as integrated into Haskell itself as some
    might like (it's *extremely* not first-class.)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Backpack 通过将实例化的缓存工作外包给包管理器来规避这个问题，后者*确实*知道如何缓存中间产品。这种折衷是，Backpack 并没有像某些人希望的那样完全整合到
    Haskell 本身中（它*极其*不是第一类）。
