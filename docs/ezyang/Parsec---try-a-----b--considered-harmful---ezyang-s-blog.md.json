["```\n\"test.txt\" (line 15, column 7):\nunexpected 'A'\nexpecting end of input\n\n```", "```\nstmt ::= import qualified A as B\n       | import A\n\n```", "```\nimport Text.Parsec\nimport qualified Text.Parsec.Token as P\nimport Text.Parsec.Language (haskellDef)\n\ndata Stmt = QualifiedImport String String | Import String\n    deriving (Show)\n\npStmt = pQualifiedImport <|> pImport\n\npQualifiedImport = do\n    reserved \"import\"\n    reserved \"qualified\"\n    i <- identifier\n    reserved \"as\"\n    i' <- identifier\n    return (QualifiedImport i i')\n\npImport = do\n    reserved \"import\"\n    i <- identifier\n    return (Import i)\n\nlexer = P.makeTokenParser (haskellDef\n    { P.reservedNames = P.reservedNames haskellDef ++ [\"qualified\", \"as\"] })\nidentifier = P.identifier lexer\nreserved = P.reserved lexer\n\nparseStmt input = parse (pStmt >> eof) \"(unknown)\" input\n\n```", "```\n*Main> parseStmt \"import Foo\"\nLeft \"(unknown)\" (line 1, column 8):\nunexpected \"F\"\nexpecting \"qualified\"\n\n```", "```\npStmt = try pQualifiedImport <|> pImport\n\n```", "```\n*Main> parseStmt \"import qualified Foo s B\"\nLeft \"(unknown)\" (line 1, column 17):\nunexpected reserved word \"qualified\"\nexpecting letter or digit or \"#\"\n\n```", "```\npStmt = pQualifiedImport <|> pImport\n\npQualifiedImport = do\n    try $ do\n        reserved \"import\"\n        reserved \"qualified\"\n    i <- identifier\n    reserved \"as\"\n    i' <- identifier\n    return (QualifiedImport i i')\n\n```", "```\n*Main> parseStmt \"import qualified Foo s F\"\nLeft \"(unknown)\" (line 1, column 22):\nunexpected \"s\"\nexpecting \"as\"\n\n```"]