- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-07-01 18:17:15'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: 'How to maintain a pristine copy of your configuration files : ezyang’s blog'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[http://blog.ezyang.com/2014/01/how-to-maintain-a-pristine-copy-of-your-configuration-files/](http://blog.ezyang.com/2014/01/how-to-maintain-a-pristine-copy-of-your-configuration-files/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[etckeeper](http://joeyh.name/code/etckeeper/) is a pretty good tool for keeping
    your /etc under version control, but one thing that it won’t tell you is what
    the diff between your configuration and a pristine version of your configuration
    (if you installed the same packages on the system, but didn’t change any configuration).
    [People have wanted this](https://blueprints.launchpad.net/ubuntu/+spec/foundations-q-dpkg-pristine-conffiles),
    but I couldn’t find anything that actually did this. A month ago, I figured out
    a nice, easy way to achieve this under etckeeper with a Git repository. The idea
    is to maintain a pristine branch, and when an upgrade occurs, automatically apply
    the patch (automatically generated) to a pristine branch. This procedure works
    best on a fresh install, since I don’t have a good way of reconstructing history
    if you haven’t been tracking the pristine from the start.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how it goes:'
  prefs: []
  type: TYPE_NORMAL
- en: Install etckeeper. It is best if you are using etckeeper 1.10 or later, but
    if not, you should replace [30store-metadata](https://github.com/joeyh/etckeeper/blob/master/pre-commit.d/30store-metadata)
    with a copy from the latest version. This is important, because pre-1.10, the
    metadata store included files that were ignored, which means you’ll get lots of
    spurious conflicts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Initialize the Git repository using `etckeeper init` and make an initial commit
    `git commit`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a pristine branch: `git branch pristine` (but stay on the master branch)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the etckeeper configuration so that `VCS="git"`, `AVOID_DAILY_AUTOCOMMITS=1`
    and `AVOID_COMMIT_BEFORE_INSTALL=1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Apply [this patch to etckeeper/commit.d/50vcs-commit](http://web.mit.edu/~ezyang/Public/etckeeper-pristine.patch).
    This patch is responsible for keeping the pristine branch up-to-date (more explanation
    below).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `.gitattributes` file with contents `.etckeeper merge=union`. This
    makes merges on the metadata file use the union strategy, which reduces spurious
    conflicts dramatically:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Commit these changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Permit pushes to the checked out `/etc` by running `git config receive.denyCurrentBranch
    warn`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All done! Try installing a package that has some configuration and then running
    `sudo gitk` in `/etc` to view the results. You can run a diff by running `sudo
    git diff pristine master`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So, what’s going on under the hood? The big problem that blocked me from a
    setup like this in the past is that you would like the package manager to apply
    its changes into the pristine etc, so that you can merge in the changes yourself
    on the production version, but it’s not obvious how to convince dpkg that `/etc`
    lives somewhere else. Nor do you want to revert your system configuration to pristine
    version, apply the update, and then revert back: this is just asking for trouble.
    So the idea is to apply the (generated) patch as normal, but then *reapply* the
    patch (using a cherry-pick) to the pristine branch, and then rewrite history so
    the parent pointers are correct. All of this happens outside of `/etc`, so the
    production copy of the configuration files never gets touched.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, sometimes the cherry-pick might fail. In that case, you’ll get an
    error like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Do not fret: all that has happened is that the `pristine` branch is not up-to-date.
    You can resolve this problem by looking at `$TMPREPO/etc`, where you will see
    some sort of merge conflict. Resolve the conflict and commit. Now you will need
    to manually complete the rest of the script, this can be done with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To make sure you did it right, go back to `/etc` and run `git status`: it should
    report the working directory as clean. Otherwise, there are discrepancies and
    you may not have done the merges correctly.'
  prefs: []
  type: TYPE_NORMAL
- en: 'I’ve been testing this setup for a month now, and it has proceeded very smoothly
    (though I’ve never attempted to do a full release upgrade with this setup). Unfortunately,
    as I’ve said previously, I don’t have a method for constructing a pristine branch
    from scratch, if you have an existing system you’d like to apply this trick to.
    There’s nothing stopping you, though: you can always decide to start, in which
    case you will record just the diffs from the time you started recording pristine.
    Give it a spin!'
  prefs: []
  type: TYPE_NORMAL
