- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:11'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:11'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Tomatoes are a subtype of vegetables : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 番茄是蔬菜的一个子类型：ezyang的博客
- en: 来源：[http://blog.ezyang.com/2014/11/tomatoes-are-a-subtype-of-vegetables/](http://blog.ezyang.com/2014/11/tomatoes-are-a-subtype-of-vegetables/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2014/11/tomatoes-are-a-subtype-of-vegetables/](http://blog.ezyang.com/2014/11/tomatoes-are-a-subtype-of-vegetables/)
- en: Subtyping is one of those concepts that seems to makes sense when you first
    learn it (“Sure, convertibles are a subtype of vehicles, because all convertibles
    are vehicles but not all vehicles are convertibles”) but can quickly become confusing
    when function types are thrown into the mix. For example, if `a` is a subtype
    of `b`, is `(a -> r) -> r` a subtype of `(b -> r) -> r`? (If you know the answer
    to this question, this blog post is not for you!) When we asked our students this
    question, invariably some were lead astray. True, you can mechanically work it
    out using the rules, but what’s the intuition?
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 子类型是一个在你学习它时似乎很有道理的概念（“当然，敞篷车是车的一个子类型，因为所有敞篷车都是车，但并非所有车都是敞篷车”），但一旦涉及到函数类型时，情况很快变得令人困惑。例如，如果`a`是`b`的一个子类型，那么`(a
    -> r) -> r`是`(b -> r) -> r`的一个子类型吗？（如果你知道这个问题的答案，那这篇博客不适合你！）当我们问我们的学生这个问题时，总有一些人被引入歧途。确实，你可以通过规则来机械地解决这个问题，但直觉是什么？
- en: 'Maybe this example will help. Let `a` be tomatoes, and `b` be vegetables. `a`
    is a subtype of `b` if we can use an `a` in any context where we were expecting
    a `b`: since tomatoes are (culinary) vegetables, tomatoes are a subtype of vegetables.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 或许这个例子能帮到你。让`a`代表番茄，`b`代表蔬菜。如果我们可以在期望蔬菜的任何上下文中使用番茄，那么番茄就是蔬菜的一个子类型：因为番茄（在烹饪上）是蔬菜，番茄就是蔬菜的一个子类型。
- en: 'What about `a -> r`? Let `r` be soup: then we can think of `Tomato -> Soup`
    as recipes for tomato soup (taking tomatoes and turning them into soup) and `Vegetable
    -> Soup` as recipes for vegetable soup (taking vegetables—any kind of vegetable—and
    turning them into soup). As a simplifying assumption, let''s assume all we care
    about the result is that it’s soup, and not what type of soup it is.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 那么`a -> r`怎么样呢？让`r`表示汤：那么我们可以把`番茄 -> 汤`看作是番茄汤的食谱（拿番茄做汤）和`蔬菜 -> 汤`看作是蔬菜汤的食谱（拿任何蔬菜做汤）。作为一个简化的假设，让我们假设我们关心的只是结果是汤，而不关心是什么类型的汤。
- en: 'What is the subtype relationship between these two types of recipes? A vegetable
    soup recipe is more flexible: you can use it as a recipe to make soup from tomatoes,
    since tomatoes are just vegetables. But you can’t use a tomato soup recipe on
    an eggplant. Thus, vegetable soup recipes are a subtype of tomato soup recipes.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种类型的食谱之间的子类型关系是什么？蔬菜汤食谱更加灵活：你可以把它当作用来制作番茄汤的食谱，因为番茄只是蔬菜的一种。但是你不能用番茄汤的食谱来做茄子汤。因此，蔬菜汤食谱是番茄汤食谱的一个子类型。
- en: 'This brings us to the final type: `(a -> r) -> r`. What is `(Vegetable -> Soup)
    -> Soup`? Well, imagine the following situation...'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这将引导我们进入最后一种类型：`(a -> r) -> r`。什么是`(蔬菜 -> 汤) -> 汤`？嗯，想象一下以下情景...
- en: '* * *'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: One night, Bob calls you up on the phone. He says, “Hey, I’ve got some vegetables
    left in the fridge, and I know your Dad was a genius when it came to inventing
    recipes. Do you know if he had a good soup recipe?”
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有一天晚上，鲍勃打电话给你。他说：“嘿，我冰箱里还有些蔬菜，我知道你爸爸在发明食谱方面是个天才。你知道他有没有一个好的汤食谱吗？”
- en: “I don’t know...” you say slowly, “What kind of vegetables?”
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: “我不知道……”你慢慢地说，“什么样的蔬菜？”
- en: “Oh, it’s just vegetables. Look, I’ll pay you back with some soup, just come
    over with the recipe!” You hear a click on the receiver.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: “哦，那只是些蔬菜。听着，我会用一些汤来还你的，拿着食谱过来吧！”听筒里传来一声咔哒。
- en: 'You pore over your Dad’s cookbook and find a tomato soup recipe. Argh! You
    can’t bring this recipe, because Bob might not actually have tomatoes. As if on
    cue, the phone rings again. Alice is on the line: “The beef casserole recipe was
    lovely; I’ve got some tomatoes and was thinking of making some soup with them,
    do you have a recipe for that too?” Apparently, this happens to you a lot.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你翻阅爸爸的烹饪书，找到了一份番茄汤的食谱。哎呀！你不能带这个食谱过去，因为鲍勃可能并没有番茄。就在此时，电话再次响起。爱丽丝在电话那头：“牛肉炖菜的食谱很棒；我有些番茄，打算做些番茄汤，你有那种食谱吗？”显然，这种情况经常发生在你身上。
- en: “In fact I do!” you turn back to your cookbook, but to your astonishment, you
    can’t find your tomato soup recipe any more. But you do find a vegetable soup
    recipe. “Will a vegetable soup recipe work?”
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: “事实上我知道！”你转回到你的烹饪书，但令你惊讶的是，你再也找不到你的番茄汤食谱了。但是你找到了一个蔬菜汤的食谱。“蔬菜汤食谱行得通吗？”
- en: '“Sure—I’m not a botanist: to me, tomatoes are vegetables too. Thanks a lot!”'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: “当然 — 我不是植物学家：对我来说，番茄也是蔬菜。非常感谢！”
- en: You feel relieved too, because you now have a recipe for Bob as well.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你也感到宽慰，因为现在你也为Bob有了一个食谱。
- en: '* * *'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Bob is a person who takes vegetable soup recipes and turns them into soup:
    he’s `(Vegetable -> Soup) -> Soup`. Alice, on the other hand, is a person who
    takes tomato soup recipes and turns them into soup: she’s `(Tomato -> Soup) ->
    Soup`. You could give Alice either a tomato soup recipe or a vegetable soup recipe,
    since you knew she had tomatoes, but Bob’s vague description of the ingredients
    he had on hand meant you could only bring a recipe that worked on all vegetables.
    Callers like Alice are easier to accommodate: `(Tomato -> Soup) -> Soup` is a
    subtype of `(Vegetable -> Soup) -> Soup`.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Bob 是一个将蔬菜汤食谱变成汤的人：他是`(Vegetable -> Soup) -> Soup`。另一方面，Alice 是一个将番茄汤食谱变成汤的人：她是`(Tomato
    -> Soup) -> Soup`。你可以给Alice番茄汤食谱或者蔬菜汤食谱，因为你知道她有番茄，但是Bob对手头食材的模糊描述意味着你只能带一个适合所有蔬菜的食谱。像Alice这样的调用者更容易适应：`(Tomato
    -> Soup) -> Soup`是`(Vegetable -> Soup) -> Soup`的一个子类型。
- en: In practice, it is probably faster to formally reason out the subtyping relationship
    than it is to *intuit* it out; however, hopefully this scenario has painted a
    picture of *why* the rules look the way they do.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，正式推理出子类型关系可能比直觉推断更快；然而，希望这种情况已经解释了*为什么*规则看起来像这样。
