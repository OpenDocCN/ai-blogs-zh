["```\n{- Haskell -}\n(* OCaml *)\n\n```", "```\n()   Int Float Char String Bool (capitalized)\nunit int float char string bool (lower case)\n\n```", "```\n  == /= .&.  .|. xor  shiftL shiftR complement\n= == != land lor lxor [la]sl [la]sr lnot\n\n```", "```\nfloor fromIntegral\nint_of_float float_of_int\n\n```", "```\n++ !!i\n^  .[i] (note, string != char list)\n\n```", "```\n(Int, Int)  [Bool]\nint * int   bool list\n\n```", "```\nx :  [1, 2, 3]\nx :: [1; 2; 3]\n\n```", "```\ndata Tree a = Node a (Tree a) (Tree a) | Leaf\ntype 'a tree = Node of 'a * 'a tree * 'a tree | Leaf;;\n\n```", "```\ndata MyRecord = MyRecord { x :: Int, y :: Int }\ntype myrecord = { x : int; y : int };;\nField access:\n    x r\n    r.x\nFunctional update:\n    r { x = 2 }\n    { r with x = 2 }\n\n```", "```\ndata Maybe a = Just a | Nothing\ntype 'a option = None | Some of 'a;;\n\n```", "```\n         readArray a i  writeArray a i v\n[|1; 3|] a.(i)          a.(i) <- v\n\n```", "```\nnewIORef writeIORef readIORef\nref      :=         !\n\n```", "```\nx = 1\nlet x = 1;;\n\n```", "```\n\\x y -> f y x\nfun x y -> f y x\n\n```", "```\nlet     f x = if x == 0 then 1 else x * f (x-1)\nlet rec f x = if x == 0 then 1 else x * f (x-1)\n\n```", "```\nlet f x = g x\n    g x = f x\nlet rec f x = g x\nand     g x = f x\n\n```", "```\nlet f 0 = 1\n    f 1 = 2\nlet f = function\n    | 0 -> 1\n    | 1 -> 2\n\n```", "```\ncase f x of\n    0 -> 1\n    y | y > 5 -> 2\n    y | y == 1 || y == 2 -> y\n    _ -> -1\nmatch f x with\n    | 0 -> 1\n    | y when y > 5 -> 2\n    | (1 | 2) as y -> y\n    | _ -> -1\n\n```", "```\nDefinition\n    data MyException = MyException String\n    exception MyException of string;;\nThrow exception\n    throw (MyException \"error\")\n    raise (MyException \"error\")\nCatch exception\n    catch expr $ \\e -> case e of\n        x -> result\n    try expr with\n        | x -> result\nAssertion\n    assert (f == 1) expr\n    assert (f == 1); expr\n\n```", "```\nghc --make file.hs\nocamlopt -o file file.ml\n\n```", "```\nrunghc file.hs\nocaml file.ml\n\n```", "```\nlet intEq (x : int) (y : int) : bool = ...\n\n```", "```\nval intEq : int -> int -> bool\n\n```"]