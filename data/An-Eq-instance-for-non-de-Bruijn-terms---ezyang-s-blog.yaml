- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-07-01 18:17:11'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-07-01 18:17:11
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'An Eq instance for non de Bruijn terms : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 非德布鲁因术语的Eq实例：ezyang的博客
- en: 来源：[http://blog.ezyang.com/2015/01/an-eq-instance-for-non-de-bruijn-terms/](http://blog.ezyang.com/2015/01/an-eq-instance-for-non-de-bruijn-terms/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2015/01/an-eq-instance-for-non-de-bruijn-terms/](http://blog.ezyang.com/2015/01/an-eq-instance-for-non-de-bruijn-terms/)
- en: '**tl;dr** *A non-nameless term equipped with a map specifying a de Bruijn numbering
    can support an efficient equality without needing a helper function. More abstractly,
    quotients are not just for proofs: they can help efficiency of programs too.*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**简短总结** *一个非无名术语配备一个指定德布鲁因编号的映射可以支持有效的相等性，而无需辅助函数。更抽象地说，商集不仅适用于证明：它们还可以提高程序的效率。*'
- en: '**The cut.** You''re writing a small compiler, which defines expressions as
    follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**关键点。** 你正在编写一个小编译器，定义表达式如下：'
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Where `Var` is provided from some globally unique supply. But while working
    on a common sub-expression eliminator, you find yourself needing to define *equality*
    over expressions.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`Var`来自某个全局唯一的提供。但是当你在共同子表达式消除器上工作时，你发现自己需要定义表达式的*相等性*。
- en: 'You know the default instance won’t work, since it will not say that `Lam 0
    (Var 0)` is equal to `Lam 1 (Var 1)`. Your colleague Nicolaas teases you that
    the default instance would have worked if you used a *nameless representation*,
    but de Bruijn levels make your head hurt, so you decide to try to write an instance
    that does the right thing by yourself. However, you run into a quandary:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 默认实例不适用，因为它不会说`Lam 0 (Var 0)`等于`Lam 1 (Var 1)`。你的同事尼古拉斯取笑你说，如果你使用*无名表示*，默认实例就能起作用，但德布鲁因级数让你头痛，所以你决定尝试自己写一个正确的实例。然而，你遇到了一个困境：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If `v == v''`, things are simple enough: just check if `e == e''`. But if they''re
    not... something needs to be done. One possibility is to *rename* `e''` before
    proceeding, but this results in an equality which takes quadratic time. You crack
    open the source of one famous compiler, and you find that in fact: (1) there is
    *no* Eq instance for terms, and (2) an equality function has been defined with
    this type signature:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`v == v'`，事情就简单了：只需检查`e == e'`。但如果它们不是... 需要做些什么。一种可能性是在继续之前*重命名*`e'`，但这会导致一个需要二次时间的相等性。你打开了一个著名编译器的源代码，你发现事实上：（1）术语没有Eq实例，（2）已定义了一个具有此类型签名的相等函数：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Where `RnEnv2` is a data structure containing renaming information: the compiler
    has avoided the quadratic blow-up by deferring any renaming until we need to test
    variables for equality.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`RnEnv2`是一个包含重命名信息的数据结构：编译器通过延迟任何重命名来避免二次增长。
- en: “Well that’s great,” you think, “But I want my Eq instance, and I don’t want
    to convert to de Bruijn levels.” Is there anything to do?
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: “好吧，这很棒，”你想，“但我想要我的Eq实例，并且我不想转换为德布鲁因级别。”还有什么可以做吗？
- en: 'Perhaps a change of perspective in order:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 或许需要换个角度看问题：
- en: '**The turn.** Nicolaas has the right idea: a nameless term representation has
    a very natural equality, but the type you''ve defined is too big: it contains
    many expressions which should be equal but structurally are not. But in another
    sense, it is also too *small*.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**转折点。** 尼古拉斯有正确的想法：无名术语表示具有非常自然的相等性，但你定义的类型太大了：它包含许多表达式，它们应该是相等的，但在结构上却不是。但从另一个角度来看，它也太*小*了。'
- en: Here is an example. Consider the term `x`, which is a subterm of `λx. λy. x`.
    The `x` in this term is free; it is only through the context `λx. λy. x` that
    we know it is bound. However, in the analogous situation with de Bruijn levels
    (not indexes—as it turns out, levels are more convenient in this case) we have
    `0`, which is a subterm of `λ λ 0`. Not only do we know that `0` is a free variable,
    but we also know that it binds to the outermost enclosing lambda, *no matter the
    context.* With just `x`, we don’t have enough information!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子。考虑术语`x`，它是`λx. λy. x`的子术语。这个术语中的`x`是自由的；只有通过上下文`λx. λy. x`我们才知道它是绑定的。然而，在使用德布鲁因级别（而不是索引——事实证明，在这种情况下级别更方便）的类似情况中，我们有`0`，它是`λ
    λ 0`的子术语。我们不仅知道`0`是一个自由变量，而且我们还知道它绑定到最外层的lambda，*不管上下文如何。*只有`x`，我们没有足够的信息！
- en: 'If you know you don’t know something, you should learn it. If your terms don’t
    know enough about their free variables, you should *equip* them with the necessary
    knowledge:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你知道你不知道某事，你应该学习它。如果你的术语对它们的自由变量了解不足，你应该*为它们提供*必要的知识：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'and when you do that, things just might work out the way you want them to:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当你这样做时，事情可能会按你所希望的方式进行：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: (Though perhaps Coq might not be able to tell, unassisted, that this function
    is structurally recursive.)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: (尽管也许 Coq 在无外援的情况下可能无法判断这个函数是结构递归的。)
- en: '**Exercise.** Define a function with type `DeBruijnExpr -> DeBruijnExpr''`
    and its inverse, where:'
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**练习。** 定义一个类型为 `DeBruijnExpr -> DeBruijnExpr''` 的函数及其逆函数，其中：'
- en: ''
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**The conclusion.** What have we done here? We have quotiented a type—made
    it smaller—by *adding* more information. In doing so, we recovered a simple way
    of defining equality over the type, without needing to define a helper function,
    do extra conversions, or suffer quadratically worse performance.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**总结。** 我们在这里做了什么？我们通过*添加*更多信息对一个类型进行了商集化，使其变得更小。通过这样做，我们恢复了一种简单的方式来定义类型上的相等性，而无需定义一个辅助函数、进行额外的转换或者承受二次复杂性能的损失。'
- en: 'Sometimes, adding information is the *only* way to get the minimal definition.
    This situation occurs in homotopy type theory, where *equivalences* must be equipped
    with an extra piece of information, or else it is not a mere proposition (has
    the wrong homotopy type). If you, gentle reader, have more examples, I would love
    to hear about them in the comments. We are frequently told that “less is more”,
    that the route to minimalism lies in removing things: but sometimes, the true
    path lies in *adding constraints.*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，增加信息是获得最小定义的*唯一*方法。这种情况发生在同伦类型论中，其中*等价性*必须装备有额外的信息，否则它不是一个单纯的命题（具有错误的同伦类型）。如果您，亲爱的读者，有更多例子，我很乐意在评论中听取。我们经常被告知“少即是多”，简约主义的路线在于去除事物：但有时，真正的路径在于*增加约束*。
- en: '*Postscript.* In Haskell, we haven’t truly made the type smaller: I can distinguish
    two expressions which should be equivalent by, for example, projecting out the
    underlying `Expr`. A proper type system which supports quotients would oblige
    me to demonstrate that if two elements are equivalent under the quotienting equivalence
    relation, my elimination function can''t observe it.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*后记.* 在 Haskell 中，我们并没有真正地让类型更小：例如，我可以通过投影出底层的 `Expr` 区分出应该等价的两个表达式。一个合适的类型系统，支持商集，将迫使我证明，如果两个元素在商等价关系下是等价的，那么我的消除函数就不能观察到它。'
- en: '*Postscript 2.* This technique has its limitations. Here is one situation where
    I have not been able to figure out the right quotient: suppose that the type of
    my expressions are such that all free variables are *implicitly universally quantified.*
    That is to say, there exists some ordering of quantifiers on `a` and `b` such
    that `a b` is equivalent to `b a`. Is there a way to get the quantifiers in order
    *on the fly*, without requiring a pre-pass on the expressions using this quotienting
    technique? I don’t know!'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*后记 2.* 这种技术有其局限性。以下是一种情况，我还没有找到正确的商集：假设我的表达式类型是这样的，所有自由变量都是*隐式全称量化*的。也就是说，存在某种量化顺序，对于
    `a` 和 `b`，`a b` 等价于 `b a`。有没有办法在不要求在表达式上使用这种商集技术的预处理的情况下，实时地按顺序获取量词？我不知道！'
