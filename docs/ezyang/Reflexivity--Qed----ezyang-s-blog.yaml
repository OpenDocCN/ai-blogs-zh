- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:18:02'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:18:02'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Reflexivity. Qed. : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Reflexivity. Qed.：ezyang的博客
- en: 来源：[http://blog.ezyang.com/2010/11/reflexivity-qed/](http://blog.ezyang.com/2010/11/reflexivity-qed/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/11/reflexivity-qed/](http://blog.ezyang.com/2010/11/reflexivity-qed/)
- en: '*In which Mendeley, Software Foundations and Coq are discussed.*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*在其中讨论了Mendeley、Software Foundations和Coq。*'
- en: I was grousing on `#haskell-blah` one day about how annoying it was to organize
    all of the papers that I have downloaded (and, of course, not read yet.) When
    you download a paper off the Internet, it will be named all sorts of tremendously
    unhelpful things like `2010.pdf` or `icfp10.pdf` or `paper.pdf`. So to have any
    hope of finding that paper which you skimmed a month ago and vaguely recall the
    title of, you'll need some sort of organization system. Pre-Mendeley, I had adopted
    the convention of `AuthorName-PaperTitle.pdf`, but I'd always feel a bit bad picking
    an author out of a list of five people to stick at the beginning, and I still
    couldn't ever find the paper I was looking for.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 有一天，我在`#haskell-blah`上抱怨过，整理我下载的所有论文（当然，还没有阅读）。当你从互联网上下载一篇论文时，它的名称可能会是一些非常不方便的东西，比如`2010.pdf`、`icfp10.pdf`或`paper.pdf`。因此，要找到一个你一个月前浏览过并模糊记得标题的论文，你需要某种组织系统。在使用Mendeley之前，我采用了`AuthorName-PaperTitle.pdf`的惯例，但是我总觉得从五个人的列表中挑选一个作者作为开头有些不好，而且我仍然找不到我要找的论文。
- en: It was at this point that someone (I don't have logs, so I don't remember precisely
    who) pointed me to [Mendeley](http://www.mendeley.com/). Mendeley is free (as
    in beer) software that helps you organize your papers and upload them to the cloud;
    in return, they get all sorts of interesting data about what papers people are
    reading and hounds of metadata obsessed freaks like me curating their databases.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 就在这个时候，有人（我没有日志，所以我不记得确切是谁）向我推荐了[Mendeley](http://www.mendeley.com/)。Mendeley是免费的（就像啤酒一样的）软件，帮助你组织论文并将它们上传到云端；作为回报，他们获得了关于人们正在阅读的论文以及像我这样的元数据狂人策划他们数据库的各种有趣数据。
- en: It doesn't have to do much to improve over my existing ad hoc naming scheme.
    But it does it exceedingly well. After having shifted my [paper database](http://www.mendeley.com/groups/680221/edward-z-yang-s-paper-repository/overview/)
    over to it, it's reasonably easy (read, spend an afternoon curating a database
    of 200 papers) to ensure all of your papers have reasonable metadata attached
    to them. This reasonable metadata means you can slice your database by author
    (apparently Simon Peyton Jones and Chris Okasaki are two of my favorite authors)
    and conference (in case I, like, actually write a paper and need to figure out
    where to send it). You can also classify papers according to your own topics,
    which is very good if you're like me and have bodies of completely unrelated research
    literature. Simple, but effective.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 它不必做太多来改善我现有的临时命名方案。但它做得非常出色。在我将我的[paper数据库](http://www.mendeley.com/groups/680221/edward-z-yang-s-paper-repository/overview/)转移到它之后，花一个下午整理200篇论文数据库变得相当容易，以确保所有的论文都附有合理的元数据。这些合理的元数据意味着你可以按作者（显然Simon
    Peyton Jones和Chris Okasaki是我最喜欢的两位作者之一）和会议对数据库进行切片（万一我真的写了一篇论文并需要找到发送的地方）。你还可以根据自己的主题对论文进行分类，如果像我这样拥有完全无关的研究文献群体，这将非常有用。简单而有效。
- en: 'Oh, I do have some complaints about Mendeley. It''s PDF viewer leaves something
    to be desired: if I page down it skips entirely to the next page instead of doing
    a continuous scroll; the metadata extraction could be better (essentially, it
    should be just good enough to be able to look it up on an online database and
    then fill in the database); there should be a better workflow for papers (rather
    than just a *read* or *unread* toggle, which is utterly not useful); etc. But
    it works well enough to bring value, and I''m willing to overlook these nits.'
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 噢，我对Mendeley还是有一些抱怨的。它的PDF查看器有些欠缺：如果我向下翻页，它会完全跳到下一页而不是连续滚动；元数据提取可能会更好（基本上，它应该足够好以便能够在在线数据库中查找并填写数据库）；论文的工作流程应该更好（而不仅仅是一个*已读*或*未读*的切换，这完全没有用）；等等。但它足够好以提供价值，我愿意忽略这些小问题。
- en: After having organized all of my papers, I suddenly realized that I hadn't added
    any new papers to my collection recently. Papers either find my way to me because
    a friend forwards it on, or I'm looking for some specific topic and a relevant
    paper pops up, but I don't actually have any streams of new papers to take a look
    at. To fix this, I decided to pick some names and go look at their recent publications.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 整理完所有文件后，我突然意识到最近并没有添加任何新文件到我的收藏中。文件要么通过朋友转发给我，要么我在寻找某个特定主题时会有相关的论文出现，但我实际上没有任何新的论文可供查看。为了解决这个问题，我决定挑选一些名字，去查看他们的最新出版物。
- en: 'On the way, I noticed an interesting slide deck on [Benjamin Pierce''s publications](http://www.cis.upenn.edu/~bcpierce/papers/index.shtml#Recent).
    The deck was for a keynote address named [Proof Assistant as Teaching Assistant:
    A View from the Trenches](http://www.cis.upenn.edu/~bcpierce/papers/LambdaTA-ITP.pdf).
    I thought this was a quite fascinating approach to the problem of teaching proof,
    and even better, the course notes were online!'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在此过程中，我注意到了[本杰明·皮尔斯的出版物](http://www.cis.upenn.edu/~bcpierce/papers/index.shtml#Recent)上的一个有趣的幻灯片。这份幻灯片是为一个名为[证明助手作为教学助理：从前线看](http://www.cis.upenn.edu/~bcpierce/papers/LambdaTA-ITP.pdf)的主题演讲准备的。我认为这是解决教学证明问题的一种非常迷人的方法，而且更好的是，课程笔记可以在线获取！
- en: 'It''s difficult for me to precisely vocalize how unimaginably awesome [Software
    Foundations](http://www.cis.upenn.edu/~bcpierce/sf/). I''ve found it a bit difficult
    to get started with proof assistants because it''s always unclear what exactly
    you should prove with them: pick something too easy and it feels pointless, pick
    something too hard and you find yourself without a clue on how to attack the problem.
    Proof assistants are also rather sophisticated (it reminds me of a time when I
    was listening to Eric and Trevor discuss proof tactics back at Galois... that
    was a *very* hard to follow conversation), so if you dive into the manual you
    find yourself with all this rope but not very much idea how to use it all.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，精确地描述[软件基础](http://www.cis.upenn.edu/~bcpierce/sf/)是多么不可思议。我发现开始使用证明助手有点困难，因为不清楚应该用它们证明什么：选择太简单的东西感觉毫无意义，选择太难的东西又不知道如何着手解决问题。证明助手也相当复杂（这让我想起我曾在Galois听Eric和Trevor讨论证明策略的时候...那真是一个非常难懂的对话），所以如果你深入研究手册，你会发现自己掌握了许多工具，但并不知道如何全部运用起来。
- en: 'Software Foundations is great because it''s not teaching you how to use a proof
    assistant: it''s teaching you about logic, functional programming and the foundations
    of programming languages, built on top of a proof assistant Coq. So you have a
    bag of interesting, fundamental theorems about these topics that you want to prove,
    and then this course shows you how to use the proof assistant to prove them.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 软件基础之所以伟大，是因为它不是教你如何使用证明助手：它教你逻辑、函数式编程以及编程语言的基础，都是建立在Coq证明助手之上的。因此，你有一袋关于这些主题的有趣且基础的定理，想要证明它们，而这门课程则向你展示如何使用证明助手来证明它们。
- en: It's also a rather ideal situation for self-study, because unlike many textbook
    exercises, your Coq interpreter will tell you when you've got *the right answer.*
    Proof assistants are fun precisely because they're a bit like puzzles that you
    can create without knowing the solution before hand, and then solve. So if you've
    got some extra time on your hands and have wanted to learn how to use a proof
    assistance but never got around to it, I highly recommend [checking it out](http://www.cis.upenn.edu/~bcpierce/sf/).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是自学的一个相当理想的情况，因为与许多教科书的练习不同，你的Coq解释器会告诉你何时得到*正确的答案*。证明助手之所以有趣，正是因为它们有点像你可以在不知道解决方案的情况下创建并解决的谜题。因此，如果你有多余的时间，并且想学习如何使用证明助手但之前从未着手，我强烈推荐[去看看](http://www.cis.upenn.edu/~bcpierce/sf/)。
