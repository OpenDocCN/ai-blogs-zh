- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:06'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:06'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'ghc-shake: Reimplementing ghc - -make : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ghc-shake：重新实现 ghc --make：ezyang 的博客
- en: 来源：[http://blog.ezyang.com/2016/01/ghc-shake-reimplementing-ghc-make/](http://blog.ezyang.com/2016/01/ghc-shake-reimplementing-ghc-make/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2016/01/ghc-shake-reimplementing-ghc-make/](http://blog.ezyang.com/2016/01/ghc-shake-reimplementing-ghc-make/)
- en: 'ghc-shake: Reimplementing ghc -​-make'
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ghc-shake：重新实现 ghc --make
- en: '`ghc --make` is a useful mode in GHC which automatically determines what modules
    need to be compiled and compiles them for you. Not only is it a convenient way
    of building Haskell projects, its single-threaded performance is good too, by
    reusing the work of reading and deserializing external interface files. However,
    the are a number of downsides to `ghc --make`:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`ghc --make` 是 GHC 中的一种有用模式，它会自动确定需要编译的模块，并为您编译它们。它不仅是构建 Haskell 项目的便捷方式，其单线程性能也很好，通过重用读取和反序列化外部接口文件的工作。然而，`ghc
    --make` 也存在一些缺点：'
- en: Projects with large module graphs have a hefty latency before recompilation
    begins. This is because `ghc --make` (re)computes the full module graph, parsing
    each source file's header, before actually doing any work. If you have a preprocessor,
    [it's even worse](https://ghc.haskell.org/trac/ghc/ticket/1290).
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 具有大模块图的项目在重新编译开始之前有相当长的延迟。这是因为 `ghc --make` 在实际进行任何工作之前会重新计算完整的模块图，解析每个源文件的头文件。如果您使用预处理器，情况会更糟（[参见这里](https://ghc.haskell.org/trac/ghc/ticket/1290)）。
- en: It's a monolithic build system, which makes it hard to integrate with other
    build systems if you need something more fancy than what GHC knows how to do.
    (For example, GHC's painstakingly crafted build system knows how to build in parallel
    across package boundaries, which Cabal has no idea how to do.)
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是一个单体构建系统，如果需要比 GHC 默认功能更复杂的东西，将其与其他构建系统集成起来会很困难。（例如，GHC 精心设计的构建系统知道如何在包边界之间并行构建，而
    Cabal 不知道如何做。）
- en: It doesn't give you any insight into the performance of your build, e.g. what
    modules take a long time to build or what the big "blocker" modules are.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它无法提供有关构建性能的洞察，例如哪些模块需要很长时间构建，或者哪些“阻塞”模块很大。
- en: '[ghc-shake](https://github.com/ezyang/ghc-shake) is a reimplementation of `ghc
    --make` using the [Shake build system](http://shakebuild.com/). It is a drop-in
    replacement for `ghc`. ghc-shake sports the following features:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[ghc-shake](https://github.com/ezyang/ghc-shake) 是使用 [Shake 构建系统](http://shakebuild.com/)
    重新实现的 `ghc --make`。它可以作为 `ghc` 的替代品。ghc-shake 具有以下特性：'
- en: Greatly reduced latency to recompile. This is because Shake does not recompute
    the module graph by parsing the header of every file; it reuses cached information
    and only re-parses source files which have changed.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 大大减少了重新编译的延迟。这是因为 Shake 不会通过解析每个文件的头文件来重新计算模块图；它会重用缓存的信息，仅重新解析已更改的源文件。
- en: If a file is rebuilt (and its timestamp updated) but the build output has not
    changed, we don't bother recompiling anything that depended on it. This is in
    contrast to `ghc --make`, which has to run the recompilation check on every downstream
    module before concluding there is nothing to do. In fact, ghc-shake never runs
    the recompilation test, because we reimplemented this dependency structure natively
    in Shake.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果重新构建文件（并更新其时间戳），但构建输出未更改，我们就不会重新编译任何依赖于它的内容。这与 `ghc --make` 相比，后者必须在确定没有要做的工作之前运行每个下游模块的重新编译检查，有所不同。事实上，ghc-shake
    从不运行重新编译测试，因为我们在 Shake 中本地实现了这种依赖结构。
- en: Using `-ffrontend-opt=--profile`, you can get nice profiling information about
    your build, including how long it took to build each module, and how expensive
    it is to change one of the modules.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `-ffrontend-opt=--profile`，你可以获得有关构建的详细分析信息，包括每个模块构建所花费的时间，以及更改一个模块的成本。
- en: It's as fast as `ghc --make` on single-threaded builds. Compare this to [ghc-make](https://github.com/ndmitchell/ghc-make),
    another build system which uses Shake to build Haskell. ghc-make does not use
    the GHC API and must use the (slow) `ghc -M` to get initial dependency information
    about your project.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单线程构建上与 `ghc --make` 一样快。与另一个使用 Shake 构建 Haskell 的构建系统 [ghc-make](https://github.com/ndmitchell/ghc-make)
    相比，ghc-make 并不使用 GHC API，并且必须使用（慢速的）`ghc -M` 来获取项目的初始依赖信息。
- en: It's accurate. It handles many edge-cases (like `-dynamic-too`) correctly, and
    because it is written using the GHC API, it can in principle be feature-for-feature
    compatible with `ghc --make`. (It's not currently, but only because I haven't
    implemented them yet.)
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它是准确的。它正确处理许多边缘情况（如 `-dynamic-too`），因为它是使用 GHC API 编写的，原则上可以与 `ghc --make` 功能完全兼容。（当前情况不是这样，只是因为我还没有实现它们。）
- en: 'There are some downsides:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 也有一些缺点：
- en: Shake build systems require a `.shake` directory to actual store metadata about
    the build. This is in contrast to `ghc --make`, which operates entirely off of
    the timestamps of build products in your directory.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Shake 构建系统需要一个 `.shake` 目录来实际存储有关构建的元数据。这与 `ghc --make` 相反，后者完全依赖于目录中构建产品的时间戳。
- en: Because it is directly implemented with the GHC API, it only works with a specific
    version of GHC (the upcoming GHC 8.0 release).
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为它直接使用了 GHC API 实现，所以只能与特定版本的 GHC（即即将发布的 GHC 8.0 版本）一起使用。
- en: It needs a patched version of the Shake library, because we have custom rule
    for building modules based off of Shake's (not exported) file representation.
    I've [reported it here](https://github.com/ndmitchell/shake/issues/388).
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它需要一个修补过的 Shake 库版本，因为我们有一个基于 Shake 的（未导出的）文件表示的自定义模块构建规则。我已经[在这里报告了](https://github.com/ndmitchell/shake/issues/388)。
- en: There are still some missing features and bugs. The ones I've run into are that
    (1) we [forget to relink](https://ghc.haskell.org/trac/ghc/ticket/10161) in some
    cases, and (2) it doesn't work for [building profiled code](https://ghc.haskell.org/trac/ghc/ticket/11293).
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然存在一些缺失的功能和 bug。我遇到的问题是（1）在某些情况下[我们忘记了重新链接](https://ghc.haskell.org/trac/ghc/ticket/10161)，以及（2）它不能用于[构建分析代码](https://ghc.haskell.org/trac/ghc/ticket/11293)。
- en: If you want to use `ghc-shake` today (not for the faint of heart), try `git
    clone https://github.com/ezyang/ghc-shake` and follow the instructions in the
    `README`. But even if you're not interested in using it, I think the code of `ghc-shake`
    has some good lessons for anyone who wants to write a build system involving Haskell
    code. One of the most important architectural decisions was to make the rules
    in `ghc-shake` not be organized around output files (e.g. `dist/build/Data/Foo.hi`,
    as in `make`) but around Haskell modules (e.g. `Data.Foo`). Semantic build systems
    work a lot better than forcing everything into a "file abstraction" (although
    Shake doesn't quite support this mode of use as well as I would like.) There were
    some other interesting lessons... but that should be the subject for another blog
    post!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想今天就使用 `ghc-shake`（不适合心脏虚弱的人），试试 `git clone https://github.com/ezyang/ghc-shake`，然后按照
    `README` 中的说明操作。但即使你不打算使用它，我认为 `ghc-shake` 的代码对任何想编写涉及 Haskell 代码的构建系统的人来说都有一些好的教训。其中最重要的架构决策之一是使
    `ghc-shake` 中的规则不是围绕输出文件（例如 `dist/build/Data/Foo.hi`，如 `make` 中那样）组织，而是围绕 Haskell
    模块（例如 `Data.Foo`）组织的。语义化的构建系统比强制将一切都放入“文件抽象”中要好得多（尽管 Shake 在我希望的模式下使用上并不完全支持）。还有一些其他有趣的经验教训...
    但那应该是另一篇博客文章的主题！
- en: 'Where is this project headed? There are a few things I''m considering doing
    in the not-so-immediate future:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目的未来方向在哪里？在不太近的未来，我考虑做一些事情：
- en: To support multiple GHC versions, we should factor out the GHC specific code
    into a separate executable and communicate over IPC (hat tip Duncan Coutts). This
    would also allow us to support separate-process parallel GHC builds which still
    get to reuse read interface files. In any case, `ghc-shake` could serve as the
    blueprint for what information GHC needs to make more easily accessible to build
    systems.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了支持多个 GHC 版本，我们应该将 GHC 特定的代码分离出来成为一个单独的可执行文件，并通过 IPC 进行通信（向 Duncan Coutts 致敬）。这也将使我们能够支持独立进程的并行
    GHC 构建，仍然可以重用读取接口文件。无论如何，`ghc-shake` 可以作为 GHC 需要使构建系统更易于访问所需信息的蓝图。
- en: We could consider moving this code back to GHC. Unfortunately, Shake is a bit
    too big of a dependency to actually have GHC depend on, but it may be possible
    to design some abstract interface (hello Backpack!) which represents a Shake-style
    build system, and then have GHC ship with a simple implementation for `--make`
    (but let users swap it out for Shake if they like.)
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以考虑将这些代码移回 GHC。不幸的是，Shake 是一个太大的依赖项，无法实际让 GHC 依赖它，但可以考虑设计一些抽象接口（你好，Backpack！），用于表示类似
    Shake 的构建系统，并让 GHC 提供 `--make` 的简单实现（但用户可以选择切换到 Shake）。
- en: We can extend this code beyond `ghc --make` to understand how to build entire
    Cabal projects (or bigger), ala [ToolCabal](https://github.com/TiborIntelSoft/ToolCabal),
    a reimplementation of Cabal using Shake. This would let us capture patterns like
    GHC's build system, which can build modules from all the boot packages in parallel
    (without waiting for the package to completely finish building first.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以将这段代码扩展到`ghc --make`以了解如何构建整个Cabal项目（或更大的项目），比如[ToolCabal](https://github.com/TiborIntelSoft/ToolCabal)，这是使用Shake重新实现的Cabal。这将允许我们捕捉类似于GHC构建系统的模式，该系统可以并行构建所有引导包中的模块（而不必等待包完全构建完成）。
- en: P.S. ghc-shake is not to be confused with [shaking-up-ghc](https://github.com/snowleopard/shaking-up-ghc),
    which is a project to replace GHC's Makefile-based build system with a Shake based
    build system.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: P.S. ghc-shake不应与[shaking-up-ghc](https://github.com/snowleopard/shaking-up-ghc)混淆，后者是一个旨在用Shake基础构建系统替换GHC基于Makefile的构建系统的项目。
