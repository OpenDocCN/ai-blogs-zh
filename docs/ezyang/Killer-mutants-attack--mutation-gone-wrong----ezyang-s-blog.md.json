["```\nSensor Accel = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);\nSensor Orient = sm.getDefaultSensor(Sensor.TYPE_ORIENTATION);\nsm.registerListener((SensorEventListener) this, Accel, sm.SENSOR_DELAY_FASTEST);\n\n```", "```\npublic Sensor getDefaultSensor (int type){\n        if(sensors == null) {\n                sensors = new Sensor(mContext, type);\n                return sensors;\n        }else if(sensors.checkList(type)){\n                sensors.addSensor(type);\n                return sensors;\n        }else{\n                sensors.removeSensor(type);\n                return sensors;\n        }\n}\n\n```", "```\n@@ -197,13 +197,7 @@ def upload_all(tree, ftp, base):\n\n     ftp.cwd(base)\n     for blob in tree.blobs:\n-        logging.info('Uploading ' + '/'.join((base, blob.name)))\n-        try:\n-            ftp.delete(blob.name)\n-        except ftplib.error_perm:\n-            pass\n-        ftp.storbinary('STOR ' + blob.name, blob.data_stream)\n-        ftp.voidcmd('SITE CHMOD ' + format_mode(blob.mode) + ' ' + blob.name)\n+        upload_blob(blob, ftp, base)\n\n@@ -260,11 +254,25 @@ def upload_diff(diff, tree, ftp, base):\n             node = subtree/components[-1]\n             assert isinstance(node, Blob)\n\n-            logging.info('Uploading ' + full_path)\n-            ftp.storbinary('STOR ' + file, node.data_stream)\n-            ftp.voidcmd('SITE CHMOD ' + format_mode(node.mode) + ' ' + file)\n-            # Don't do anything if there isn't any item; maybe it\n-            # was deleted.\n+            upload_blob(node, ftp, base)\n\n```", "```\n-- | When you duplicate a network, node indexes may change, so if you\n-- would like to use old references, they need to be translated first.\n-- You can read this type as @Node n -> NT n2 (Node n2)@ or @Node n ->\n-- NQ n2 (Node n2)@, with the condition that the @n2@ index was one\n-- generated by 'branch' or 'speculate'.\ntranslate :: (G.NetworkMonad m AIG (Dup n n2)) => Node n -> m AIG (Dup n n2) (Node (Dup n n2))\n\n```"]