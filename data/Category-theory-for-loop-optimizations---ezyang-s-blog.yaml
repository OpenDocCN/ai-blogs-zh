- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:21'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:21'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Category theory for loop optimizations : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Category theory for loop optimizations : ezyang’s blog'
- en: 来源：[http://blog.ezyang.com/2013/05/category-theory-for-loop-optimizations/](http://blog.ezyang.com/2013/05/category-theory-for-loop-optimizations/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2013/05/category-theory-for-loop-optimizations/](http://blog.ezyang.com/2013/05/category-theory-for-loop-optimizations/)
- en: Christopher de Sa and I have been working on a category theoretic approach to
    optimizing MapReduce-like pipelines. Actually, we didn’t start with any category
    theory—we were originally trying to impose some structure on some of the existing
    loop optimizations that the [Delite compiler](http://stanford-ppl.github.io/Delite/)
    performed, and along the way, we rediscovered the rich relationship between category
    theory and loop optimization.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 克里斯托弗·德·萨（Christopher de Sa）和我一直在研究一种类别论方法来优化类似MapReduce的管道。实际上，我们开始并不涉及任何范畴论——最初我们只是试图在[Delite编译器](http://stanford-ppl.github.io/Delite/)执行的一些现有循环优化上施加一些结构，顺便发现了范畴论与循环优化之间丰富的关系。
- en: On the one hand, I think the approach is pretty cool; but on the other hand,
    there’s a lot of prior work in the area, and it’s tough to figure out where one
    stands on the research landscape. As John Mitchell remarked to me when I was discussing
    the idea with him, “Loop optimization, can’t you just solve it using a table lookup?”
    We draw a lot of inspiration from existing work, especially the *program calculation*
    literature pioneered by Bird, Meertens, Malcom, Meijer and others in the early
    90s. The purpose of this blog post is to air out some of the ideas we’ve worked
    out and get some feedback from you, gentle reader.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一方面，我认为这种方法非常酷；但另一方面，该领域有许多先前的工作，很难弄清楚自己在研究景观中的位置。当我与约翰·米切尔讨论这个想法时，他对我说：“循环优化，难道你不能只用表查找来解决吗？”我们从现有工作中获得了很多灵感，特别是由伯德、梅尔滕斯、马尔科姆、迈耶等人在90年代初开创的*程序计算*文献。这篇博客文章的目的是讨论我们已经研究出的一些想法，并从你这位亲爱的读者那里获得一些反馈。
- en: 'There are a few ways to think about what we are trying to do:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种思考我们试图做的事情的方式：
- en: We would like to *implement* a calculational-based optimizer, targeting a real
    project (Delite) where the application of loop optimizations can have drastic
    impacts on the performance of a task (other systems which have had similar goals
    include [Yicho](http://takeichi.ipl-lab.org/yicho/doc/Yicho.html), [HYLO](http://lecture.ecc.u-tokyo.ac.jp/~uonoue/hylo/)).
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们希望*实现*一个基于计算的优化器，针对一个真实的项目（Delite），其中循环优化的应用可以对任务的性能产生 drastc 的影响（其他具有类似目标的系统包括[Yicho](http://takeichi.ipl-lab.org/yicho/doc/Yicho.html)，[HYLO](http://lecture.ecc.u-tokyo.ac.jp/~uonoue/hylo/)）。
- en: We want to venture where theorists do not normally tread. For example, there
    are many “boring” functors (e.g. arrays) which have important performance properties.
    While they may be isomorphic to an appropriately defined algebraic data type,
    we argue that in a calculational optimizer, we want to *distinguish* between these
    different representations. Similarly, many functions which are not natural transformations
    *per se* can be made to be natural transformations by way of partial application.
    For example, `filter p xs` is a natural transformation when `map p xs` is incorporated
    as part of the definition of the function (the resulting function can be applied
    on any list, not just the original `xs`). The resulting natural transformation
    is *ugly* but *useful*.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们希望冒险涉足理论家通常不会涉足的领域。例如，有许多“无聊”的函子（如数组），它们具有重要的性能特性。虽然它们可能与适当定义的代数数据类型同构，但我们认为在计算优化器中，我们希望*区分*这些不同的表示方式。同样，许多不是自然变换本身的函数可以通过部分应用变成自然变换。例如，当`map
    p xs`被作为函数定义的一部分（结果函数可以应用于任何列表，而不仅限于原始的`xs`）时，`filter p xs`就是一个自然变换。这种结果的自然变换*丑陋*但*有用*。
- en: 'For stock optimizers (e.g. Haskell), some calculational optimizations can be
    supported by the use of *rewrite rules*. While rewrite rules are a very powerful
    mechanism, they can only describe “always on” optimizations; e.g. for deforestation,
    one always wants to eliminate as many intermediate data structures as possible.
    In many of the applications we want to optimize, the best performance can only
    be achieved by *adding* intermediate data structures: now we have a space of possible
    programs and rewrite rules are woefully inadequate for specifying *which* program
    is the best. What we’d like to do is use category theory to give an account for
    rewrite rules *with structure*, and use domain specific knowledge to pick the
    best programs.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于股票优化器（例如 Haskell），一些计算优化可以通过使用 *重写规则* 支持。虽然重写规则是一个非常强大的机制，但它们只能描述“始终有效”的优化方式；例如对于森林化，我们总是希望尽可能消除中间数据结构。在我们希望优化的许多应用中，只有通过
    *增加* 中间数据结构才能达到最佳性能：现在我们有一个可能的程序空间，而重写规则对于指定哪个程序最好是明显不足的。我们希望能够使用范畴论来解释带有结构的重写规则，并利用领域特定知识来选择最佳程序。
- en: 'I’d like to illustrate some of these ideas by way of an example. Here is some
    sample code, written in Delite, which calculates an iteration of (1-dimensional)
    k-means clustering:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我想通过一个例子来阐述这些想法。这里有一些用 Delite 写的示例代码，用于计算（一维）k均值聚类的一个迭代：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can read it as follows: we are computing a result array containing the
    position of each cluster, and the outermost block is looping over the clusters
    by index variable `j`. To compute the position of a cluster, we have to get all
    of the points in `x` which were assigned to cluster `j` (that’s the `c(i) == j`
    condition) and sum them together, finally dividing by the sum by the number of
    points in the cluster to get the true location.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 可以这样理解它：我们正在计算一个结果数组，其中包含每个簇的位置，最外层的块正在通过索引变量 `j` 循环遍历簇。要计算簇的位置，我们必须获取分配给簇 `j`
    的所有点 `x`（即 `c(i) == j` 的条件），将它们加在一起，最后除以簇中点的数量来获取真实位置。
- en: 'The big problem with this code is that it iterates over the entire dataset
    *numClusters* times, when we’d like to only ever do one iteration. The optimized
    version which does just that looks like this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的主要问题在于，它在整个数据集上 *numClusters* 次进行迭代，而我们只想执行一次迭代。优化后的版本看起来是这样的：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'That is to say, we have to precompute the weighted points and the point count
    (note the two hashreduces can and should be fused together) before generating
    the new coordinates for each of the clusters: generating *more* intermediate data
    structures is a win, in this case.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，我们必须预先计算加权点和点数（请注意两个 hashreduce 可以和应该融合在一起）之后，才能为每个簇生成新的坐标：在这种情况下，生成 *更多*
    中间数据结构是有利的。
- en: 'Let us now calculate our way to the optimized version of the program. First,
    however, we have to define some functors:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们计算优化程序的方式。但是首先，我们必须定义一些函子：
- en: '`D_i[X]` is an array of `X` of a size specified by `i` (concretely, we’ll use
    `D_i` for arrays of size `numPoints` and `D_j` for arrays of size `numClusters`).
    This family of functors is also known as the [diagonal functor](http://en.wikipedia.org/wiki/Diagonal_functor),
    generalized for arbitrary size products. We also will rely on the fact that `D`
    is [representable](http://stackoverflow.com/questions/12963733/writing-cojoin-or-cobind-for-n-dimensional-grid-type),
    that is to say `D_i[X] = Loc_D_i -> X` for some type `Loc_D_i` (in this case,
    it is the index set `{0 .. i}`.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`D_i[X]` 是大小由 `i` 指定的 `X` 数组（具体来说，我们将使用 `D_i` 来表示大小为 `numPoints` 的数组，以及 `D_j`
    来表示大小为 `numClusters` 的数组）。这组函子也被称为 [对角函子](http://en.wikipedia.org/wiki/Diagonal_functor)，适用于任意大小的乘积。我们还将依赖于
    `D` 是可表示的事实，即 `D_i[X] = Loc_D_i -> X` 对于某些类型 `Loc_D_i`（在这种情况下，它是索引集 `{0 .. i}`）。'
- en: '`List[X]` is a standard list of `X`. It is the initial algebra for the functor
    `F[R] = 1 + X * R`. Any `D_i` can be embedded in `List`; we will do such conversions
    implicitly (note that the reverse is not true.)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`List[X]` 是 `X` 的标准列表。它是函子 `F[R] = 1 + X * R` 的初始代数。任何 `D_i` 都可以嵌入到 `List`
    中；我们将隐式地进行这些转换（请注意反过来则不成立）。'
- en: 'There are a number of functions, which we will describe below:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些函数，我们将在下面描述：
- en: '`tabulate` witnesses one direction of the isomorphism between `Loc_D_i -> X`
    and `D_i[X]`, since `D_i` is representable. The other direction is `index`, which
    takes `D_i[X]` and a `Loc_D_i` and returns an `X`.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tabulate` 见证了 `Loc_D_i -> X` 和 `D_i[X]` 之间同构的一个方向，因为 `D_i` 是可表示的。另一个方向是 `index`，它接受
    `D_i[X]` 和一个 `Loc_D_i`，并返回一个 `X`。'
- en: '`fold` is the unique function determined by the initial algebra on `List`.
    Additionally, suppose that we have a function `*` which combines two algebras
    by taking their cartesian product,'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fold` 是在 `List` 上的初始代数唯一确定的函数。此外，假设我们有一个函数 `*`，通过取它们的笛卡尔积来组合两个代数，'
- en: '`bucket` is a natural transformation which takes a `D_i[X]` and buckets it
    into `D_j[List[X]]` based on some function which assigns elements in `D_i` to
    slots in `D_j`. This is an example of a natural transformation that is not a natural
    transformation until it is partially applied: if we compute `D_i[Loc_D_j]`, then
    we can create a natural transformation that doesn’t ever look at `X`; it simply
    “knows” where each slot of `D_i` needs to go in the resulting structure.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bucket` 是一个自然变换，它接受 `D_i[X]` 并基于某些函数将其分桶到 `D_j[List[X]]` 中，该函数将 `D_i` 中的元素分配到
    `D_j` 的插槽中。这是一个自然变换的示例，在部分应用之前并不是自然变换：如果我们计算 `D_i[Loc_D_j]`，那么我们可以创建一个永远不会查看 `X`
    的自然变换；它只是“知道”每个 `D_i` 插槽在结果结构中应该去的位置。'
- en: 'Let us now rewrite the loop in more functional terms:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们用更功能化的术语重新写循环：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '(Where `divide` is just a function which divides its arguments but checks that
    the divisor is not zero.) Eliminating some common sub-expressions and fusing the
    two folds together, we get:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: （其中 `divide` 只是一个函数，它除以它的参数，但检查除数不为零。）消除一些共同的子表达式并将两个折叠融合在一起，我们得到：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'At this point, it is still not at all clear that there are any rewrites we
    can carry out: the `filter` is causing problems for us. However, because filter
    is testing on equality, we can rewrite it in a different way:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，仍然完全不清楚我们可以执行任何重写：`filter` 对我们造成了问题。然而，因为 `filter` 在进行相等性测试，我们可以以不同的方式重写它：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: What is happening here? Rather than directly filtering for just items in cluster
    `j`, we can instead view this as *bucketing* `x` on `c` and then indexing out
    the single bucket we care about. This shift in perspective is key to the whole
    optimization.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生了什么？不直接筛选仅在群集 `j` 中的项目，我们可以将其视为在 `c` 上进行 *分桶* `x`，然后索引出我们关心的单个桶。这种视角的转变对整体优化至关重要。
- en: 'Now we can apply the fundamental rule of natural transformations. Let `phi
    = index j` and `f = divide . fold (plus * inc)`, then we can push `f` to the other
    side of `phi`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以应用自然变换的基本规则。设 `phi = index j` 和 `f = divide . fold (plus * inc)`，那么我们可以将
    `f` 推到 `phi` 的另一侧：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now we can eliminate `tabulate` and `index`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以消除 `tabulate` 和 `index`：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Finally, because we know how to efficiently implement `fmap (fold f) . bucket
    c` (as a `hashreduce`), we split up the `fmap` and join the fold and bucket:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，因为我们知道如何高效实现 `fmap (fold f) . bucket c`（作为 `hashreduce`），我们分解 `fmap` 并加入折叠和桶：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: And we have achieved our fully optimized program.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经实现了我们的完全优化程序。
- en: All of this is research in progress, and there are lots of open questions which
    we have not resolved. Still, I hope this post has given you a flavor of the approach
    we are advocating. I am quite curious in your comments, from “That’s cool!” to
    “This was all done 20 years ago by X system.” Have at it!
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都是正在进行的研究，有许多未解决的问题。尽管如此，我希望这篇文章能让你感受到我们推崇的方法。我对你的评论很感兴趣，无论是“太棒了！”还是“这在20年前就被X系统完成了。”
    期待听到你的看法！
