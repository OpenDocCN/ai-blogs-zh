- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:58'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:58'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'On checked exceptions and proof obligations : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对受检异常和证明义务的看法：ezyang's博客
- en: 来源：[http://blog.ezyang.com/2011/02/on-checked-exceptions-and-proof-obligations/](http://blog.ezyang.com/2011/02/on-checked-exceptions-and-proof-obligations/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2011/02/on-checked-exceptions-and-proof-obligations/](http://blog.ezyang.com/2011/02/on-checked-exceptions-and-proof-obligations/)
- en: 'Checked exceptions are a much vilified feature of Java, despite theoretical
    reasons why it should be a really good idea. The tension is between these two
    lines of reasoning:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Java中的受检异常是一个非常受批评的特性，尽管理论上它应该是一个非常好的主意。其中的张力在于这两种推理之间：
- en: Well-written programs handle all possible edge-cases, working around them when
    possible and gracefully dying if not. It's hard to keep track of *all* possible
    exceptions, so we should have the compiler help us out by letting us know when
    there is an edge-case that we've forgotten to handle. Thus, checked exceptions
    offer a mechanism of ensuring we've handled all of the edge-cases.
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 精心编写的程序处理所有可能的边缘情况，如果可能的话，对其进行处理，并在无法处理时优雅地失败。很难跟踪*所有*可能的异常，因此我们应该让编译器帮助我们，提醒我们是否有我们忘记处理的边缘情况。因此，受检异常提供了一种机制，确保我们已经处理了所有边缘情况。
- en: and
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: and
- en: Frequently checked exceptions are for error conditions that we cannot reasonably
    recover from close to the error site. Passing the checked exception through all
    of the intervening code requires each layer to know about all of its exceptions.
    The psychological design of checked exceptions encourages irresponsible swallowing
    of exceptions by developers. Checked exceptions don't scale for large amounts
    of code.
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 频繁检查的异常是我们在接近错误位置无法合理恢复的错误条件。将受检异常通过所有中介代码传递需要每一层了解其所有异常。受检异常的心理设计鼓励开发人员不负责任地吞下异常。受检异常在大量代码中不可扩展。
- en: 'In this post, I suggest another method for managing checked exceptions: prove
    that the code *cannot* throw such an exception.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我提出了另一种管理受检异常的方法：证明代码*不可能*抛出这样的异常。
- en: '"Prove that the code cannot throw an exception?" you might say. "Impossible!
    After all, most checked exceptions come from the outside world, and surely we
    can''t say anything about what will happen. A demon could just always pick the
    worst possible scenario and feed it into our code."'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: “证明代码不可能抛出异常？”你可能会说。“不可能！毕竟，大多数受检异常来自外部世界，我们肯定不能预测将会发生什么。恶魔可能会选择最坏的情况并将其输入到我们的代码中。”
- en: 'My first answer to the skeptic would be that there do indeed exist examples
    of checked exceptions that happen completely deterministically, and could be shown
    to be guaranteed not to be thrown. For example, consider this code in the Java
    reflection API:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对怀疑论者的第一个回答是确实存在完全确定性发生的受检异常的例子，并且可以证明不会抛出。例如，考虑Java反射API中的这段代码：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The last invocation could throw a checked exception `IllegalAccessException`,
    but assuming that the `setAccessible` call did not fail (which it could, under
    a variety of conditions), this exception cannot happen! So, in fact, even if it
    *did* throw an `IllegalAccessException`, it has violated our programmer's expectation
    of what the API should do and a nice fat runtime error will let us notice what's
    going on. The call to `setAccessible` *discharges the proof obligation* for the
    `IllegalAccessException` case.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一次调用可能会抛出受检异常`IllegalAccessException`，但假设`setAccessible`调用未失败（在多种条件下可能失败），这个异常不会发生！因此，实际上，即使它*确实*抛出了`IllegalAccessException`，它也违反了我们程序员对API应该执行的期望，而一个漂亮的运行时错误会让我们注意到发生了什么。`setAccessible`的调用*解除了对`IllegalAccessException`情况的证明义务*。
- en: But this may just be an edge case in a world of overwhelmingly IO-based checked
    exceptions. So my second answer to the skeptic is that when we program code that
    interacts with the outside world, we often *don't* assume that a demon is going
    to feed us the worst possible input data. (Maybe we should!) We have our own internal
    model of how the interactions might work, and if writing something that's quick
    and dirty, it may be convenient to assume that the interaction will proceed in
    such and such a manner. So once we've written all the validation code to ensure
    that this is indeed the case (throwing a runtime exception akin to a failed assert
    if it's not), we once again can assume static knowledge that can discharge our
    proof obligations. Yes, in a way it’s a cop out, because we haven’t proved anything,
    just told the compiler, “I know what I’m doing”, but the critical extra is that
    once we’ve established our assumptions, we can prove things with them, and only
    need to check at runtime what we assumed.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 但这可能只是在一个以IO为主的检查异常世界中的一个边缘案例。所以我对质疑者的第二个回答是，当我们编写与外部世界交互的代码时，我们通常并不假设恶魔会给我们提供最糟糕的输入数据。（也许我们应该假设！）我们有自己内部的模型来预测这些交互可能如何工作，如果写一些快速而粗糙的东西，假设交互会按照某种方式进行可能会很方便。因此，一旦我们编写了所有的验证代码以确保这确实如此（如果不是的话，抛出类似于失败的断言的运行时异常），我们再次可以假设静态知识可以解除我们的证明义务。是的，在某种程度上这是一种逃避，因为我们没有证明任何东西，只是告诉编译器，“我知道我在做什么”，但关键的额外因素是，一旦我们建立了我们的假设，我们就可以用它们来证明事实，而且只需要在运行时检查我们的假设。
- en: Of course, Java is not going to get dependent types any time soon, so this is
    all a rather theoretical discussion. But checked exceptions, like types, *are*
    a form of formal methods, and even if you don’t write your application in a dependently
    typed language, the field can still give useful insights about the underlying
    structure of your application.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，Java不会很快引入依赖类型，所以这都是一场相当理论性的讨论。但是检查异常，就像类型一样，*是*形式化方法的一种形式，即使你不是用依赖类型语言编写你的应用程序，该领域能够为你的应用程序的基本结构提供有用的见解。
- en: Resources
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 资源
- en: The correspondence between checked exceptions and proofs came to me while listening
    to Conor McBride's lecture on the [Outrageous Arrows of Fortune](http://personal.cis.strath.ac.uk/~conor/GUtalk.pdf).
    I hope to do a write up of this talk soon; it clarified some issues about session
    types that I had been thinking about.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我在听康纳·麦克布赖德（Conor McBride）关于[《命运的荒谬箭头》](http://personal.cis.strath.ac.uk/~conor/GUtalk.pdf)的讲座时，突然间对检查异常与证明之间的对应关系有了一些想法。希望能尽快撰写关于这次讲座的总结；它阐明了我一直在思考的一些关于会话类型的问题。
- en: I consulted the following articles when characterizing existing views of Java
    checked exceptions.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在描述现有的Java检查异常观点时，我参考了以下文章。
