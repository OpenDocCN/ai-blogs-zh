["```\nData.Traversable> traverse (\\x -> if x == 2 then Just 3 else Nothing) [1,2,3]\nNothing\n\n```", "```\nnonSharingMap :: (a -> Maybe a) -> [a] -> Maybe [a]\nnonSharingMap f xs = let (b, r) = foldr g (False, []) (zip xs (map f xs))\n                     in if b then Just r else Nothing\n    where g (y, Nothing) (b, ys) = (b,     y:ys)\n          g (_, Just y)  (_, ys) = (True,  y:ys)\n\n```", "```\nsharingMap :: (a -> Maybe a) -> [a] -> Maybe [a]\nsharingMap f xs = let (b, r) = foldr g (False, []) (zip3 (tails xs) xs (map f xs))\n                     in if b then Just r else Nothing\n    where g (_,   y, Nothing) (True, ys)  = (True,  y:ys)\n          g (_,   _, Just y)  (True, ys)  = (True,  y:ys)\n          g (ys', _, Nothing) (False, _)  = (False, ys')\n          g (_,   _, Just y)  (False, ys) = (True,  y:ys)\n\n```", "```\nsharingMap f [] = Nothing\nsharingMap f (x : xs) = case (f x, sharingMap f xs) of\n  (Nothing, Nothing) -> Nothing\n  (y, ys) -> Just (fromMaybe x y : fromMaybe xs ys)\n\n```"]