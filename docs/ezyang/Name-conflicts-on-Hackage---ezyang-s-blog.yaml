- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:18:20'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:18:20'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Name conflicts on Hackage : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hackage 上的名称冲突：ezyang’s 博客
- en: 来源：[http://blog.ezyang.com/2010/05/name-conflicts-on-hackage/](http://blog.ezyang.com/2010/05/name-conflicts-on-hackage/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/05/name-conflicts-on-hackage/](http://blog.ezyang.com/2010/05/name-conflicts-on-hackage/)
- en: '*Attention Conservation Notice.* Unqualified identifiers that are used the
    most on Hackage.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意保护环境声明。* Hackage 上使用最多的非限定标识符。'
- en: 'Perhaps you dread the error message:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 或许你害怕这个错误信息：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: It is the message of the piper that has come to collect his dues for your unhygenic
    unqualified unrestricted module import style.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是风笛手的信息，他来收取你不卫生不合格的无限制模块导入风格的应得之债。
- en: Or perhaps your a library writer and trying to think up of a new symbol for
    your funky infix combinator, but you aren't sure what other libraries have used
    already.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你是一个库作者，正试图想出一个新的符号来表示你的时髦中缀组合子，但你不确定其他库已经使用了什么。
- en: I took [the archive (TAR)](http://hackage.haskell.org/cgi-bin/hackage-scripts/archive.tar)
    of the latest Hackage packages for everything, whipped up a script to extract
    all unqualified names exported by public modules, and then counted up the most
    used.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我取出了 [最新 Hackage 包的归档（TAR）](http://hackage.haskell.org/cgi-bin/hackage-scripts/archive.tar)，为所有内容编写了一个脚本，提取所有公共模块导出的非限定名称，然后统计了使用最多的名称。
- en: '*Disclaimer.* Data constructors and record fields, unless they were explicitly
    exported, are not included in this count. I also don''t count modules that export
    *everything* from the global namespace because they omitted a list of names to
    export. Counts are per module, and not per package. CPP and HSC files were not
    counted, due to limitations of haskell-src-exts.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*免责声明。* 数据构造器和记录字段，除非它们被明确地导出，否则不包括在此计数中。我也不会计算那些从全局命名空间导出*所有*内容的模块，因为它们忽略了要导出的名称列表。计数是按模块计算的，而不是按包计算的。由于
    haskell-src-exts 的限制，CPP 和 HSC 文件未被计数。'
- en: '*Top twenty identifiers (as of September 2, 2012).*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*前二十个标识符（截至2012年9月2日）。*'
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Top twenty infix operators (as of September 2, 2012).*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*前二十个中缀运算符（截至2012年9月2日）。*'
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The exclamation mark has earned the reputation as an "indexing" operator, and
    unsurprisingly is at the top. I hear from Edward Kmett that `<>` is making its
    way into the base as `mappend`, which is welcome, although might suck for the
    other six modules which redefined it for their own nefarious purposes.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 惊叹号已经赢得了“索引”运算符的声誉，并且毫不奇怪地位居榜首。我从 Edward Kmett 那里听说 `<>` 正在以 `mappend` 的形式进入基础库，这是受欢迎的，尽管对其他六个重定义了它用于自己不可告人目的的模块可能不太友好。
- en: '*All infix operators, sorted by usage and then lexicographically (as of September
    2, 2012).*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*按使用频率和词典顺序排序的所有中缀运算符（截至2012年9月2日）。*'
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It's a veritable zoo! (I'm personally reminded of Nethack.)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这简直就是一个动物园！（我个人想起了 Nethack 游戏。）
- en: '*Source.* The horrifying code that drove this exercise can be found at [Github](http://github.com/ezyang/hackage-query).
    I used the following shell one-liner:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*来源。* 驱动这个演习的可怕代码可以在 [Github](http://github.com/ezyang/hackage-query) 找到。我使用了以下
    shell 单行命令：'
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: to extract all of the tarballs inside the tar file.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以提取压缩文件中的所有 tar 文件。
- en: '*Postscript.* It would be neat if someone could fix the discrepancies that
    I described earlier and do a more comprehensive/correct search over this space.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*附言。* 如果有人能修复我早些时候描述的不一致之处，并在这个领域进行更全面/正确的搜索，那将是很棒的。'
