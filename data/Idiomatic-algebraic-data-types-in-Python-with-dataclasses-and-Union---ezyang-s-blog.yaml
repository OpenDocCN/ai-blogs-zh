- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-07-01 18:16:57'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-07-01 18:16:57
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Idiomatic algebraic data types in Python with dataclasses and Union : ezyang’s
    blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 中用数据类和 Union 定义惯用的代数数据类型：ezyang 博客
- en: 来源：[http://blog.ezyang.com/2020/10/idiomatic-algebraic-data-types-in-python-with-dataclasses-and-union/](http://blog.ezyang.com/2020/10/idiomatic-algebraic-data-types-in-python-with-dataclasses-and-union/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2020/10/idiomatic-algebraic-data-types-in-python-with-dataclasses-and-union/](http://blog.ezyang.com/2020/10/idiomatic-algebraic-data-types-in-python-with-dataclasses-and-union/)
- en: 'One of the features I miss most in non-Haskell programming languages is algebraic
    data types (ADT). ADTs fulfill a similar role to objects in other languages, but
    with more restrictions: objects are an open universe, where clients can implement
    new subclasses that were not known at definition time; ADTs are a closed universe,
    where the definition of an ADT specifies precisely all the cases that are possible.
    We often think of restrictions of a bad thing, but in the case of ADTs, the restriction
    of being a closed universe makes programs easier to understand (a fixed set of
    cases to understand, as opposed to a potentially infinite set of cases) and allows
    for new modes of expression (pattern matching). ADTs make it really easy to accurately
    model your data structures; they encourage you to go for precise types that make
    illegal states unrepresentable. Still, it is generally not a good idea to try
    to manually reimplement your favorite Haskell language feature in every other
    programming language you use, and so for years I''ve suffered in Python under
    the impression that ADTs were a no go.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在非 Haskell 编程语言中，我最怀念的特性之一就是代数数据类型（ADT）。ADT 在其他语言中类似于对象，但有更多限制：对象是一个开放的宇宙，客户端可以实现在定义时未知的新子类；ADT
    是一个封闭的宇宙，ADT 的定义精确地指定了所有可能的情况。我们经常认为限制是一件坏事，但在 ADT 的情况下，限制为封闭的宇宙使程序更易于理解（理解一组固定的案例，而不是可能无限的案例）并且允许新的表达方式（模式匹配）。ADT
    使得准确建模数据结构非常容易；它们鼓励您选择精确的类型，使非法状态不可表示。但是，尝试在您使用的每种其他编程语言中手动重新实现您喜爱的 Haskell 语言特性通常不是一个好主意，因此多年来，我在
    Python 中遭受了 ADT 无法使用的印象。
- en: 'Recently, however, I have noticed that a number of new features in Python 3
    have made it possible to use objects in the same style of ADTs, in idiomatic Python
    with virtually no boilerplate. The key features:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，最近我注意到 Python 3 中的许多新特性使得可以在 Python 中以惯用的方式使用对象，几乎没有样板文件。关键特性：
- en: A structural static type checking system with mypy; in particular, the ability
    to declare `Union` types, which let you represent values that could be one of
    a fixed set of other types, and the ability to refine the type of a variable by
    performing an `isinstance` check on it.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 mypy 的结构静态类型检查系统；特别是声明`Union`类型的能力，这让您可以表示可能是一组其他类型中的一个的值，并通过对其执行`isinstance`检查来细化变量的类型。
- en: The dataclasses library, which allows you to conveniently define (possibly immutable)
    structures of data without having to write boilerplate for the constructor.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据类库允许您方便地定义（可能是不可变的）数据结构，而无需为构造函数编写样板文件。
- en: 'The key idea: define each constructor as a dataclass, put the constructors
    together into an ADT using a Union type, and use `isinstance` tests to do pattern
    matching on the result. The result is just as good as an ADT (or better, perhaps;
    their structural nature bears more similarity to OCaml''s polymorphic variants).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 核心思想是：将每个构造函数定义为一个数据类，将构造函数组合成一个 ADT 使用 Union 类型，并使用`isinstance`测试对结果进行模式匹配。结果与
    ADT 一样好（或者可能更好；它们的结构性质更类似于 OCaml 的多态变体）。
- en: 'Here''s how it works. Let''s suppose that you want to define an algebraic data
    type with two results:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是它的工作原理。假设您想要定义一个具有两个结果的代数数据类型：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'First, we define each constructor as a dataclass:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将每个构造函数定义为一个数据类：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Using the automatically generated constructors from dataclasses, we can construct
    values of these dataclasses using `OK(2)` or `Failure("something wrong")`. Next,
    we define a type synonym for the union of these two classes:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数据类自动生成的构造函数，我们可以使用`OK(2)`或`Failure("something wrong")`构造这些数据类的值。接下来，我们为这两个类的联合定义一个类型同义词：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, we can do pattern matching on Result by doing `isinstance` tests:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以通过执行`isinstance`测试对结果进行模式匹配：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`assert_never` is a [well known trick](https://github.com/python/typing/issues/735)
    for doing exhaustiveness checking in mypy. If we haven''t covered all cases with
    enough `isinstance` checks, mypy will complain that `assert_never` was given a
    type like `UnhandledCtor` when it expected `NoReturn` (which is the uninhabited
    type in Python).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`assert_never` 是在 [mypy 中做穷尽性检查](https://github.com/python/typing/issues/735)
    的一个 [众所周知的技巧](https://github.com/python/typing/issues/735)。如果我们用足够的 `isinstance`
    检查未覆盖所有情况，mypy 将会抱怨 `assert_never` 被赋予了 `UnhandledCtor` 类型，而它期望的是 Python 中的不可居住类型
    `NoReturn`。'
- en: That's all there is to it. As an extra bonus, this style of writing unions is
    compatible with the [structured pattern matching PEP](https://www.python.org/dev/peps/pep-0634/),
    if it actually gets accepted. I've been using this pattern to good effect in our
    recent rewrite of PyTorch's code generator. If you have the opportunity to work
    in a statically typed Python codebase, give this style of code a try!
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这么简单。作为额外的奖励，这种联合类型的写法与 [结构化模式匹配 PEP](https://www.python.org/dev/peps/pep-0634/)
    兼容，如果它被实际接受的话。我在最近重写 PyTorch 代码生成器时，已经成功地使用了这种模式。如果你有机会在静态类型的 Python 代码库中工作，不妨试试这种代码风格！
