["```\nclass (Monad m) => MonadError e m | m -> e where\n  throwError :: e -> m a\n  catchError :: m a -> (e -> m a) -> m a\n\nclass MonadIO m => MonadCatchIO m where\n  catch   :: Exception e => m a -> (e -> m a) -> m a\n  block   :: m a -> m a\n  unblock :: m a -> m a\n\n```", "```\nclass MonadException m where\n  throwM  :: Exception e => e -> m a\n  catch   :: Exception e => m a -> (e -> m a) -> m a\n  mask    :: ((forall a. m a -> m a) -> m b) -> m b\n\n```", "```\nclass Monad m => MonadMorphIO m where\n  morphIO :: (forall b. (m a -> IO b) -> IO b) -> m a\n\nclass MonadIO m => MonadPeelIO m where\n  peelIO :: m (m a -> IO (m a))\n\nclass MonadBase b m => MonadBaseControl b m | m -> b where\n  data StM m :: * -> *\n  liftBaseWith :: (RunInBase m b -> b a) -> m a\n  restoreM :: StM m a â†’ m a\ntype RunInBase m b = forall a. m a -> b (StM m a)\n\n```"]