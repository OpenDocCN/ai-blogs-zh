["```\n{-# LANGUAGE TemplateHaskell #-}\nmodule A where\nval = $( litE (intPrimL 2) )\n\n```", "```\n#lang racket\n(define-syntax macro (lambda (stx) (datum->syntax #'int 2)))\n(define val macro)\n\n```", "```\n#lang racket\n(define-syntax (splice stx)\n    (syntax-case stx ()\n        [(splice e) #'(let-syntax ([id (lambda _ e)]) (id))]))\n(define val (splice (datum->syntax #'int 2)))\n\n```", "```\n{-# LANGUAGE TemplateHaskell #-}\nmodule A where\nimport Language.Haskell.TH\nf x = x + 1\nval = $( litE (intPrimL (f 1)) ) -- ERROR\n-- A.hs:5:26:\n--     GHC stage restriction:\n--       ‘f’ is used in a top-level splice or annotation,\n--       and must be imported, not defined locally\n--     In the splice: $(litE (intPrimL (f 1)))\n-- Failed, modules loaded: none.\n\n```", "```\n{-# LANGUAGE TemplateHaskell #-}\nmodule A where\nimport Language.Haskell.TH\nimport B (f)\nval = $( litE (intPrimL (f 1)) ) -- OK\n\n```", "```\n#lang racket\n(define-syntax (splice stx)\n    (syntax-case stx ()\n        [(splice e) #'(let-syntax ([id (lambda _ e)]) (id))]))\n(define-for-syntax (f x) (+ x 1))\n(define val (splice (datum->syntax #'int (f 1))))\n\n```", "```\n(require (for-syntax f-module))\n\n```", "```\n{-# LANGUAGE TemplateHaskell #-}\nmodule A where\nimport Language.Haskell.TH\ndata Single a = Single a\n$(reify ''Single >>= runIO . print >> return [] )\n\n```", "```\nTyConI (DataD [] A.Single [PlainTV a_1627401583]\n   [NormalC A.Single [(NotStrict,VarT a_1627401583)]] [])\n\n```", "```\n#lang racket\n(require (for-syntax racket/struct-info))\n(struct single (a))\n(define-syntax (run-at-compile-time stx)\n  (syntax-case stx () [\n    (run-at-compile-time e)\n      #'(let-syntax ([id (lambda _ (begin e #'(void)))]) (id))]))\n(run-at-compile-time\n  (print (extract-struct-info (syntax-local-value (syntax single)))))\n\n```", "```\n'(.#<syntax:3:8 struct:single> .#<syntax:3:8 single>\n   .#<syntax:3:8 single?> (.#<syntax:3:8 single-a>) (#f) #t)\n\n```"]