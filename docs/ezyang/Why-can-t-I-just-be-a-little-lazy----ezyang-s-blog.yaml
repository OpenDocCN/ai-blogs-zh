- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:24'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:24'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Why can’t I just be a little lazy? : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么我不能有点懒呢？：ezyang 的博客
- en: 来源：[http://blog.ezyang.com/2012/11/why-cant-i-just-be-a-little-lazy/](http://blog.ezyang.com/2012/11/why-cant-i-just-be-a-little-lazy/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2012/11/why-cant-i-just-be-a-little-lazy/](http://blog.ezyang.com/2012/11/why-cant-i-just-be-a-little-lazy/)
- en: 'You can. Imagine a version of Haskell where every constructor was strict, e.g.
    every field had a `!` prefix. The semantics of this language are well defined;
    and in fact, the fine folks at CMU have known about this for some time:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以。想象一下，有一个版本的 Haskell，其中每个构造器都是严格的，例如每个字段都有一个 `!` 前缀。这种语言的语义是明确定义的；事实上，CMU
    的好同志们早就知道这一点：
- en: Up to this point we have frequently encountered arbitrary choices in the dynamics
    of various language constructs. For example, when specifying the dynamics of pairs,
    we must choose, rather arbitrarily, between the lazy dynamics, in which all pairs
    are values regardless of the value status of their components, and the eager dynamics,
    in which a pair is a value only if its components are both values. We could even
    consider a half-eager (or, equivalently, half-lazy) dynamics, in which a pair
    is a value only if, say, the first component is a value, but without regard to
    the second.
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 到目前为止，我们经常在各种语言构造的动态中遇到任意选择。例如，在指定对偶的动态时，我们必须选择一个相当随意的方式，是全懒惰的动态，即所有对偶都是值，而不管其组成部分的值状态，还是急迫的动态，即只有其组成部分都是值时，对偶才是值。我们甚至可以考虑半急迫（或等效地，半懒惰）的动态，即一个对偶只有在第一个组成部分是值的情况下才是值，而不考虑第二个组成部分。
- en: ''
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Similar questions arise with sums (all injections are values, or only injections
    of values are values), recursive types (all folds are values, or only folds of
    values are values), and function types (functions should be called by-name or
    by-value). Whole languages are built around adherence to one policy or another.
    For example, Haskell decrees that products, sums, and recursive types are to be
    lazy, and functions are to be called by name, whereas ML decrees the exact opposite
    policy. Not only are these choices arbitrary, but it is also unclear why they
    should be linked. For example, we could very sensibly decree that products, sums,
    and recursive types are lazy, yet impose a call-by-value discipline on functions.
    Or **we could have eager products, sums, and recursive types, yet insist on call-by-name.**
    It is not at all clear which of these points in the space of choices is right;
    each has its adherents, and each has its detractors.
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 关于和求和（所有的注射是值，或者只有值的注射是值），递归类型（所有的折叠是值，或者只有值的折叠是值），以及函数类型（函数应该按名字调用还是按值调用）等类似的问题也会出现。整个语言围绕着坚持某一政策或另一政策而建立。例如，Haskell
    规定产品、求和和递归类型是懒惰的，并且函数按名字调用，而 ML 则规定完全相反的政策。这些选择不仅是随意的，而且也不清楚为什么它们应该被联系起来。例如，我们可以非常合理地规定产品、求和和递归类型是懒惰的，但在函数上实施按值调用的纪律。或者**我们可以急迫地使用产品、求和和递归类型，但坚持按名字调用。**这些选择在空间的哪一个点是正确的一点都不清楚；每一个都有其拥护者，也都有其反对者。
- en: ''
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Are we therefore stuck in a tarpit of subjectivity? No! The way out is to recognize
    that these distinctions should not be imposed by the language designer, but rather
    are choices that are to be made by the programmer. This may be achieved by recognizing
    that differences in dynamics reflect fundamental type distinctions that are being
    obscured by languages that impose one policy or another. We can have both eager
    and lazy pairs in the same language by simply distinguishing them as two distinct
    types, and similarly we can have both eager and lazy sums in the same language,
    and both by-name and by-value function spaces, by providing sufficient type distinctions
    as to make the choice available to the programmer.
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 因此，我们是否陷入了主观性的困境中？不！走出这一困境的方法是意识到这些差异不应该由语言设计者来强加，而是应该由程序员来做出选择。这可以通过意识到动态的差异反映了正在被语言所模糊的基本类型区别来实现。我们可以在同一语言中同时拥有急迫和懒惰的对偶，同样地，我们也可以在同一语言中同时拥有急迫和懒惰的求和，以及按名字和按值的函数空间，通过提供足够的类型区别使得这些选择对程序员可用。
