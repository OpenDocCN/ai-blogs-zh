- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-07-01 18:18:14'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-07-01 18:18:14
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Groom: human readable Show for Haskell : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Groom：用于Haskell的人类可读的Show：ezyang的博客
- en: 来源：[http://blog.ezyang.com/2010/07/groom-human-readable-show-for-haskell/](http://blog.ezyang.com/2010/07/groom-human-readable-show-for-haskell/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/07/groom-human-readable-show-for-haskell/](http://blog.ezyang.com/2010/07/groom-human-readable-show-for-haskell/)
- en: 'Groom: human readable Show for Haskell'
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Groom：用于Haskell的人类可读的Show
- en: Tapping away at a complex datastructure, I find myself facing a veritable wall
    of Babel.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个复杂的数据结构上敲击，我发现自己面对一堵巨大的语言困境之墙。
- en: “Zounds!” I exclaim, “The GHC gods have cursed me once again with a derived
    Show instance with no whitespace!” I mutter discontently to myself, and begin
    pairing up parentheses and brackets, scanning the sheet of text for some discernible
    feature that may tell me of the data I am looking for.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: “天哪！”我惊叹道，“GHC的神灵又一次用没有空白的派生Show实例咒骂了我！”我不满地自言自语，并开始匹配括号和方括号，扫描文本页以寻找可能告诉我正在寻找的数据的可辨识特征。
- en: 'But then, a thought comes to me: “Show is specified to be a valid Haskell expression
    without whitespace. What if I parsed it and then pretty-printed the resulting
    AST?”'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我突然想到：“显示被指定为有效的Haskell表达式，不带空白。如果我解析它，然后漂亮地打印出生成的AST呢？”
- en: Four lines of code later (with the help of `Language.Haskell`)...
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 几行代码后（借助`Language.Haskell`的帮助）...
- en: '[Ah, much better!](http://hackage.haskell.org/package/groom)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[啊，好多了！](http://hackage.haskell.org/package/groom)'
- en: '*How to use it.* In your shell:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*如何使用它。* 在你的shell中：'
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'and in your program:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以及在你的程序中：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Update.* Gleb writes in to mention [ipprint](http://hackage.haskell.org/package/ipprint)
    which does essentially the same thing but also has a function for `putStrLn .
    show` and has some tweaked defaults including knowledge of your terminal size.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*更新。* Gleb提到了 [ipprint](http://hackage.haskell.org/package/ipprint)，它基本上也是做同样的事情，但还有一个`putStrLn
    . show`的函数，并且有一些调整后的默认设置，包括知道您终端的大小。'
- en: '*Update 2.* Don mentions to me the [pretty-show](http://hackage.haskell.org/package/pretty-show)
    package by Iavor S. Diatchki which also does similar functionality, and comes
    with an executable that lets you prettify output offline!'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*更新 2。* Don向我提到了 [pretty-show](http://hackage.haskell.org/package/pretty-show)
    这个由Iavor S. Diatchki开发的软件包，它也具有类似的功能，并配备了一个可让您离线美化输出的可执行文件！'
