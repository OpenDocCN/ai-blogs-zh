- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:18:29'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:18:29'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Typeclasses matter : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '类型类很重要 : ezyang’s blog'
- en: 来源：[http://blog.ezyang.com/2010/01/typeclasses-matter/](http://blog.ezyang.com/2010/01/typeclasses-matter/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/01/typeclasses-matter/](http://blog.ezyang.com/2010/01/typeclasses-matter/)
- en: Typeclasses matter
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型类很重要。
- en: 'Typeclasses matter. In fact, I''ll go as far to say that they have the capacity
    to [replace](http://www.haskell.org/haskellwiki/OOP_vs_type_classes) what is traditional
    object-oriented programming. To understand why, however, we have to review the
    traditionally recognized benefits of object-oriented programming:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 类型类很重要。事实上，我会进一步说，它们有能力[替代](http://www.haskell.org/haskellwiki/OOP_vs_type_classes)传统的面向对象编程。然而，要理解为什么，我们必须回顾传统认可的面向对象编程的好处：
- en: '*Organization.* For C-inspired languages that don''t have a module system,
    this is so incredibly important; without a discipline for organizing code finding
    the location of any given function is difficult unless you are intimately familiar
    with the problem domain. With object-oriented programming, all of these aspects
    are obvious: classes map into obvious filenames, methods go in obvious places,
    and overall organization is a function of how well the object model is designed,
    not how well thought out the include files were.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*组织.* 对于没有模块系统的C风格语言来说，这是非常重要的；没有组织代码的纪律，要找到任何给定函数的位置是很困难的，除非您非常熟悉问题域。通过面向对象编程，所有这些方面都是显而易见的：类映射到明显的文件名，方法放在明显的位置，整体组织是对象模型设计得有多好，而不是头文件设计得有多完善。'
- en: '*Encapsulation.* Objects were the first widely utilized method of hiding data
    and code from clients. Declare something `private` or `protected`, and you have
    compile-time guarantees that your clients won''t have their grubby fingers all
    over your innards. Used properly, *modularity* follows.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*封装.* 对象是广泛使用的首个隐藏数据和代码的方法。声明某些内容为`private`或`protected`，您就有了编译时的保证，即客户端不会对您的内部数据和代码做过多的干预。正确使用时，*模块化*随之而来。'
- en: '*Polymorphism.* The ability to change behavior based on data is a powerful
    idea dating back to the days of `(void *)`, which can lead to incomprehensible
    code flow but more often is a more elegant and concise way of writing complicated
    interactions than a giant `switch` statement. These benefits compound in situations
    that *multiple dispatch* is appropriate, and *interfaces* can lead to compile-time
    assurances that a particular class does what it says it does.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*多态性.* 根据数据改变行为的能力是一个强大的想法，可以追溯到`(void *)`的时代，这可能导致难以理解的代码流，但更常见的是一种比巨大的`switch`语句更加优雅和简洁的复杂交互方式。这些好处在适合*多重分派*的情况下会相互增强，而*接口*可以在编译时确保特定类别确实完成了其承诺。'
- en: '*Inheritance.* While a problematic facet of object-oriented programming (especially
    when manifest as *multiple inheritance*), inheritance is still an extremely powerful
    mechanism of code reuse in object-oriented designs. Subclasses get a default implementation
    for methods, as well as the ability to break through a level of encapsulation
    and use `protected` methods.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*继承.* 虽然作为面向对象编程的一个问题面向显著的一个方面(特别是当表现为*多重继承*时)，继承仍然是面向对象设计中代码重用的一个极为强大的机制。子类会为方法得到一个默认实现，以及能够突破封装级别并使用`protected`方法的能力。'
- en: Typeclasses directly fulfill some of these requirements, while others are achieved
    due to Haskell's strict types and module system.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 类型类直接满足了其中一些要求，而其他要求则是由于Haskell的严格类型和模块系统。
- en: '*Organization.* At first blush, this seems strictly worse: we can no longer
    read off class name and find the right file. However, a combination of `ghci`,
    which lets you run `:info` to find the location of any declaration in scope, as
    well as [Hoogle](http://haskell.org/hoogle/), which lets you find the function
    you want from just a type signature. These capabilities make it incredibly easy
    not only to find functions that you know exist, but also find ones you don''t
    know exist. Static typing to the rescue!'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*组织.* 乍一看，这似乎严格来说更糟：我们无法仅仅通过类名找到正确的文件。然而，结合`ghci`，它允许您运行`:info`来查找范围内任何声明的位置，以及[Hoogle](http://haskell.org/hoogle/)，它允许您仅从类型签名找到所需的函数。这些功能使得不仅可以轻松找到您知道存在的函数，还可以找到您不知道存在的函数。静态类型来拯救！'
- en: '*Encapsulation.* This feature is implemented by Haskell''s module export system:
    essentially, if you don''t export a constructor for any given data type, the end
    user cannot create or introspect inside that type; they have to use the functions
    you define to manipulate them. Additionally, if functions specify that their input
    types should be instances of a typeclass, there is a statically-checked type guarantee
    that the function will only use functions defined by the typeclass (i.e. no unsafe
    downcasts).'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*封装.* 这一特性由Haskell的模块导出系统实现：如果不导出任何给定数据类型的构造器，最终用户无法创建或内省该类型；他们必须使用您定义的函数来操作它们。此外，如果函数指定其输入类型应该是类型类的实例，那么静态检查的类型保证函数只会使用类型类定义的函数（即没有不安全的向下转型）。'
- en: '*Polymorphism.* This is the most obvious application of typeclasses; when explaining
    them to those coming in from imperative languages, the most common analogy made
    is that typeclasses are like interfaces. They are far more expressive than interfaces,
    however: functions can trivially specify that an incoming data type must satisfy
    multiple typeclasses, and parametrized types (those with extra type variables
    in their declaration) can have type classes constraining their type parameters.
    Furthermore, code can be written to be fully general over a typeclass, to be instantiated
    later down the line once an explicit type is inferred.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*多态性.* 这是类型类最明显的应用；当向从命令式语言转入的人解释它们时，最常见的类比是类型类就像接口。然而，它们比接口更具表现力：函数可以轻松地指定一个传入数据类型必须满足多个类型类，并且参数化类型（在其声明中具有额外类型变量的类型）可以有类型类约束其类型参数。此外，可以编写代码以完全泛化类型类，以便在后续推断出具体类型后进行实例化。'
- en: '*Inheritance.* Interface inheritance is a straightforward subset of type parametrization;
    instead of saying `class Monad m`, we say `class Functor m => Monad m`, thus stating
    that any `m` with a Monad instance must also have a Functor instance (and thus
    we may freely use any Monad as if it were a Functor). The ability to specify default
    implementations (often self referential, as `x /= y = not (x == y)` and `x ==
    y = not (x /= y)` of the Eq class attest) goes a long way to make writing new
    instances easy.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*继承.* 接口继承是类型参数化的一个直接子集；我们不是说`class Monad m`，而是说`class Functor m => Monad m`，因此声明任何具有Monad实例的m必须也具有Functor实例（因此我们可以自由地使用任何Monad，就像它是Functor一样）。指定默认实现的能力（通常是自引用的，如Eq类的`x
    /= y = not (x == y)`和`x == y = not (x /= y)`）极大地简化了编写新实例的过程。'
- en: 'Classic object hierarchies are an excellent mechanism for modelling "is a"
    relationships, but very few things in this world are actually cleanly "is a",
    as opposed to "acts like a"; and inheritance has been abused by many developers
    who have created large object hierarchies (cough GUI toolkits cough), when really,
    all that is really being exercised is inheritance''s code reuse mechanism. The
    emphasis on typeclasses/interfaces gets back to the heart of the problem:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 经典的对象层次结构是模拟“是一个”关系的优秀机制，但在这个世界上，几乎没有什么东西真正地完全“是一个”，而不是“像一个”；继承已经被许多开发人员滥用，他们创建了大型对象层次结构（咳嗽GUI工具包咳嗽），实际上，所有这些都是继承的代码重用机制。对类型类/接口的重视回到了问题的核心：
- en: What can I do with this type?
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我能用这种类型做什么？
- en: No more, no less.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一模一样。
