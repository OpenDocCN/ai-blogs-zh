- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-07-01 18:17:26'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-07-01 18:17:26
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'GET /browser.exe : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GET /browser.exe：ezyang 的博客
- en: 来源：[http://blog.ezyang.com/2012/10/get-browser-exe/](http://blog.ezyang.com/2012/10/get-browser-exe/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2012/10/get-browser-exe/](http://blog.ezyang.com/2012/10/get-browser-exe/)
- en: '[Jon Howell](http://research.microsoft.com/en-us/people/howell/) dreams of
    a new Internet. In this new Internet, cross-browser compatibility checking is
    a distant memory and new features can be unilaterally be added to browsers without
    having to convince the world to upgrade first. The idea which makes this Internet
    possible is so crazy, it just might work.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[Jon Howell](http://research.microsoft.com/en-us/people/howell/) 梦想着一个新的互联网。在这个新的互联网上，跨浏览器的兼容性检查成为了一个遥远的记忆，并且可以单方面地向浏览器添加新功能，而不必先说服整个世界进行升级。这种使这个互联网成为可能的想法如此疯狂，以至于它可能行得通。'
- en: '*What if a web request didn’t just download a web page, but the browser too?*'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果一个网络请求不仅仅是下载一个网页，而是下载整个浏览器呢？*'
- en: '“That’s stupid,” you might say, “No way I’m running random binaries from the
    Internet!” But you’d be wrong: Howell knows how to do this, and furthermore, how
    to do so in a way that is *safer* than the JavaScript your browser regularly receives
    and executes. The idea is simple: the code you’re executing (be it native, bytecode
    or text) is not important, rather, it is the *system API* exposed to the code
    that determines the safety of the system.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: “这太愚蠢了”，你可能会说，“我绝不会从互联网上运行随机二进制文件！” 但你错了：豪威尔知道如何做到这一点，而且还知道如何以比你的浏览器经常接收和执行的
    JavaScript 更安全的方式来执行。这个想法很简单：你正在执行的代码（无论是本地代码、字节码还是文本）并不重要，真正重要的是代码可以访问的系统 API，这决定了系统的安全性。
- en: Consider today’s browser, one of the most complicated pieces of software installed
    on your computer. It provides interfaces to “HTTP, MIME, HTML, DOM, CSS, JavaScript,
    JPG, PNG, Java, Flash, Silverlight, SVG, Canvas, and more”, all of which almost
    assuredly have bugs. The richness of the APIs are their own downfall, as far as
    security is concerned. Now consider what APIs a native client would need to expose,
    assuming that the website provided the browser and all of the libraries.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑今天的浏览器，这是安装在您计算机上的最复杂的软件之一。它提供了“HTTP、MIME、HTML、DOM、CSS、JavaScript、JPG、PNG、Java、Flash、Silverlight、SVG、Canvas
    等”接口，几乎肯定都有漏洞。API 的丰富性是它们在安全性方面的致命弱点。现在再考虑一下，一个本地客户端需要暴露哪些 API，假设网站提供了浏览器和所有库。
- en: 'The answer is very little: all you need is a native execution environment,
    a minimal interface for persistent state, an interface for external network communication
    and an interface for drawing pixels on the screen (ala VNC). That’s it: everything
    else can be implemented as untrusted native code provided by the website. This
    is an interface that is small enough that we would have a hope of making sure
    that it is bug free.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 答案非常简单：你只需要一个本地执行环境，一个最小化的持久状态接口，一个用于外部网络通信的接口，以及一个用于在屏幕上绘制像素的接口（如 VNC）。这就是全部：其他所有功能都可以作为网站提供的不受信任的本地代码来实现。这种接口足够小，我们有希望确保它没有漏洞。
- en: What you gain from this radical departure from the original Internet is fine-grained
    control over all aspects of the application stack. Websites can write the equivalents
    of native apps (ala an App Store), but without the need to press the install button.
    Because you control the stack, you no longer need to work around browser bugs
    or missing features; just pick an engine that suits your needs. If you need push
    notifications, no need to hack it up with a poll loop, just implement it properly.
    Web standards continue to exist, but no longer represent a contract between website
    developers and users (who couldn’t care less about under the hood); they are simply
    a contract between developers and other developers of web crawlers, etc.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 从这种与原始互联网彻底不同的彻底离去中，你得到的是对应用程序栈的所有方面的精细控制。网站可以编写类似于本地应用程序的等价物（如应用商店），但无需按安装按钮。因为你控制了整个栈，你不再需要解决浏览器的错误或缺失功能的问题；只需选择一个适合你需求的引擎。如果你需要推送通知，不需要通过轮询循环来实现，只需正确地实现它。Web
    标准仍然存在，但不再代表网站开发者与用户之间的合约（后者对底层技术一无所知）；它们只是开发者与其他网络爬虫等之间的合约。
- en: Jon Howell and his team have [implemented a prototype of this system](http://research.microsoft.com/apps/pubs/default.aspx?id=173709),
    and you can read more about the (many) technical difficulties faced with implementing
    a system like this. (Do I have to download the browser every time? How do I implement
    a Facebook Like button? What about browser history? Isn’t Google Native Client
    this already? Won’t this be slow?)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Jon Howell 和他的团队已经[实现了这个系统的原型](http://research.microsoft.com/apps/pubs/default.aspx?id=173709)，你可以阅读更多关于实施这样一个系统所面临的（众多）技术困难。（我每次都要下载浏览器吗？如何实现
    Facebook Like 按钮？浏览器历史怎么办？难道 Google Native Client 不已经做到了吗？这会不会很慢？）
- en: As a developer, I long for this new Internet. Never again would I have to write
    JavaScript or worry browser incompatibilities. I could manage my client software
    stack the same way I manage my server software stack, and use off-the-shelf components
    except in specific cases where custom software was necessary.) As a client, my
    feelings are more ambivalent. I can’t use Adblock or Greasemonkey anymore (that
    would involve injecting code into arbitrary executables), and it’s much harder
    for me to take websites and use them in ways their owners didn’t originally expect.
    (Would search engines exist in the same form in this new world order?) *Oh brave
    new world, that has such apps in't!*
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，我渴望这个新互联网。我再也不用编写 JavaScript 或担心浏览器兼容性了。我可以像管理服务器软件栈一样管理客户端软件栈，并在必要时使用现成组件。）作为客户端，我的感受更加矛盾。我不能再使用
    Adblock 或 Greasemonkey（这需要将代码注入任意可执行文件），而且更难以使用网站的方式超出其所有者最初的预期。（在这个新世界秩序中，搜索引擎是否会以相同形式存在？）*啊，勇敢的新世界，你有如此多的应用程序！*
