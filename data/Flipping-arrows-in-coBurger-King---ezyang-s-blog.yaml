- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:18:14'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:18:14'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Flipping arrows in coBurger King : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在coBurger King中翻转箭头：ezyang的博客
- en: 来源：[http://blog.ezyang.com/2010/07/flipping-arrows-in-coburger-king/](http://blog.ezyang.com/2010/07/flipping-arrows-in-coburger-king/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/07/flipping-arrows-in-coburger-king/](http://blog.ezyang.com/2010/07/flipping-arrows-in-coburger-king/)
- en: '*Category theory crash course for the working Haskell programmer.*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*为工作中的Haskell程序员提供的范畴论速成课程。*'
- en: 'A frequent question that comes up when discussing the dual data structures—most
    frequently comonad—is “What does the co- mean?” The snippy category theory answer
    is: “Because you flip the arrows around.” This is confusing, because if you look
    at one variant of the monad and comonad typeclasses:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论对偶数据结构（最常见的是co-monad）时经常出现的一个问题是：“co- 是什么意思？”范畴论的口气答案是：“因为你翻转了箭头。”这令人困惑，因为如果你看一看monad和co-monad类型类的一个变体：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: there are a lot of “arrows”, and only a few of them flipped (specifically, the
    arrow inside the second argument of the `>>=` and `=>>` functions, and the arrow
    in return/extract). This article will make precise what it means to “flip arrows”
    and use the “dual category”, even if you don’t know a lick of category theory.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有很多“箭头”，只有少数箭头被翻转（具体来说，是`>>=`和`=>>`函数的第二个参数内的箭头，以及return/extract中的箭头）。本文将准确解释“翻转箭头”的含义和使用“对偶范畴”，即使你对范畴论一窍不通也不例外。
- en: '*Notation.* There will be several diagrams in this article. You can read any
    node (aka object) as a Haskell type, and any solid arrow (aka morphism) as a Haskell
    function between those two types. (There will be arrows of different colors to
    distinguish concepts.) So if I have `f :: Int -> Bool`, I will draw that as:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*符号.* 本文中将会有几个图表。你可以把任何节点（又名对象）看作是Haskell类型，把任何实线箭头（又名态射）看作是连接这两种类型的Haskell函数。（不同的概念将用不同的颜色箭头来区分。）所以如果我有`f
    :: Int -> Bool`，我会这样画出来：'
- en: '*Functors.* The Functor typeclass is familiar to the working Haskell programmer:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*Functors.* Functor类型类对于工作中的Haskell程序员来说并不陌生：'
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'While the typeclass seems to imply that there is only one part to an instance
    of Functor, the implementation of `fmap`, there is another, almost trivial part:
    `t` is now a type function of kind `* -> *`: it takes a type (`a`) and outputs
    a new type (unimaginatively named `t a`). So we can represent it by this diagram:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然类型类似乎暗示了Functor实例的只有一个部分，即`fmap`的实现，但还有另一个几乎微不足道的部分：`t`现在是一个kind为`* -> *`的类型函数：它接受一个类型（`a`）并输出一个新的类型（无聊地命名为`t
    a`）。因此，我们可以用这个图表示它：
- en: 'The arrows are colored differently for a good reason: they are indicating completely
    different things (and just happen to be on the same diagram). While the red arrow
    represents a concrete function `a -> b` (the first argument of `fmap`), the dashed
    blue arrow does not claim that a function `a -> t a` exists: it’s simply indicating
    how the functor maps from one type to another. It could be a type with no legal
    values! We could also posit the existence of a function of that type; in that
    case, we would have a pointed functor:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 箭头以不同的颜色标注是有充分理由的：它们指示完全不同的东西（并且碰巧出现在同一个图表中）。红色箭头表示一个具体的函数`a -> b`（`fmap`的第一个参数），而虚线蓝色箭头并不是声称存在一个函数`a
    -> t a`：它只是指示functor如何从一个类型映射到另一个类型。它可能是一个没有合法值的类型！我们也可以假设该类型的一个函数的存在；在这种情况下，我们将有一个pointed
    functor：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: But for our purposes, such a function (or is it?) won’t be interesting until
    we get to monads.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 但是对于我们的目的来说，这样一个函数（或者说是吗？）在我们达到monads之前并不是很有趣。
- en: 'You may have heard of the Functor law, an equality that all Functors should
    satisfy. Here it is in textual form:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能听说过Functor定律，这是所有Functor都应满足的一个等式。在这里，它以文本形式出现：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'and here it is in pictorial form:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 并且以下是以图形方式表示：
- en: 'One might imagine the diagram as a giant `if..then` statement: if `f`, `g`
    and `g . f` exist, then `fmap f`, `fmap g` and `fmap (g . f)` exist (just apply
    `fmap` to them!), and they happen to compose in the same way.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将这个图想象成一个巨大的`if..then`语句：如果存在`f`、`g`和`g . f`，那么`fmap f`、`fmap g`和`fmap (g
    . f)`也存在（只需对它们应用`fmap`！），并且它们恰好以相同的方式组合。
- en: 'Now, it so happens that if we have `f :: a -> b` and `g :: b -> c`, `g . f`
    is also guaranteed to exist, so we didn’t really need to draw the arrow either.
    This is such an implicit notion of function composition, so we will take a moment
    and ask: why is that?'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '事实上，如果我们有`f :: a -> b`和`g :: b -> c`，则`g . f`也必然存在，因此我们实际上不需要绘制箭头。这是函数组合的一个如此隐含的概念，所以我们会花一点时间问一下：为什么会这样？'
- en: 'It turns out that when I draw a diagram of red arrows, I’m drawing what mathematicians
    call a *category* with objects and arrows. The last few diagrams have been drawn
    in what is called the category Hask, which has objects as Haskell types and arrows
    as Haskell functions. The definition of a category builds in arrow composition
    and identities:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 原来当我画红色箭头的图表时，我在画数学家称为带有对象和箭头的*范畴*。最近几个图表都是在所谓的范畴Hask中绘制的，该范畴的对象是Haskell类型，箭头是Haskell函数。范畴的定义内置了箭头的组合和身份：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: (you can mentally substitute `~>` with `->` for Hask) and there are also laws
    that make arrow composition associative. Most relevantly, the categorical arrows
    are precisely the arrows you flip when you talk about a dual category.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: （你可以在头脑中将`~>`与`->`替换为Hask），并且有使箭头组合成为可结合的箭头的法则。最相关的是，当你谈论对偶范畴时，范畴箭头恰好是你翻转的箭头。
- en: “Great!” you say, “Does that mean we’re done?” Unfortunately, not quite yet.
    It is true that the comonad is a monad for an opposite (or dual) category, it
    is *not* the category `Hask.` (This is not the category you are looking for!)
    Still, we’ve spent all this time getting comfortable drawing diagrams in `Hask`,
    and it would be a shame to not put this to good use. Thus, we are going to see
    an example of the dual category of Hask.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: “太棒了！”你说，“这意味着我们完成了吗？”不幸的是，还没有。虽然余单子是对偶（或双重）范畴的单子，但它并不是范畴`Hask.`（这不是你要找的范畴！）尽管如此，我们花了这么多时间在`Hask`中舒适地绘制图表，如果不好好利用一下就太可惜了。因此，我们将看到Hask的对偶范畴的一个例子。
- en: '*Contravariant functors.* You may have heard `fmap` described as a function
    that “lifts” functions in to a functorial context: this “functorial context” is
    actually just another category. (To actually mathematically show this, we''d need
    to show that the functor laws are sufficient to preserve the category laws.) For
    normal functors, this category is just Hask (actually a subcategory of it, since
    only types `t _` qualify as objects). For contravariant functors, this category
    is Hask^op.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*逆变函子。* 你可能听说过`fmap`被描述为将函数“提升”到函子上下文的函数：这个“函子上下文”实际上只是另一个范畴。（要真正数学地证明这一点，我们需要证明函子定律足以保留范畴定律。）对于普通函子来说，这个范畴就是Hask（实际上是它的子范畴，因为只有类型`t
    _`符合对象的条件）。对于逆变函子来说，这个范畴是Hask^op。'
- en: 'Any function `f :: a -> b` in Hask becomes a function `contramap f :: f b ->
    f a` in a contravariant functor:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '在Hask中的任何函数`f :: a -> b`都会成为逆变函子中的函数`contramap f :: f b -> f a`：'
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here is the corresponding diagram:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是对应的图表：
- en: 'Notice that we’ve partitioned the diagram into two sections: one in Hask, and
    one in Hask^op, and notice how the function arrows (red) flip going from one category
    to the other, while the functor arrows (blue) have not flipped. `t a` is still
    a contravariant functor value.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们将图表分成了两部分：一部分在Hask中，另一部分在Hask^op中，注意从一个范畴到另一个范畴的函数箭头（红色）翻转，而函子箭头（蓝色）则没有翻转。`t
    a`仍然是一个逆变函子值。
- en: 'You might be scratching your head and wondering: is there any instance of `contramap`
    that we could actually use? In fact, there is a very simple one that follows directly
    from our diagram:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想，头疼不已地想知道：我们是否可以使用`contramap`的任何实例？事实上，有一个非常简单的例子直接来自我们的图表：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Understanding this instance is not too important for the rest of this article,
    but interested readers should compare it to the functor on normal functions. Beyond
    the newtype wrapping and unwrapping, there is only one change.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本文其余部分来说，理解这个实例并不太重要，但感兴趣的读者应该将其与普通函数的函子进行比较。除了新类型的包装和解包之外，只有一个变化。
- en: '*Natural transformations.* I’m going to give away the punchline: in the case
    of comonads, the arrows you are looking for are natural transformations. What
    are natural transformations? What kind of category has natural transformations
    as arrows? In Haskell, natural transformations are roughly polymorphic functions:
    they’re mappings defined on functors. We’ll notate them in gray, and also introduce
    some new notation, since we will be handling multiple Functors: subscripts indicate
    types: `fmap_t` is `fmap :: (a -> b) -> t a -> t b)` and `η_a` is `η :: t a ->
    s a`.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*自然变换。* 我要提前给出结论：在余单子的情况下，你要找的箭头是自然变换。什么是自然变换？什么样的范畴以自然变换为箭头？在Haskell中，自然变换大致上是多态函数：它们是在函子上定义的映射。我们将用灰色表示它们，并且引入一些新的符号，因为我们将处理多个函子：下标表示类型：`fmap_t`是`fmap
    :: (a -> b) -> t a -> t b)`，而`η_a`是`η :: t a -> s a`。'
- en: 'Let’s review the three types of arrows flying around. The red arrows are functions,
    they are morphisms in the category Hask. The blue arrows are indicate a functor
    mapping between types; they also operate on functions to produce more functions
    (also in the category Hask: this makes them *endofunctors*). The gray arrows are
    *also* functions, so they can be viewed as morphisms in the category Hask, but
    sets of gray arrows across all types (objects) in Hask from one functor to another
    collectively form a natural transformation (two *components* of a natural transformation
    are depicted in the diagram). A single blue arrow is *not* a functor; a single
    gray arrow is *not* natural transformations. Rather, appropriately typed collections
    of them are functors and natural transformations.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下围绕的三种箭头类型。红色箭头是函数，它们是Hask范畴中的态射。蓝色箭头指示了类型之间的函子映射；它们还作用于函数以生成更多函数（同样在Hask范畴中：这使它们成为*自函子*）。灰色箭头同样是函数，因此它们也可以被视为Hask范畴中的态射，但是在从一个函子到另一个函子的所有类型（对象）之间，灰色箭头的集合共同形成了自然变换（图表中描绘了自然变换的两个*分量*）。单个蓝色箭头*不是*函子；单个灰色箭头*不是*自然变换。相反，适当类型的集合才是函子和自然变换。
- en: 'Because `f` seems to be cluttering up the diagram, we could easily omit it:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`f`似乎在图表中杂乱无章，我们可以轻松地省略它：
- en: '*Monad.* Here is the typeclass, to refresh your memory:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*Monad.* 这是类型类，为了提醒你：'
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You may have heard of an alternate way to define the Monad typeclass:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能听说过一种定义**Monad**类型类的另一种方法：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'where:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 其中：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`join` is far more rooted in category theory (indeed, it defines the natural
    transformation that is the infamous binary operation that makes monads monoids),
    and you should convince yourself that either `join` or `>>=` will get the job
    done.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`join`更深入地扎根于范畴论（事实上，它定义了使monad成为monoid的臭名昭著的二元运算的自然变换），你应该确信`join`或`>>=`都能胜任。'
- en: Suppose that we know nothing about what monad we’re dealing with, only that
    it is a monad. What sort of types might we see?
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们对我们正在处理的monad一无所知，只知道它是一个monad。我们可能会看到什么类型？
- en: 'Curiously enough, I’ve colored the arrows here as natural transformations,
    not red, as we have been doing for undistinguished functions in Hask. But where
    are the functors? `m a` is trivial: any Monad is also a valid instance of functor.
    `a` seems like a plain value, but it can also be treated as `Identity a`, that
    is, `a` inside the identity functor:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 趣味的是，我这里将箭头标成了自然变换，而不是我们在Hask中为不显著函数所做的红色标记。但是，函子在哪里？`m a`很简单：任何Monad也都是函子的有效实例。`a`看起来像一个普通值，但也可以视为`Identity
    a`，即`a`在恒等函子中的形式：
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'and `Monad m => m (m a)` is just a functor two skins deep:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 而 `Monad m => m (m a)` 只是一个函子两层深：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'or, in point-free style:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，以无参数风格：
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '(Each fmap embeds the function one functor deeper.) We can precisely notate
    the fact that these functors are composed with something like (cribbed from [sigfpe](http://blog.sigfpe.com/2008/11/from-monoids-to-monads.html)):'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: （每个fmap将函数嵌入到更深的函子中。）我们可以精确地表示这些函子与类似以下内容组合的事实（抄袭自 [sigfpe](http://blog.sigfpe.com/2008/11/from-monoids-to-monads.html)）：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: in which case `m :<*> m` is a functor.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下 `m :<*> m` 是一个函子。
- en: 'While those diagrams stem directly from the definition of a monad, there are
    also important monad laws, which we can also draw diagrams for. I’ll draw just
    the monad identity laws with `f`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这些图表直接源自monad的定义，但也有重要的monad定律，我们也可以为其绘制图表。我将只画带有 `f` 的monad恒等律：
- en: '`return_a` indicates `return :: a -> m a`, and `join_a` indicates `join ::
    m (m a) -> m a`. Here are the rest with `f` removed:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`return_a`表示`return :: a -> m a`，而`join_a`表示`join :: m (m a) -> m a`。这里是其余的部分，去除了`f`：'
- en: 'You can interpret light blue text as “fresh”—it is the new “layer” created
    (or compressed) by the natural transformation. The first diagram indicates the
    identity law (traditionally `return x >>= f == f x` and `f >>= return == f`);
    the second indicates associativity law (traditionally `(m >>= f) >>= g == m >>=
    (\x -> f x >>= g)`). The diagrams are equivalent to this code:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将浅蓝色文字解释为“新鲜”—它是自然变换创建（或压缩）的新“层”。第一个图表示恒等律（传统上为`return x >>= f == f x`和`f
    >>= return == f`）；第二个表示结合律（传统上为`(m >>= f) >>= g == m >>= (\x -> f x >>= g)`）。这些图表等同于以下代码：
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '*Comonads.* Monads inhabit the category of endofunctors `Hask -> Hask`. The
    category of endofunctors has endofunctors as objects and (no surprise) natural
    transformations as arrows. So when we make a comonad, we flip the natural transformations.
    There are two of them: join and return.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*余单子。* 单子属于自函子 `Hask -> Hask` 的范畴。自函子的范畴以自函子为对象，并（毫不奇怪地）以自然变换为箭头。因此，当我们制作余单子时，我们翻转自然变换。有两种：join
    和 return。'
- en: 'Here is the type class:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这是类型类：
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Which have been renamed `duplicate` and `extract` respectively.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 它们分别已重命名为`duplicate`和`extract`。
- en: 'We can also flip the natural transformation arrows to get our Comonad laws:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以翻转自然变换箭头来得到我们的余单子法则：
- en: '[PRE16]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '*Next time.* While it is perfectly reasonable to derive `<<=` from cojoin and
    coreturn, some readers may feel cheated, for I have never actually discussed the
    functions from monad that Haskell programmers deal with on a regular basis: I
    just changed around the definitions until it was obvious what arrows to flip.
    So some time in the future, I hope to draw some diagrams for Kleisli arrows and
    show what that is about: in particular, why `>=>` and `<=<` are called Kleisli
    composition.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*下一次。* 尽管从联结和核返推导出`<<=`是完全合理的，但一些读者可能会感到被愚弄，因为我实际上从未讨论过Haskell程序员经常处理的单子功能：我只是改变了定义，直到哪些箭头翻转为明显为止。因此，希望在未来某个时候，我能为Kleisli箭头绘制一些图表，并展示其含义：特别是为什么`>=>`和`<=<`被称为Kleisli组合。'
- en: '*Apology.* It being three in the morning, I’ve managed to omit all of the formal
    definitions and proofs! I am a very bad mathematician for doing so. Hopefully,
    after reading this, you will go to the Wikipedia articles on each of these topics
    and find their descriptions penetrable!'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*致歉。* 早晨三点，我竟然遗漏了所有正式定义和证明！对此我是个非常糟糕的数学家。希望在阅读完这篇文章后，你能去查阅每个主题的维基百科文章，并理解它们的描述！'
- en: '*Postscript.* You might be interested in this [follow-up post about duality
    in simpler settings](http://blog.ezyang.com/2012/10/duality-for-haskellers/) than
    monads/comonads.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*附言。* 你可能会对这篇关于在更简单环境中的对偶性的[后续文章](http://blog.ezyang.com/2012/10/duality-for-haskellers/)感兴趣。'
