- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-07-01 18:17:38'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-07-01 18:17:38
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Why iteratees are hard to understand : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么迭代器难以理解：ezyang 的博客
- en: 来源：[http://blog.ezyang.com/2012/01/why-iteratees-are-hard-to-understand/](http://blog.ezyang.com/2012/01/why-iteratees-are-hard-to-understand/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2012/01/why-iteratees-are-hard-to-understand/](http://blog.ezyang.com/2012/01/why-iteratees-are-hard-to-understand/)
- en: 'There are two primary reasons why the low-level implementations of iteratees,
    enumerators and enumeratees tend to be hard to understand: *purely functional
    implementation* and *inversion of control*. The strangeness of these features
    is further exacerbated by the fact that users are encouraged to think of iteratees
    as sinks, enumerators as sources, and enumeratees as transformers. This intuition
    works well for clients of iteratee libraries but confuses people interested in
    digging into the internals.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个主要原因解释了为什么迭代器的低级实现——迭代器、枚举器和变换器——往往难以理解：*纯函数实现*和*控制反转*。这些特性的奇异性进一步加剧了用户被鼓励将迭代器视为接收器、枚举器视为源头、变换器视为转换器。这种直觉对迭代器库的客户有效，但让那些对内部机制感兴趣的人感到困惑。
- en: In this article, I’d like to explain the strangeness imposed by the *purely
    functional implementation* by comparing it to an implementation you might see
    in a traditional, *imperative*, object-oriented language. We’ll see that concepts
    which are obvious and easy in an imperative setting are less-obvious but only
    slightly harder in a purely functional setting.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我想通过将其与传统的*命令式*面向对象语言中可能看到的实现进行比较，来解释*纯函数实现*所带来的奇异性。我们将看到，在命令式设置中显而易见且简单的概念，在纯函数设置中稍微困难一些。
- en: Types
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型
- en: '*The following discussion uses nomenclature from the enumerator library, since
    at the time of the writing it seems to be the most popular implementation of iteratees
    currently in use.*'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*以下讨论使用枚举器库的命名约定，因为在撰写本文时，它似乎是当前使用最广泛的迭代器实现。*'
- en: 'The fundamental entity behind an iteratee is the `Step`. The usual intuition
    is that is represents the “state” of an iteratee, which is either done or waiting
    for more input. But we’ve cautioned against excessive reliance on metaphors, so
    let’s look at the types instead:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代器背后的基本实体是`Step`。通常的直觉是它表示迭代器的“状态”，即完成或等待更多输入。但我们警告过不要过度依赖隐喻，所以让我们看看类型：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: I have made some extremely important simplifications from the enumerator library,
    most of important of which is explicitly writing out the `Step` data type where
    we would have seen an `Iteratee` instead and making `Enumeratee` a pure function.
    The goal of the next three sections is to explain what each of these type signatures
    means; we’ll do this by analogy to the imperative equivalents of iteratees. The
    imperative programs should feel intuitive to most programmers, and the hope is
    that the pure encoding should only be a hop away from there.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我从枚举器库中进行了一些极为重要的简化，其中最重要的是显式地写出了`Step`数据类型，而我们本应看到的是`Iteratee`，并使`Enumeratee`成为纯函数。接下来的三节的目标是解释每个类型签名的含义；我们将通过将其类比于迭代器的命令式等价物来实现这一目标。对大多数程序员来说，命令式程序应该感觉直观，希望纯编码只是一个小跳跃。
- en: Step/Iteratee
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤/迭代器
- en: 'We would like to design an object that is either waiting for input or finished
    with some result. The following might be a proposed interface:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望设计一个对象，它可以等待输入或完成某些结果。以下可能是一个提议的接口：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This implementation critically relies on the identity of an object of type
    `Iteratee`, which maintains this identity across arbitrary calls to `put`. For
    our purposes, we need to translate `put :: IORef s -> Stream a -> IO ()` (first
    argument is the Iteratee) into a purely functional interface. Fortunately, it’s
    not too difficult to see how to do this if we understand how the `State` monad
    works: we replace the old type with `put :: s -> Stream a -> s`, which takes the
    original state of the iteratee (`s = Step a b`) and some input, and transforms
    it into a new state. The final definition `put :: Step a b -> Stream a -> m (Step
    a b)` also accomodates the fact that an iteratee may have some other side-effects
    when it receives data, but we are under no compulsion to use this monad instance;
    if we set it to the identity monad our iteratee has no side effects (`StateT`
    may be the more apt term here). In fact, this is precisely the accessor for the
    field in the `Continue` constructor.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '这一实现关键依赖于类型为`Iteratee`的对象的标识，该对象在对`put`进行任意调用时都保持不变。对于我们的目的，我们需要将`put :: IORef
    s -> Stream a -> IO ()`（第一个参数是Iteratee）转换为纯函数接口。幸运的是，如果我们理解`State` Monad的工作原理，就不难看出如何做到这一点：我们将旧类型替换为`put
    :: s -> Stream a -> s`，它接受迭代器的原始状态（`s = Step a b`）和一些输入，并将其转换为新状态。最终定义`put ::
    Step a b -> Stream a -> m (Step a b)`也考虑了当迭代器接收数据时可能存在其他副作用的情况，但我们没有使用此Monad实例的必要；如果我们将其设置为身份Monad，则我们的迭代器没有副作用（在这里可能更合适的术语是`StateT`）。实际上，这恰好是`Continue`构造函数中字段的访问器。'
- en: Enumerator
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 枚举器
- en: 'We would like to design an object that takes an iteratee and feeds it input.
    It’s pretty simple, just a function which mutates its input:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望设计一个对象，它接受一个迭代器并向其提供输入。这非常简单，只是一个变异其输入的函数：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: What does the type of an enumerator have to say on the matter?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举器的类型意味着什么？
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If we interpret this as a state transition function, it’s clear that an enumerator
    is a function that *transforms* an iteratee from one state to another, much like
    the `put`. Unlike the `put`, however, the enumerator takes no input from a stream
    and may possibly cause multiple state transitions: it’s a big step, with all of
    the intermediate states hidden from view.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将其解释为状态转换函数，那么明显枚举器是一个将迭代器从一种状态转换为另一种状态的函数，就像`put`一样。然而，与`put`不同的是，枚举器不从流中获取任何输入，并且可能导致多个状态转换：这是一个重要的步骤，其中所有中间状态都被隐藏起来。
- en: 'The nature of this transformation is not specified, but a common interpretation
    is that the enumerator repeatedly feeds an input to the continuation in step.
    An execution might unfold to something like this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此转换的性质没有指定，但常见的解释是，枚举器重复向步骤中的继续传递输入。执行可能会展开为以下内容：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Notice that our type signature is not:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们的类型签名不是：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'as the imperative API might suggest. Such a function would manage to run the
    iteratee (and trigger any of its attendant side effects), but we’d lose the return
    result of the iteratee. This slight modification wouldn’t do either:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 就像命令式API可能建议的那样。这样的函数将能够运行迭代器（并触发其任何附带的副作用），但我们将丢失迭代器的返回结果。这种轻微的修改也不行：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The problem here is that if the enumerator didn’t actually manage to finish
    running the iteratee, we’ve lost the end state of the iteratee (it was never returned!)
    This means you can’t concatenate enumerators together.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的问题在于，如果枚举器实际上没有成功完成运行迭代器，我们已经丢失了迭代器的最终状态（它从未返回！）这意味着你不能连接枚举器。
- en: 'It should now be clear why I have unfolded all of the `Iteratee` definitions:
    in the `enumerator` library, the simple correspondence between enumerators and
    side-effectful state transformers is obscured by an unfortunate type signature:'
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在，我已经展开了所有`Iteratee`的定义，这一点应该是清楚的：在`enumerator`库中，枚举器和具有副作用的状态转换器之间的简单对应关系被不幸的类型签名所掩盖：
- en: ''
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE7]'
- en: ''
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Oleg’s original treatment is much clearer on this matter, as he defines the
    steps themselves to *be* the iteratees.
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 关于这一点，Oleg的原始处理方法在这个问题上要清楚得多，因为他定义了步骤本身就是迭代器。
- en: Enumeratee
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 枚举器
- en: 'At last, we are now prepared to tackle the most complicated structure, the
    enumeratee. Our imperative hat tells us a class like this might work:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们现在已经准备好处理最复杂的结构，即枚举器。我们的命令式语法告诉我们，像这样的类可能会起作用：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Like our original `Iteratee` class, it sports a `put` and `result` operation,
    but upon construction it wraps another `Iteratee`: in this sense it is an *adapter*
    from elements of type `O` to elements of type `A`. A call to the outer `put` with
    an object of type `O` may result in zero, one or many calls to put with an object
    of type `A` on the inside `Iteratee`; the call to `result` is simply passed through.
    An `Enumeratee` may also decide that it is “done”, that is, it will never call
    `put` on the inner iteratee again; the `done` method may be useful for testing
    for this case.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们最初的`Iteratee`类一样，它支持`put`和`result`操作，但在构造时它包装另一个`Iteratee`：在这个意义上，它是从类型`O`到类型`A`的*适配器*。对外部`put`使用类型为`O`的对象可能会导致在内部`Iteratee`上使用类型为`A`的对象的零个、一个或多个调用；对`result`的调用只是简单地传递。一个`Enumeratee`也可以决定它已经“完成”，也就是说，它将永远不会再调用内部迭代器的`put`；`done`方法可能对测试这种情况很有用。
- en: 'Before we move on to the types, it’s worth reflecting what stateful objects
    are involved in this imperative formulation: they are the outer `Enumeratee` and
    the inner `Iteratee`. We need to maintain *two*, not *one* states. The imperative
    formulation naturally manages these for us (after all, we still have access to
    the inner iteratee even as the enumeratee is running), but we’ll have to manually
    arrange for this is in the purely functional implementation.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续讨论类型之前，值得反思的是这个命令式表述中涉及的有状态对象：它们是外部的`Enumeratee`和内部的`Iteratee`。我们需要维护*两个*而不是一个状态。命令式表述自然为我们管理这些（毕竟，即使枚举器正在运行，我们仍然可以访问内部迭代器），但在纯函数实现中，我们必须手动安排。
- en: 'Here is the type for `Enumeratee`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`Enumeratee`的类型：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'It’s easy to see why the first argument is `Step a b`; this is the inner iteratee
    that we are wrapping around. It’s less easy to see why `Step o (Step a b)` is
    the correct return type. Since our imperative interface results in an object which
    implements the `Iteratee<O,B>` interface, we might be tempted to write this signature
    instead:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易看出为什么第一个参数是`Step a b`；这是我们包装的内部迭代器。不太容易看出为什么`Step o (Step a b)`是正确的返回类型。由于我们的命令式接口导致一个实现了`Iteratee<O,B>`接口的对象，我们可能会倾向于写出这样的签名：
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: But remember; we need to keep track of two states! We have the outer state,
    but what of the inner one? In a situation similar reminiscent of our alternate
    universe `Enumerator` earlier, the state of the inner iteratee is lost forever.
    Perhaps this is not a big deal if this enumeratee is intended to be used for the
    rest of the input (i.e. `done` always returns false), but it is quite important
    if we need to stop using the `Enumeratee` and then continue operating on the stream
    `Step a b`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 但请记住；我们需要跟踪两个状态！我们有外部状态，但内部状态呢？在早些时候提到的我们的替代宇宙`Enumerator`类似情况下，内部迭代器的状态将永远丢失。也许如果这个枚举器打算用于输入的其余部分（即`done`总是返回false），这并不是什么大问题，但如果我们需要停止使用`Enumeratee`，然后继续在流`Step
    a b`上操作，则这一点非常重要。
- en: 'By the design of iteratees, we can only get a result out of an iteratee once
    it finishes. This forces us to return the state in the second parameter, giving
    us the final type:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通过迭代器的设计，我们只能在它完成后才能得到结果。这迫使我们在第二个参数中返回状态，给出最终类型：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '“But wait!” you might say, “If the iteratee only returns a result at the very
    end, doesn’t this mean that the inner iteratee only gets updated at the end?”
    By the power of *inversion of control*, however, this is not the case: as the
    enumeratee receives values and updates its own state, it also executes and updates
    the internal iteratee. The intermediate inner states exist; they are simply not
    accessible to us. (This is in contrast to the imperative version, for which we
    can peek at the inner iteratee!)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: “等等！”你可能会说，“如果迭代器只在最后才返回结果，这是否意味着内部迭代器只在最后更新？”然而，通过*控制反转*的力量，情况并非如此：当枚举器接收值并更新其自身状态时，它也执行并更新内部迭代器。中间的内部状态是存在的；它们只是对我们不可见。（这与命令式版本形成对比，对于那个版本，我们可以窥视内部迭代器！）
- en: Another good question is “Why does the `enumerator` library have an extra monad
    snuck in `Enumeratee`?”, i.e.
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 另一个很好的问题是，“为什么`enumerator`库在`Enumeratee`中悄悄加入了一个额外的单子？”即，
- en: ''
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE12]'
- en: ''
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: My understanding is that the monad is unnecessary, but may be useful if your
    `Enumeratee` needs to be able to perform a side-effect prior to receiving any
    input, e.g. for initialization.
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我的理解是，单子是不必要的，但如果您的`Enumeratee`需要在接收任何输入之前执行副作用（例如初始化），它可能会有用。
- en: Conclusion
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论
- en: 'Unfortunately, I can’t claim very much novelty here: all of these topics are
    covered in [Oleg’s notes](http://okmij.org/ftp/Haskell/Iteratee/IterateeIO-talk-notes.pdf).
    I hope, however, that this presentation with reference to the imperative analogues
    of iteratees makes the choice of types clearer.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，我在这里不能宣称有很多新颖的东西：所有这些主题都在[Oleg的笔记](http://okmij.org/ftp/Haskell/Iteratee/IterateeIO-talk-notes.pdf)中有涵盖。然而，我希望通过参考迭代器的命令式类比，使类型选择更加清晰。
- en: 'There are some important implications of using this pure encoding, similar
    to the differences between using IORefs and using the state monad:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种纯编码有一些重要的含义，类似于使用IORefs和使用状态单子之间的差异：
- en: Iteratees can be forked and run on different threads while preserving isolation
    of local state, and
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迭代器可以分叉并在不同线程上运行，同时保持本地状态的隔离。
- en: Old copies of the iteratee state can be kept around, and resumed later as a
    form of backtracking (swapping a bad input for a newer one).
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 旧的迭代器状态副本可以保留，并稍后恢复，作为一种回溯的形式（用新的输入替换坏的输入）。
- en: These assurances would not be possible in the case of simple mutable references.
    There is one important caveat, however, which is that while the pure component
    of an iteratee is easily reversed, we cannot take back any destructive side-effects
    performed in the monad. In the case of forking, this means any side-effects must
    be atomic; in the case of backtracking, we must be able to rollback side-effects.
    As far as I can tell, the art of writing iteratees that take advantage of this
    style is not well studied but, in my opinion, well worth investigating. I’ll close
    by noting that one of the theses behind the new conduits is that purity is not
    important for supporting most stream processing. In my opinion, the jury is still
    out.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这些保证在简单的可变引用情况下是不可能的。然而，有一个重要的警告，即虽然迭代器的纯组件很容易被撤销，但我们无法撤销在单子中执行的任何破坏性副作用。在分叉的情况下，这意味着任何副作用必须是原子的；在回溯的情况下，我们必须能够回滚副作用。据我所知，撰写利用这种风格的迭代器的艺术并没有得到很好的研究，但在我看来，这是值得探讨的。最后，我要指出，新导管背后的一个论点是，纯度对支持大多数流处理并不重要。在我看来，这个问题还有待解决。
