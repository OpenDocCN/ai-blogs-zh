["```\n$ cat Factorial.hs\n\n```", "```\nmodule Factorial where\n\nfact :: Int -> Int\nfact 0 = 1\nfact n = n * fact (n - 1)\n\n```", "```\n$ ghc -c Factorial.hs -ddump-ds\n\n```", "```\nRec {\nFactorial.fact :: GHC.Types.Int -> GHC.Types.Int\nLclIdX\n[]\nFactorial.fact =\n  \\ (ds_dgr :: GHC.Types.Int) ->\n    let {\n      n_ade :: GHC.Types.Int\n      LclId\n      []\n      n_ade = ds_dgr } in\n    let {\n      fail_dgt :: GHC.Prim.State# GHC.Prim.RealWorld -> GHC.Types.Int\n      LclId\n      []\n      fail_dgt =\n        \\ (ds_dgu :: GHC.Prim.State# GHC.Prim.RealWorld) ->\n          *_agj n_ade (Factorial.fact (-_agi n_ade (GHC.Types.I# 1))) } in\n    case ds_dgr of wild_B1 { GHC.Types.I# ds_dgs ->\n    letrec { } in\n    case ds_dgs of ds_dgs {\n      __DEFAULT -> fail_dgt GHC.Prim.realWorld#; 0 -> GHC.Types.I# 1\n    }\n    }\n\n```", "```\nFactorial.fact =\n    \\ds_dgr ->\n        let n_ade = ds_dgr in\n        let fail_dgt = \\ds_dgu -> n_ade * Factorial.fact (n_ade - (GHC.Int.I# 1)) in\n        case ds_dgr of wild_B1 { I# ds_dgs ->\n            case ds_dgs of ds_dgs {\n                __DEFAULT -> fail_dgt GHC.Prim.realWorld#\n                0 -> GHC.Int.I# 1\n            }\n        }\n\n```", "```\n$dNum_agq :: GHC.Num.Num GHC.Types.Int\nLclId\n[]\n$dNum_agq = $dNum_agl\n*_agj :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int\nLclId\n[]\n*_agj = GHC.Num.* @ GHC.Types.Int $dNum_agq\n-_agi :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int\nLclId\n[]\n-_agi = GHC.Num.- @ GHC.Types.Int $dNum_agl\n$dNum_agl :: GHC.Num.Num GHC.Types.Int\nLclId\n[]\n$dNum_agl = GHC.Num.$fNumInt\n$dEq_agk :: GHC.Classes.Eq GHC.Types.Int\nLclId\n[]\n$dEq_agk = GHC.Num.$p1Num @ GHC.Types.Int $dNum_agl\n==_adA :: GHC.Types.Int -> GHC.Types.Int -> GHC.Bool.Bool\nLclId\n[]\n==_adA = GHC.Classes.== @ GHC.Types.Int $dEq_agk\nfact_ado :: GHC.Types.Int -> GHC.Types.Int\nLclId\n[]\nfact_ado = Factorial.fact\nend Rec }\n\n```", "```\nghc -c Factorial.hs -ddump-simpl\n\n```", "```\nRec {\nFactorial.fact :: GHC.Types.Int -> GHC.Types.Int\nGblId\n[Arity 1]\nFactorial.fact =\n  \\ (ds_dgr :: GHC.Types.Int) ->\n    case ds_dgr of wild_B1 { GHC.Types.I# ds1_dgs ->\n    case ds1_dgs of _ {\n      __DEFAULT ->\n        GHC.Num.*\n          @ GHC.Types.Int\n          GHC.Num.$fNumInt\n          wild_B1\n          (Factorial.fact\n             (GHC.Num.-\n                @ GHC.Types.Int GHC.Num.$fNumInt wild_B1 (GHC.Types.I# 1)));\n      0 -> GHC.Types.I# 1\n    }\n    }\nend Rec }\n\n```", "```\nghc -c Factorial.hs -ddump-stg\n\n```", "```\nFactorial.fact =\n    \\r srt:(0,*bitmap*) [ds_sgx]\n        case ds_sgx of wild_sgC {\n          GHC.Types.I# ds1_sgA ->\n              case ds1_sgA of ds2_sgG {\n                __DEFAULT ->\n                    let {\n                      sat_sgJ =\n                          \\u srt:(0,*bitmap*) []\n                              let {\n                                sat_sgI =\n                                    \\u srt:(0,*bitmap*) []\n                                        let { sat_sgH = NO_CCS GHC.Types.I#! [1];\n                                        } in  GHC.Num.- GHC.Num.$fNumInt wild_sgC sat_sgH;\n                              } in  Factorial.fact sat_sgI;\n                    } in  GHC.Num.* GHC.Num.$fNumInt wild_sgC sat_sgJ;\n                0 -> GHC.Types.I# [1];\n              };\n        };\nSRT(Factorial.fact): [GHC.Num.$fNumInt, Factorial.fact]\n\n```", "```\nghc -c Factorial.hs -ddump-cmm\n\n```", "```\nsgI_entry()\n        { has static closure: False update_frame: <none>\n          type: 0\n          desc: 0\n          tag: 17\n          ptrs: 1\n          nptrs: 0\n          srt: (Factorial_fact_srt,0,1)\n        }\n    ch0:\n        if (Sp - 24 < SpLim) goto ch2;\n        I32[Sp - 4] = R1; // (reordered for clarity)\n        I32[Sp - 8] = stg_upd_frame_info;\n        I32[Sp - 12] = stg_INTLIKE_closure+137;\n        I32[Sp - 16] = I32[R1 + 8];\n        I32[Sp - 20] = stg_ap_pp_info;\n        I32[Sp - 24] = base_GHCziNum_zdfNumInt_closure;\n        Sp = Sp - 24;\n        jump base_GHCziNum_zm_info ();\n    ch2: jump stg_gc_enter_1 ();\n}\n\n```", "```sat_sgH was a constant 1). ``base_GHCziNum_zdfNumInt_closure```", "```\nsgJ_entry()\n        { has static closure: False update_frame: <none>\n          type: 0\n          desc: 0\n          tag: 17\n          ptrs: 1\n          nptrs: 0\n          srt: (Factorial_fact_srt,0,3)\n        }\n    ch5:\n        if (Sp - 12 < SpLim) goto ch7;\n        Hp = Hp + 12;\n        if (Hp > HpLim) goto ch7;\n        I32[Sp - 8] = stg_upd_frame_info;\n        I32[Sp - 4] = R1;\n        I32[Hp - 8] = sgI_info;\n        I32[Hp + 0] = I32[R1 + 8];\n        I32[Sp - 12] = Hp - 8;\n        Sp = Sp - 12;\n        jump Factorial_fact_info ();\n    ch7:\n        HpAlloc = 12;\n        jump stg_gc_enter_1 ();\n}\n\n```", "```\nsgC_ret()\n        { has static closure: False update_frame: <none>\n          type: 0\n          desc: 0\n          tag: 34\n          stack: []\n          srt: (Factorial_fact_srt,0,3)\n        }\n    ch9:\n        Hp = Hp + 12;\n        if (Hp > HpLim) goto chb;\n        _sgG::I32 = I32[R1 + 3];\n        if (_sgG::I32 != 0) goto chd;\n        R1 = stg_INTLIKE_closure+137;\n        Sp = Sp + 4;\n        Hp = Hp - 12;\n        jump (I32[Sp + 0]) ();\n    chb:\n        HpAlloc = 12;\n        jump stg_gc_enter_1 ();\n    chd:\n        I32[Hp - 8] = sgJ_info;\n        I32[Hp + 0] = R1;\n        I32[Sp + 0] = Hp - 8;\n        I32[Sp - 4] = R1;\n        I32[Sp - 8] = stg_ap_pp_info;\n        I32[Sp - 12] = base_GHCziNum_zdfNumInt_closure;\n        Sp = Sp - 12;\n        jump base_GHCziNum_zt_info ();\n}\n\n```", "```\nghc -c Factorial.hs -ddump-opt-cmm\n\n```", "```\nghc -c Factorial.hs -ddump-asm\n\n```", "```\nsgK_info:\n.Lch9:\n        leal -24(%ebp),%eax\n        cmpl 84(%ebx),%eax\n        jb .Lchb\n        movl $stg_upd_frame_info,-8(%ebp)\n        movl %esi,-4(%ebp)\n        movl $stg_INTLIKE_closure+137,-12(%ebp)\n        movl 8(%esi),%eax\n        movl %eax,-16(%ebp)\n        movl $stg_ap_pp_info,-20(%ebp)\n        movl $base_GHCziNum_zdfNumInt_closure,-24(%ebp)\n        addl $-24,%ebp\n        jmp base_GHCziNum_zm_info\n.Lchb:\n        jmp *-8(%ebx)\n\n```"]