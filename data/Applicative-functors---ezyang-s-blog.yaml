- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:29'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:29'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Applicative functors : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用函子：ezyang 的博客
- en: 来源：[http://blog.ezyang.com/2012/08/applicative-functors/](http://blog.ezyang.com/2012/08/applicative-functors/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2012/08/applicative-functors/](http://blog.ezyang.com/2012/08/applicative-functors/)
- en: '*On the importance of primary sources.*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*关于主要来源的重要性。*'
- en: '(Introductory material ahead.) Most readers of this blog should have at least
    a passing familiarity with [applicative functors](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Applicative.html):'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: （前言资料。）这篇博客的大多数读者应该至少对[适用函子](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Applicative.html)有所了解：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This interface is quite convenient for day-to-day programming (in particular,
    it makes for the nice `f <$> a <*> b <*> c` idiom), but the laws it obeys are
    quite atrocious:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这个接口非常方便日常编程（特别是，它使得漂亮的`f <$> a <*> b <*> c`习语变得容易），但它遵守的法律非常糟糕：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'So, if you (like me twenty-four hours ago) haven’t seen it already, you should
    show that this interface is equivalent to Applicative:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果你（像我在二十四小时前一样）还没有看过它，你应该展示这个接口等价于Applicative：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '(By the way, if you haven’t shown that `join :: m (m a) -> m a` for monads
    is equivalent to `bind :: m a -> (a -> m b) -> m b`, you should do that too.)
    The laws for this formulation are *much* nicer:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '（顺便说一句，如果你还没有证明对于单子`join :: m (m a) -> m a`等价于`bind :: m a -> (a -> m b) ->
    m b`，你也应该这样做。）这种表述的定律要好得多：'
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Where `f *** g = \(x,y) -> (f x, g y)`. I’ve prettied things up a bit by using
    “is isomorphic to” in order to suppress the differences between `((), a)` and
    `a`, as well as `(a,(b,c))` and `((a,b),c)`, for strict equalities you’ll need
    some extra functions to massage the results into the right types. It seems that
    there is a general pattern where the API which has nice formulations of laws is
    not convenient to program with, and the formulation which is nice to program with
    does not have nice laws. C’est la vie... but at least they’re equivalent!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 `f *** g = \(x,y) -> (f x, g y)`。我稍微美化了一下，通过使用“等同于”来抑制 `((), a)` 和 `a` 之间的差异，以及
    `(a,(b,c))` 和 `((a,b),c)` 之间的差异，对于严格的相等性，你需要一些额外的函数来将结果转换为正确的类型。看起来有一个一般模式，即具有良好法律表述的
    API 并不方便编程，而良好编程的表述则没有良好的法律。C’est la vie...但至少它们是等价的！
- en: 'With this formulation, it becomes trivial to state what laws commutative applicative
    functors obey:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这种表述，可以轻松地陈述交换适用函子遵循的法律：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The original paper [Applicative Programming With Effects](http://www.soi.city.ac.uk/~ross/papers/Applicative.html)
    is well worth a read. Check it out! That concludes this public service announcement.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 原始论文[使用效果的适用性编程](http://www.soi.city.ac.uk/~ross/papers/Applicative.html)非常值得一读。快去看看吧！这就是本次公共服务通知的结束。
