["```\nlemma \"(ALL x. ~ P x --> Q x) & (EX x. ~ Q x) --> (EX x. P x)\"\n\n```", "```\nby blast\n\n```", "```\n-- \"Massage formula\"\napply (rule impI)\n\n```", "```\napply (erule conjE)\n\n```", "```\napply (erule exE)\n\n```", "```\napply (drule_tac x = \"x\" in spec)\n\n```", "```\n!!x. [| ~ Q x; ~ P x -> Q x |] ==> (EX x. P x)\n\n```", "```\n!!x. [| ~  (EX x. P x); ~ P x -> Q x |] ==> Q x\n\n```", "```\n!!x. [| ~ Q x; ~ (EX. P x) |] ==> ~ (~ P x -> Q x)\n\n```", "```\napply (rule_tac x = \"x\" in exI)\n\n```", "```\napply (erule contrapos_np)\nby (drule mp)\n\n```", "```\ntheory LogicAndProof\nimports Main\nbegin\n\nlemma \"(ALL x. ~ P x --> Q x) & (EX x. ~ Q x) --> (EX x. P x)\"\n-- \"Massage the formula into a nicer form to apply deduction rules\"\napply (rule impI)\napply (erule conjE)\n-- \"Start introducing the safe quantifiers\"\napply (erule exE)\napply (drule_tac x = \"x\" in spec)\napply (rule_tac x =\" x\" in exI)\napply (erule contrapos_np)\nby (drule mp)\n\n```"]