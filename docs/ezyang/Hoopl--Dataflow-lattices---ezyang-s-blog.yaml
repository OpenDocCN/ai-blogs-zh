- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-07-01 18:17:54'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-07-01 18:17:54'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Hoopl: Dataflow lattices : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hoopl：数据流格 lattice ：ezyang’s 博客
- en: 来源：[http://blog.ezyang.com/2011/04/hoopl-dataflow-lattices/](http://blog.ezyang.com/2011/04/hoopl-dataflow-lattices/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2011/04/hoopl-dataflow-lattices/](http://blog.ezyang.com/2011/04/hoopl-dataflow-lattices/)
- en: 'The essence of dataflow optimization is *analysis* and *transformation*, and
    it should come as no surprise that once you’ve defined your intermediate representation,
    the majority of your work with Hoopl will involve defining analysis and transformations
    on your graph of basic blocks. Analysis itself can be further divided into the
    specification of the *dataflow facts* that we are computing, and how we derive
    these dataflow facts during analysis. In part 2 of this [series on Hoopl](http://blog.ezyang.com/2011/04/hoopl-guided-tour-base-system/),
    we look at the fundamental structure backing analysis: the *dataflow lattice*.
    We discuss the theoretical reasons behind using a lattice and give examples of
    lattices you may define for optimizations such as constant propagation and liveness
    analysis.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 数据流优化的本质是*分析*和*转换*，并且毫不奇怪，一旦您定义了中间表示，您与 Hoopl 的大部分工作将涉及在基本块图上定义分析和转换。分析本身可以进一步分为我们正在计算的*数据流事实*的规范化，以及我们在分析过程中如何推导这些数据流事实。在这个[Hoopl
    系列的第二部分](http://blog.ezyang.com/2011/04/hoopl-guided-tour-base-system/)中，我们将看看分析背后的基本结构：*数据流格
    lattice*。我们讨论使用格的理论原因，并且给出您可以为诸如常量传播和活跃性分析等优化定义的格的示例。
- en: '* * *'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Despite its complicated sounding name, dataflow analysis remarkably resembles
    the way human programmers might reason about code without actually running it
    on a computer. We start off with some initial belief about the state of the system,
    and then as we step through instructions we update our belief with new information.
    For example, if I have the following code:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管其听起来复杂的名称，数据流分析与人类程序员在不实际在计算机上运行代码的情况下推理代码的方式非常相似。我们从对系统状态的一些初始信念开始，然后随着我们逐步执行指令，我们会用新信息更新我们的信念。例如，如果我有以下代码：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'At the very top of the function, I don’t know anything about `x`. When I see
    the expressions `a = 3` and `b = 4`, I know that `a` is equal to `3` and `b` is
    equal to `4`. In the least expression, I could use constant propagation to simplify
    the result to `x * 3 + 4`. Indeed, in the absence of control flow, we can think
    of analysis simply as stepping through the code line by line and updating our
    assumptions, also called *dataflow facts*. We can do this in both directions:
    the analysis we just did above was *forwards analysis*, but we can also do *backwards
    analysis*, which is the case for liveness analysis.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数的最顶部，我对`x`一无所知。当我看到表达式`a = 3`和`b = 4`时，我知道`a`等于`3`，`b`等于`4`。在最小的表达式中，我可以使用常量传播来简化结果为`x
    * 3 + 4`。确实，在没有控制流的情况下，我们可以将分析简单地看作是逐行执行代码并更新我们的假设，也称为*数据流事实*。我们可以在两个方向上做到这一点：我们刚刚完成的分析是*前向分析*，但我们也可以进行*反向分析*，这在活跃性分析的情况下是如此。
- en: 'Alas, if only things were this simple! There are two spanners in the works
    here: Y-shaped control flows and looping control flows.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 唉，如果事情能这么简单就好了！这里有两个问题：Y型控制流和循环控制流。
- en: 'Y-shaped control flows (called *joins*, for both obvious reasons and reasons
    that will become clear soon) are so named because there are two, distinct paths
    of execution that then merge into one. We then have two beliefs about the state
    of the program, which we need to reconcile before carrying on:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Y型控制流（称为*连接*，原因显而易见，也因为很快就会变得明显）之所以被命名为这样，是因为有两条明显的执行路径，然后合并成一条。然后我们对程序状态有两种不同的信念，我们需要在继续之前调和这些信念：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Inside branch A, we know that `a` is 2, and inside branch B, we know `a` is
    3, but outside this conditional, all we can say is that `a` is either 2 or 3\.
    (Since two possible values isn’t very useful for constant propagation, we’ll instead
    say the value of `a` is *top*: there is no one value that represents the value
    held at a.) The upshot is that any set of dataflow facts you are doing analysis
    with must have a `join` operation defined:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在分支 A 内部，我们知道`a`是 2，在分支 B 内部，我们知道`a`是 3，但在此条件之外，我们只能说`a`是 2 或 3。（由于两个可能的值对于常量传播并不是很有用，我们将代替说`a`的值是*top*：没有一个值代表变量的持有值。）结果是，您正在进行分析的任何一组数据流事实必须定义一个`join`操作：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'There is an analogous situation for backwards analysis, which occurs when you
    have a conditional jump: two “futures” of the control flow join back together,
    and so a similar join needs to occur.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 反向分析也有类似的情况，当你有一个条件跳转时发生，两个控制流的“未来”再次连接在一起，因此需要进行类似的连接。
- en: 'Looping control flows also have joins, but they have the further problem that
    we don’t know what one of the incoming code path’s state is: we can’t figure it
    out until we’ve analyzed the loop body, but to analyze the loop body, we need
    to know what the incoming state is. It’s a Catch-22! The trick to work around
    this is to define a *bottom* fact, which intuitively represents the most conservative
    dataflow fact possible: it is the identity when joined some other dataflow fact.
    So when we encounter one of these loop edges, instead of attempting to calculate
    the edge (which is a Catch-22 problem), we instead feed in the bottom element,
    and get an approximation of what the fact at that loop edge is. If this approximation
    is better than bottom, we feed the new result in instead, and the process repeats
    until there are no more changes: a *fixpoint* has been achieved.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 循环控制流也有连接，但它们面临更进一步的问题，即我们不知道其中一个传入的代码路径的状态是什么：我们在分析循环体之前无法弄清楚，但要分析循环体，我们需要知道传入状态是什么。这是一个进退两难的局面！解决这个问题的技巧是定义一个*底部*事实，直观地表示可能的最保守数据流事实：当它与其他数据流事实结合时，它是身份。因此，当我们遇到这些循环边时，与其尝试计算边（这是一个进退两难的问题），我们反而输入底部元素，并得到该循环边上事实的近似值。如果这个近似值比底部更好，我们就用新结果替代旧的，并且这个过程重复，直到不再有变化为止：达到了*不动点*。
- en: 'With join and bottom in hand, the mathematically inclined may notice that what
    we’ve defined looks a lot like a *lattice*:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有兴趣数学的人可能会注意到，我们所定义的看起来非常像*格*：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'There is a little bit of extra noise in here: `Label` is included strictly
    for debugging purposes (it tells the join function what label the join is occurring
    on) and `ChangeFlag` is included for optimization purposes: it lets `fact_join`
    efficiently say when the fixpoint has been achieved: `NoChange`.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一点额外的噪音：`Label` 严格用于调试目的（它告诉连接函数连接正在进行的标签），而 `ChangeFlag` 用于优化目的：它让 `fact_join`
    在达到不动点时高效地通知`NoChange`。
- en: '*Aside: Lattices.* Here, we review some basic terminology and intuition for
    lattices. A lattice is a partially ordered set, for which *least upper bounds*
    (lub) and *greatest lower bounds* (glb) exist for all pairs of elements. If one
    imagines [a Hasse diagram](http://blog.ezyang.com/2010/12/hussling-haskell-types-into-hasse-diagrams/),
    the existence of a least upper bound means that I can follow the diagram upwards
    from two elements until I reach a shared element; the greatest least bound is
    the same process downwards. The least upper bound is also called the *join* of
    two elements, and the greatest least bound the *meet.* (I prefer lub and glb because
    I always mix join and meet up!) Notationally, the least upper bound is represented
    with the logical or symbol or a square union operator, while the greatest least
    bound is represented with the logical and symbol or square intersection operator.
    The choice of symbols is suggestive: the overloading of logical symbols corresponds
    to the fact that logical propositions can have their semantics defined using a
    special kind of lattice called a *boolean algebra*, where lub is equivalent to
    or and glb is equivalent to and (bottom is falsity and top is tautology). The
    overloading of set operators corresponds to the lattice on the usual ordering
    of the powerset construction: lub is set union and glb is set intersection.'
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*旁注：格.* 在这里，我们回顾了一些关于格的基本术语和直觉。格是一个偏序集，对于所有元素对存在*最小上界*（lub）和*最大下界*（glb）。如果想象一个[哈斯图](http://blog.ezyang.com/2010/12/hussling-haskell-types-into-hasse-diagrams/)，最小上界的存在意味着我可以从两个元素向上沿图追溯，直到找到一个共享元素；最大下界是向下同样的过程。最小上界也称为两个元素的*连接*，最大下界称为*交*。（我更喜欢lub和glb因为我总是搞混join和meet！）在符号上，最小上界用逻辑或符号或方括号并运算符表示，而最大下界用逻辑与符号或方括号交运算符表示。符号的选择具有暗示性：逻辑符号的重载对应于逻辑命题可以使用一种特殊类型的格——布尔代数——定义其语义，其中lub等价于或，glb等价于且（底部是虚假，顶部是公理）。集合运算符的重载对应于关于幂集构造的通常顺序上的格：lub是集合并运算，glb是集合交运算。'
- en: ''
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In Hoopl, we deal with bounded lattices, lattices for which a *top* and *bottom*
    element exist. These are special elements that are greater than and less than
    (respectively) than all other elements. Joining the bottom element with any other
    element is a no-op: the other element is the result (this is why we use bottom
    as our initialization value!) Joining the top element with any other element results
    in the top element (thus, if you get to the top, you’re “stuck”, so to speak).'
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在 Hoopl 中，我们处理有界格，即存在*顶部*和*底部*元素的格。这些是特殊元素，比所有其他元素大（相应地，小于所有其他元素）。将底部元素与任何其他元素连接是一个无操作：另一个元素是结果（这就是为什么我们使用底部作为初始化值的原因！）将顶部元素与任何其他元素连接会导致顶部元素（因此，如果你达到顶部，你就“卡住”了，可以这么说）。
- en: ''
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'For the pedantic, strictly speaking, Hoopl doesn’t need a lattice: instead,
    we need a bounded semilattice (since we only require joins, and not meets, to
    be defined.) There is another infelicity: the Lerner-Grove-Chambers and Hoopl
    uses bottom and join, but most of the existing literature on dataflow lattices
    uses top and meet (essentially, flip the lattice upside down.) In fact, which
    choice is “natural” depends on the analysis: as we will see, liveness analysis
    naturally suggests using bottom and join, while constant propagation suggests
    using top and meet. To be consistent with Hoopl, we’ll use bottom and join consistently;
    as long as we''re consistent, the lattice orientation doesn''t matter.'
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 对于一丝不苟的人，严格来说，Hoopl 不需要格：相反，我们需要一个有界半格（因为我们只需要定义连接，而不是相遇）。还有另一个不足之处：Lerner-Grove-Chambers
    和 Hoopl 使用底部和连接，但大多数现有的数据流格文献使用顶部和相遇（实质上，将格上下颠倒）。事实上，哪种选择“自然”取决于分析：正如我们将看到的，活性分析自然倾向于使用底部和连接，而常量传播则建议使用顶部和相遇。为了与
    Hoopl 保持一致，我们将始终使用底部和连接；只要我们保持一致，格的方向就不重要。
- en: '* * *'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'We will now look at concrete examples of using the dataflow lattices for liveness
    analysis and constant propagation. These two examples give a nice spread of lattices
    to look at: liveness analysis is a set of variable names, while constant propagation
    is a map of variable names to a flat lattice of possible values.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将具体示例用于活性分析和常量传播的数据流格。这两个示例展示了要查看的格的良好分布：活性分析是变量名的集合，而常量传播是变量名到可能值的平面格的映射。
- en: 'Liveness analysis (`Live.hs`) uses a very simple lattice, so it serves as a
    good introductory example for the extra ceremony that is involved in setting up
    a `DataflowLattice`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 活性分析（`Live.hs`）使用非常简单的格，因此它作为设置`DataflowLattice`所涉及的额外仪式的良好入门示例：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The type `Live` is the type of our data flow facts. This represents is the
    set of variables that are live (that is, will be used by later code):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 类型`Live`是我们数据流事实的类型。这代表的是活跃的变量集合（即，稍后代码将使用的变量）：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Remember that liveness analysis is a *backwards* analysis: we start at the
    bottom of our procedure and work our way up: a usage of a variable means that
    it’s live for all points above it. We fill in `DataflowLattice` with documentation,
    the distinguished element (bottom) and the operation on these facts (join). `Var`
    is `Expr.hs` and simply is a string name of the variable. Our bottom element (which
    is used to initialize edges that we can’t calculate right off the bat) is the
    empty set, since at the bottom of any procedure, all variables are dead.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，活性分析是*反向*分析：我们从过程的底部开始并向上工作：变量的使用意味着它在其上方的所有点都是活跃的。我们用文档、显著元素（底部）和这些事实的操作（连接）填写`DataflowLattice`。`Var`是`Expr.hs`，只是变量的字符串名称。我们的底部元素（用于初始化我们无法立即计算的边缘）是空集，因为在任何过程的底部，所有变量都是死的。
- en: 'Join is set union, which can be clearly seen in this example:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 连接是集合并，可以在此示例中清楚地看到：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We also see some code for calculating the change `ch`, which is a simple size
    comparison of sets, because union will only ever increase the size of a set, not
    decrease it. `changeIf` is a utility function that takes `Bool` to `ChangeFlag`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到一些计算更改`ch`的代码，这是集合大小比较的简单方式，因为并集只会增加集合的大小，而不会减少它。`changeIf`是一个实用函数，将`Bool`转换为`ChangeFlag`。
- en: 'Here is an illustration of the lattice structure if we have three variables:
    it’s simply the usual ordering on the powerset construction.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有三个变量，这里是格结构的示意图：它只是幂集构造上的通常排序。
- en: '* * *'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Here is the lattice for constant propagation (`ConstProp.hs`). It is slightly
    more complicated than the live set, though some of the complexity is hidden by
    the fact that Hoopl provides some utility data types and functions:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这是常量传播的格子（`ConstProp.hs`）。虽然与活跃集相比稍微复杂一些，但部分复杂性被 Hoopl 提供的一些实用数据类型和函数隐藏了起来。
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'There are essentially two lattices in this construction. The “outer” lattice
    is the map, for which the bottom element is the empty map and the join is joining
    two maps together, merging elements using the inner lattice. The “inner” (semi)lattice
    is `WithTop Lit`, which is provided by Hoopl. (One may say that the inner lattice
    is pointwise lifted into the map.) We illustrate the inner lattice here for variables
    containing booleans:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个结构中实际上有两个格子。 “外部” 格子是映射，其中底部元素是空映射，加入是将两个映射合并在一起，使用内部格子合并元素。 “内部” （半）格子是
    `WithTop Lit`，由 Hoopl 提供。（可以说内部格子是点逐点地提升到映射中。）我们在这里举例说明了包含布尔变量的内部格子：
- en: 'One thing to stress about the inner lattice is the difference between bottom
    and top. Both represent a sort of “not knowing about the contents of a variable”,
    but in the case of bottom, the variable may be constant or it may not be constant,
    whereas in top, the variable is definitely not constant. It is easy to get tripped
    up saying things like, “bottom means that we don’t know what the value of the
    variable is” and “top means that the value of the variable could be anything.”
    If we think of this lattice as a set, with `{True}` indicating that the value
    of this variable is true, then `{True,False}` (bottom) indicates the variable
    could be a *constant* true or *constant* false, not that the variable could be
    true or false. This also means we can interpret `{}` (top) appropriately: there
    is no value for which this variable is a constant. (Notice that this is the powerset
    lattice flipped upside down!)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 关于内部格点，有一点需要强调的是底部和顶部之间的区别。两者都表示一种“不知道变量内容”的状态，但在底部的情况下，变量可能是常量也可能不是常量，而在顶部的情况下，变量肯定不是常量。很容易搞混的是，“底部意味着我们不知道变量的值是什么”，而“顶部意味着变量的值可以是任何东西”。如果我们把这个格子看作是一个集合，其中
    `{True}` 表示这个变量的值为真，则 `{True,False}`（底部）表示变量可能是*常量*真或*常量*假，而不是变量可以是真或假。这也意味着我们可以恰当地解释
    `{}`（顶部）：对于这个变量来说，没有一个值是常量。（注意，这是倒置的幂集格点！）
- en: 'There are a few interesting utility functions in this example: `extendJoinDomain`
    and `joinMaps`. `extendJoinDomain` saves us the drudgery from having to write
    out all of the interactions with top in full, e.g.:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中有几个有趣的实用函数：`extendJoinDomain` 和 `joinMaps`。`extendJoinDomain` 免去了我们完全编写与顶部的所有交互的麻烦，例如：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`joinMaps` lifts our inner lattice into map form, and also takes care of the
    `ChangeFlag` plumbing (output `SomeChange` if any entry in the new map wasn’t
    present in the old map, or if any of the joined entries changed).'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`joinMaps` 将我们的内部格点提升为映射形式，并且处理了 `ChangeFlag` 的连接（如果新映射中的任何条目在旧映射中不存在，或者加入的条目发生了变化，则输出
    `SomeChange`）。'
- en: '* * *'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'That concludes our discussion of Hoopl and dataflow lattices. We haven’t covered
    all of the functions Hoopl provides to manipulate dataflow lattices; here are
    some further modules to look at:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了我们关于 Hoopl 和数据流格子的讨论。我们还没有涵盖 Hoopl 提供的所有操作数据流格子的函数；以下是一些进一步查看的模块：
- en: '`Compiler.Hoopl.Combinators` defines `pairLattice`, which takes the product
    construction of two lattices. It can be used to easily perform multiple analyses
    at the same time.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Compiler.Hoopl.Combinators` 定义了 `pairLattice`，它对两个格子进行了乘积构造。它可以用来同时执行多个分析。'
- en: '`Compiler.Hoopl.Pointed` defines a number of auxiliary data structures and
    functions for adding `Top` and `Bottom` to existing data types. This is where
    `extendJoinDomain` comes from.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Compiler.Hoopl.Pointed` 定义了许多辅助数据结构和函数，用于向现有数据类型添加 `Top` 和 `Bottom`。这就是 `extendJoinDomain`
    的来源。'
- en: '`Compiler.Hoopl.Collections` and `Compiler.Hoopl.Unique` define maps and sets
    on unique keys (most prominently, labels). You will most probably be using these
    for your dataflow lattices.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Compiler.Hoopl.Collections` 和 `Compiler.Hoopl.Unique` 定义了在唯一键上的映射和集合（最突出的是标签）。您很可能会在数据流格子中使用这些。'
- en: Next time, we will talk about transfer functions, the mechanism by which we
    calculate dataflow facts.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 下次，我们将讨论转移函数，这是我们计算数据流事实的机制。
- en: '*Further reading.* Dataflow lattices are covered in chapter 10.11 of *Compilers:
    Principles, Techniques and Tools* (the Red Dragon Book). The original paper was
    Kildall’s 1973 paper [A unified approach to global program optimization](http://portal.acm.org/citation.cfm?id=512945).
    Interestingly enough, the Dragon Book remarks that “it has not seen widespread
    use, probably because the amount of labor saved by the system is not as great
    as that saved by tools like parser generators.” My feeling is that this is the
    case for traditional compiler optimization passes, but not for Lerner-Grove-Chambers
    style passes (where analysis and rewriting are interleaved.)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*进一步阅读。* 数据流格被覆盖在《编译器原理、技术与工具》（红龙书）的第10.11章中。原始论文是基尔达尔在1973年发表的《统一的全局程序优化方法》。有趣的是，红龙书指出：“它并没有被广泛使用，可能是因为系统节省的工作量不及诸如语法分析器生成器等工具。”
    我觉得这在传统编译器优化中是正确的，但对于Lerner-Grove-Chambers风格的通过程来说可能不是（其中分析和重写是交错进行的）。'
