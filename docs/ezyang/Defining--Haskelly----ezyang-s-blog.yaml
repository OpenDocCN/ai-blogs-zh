- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-07-01 18:18:10'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-07-01 18:18:10
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Defining “Haskelly” : ezyang’s blog'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义“Haskelly”：ezyang的博客
- en: 来源：[http://blog.ezyang.com/2010/08/defining-haskelly/](http://blog.ezyang.com/2010/08/defining-haskelly/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[http://blog.ezyang.com/2010/08/defining-haskelly/](http://blog.ezyang.com/2010/08/defining-haskelly/)
- en: Defining “Haskelly”
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义“Haskelly”
- en: At risk of sounding like a broken record, the topic of this post also sprang
    from [abcBridge](http://blog.ezyang.com/2010/08/galois-tech-talk-abcbridge-functional-interfaces-for-aigs-and-sat-solving/).
    John Launchbury asked a question during my presentation that got me thinking about
    API design in Haskell. (By the way, [the video for the talk](http://vimeo.com/14432112)
    is out! Unfortunately, the second half had to be cut out due to technical difficulties,
    but you can still check out the slides.)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可能听起来像是老生常谈，但这篇文章的主题也来源于[abcBridge](http://blog.ezyang.com/2010/08/galois-tech-talk-abcbridge-functional-interfaces-for-aigs-and-sat-solving/)。John
    Launchbury在我的演讲中提出了一个问题，让我开始思考Haskell中的API设计。（顺便说一句，[演讲视频](http://vimeo.com/14432112)已经发布！不幸的是，由于技术问题，第二部分不得不被删减了，但你仍然可以查看幻灯片。）
- en: 'His question was this:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 他的问题是这样的：
- en: 'You’ve presented this in a very imperative style, where you’ve got this AIG
    structure in the ABC tool, and what you’ve really done is given me a nicely typed
    Haskell typed interface that allows you to go in a put a new gate or grab a structure,
    and I’m left wondering, what is the reason for needing this tight tie-in with
    what’s going on in that space? Here is a thought experiment: I could imagine myself
    having a purely functional data structure that is describing the data structure...and
    you end up with a functional description of what you want your graph to look like,
    and then you tell ABC to go and build the graph in one go.'
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你用一种非常命令式的风格呈现了这个AIG结构在ABC工具中的存在，而实际上你给了我一个很好的类型化的Haskell接口，允许你进入并放置一个新的门或者抓取一个结构，我不禁想知道，为什么需要与该空间中正在进行的事情紧密联系？这里有一个思想实验：我可以想象自己拥有一个描述数据结构的纯函数数据结构...然后你最终得到了一个描述你希望图形看起来如何的函数描述，并告诉ABC一次性构建图形。
- en: I had claimed that abcBridge was a “functional API” for manipulating and-inverter
    graphs; perhaps I was lying! Is abcBridge—with its close correspondence to the
    underlying imperative code—truly “functional?” Or, if it’s not functional, does
    it at least have a “Haskelly” API? (What does it even mean for an API to be Haskelly?)
    Why does the purely functional interface seem morally better than the imperative
    interface? It’s a question of philosophical import as well as practical import—why
    do we prefer the functional interface which might require a more complex underlying
    implementation?
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾声称abcBridge是一个用于操作与反转器图相关的“功能性API”；也许我在撒谎！abcBridge——与底层命令式代码密切对应——真的是“功能性”的吗？或者，即使它不是功能性的，它至少有一个“Haskelly”API吗？（一个API要“Haskelly”意味着什么？）为什么纯函数接口似乎在道义上比命令式接口更好？这不仅是一个具有哲学意义的问题，也是一个具有实际意义的问题——为什么我们更喜欢可能需要更复杂的底层实现的纯函数接口？
- en: My conjecture is that the faithfulness of an API to its host language is based
    on how much it utilizes particular features that a language makes easy to use.
    Haskell is frequently introduced as a “purely functional, lazy, strongly statically
    typed programming language.” Looking at each of these terms in turn (informally)...
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我的推测是，API对其主机语言的忠诚度基于它利用语言易于使用的特定功能的程度。 Haskell经常被介绍为一种“纯函数的、惰性的、强静态类型的编程语言”。逐个查看这些术语（非正式）...
- en: '*Purely functional* indicates APIs that eschew destructive updates, instead
    opting for immutability and persistent data structures. Language features that
    make it easier to write in this style include the `final` and `const` keywords,
    algebraic data types, pattern-matching and a library of persistent data structures
    to write more persistent data structures with.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*纯函数*指的是那些避免破坏性更新的API，而是选择不可变性和持久化数据结构。使得以这种风格编写更容易的语言特性包括`final`和`const`关键字、代数数据类型、模式匹配和一组持久化数据结构的库。'
- en: '*Lazy* indicates APIs that utilize laziness to build custom control structures
    and generate infinite data structures. The poster child language feature for laziness
    is, well, lazy evaluation by default, but explicit laziness annotations in a strict
    language or even a convenient lambda abstraction encourages lazy style. (Python
    does not have a convenient lambda, which is why asynchronous frameworks like Twisted
    are so painful!)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*惰性* 指的是利用惰性来构建自定义控制结构和生成无限数据结构的API。懒惰评估默认是惰性的语言特性，但在严格语言中，即使有显式的惰性注释或便捷的lambda抽象也鼓励懒惰风格。（Python没有方便的lambda，这就是为什么像Twisted这样的异步框架如此令人痛苦！）'
- en: '*Strongly statically typed* indicates APIs that encode invariants of all shapes
    and sizes into the static type system, so that programmer errors can be caught
    at compile time, not run time. The type system is the obvious language feature
    here, with its expressiveness defining what you can easily add to your system.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*强静态类型* 指的是将各种形状的不变性编码到静态类型系统中，以便程序员的错误可以在编译时捕获，而不是在运行时。类型系统显然是这里的显著语言特性，其表达能力定义了你可以轻松添加到系统中的内容。'
- en: 'We associate programs that take advantage of these language features as “Haskelly”
    because Haskell makes it easy—both syntactically and conceptually—to use them!
    But at the same time, these are all (mostly) orthogonal language features, and
    for any given API you might write, you may opt to ditch some of these properties
    for others: maybe the feature just doesn’t matter in your problem domain, maybe
    the feature imposes an unacceptable performance penalty or is an insufficiently
    sealed abstraction.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将利用这些语言特性的程序称为“Haskelly”，因为Haskell在语法和概念上都很容易使用它们！但与此同时，这些特性大多是正交的语言特性，对于任何给定的API，你可能选择放弃一些特性以换取其他特性：也许这个特性在你的问题域中并不重要，也许这个特性会带来无法接受的性能损失或者不足以封闭的抽象。
- en: 'With abcBridge as our concrete example, here is how you might make such classifications
    in practice:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以abcBridge作为具体示例，这里是你如何在实践中进行这种分类：
- en: The monadic interface for constructing networks is about as far from purely
    functional as you can get, which was an explicit design choice in the name of
    performance and control. (Fortunately, we can build a nicer API on top of this
    one—in fact, I did an experimental implementation of one.) However, when you’re
    dealing with fully constructed networks the API takes a purely functional style,
    doing copying and `unsafePerformIO` behind the scenes to preserve this illusion.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于构建网络的单子接口距离纯函数的概念相当远，这是出于性能和控制的显式设计选择。（幸运的是，我们可以在其基础上构建一个更好的API —— 实际上，我已经做了一个实验性实现。）然而，当你处理完全构建的网络时，API采用纯函数风格，背后进行复制和`unsafePerformIO`以保持这种错觉。
- en: 'abcBridge does not directly use laziness: in particular the monadic code is
    very structured and doesn’t have a lot of flow control in it.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: abcBridge并不直接使用惰性：特别是单子代码非常结构化，并且其中没有很多流程控制。
- en: 'The static type system is a huge part of abcBridge, since it is operating so
    close to the bare metal: it has two monads, with an intricate set of functions
    for running and converting the monads, and the low level FFI bindings make every
    attempt to enhance the existing C-based type system. Notice the interesting play
    between the types and a functional interface: if we had a purely functional interface,
    we probably could have ditched most of these complicated types! (Imperative code,
    it seems, needs stronger type system tricks.)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态类型系统是abcBridge的重要组成部分，因为它与底层硬件操作如此紧密相关：它有两个单子，以及一组复杂的函数用于运行和转换这些单子，低级FFI绑定使得每一次尝试都能增强现有的基于C的类型系统。注意类型与函数接口之间有趣的互动：如果我们有一个纯函数接口，可能大部分这些复杂的类型都可以不用！（命令式代码似乎需要更强的类型系统技巧。）
- en: 'As far as pure Haskell libraries go, abcBridge is very un-Haskelly: I would
    certainly expect more from an equivalent library implemented in pure Haskell.
    But it is leaps and bounds better than the C library it sprang from. How far should
    one push the envelope? It is all about striking the right balance—that is why
    API design is an art.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 就纯Haskell库而言，abcBridge非常不“Haskelly”：我肯定会期待一个在纯Haskell中实现的等效库能提供更多。但它比起它衍生自的C库有了长足的进步。我们应该把握多大的发展空间？这完全取决于找到正确平衡——这就是API设计的艺术。
