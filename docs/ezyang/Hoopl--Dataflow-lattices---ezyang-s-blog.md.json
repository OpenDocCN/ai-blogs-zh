["```\nf(x) {\n  a = 3;\n  b = 4;\n  return (x * a + b);\n}\n\n```", "```\nf(x) {\n  if (x) {\n    a = 2; // branch A\n  } else {\n    a = 3; // branch B\n  }\n  return a;\n}\n\n```", "```\ndata DataflowFactsTry1 a = DF1 { fact_join :: a -> a -> a }\n\n```", "```\ndata DataflowLattice a = DataflowLattice\n { fact_name       :: String          -- Documentation\n , fact_bot        :: a               -- Lattice bottom element\n , fact_join       :: JoinFun a       -- Lattice join plus change flag\n                                      -- (changes iff result > old fact)\n }\ntype JoinFun a = Label -> OldFact a -> NewFact a -> (ChangeFlag, a)\n\n```", "```\ntype Live = S.Set Var\nliveLattice :: DataflowLattice Live\nliveLattice = DataflowLattice\n  { fact_name = \"Live variables\"\n  , fact_bot  = S.empty\n  , fact_join = add\n  }\n    where add _ (OldFact old) (NewFact new) = (ch, j)\n            where\n              j = new `S.union` old\n              ch = changeIf (S.size j > S.size old)\n\n```", "```\nf() {\n  // live: {x, y}\n  x = 3;\n  y = 4;\n  y = x + 2;\n  // live: {y}\n  return y;\n  // live: {}\n}\n\n```", "```\nf (x) {\n  // live: {a,b,x,r} (union of the two branches,\n  // as well as x, due to its usage in the conditional)\n  a = 2;\n  b = 3;\n  if (x) {\n    // live: {a,r}\n    r = a;\n  } else {\n    // live: {b,r}\n    r = b;\n  }\n  // live: {r}\n  return r;\n  // live: {}\n}\n\n```", "```\n-- ConstFact:\n--   Not present in map => bottom\n--   PElem v => variable has value v\n--   Top     => variable's value is not constant\ntype ConstFact = Map.Map Var (WithTop Lit)\nconstLattice :: DataflowLattice ConstFact\nconstLattice = DataflowLattice\n { fact_name = \"Const var value\"\n , fact_bot  = Map.empty\n , fact_join = joinMaps (extendJoinDomain constFactAdd) }\n where\n   constFactAdd _ (OldFact old) (NewFact new)\n       = if new == old then (NoChange, PElem new)\n         else               (SomeChange, Top)\n\n```", "```\nconstFactAddExtended _ (OldFact old) (NewFact new)\n   = case (old, new) of\n        (Top, _) -> (NoChange, Top)\n        (_, Top) -> (SomeChange, Top)\n        (PElem old, PElem new) | new == old -> (NoChange, PElem new)\n                               | otherwise -> (SomeChange, Top)\n\n```"]