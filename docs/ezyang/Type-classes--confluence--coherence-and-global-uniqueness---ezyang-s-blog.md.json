["```\n-- T.hs\ndata T = T\n-- A.hs\nimport T\ninstance Eq T where\n-- B.hs\nimport T\ninstance Eq T where\n-- C.hs\nimport A\nimport B\n\n```", "```\n-- A.hs\nmodule A where\ndata U = X | Y deriving (Eq, Show)\n\n-- B.hs\nmodule B where\nimport Data.Set\nimport A\n\ninstance Ord U where\ncompare X X = EQ\ncompare X Y = LT\ncompare Y X = GT\ncompare Y Y = EQ\n\nins :: U -> Set U -> Set U\nins = insert\n\n-- C.hs\nmodule C where\nimport Data.Set\nimport A\n\ninstance Ord U where\ncompare X X = EQ\ncompare X Y = GT\ncompare Y X = LT\ncompare Y Y = EQ\n\nins' :: U -> Set U -> Set U\nins' = insert\n\n-- D.hs\nmodule Main where\nimport Data.Set\nimport A\nimport B\nimport C\n\ntest :: Set U\ntest = ins' X $ ins X $ ins Y $ empty\n\nmain :: IO ()\nmain = print test\n\n```", "```\n-- OUTPUT\n$ ghc -Wall -XSafe -fforce-recomp --make D.hs\n[1 of 4] Compiling A ( A.hs, A.o )\n[2 of 4] Compiling B ( B.hs, B.o )\n\nB.hs:5:10: Warning: Orphan instance: instance [safe] Ord U\n[3 of 4] Compiling C ( C.hs, C.o )\n\nC.hs:5:10: Warning: Orphan instance: instance [safe] Ord U\n[4 of 4] Compiling Main ( D.hs, D.o )\nLinking D ...\n$ ./D\nfromList [X,Y,X]\n\n```"]